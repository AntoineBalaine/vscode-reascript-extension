[{"tags":["mediaitemmanagement","mediaitem","item","track","empty"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack tr","description":"tracknumber(zero based), with 0 for track 1, 1 for track 2, etc."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.AddMediaItemToTrack","return_values":[{"identifier":"item","type":"MediaItem"}],"parameters":[{"identifier":"tr","type":"MediaTrack"}]},"eel":{"method_name":"item","return_values":["MediaItem"],"parameters":[{"type_name":"MediaTrack","identifier":"tr"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem item","description":"the newly created MediaItem-object"}],"prog_lang":"*"},"functioncall":{"lua":"MediaItem item = reaper.AddMediaItemToTrack(MediaTrack tr)","eel":"MediaItem item AddMediaItemToTrack(MediaTrack tr)","python":"MediaItem item = RPR_AddMediaItemToTrack(MediaTrack tr)","cpp":"MediaItem* item AddMediaItemToTrack(MediaTrack* tr)"},"title":"AddMediaItemToTrack","chapters":["Mediaitem Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Creates a new media item. It will be empty and therefore not be shown in the arrange-view, until you associate a mediafile(audio, picture, video, etc) or a length and position to it using SetMediaItemInfo_Value","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["markermanagement","region","marker","name","shownnumber","pos","project","add"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"ReaProject proj","description":"the project, in which to add the new marker; use 0 for the current project"},{"identifier":"boolean isrgn","description":"true, if it shall be a region; false, if a normal marker"},{"identifier":"number pos","description":"the position of the newly created marker/region in seconds"},{"identifier":"number rgnend","description":"if the marker is a region, this is the end of the region in seconds"},{"identifier":"string name","description":"the shown name of the marker"},{"identifier":"integer wantidx","description":"the shown number of the marker/region. Markers can have the same shown marker multiple times. Regions will get another number, if wantidx is already given."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.AddProjectMarker","return_values":[{"identifier":"index","type":"integer"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"isrgn","type":"boolean"},{"identifier":"pos","type":"number"},{"identifier":"rgnend","type":"number"},{"identifier":"name","type":"string"},{"identifier":"wantidx","type":"integer"}]},"eel":{"method_name":"AddProjectMarker","return_values":["int"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"bool","identifier":"isrgn"},{"identifier":"pos"},{"identifier":"rgnend"},{"identifier":"\"name\""},{"type_name":"int","identifier":"wantidx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer index","description":"the shown-number of the newly created marker/region"}],"prog_lang":"*"},"functioncall":{"lua":"integer index = reaper.AddProjectMarker(ReaProject proj, boolean isrgn, number pos, number rgnend, string name, integer wantidx)","eel":"int AddProjectMarker(ReaProject proj, bool isrgn, pos, rgnend, \"name\", int wantidx)","python":"Int retval = RPR_AddProjectMarker(ReaProject proj, Boolean isrgn, Float pos, Float rgnend, String name, Int wantidx)","cpp":"int AddProjectMarker(ReaProject* proj, bool isrgn, double pos, double rgnend, const char* name, int wantidx)"},"title":"AddProjectMarker","chapters":["Marker Management","Project Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Creates a new Projectmarker/Region.\nReturns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use.\n\nIt will not create a marker, when at the same position is a marker with the exact name(a bug maybe?)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["markermanagement","region","marker","name","shownnumber","pos","project","add"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"ReaProject proj","description":"the project, in which to add the new marker; use 0 for the current project; "},{"identifier":"boolean isrgn","description":"true, if it shall be a region; false, if a normal marker"},{"identifier":"number pos","description":"the position of the newly created marker/region in seconds"},{"identifier":"number rgnend","description":"if the marker is a region, this is the end of the region in seconds"},{"identifier":"string name","description":"the shown name of the marker"},{"identifier":"integer wantidx","description":"the shown number of the marker/region. Markers can have the same shown marker multiple times. Regions will get another number, if wantidx is already given."},{"identifier":"integer color","description":"the color of the marker"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.AddProjectMarker2","return_values":[{"identifier":"index","type":"integer"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"isrgn","type":"boolean"},{"identifier":"pos","type":"number"},{"identifier":"rgnend","type":"number"},{"identifier":"name","type":"string"},{"identifier":"wantidx","type":"integer"},{"identifier":"color","type":"integer"}]},"eel":{"method_name":"AddProjectMarker2","return_values":["int"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"bool","identifier":"isrgn"},{"identifier":"pos"},{"identifier":"rgnend"},{"identifier":"\"name\""},{"type_name":"int","identifier":"wantidx"},{"type_name":"int","identifier":"color"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer index","description":"the shown-number of the newly created marker/region"}],"prog_lang":"*"},"functioncall":{"lua":"integer index = reaper.AddProjectMarker2(ReaProject proj, boolean isrgn, number pos, number rgnend, string name, integer wantidx, integer color)","eel":"int AddProjectMarker2(ReaProject proj, bool isrgn, pos, rgnend, \"name\", int wantidx, int color)","python":"Int retval = RPR_AddProjectMarker2(ReaProject proj, Boolean isrgn, Float pos, Float rgnend, String name, Int wantidx, Int color)","cpp":"int AddProjectMarker2(ReaProject* proj, bool isrgn, double pos, double rgnend, const char* name, int wantidx, int color)"},"title":"AddProjectMarker2","chapters":["Marker Management","Project Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the shown-number of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use. color should be 0 (default color), or ColorToNative(r,g,b)|0x1000000\n\nIt will not create a marker, when at the same position is a marker with the exact name(a bug maybe?)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","reascript","lua","python","eel","add","remove","commandid"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"boolean add","description":"true, if it shall be added, false if it shall be removed"},{"identifier":"integer sectionID","description":"the section, in which this script shall appear(e.g. in the Show Actions-Dialog)\n  0, Main\n  100, Main (alt recording) Note: If you already added to main(section 0), this function automatically adds the script to Main(alt) as well.\n  32060, MIDI Editor\n  32061, MIDI Event List Editor\n  32062, MIDI Inline Editor\n  32063, Media Explorer"},{"identifier":"string scriptfn","description":"the filename of the Reascript to be added"},{"identifier":"boolean commit","description":"true, if it shall be committed, false, if you want to add new scripts first. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.AddRemoveReaScript","return_values":[{"identifier":"command_id","type":"integer"}],"parameters":[{"identifier":"add","type":"boolean"},{"identifier":"sectionID","type":"integer"},{"identifier":"scriptfn","type":"string"},{"identifier":"commit","type":"boolean"}]},"eel":{"method_name":"AddRemoveReaScript","return_values":["int"],"parameters":[{"type_name":"bool","identifier":"add"},{"type_name":"int","identifier":"sectionID"},{"identifier":"\"scriptfn\""},{"type_name":"bool","identifier":"commit"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer command id","description":"the command ID for this script."}],"prog_lang":"*"},"functioncall":{"lua":"integer command_id = reaper.AddRemoveReaScript(boolean add, integer sectionID, string scriptfn, boolean commit)","eel":"int AddRemoveReaScript(bool add, int sectionID, \"scriptfn\", bool commit)","python":"Int retval = RPR_AddRemoveReaScript(Boolean add, Int sectionID, String scriptfn, Boolean commit)","cpp":"int AddRemoveReaScript(bool add, int sectionID, const char* scriptfn, bool commit)"},"title":"AddRemoveReaScript","chapters":["Api-Helper-Functions","Actions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Adds a ReaScript (returns the new command ID, or 0 if failed) or removes a ReaScript\nReturns >0 on success. \nUse commit==true when adding/removing a single script. \nCommitting means, that Reaper stores the Reascript-information into the reaper-kb.ini for permanent use. \nIt will be committed at Reaper's exit as well, but if Reaper crashes before exiting properly, your added\nscript might get lost. When adding many Reascripts to Reaper, setting commit to false might help prevail \nressources, as you don't rewrite the reaper-kb.ini file over and over again. However, if you only add a \nfew scripts, this might not be of importance to you.\nSo when bulk adding/removing multiple scripts, you can optimize the n-1 first calls with commit==false and commit==true for the last call.\n\nThe commandID returned, might change, when adding this script into another Reaper-installation. \nTo be sure to use the right command-id, use ReverseNamedCommandLookup() to get the ActionCommandID, which will never change, until you remove the script.\n\nIf you want to add a script to several sections, you need to add them individually, by calling the function again with the changed section-number.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["mediaitemmanagement","mediaitem","item","track","empty","take"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem item","description":"a MediaItem-object, in which you want to add the new take"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.AddTakeToMediaItem","return_values":[{"identifier":"take","type":"MediaItem_Take"}],"parameters":[{"identifier":"item","type":"MediaItem"}]},"eel":{"method_name":"AddTakeToMediaItem","return_values":["MediaItem_Take"],"parameters":[{"type_name":"MediaItem","identifier":"item"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":"the newly created MediaItem_Take-object"}],"prog_lang":"*"},"functioncall":{"lua":"MediaItem_Take take = reaper.AddTakeToMediaItem(MediaItem item)","eel":"MediaItem_Take AddTakeToMediaItem(MediaItem item)","python":"MediaItem_Take take = RPR_AddTakeToMediaItem(MediaItem item)","cpp":"MediaItem_Take* AddTakeToMediaItem(MediaItem* item)"},"title":"AddTakeToMediaItem","chapters":["Mediaitem Take Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"creates a new take in an item","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["markermanagement","timesignature","tempo","marker","add"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"ReaProject proj","description":"the project in which to add the TempoTimesigMarker, 0 for the current project; "},{"identifier":"number timepos","description":"the position in seconds"},{"identifier":"number bpm","description":"the speed in bpm"},{"identifier":"integer timesig_num","description":"timesignature number : timesig_num/timesig_denom, e.g. 3/4"},{"identifier":"integer timesig_denom","description":"timesignature denominator : timesig_num/timesig_denom, e.g. 3/4"},{"identifier":"boolean lineartempochange","description":"true, linear tempo change, false not"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.AddTempoTimeSigMarker","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"timepos","type":"number"},{"identifier":"bpm","type":"number"},{"identifier":"timesig_num","type":"integer"},{"identifier":"timesig_denom","type":"integer"},{"identifier":"lineartempochange","type":"boolean"}]},"eel":{"method_name":"AddTempoTimeSigMarker","return_values":["bool"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"identifier":"timepos"},{"identifier":"bpm"},{"type_name":"int","identifier":"timesig_num"},{"type_name":"int","identifier":"timesig_denom"},{"type_name":"bool","identifier":"lineartempochange"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, if adding was successful; false, if not"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.AddTempoTimeSigMarker(ReaProject proj, number timepos, number bpm, integer timesig_num, integer timesig_denom, boolean lineartempochange)","eel":"bool AddTempoTimeSigMarker(ReaProject proj, timepos, bpm, int timesig_num, int timesig_denom, bool lineartempochange)","python":"Boolean retval = RPR_AddTempoTimeSigMarker(ReaProject proj, Float timepos, Float bpm, Int timesig_num, Int timesig_denom, Boolean lineartempochange)","cpp":"bool AddTempoTimeSigMarker(ReaProject* proj, double timepos, double bpm, int timesig_num, int timesig_denom, bool lineartempochange)"},"title":"AddTempoTimeSigMarker","chapters":["Marker Management","Time Signature Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Deprecated. Use SetTempoTimeSigMarker with ptidx=-1.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["arrangeviewmanagement","view","zoom","center"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"number amt","description":"the zoom factor, positive values=zoom in, negative values=zoom out, 0=no zoom"},{"identifier":"integer forceset","description":"forces one amt-zoomfactor(non zero) or allows repeatable zoom-in/zoomout(0)"},{"identifier":"boolean doupd","description":"true, updates the track-view instantly; false, or only when mouse hovers over trackview"},{"identifier":"integer centermode","description":"decides, what shall be in the center of the view. The following are available:\n -1, default selection, as set in the reaper-prefs, \n  0, edit-cursor or playcursor(if it's in the current zoomfactor of the view during playback/recording) in center,\n  1, keeps edit-cursor in center of zoom\n  2, keeps center of view in the center during zoom\n  3, keeps in center of zoom, what is beneath the mousecursor"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.adjustZoom","return_values":[],"parameters":[{"identifier":"amt","type":"number"},{"identifier":"forceset","type":"integer"},{"identifier":"doupd","type":"boolean"},{"identifier":"centermode","type":"integer"}]},"eel":{"return_values":["adjustZoom"],"parameters":[{"identifier":"amt"},{"type_name":"int","identifier":"forceset"},{"type_name":"bool","identifier":"doupd"},{"type_name":"int","identifier":"centermode"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.adjustZoom(number amt, integer forceset, boolean doupd, integer centermode)","eel":"adjustZoom(amt, int forceset, bool doupd, int centermode)","python":"RPR_adjustZoom(Float amt, Int forceset, Boolean doupd, Int centermode)","cpp":"void adjustZoom(double amt, int forceset, bool doupd, int centermode)"},"title":"adjustZoom","chapters":["User Interface","Arrangeview Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets horizontal zoom in track view.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","states","solo"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project to be checked for. 0 for current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.AnyTrackSolo","return_values":[{"identifier":"solostate","type":"boolean"}],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"method_name":"AnyTrackSolo","return_values":["bool"],"parameters":[{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean solostate","description":"true if any track is solo; false if not. Covers all solo-states(solo in place, ignore routing, exclusive solo, solo defeat)."}],"prog_lang":"*"},"functioncall":{"lua":"boolean solostate = reaper.AnyTrackSolo(ReaProject proj)","eel":"bool AnyTrackSolo(ReaProject proj)","python":"Boolean retval = RPR_AnyTrackSolo(ReaProject proj)","cpp":"bool AnyTrackSolo(ReaProject* proj)"},"title":"AnyTrackSolo","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns, whether any of the tracks is solo in Project proj","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["api","exists","check","helper"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string function_name","description":"the name of the function you want to check the existence for"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.APIExists","return_values":[{"identifier":"func_exists","type":"boolean"}],"parameters":[{"identifier":"function_name","type":"string"}]},"eel":{"method_name":"APIExists","return_values":["bool"],"parameters":[{"identifier":"function_name\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean func_exists","description":"true, if function_name exists, false if not"}],"prog_lang":"*"},"functioncall":{"lua":"boolean func_exists = reaper.APIExists(string function_name)","eel":"bool APIExists(function_name\")","python":"Boolean retval = RPR_APIExists(String function_name)","cpp":"bool APIExists(const char* function_name)"},"title":"APIExists","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns true if function_name exists in the REAPER API","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["api","test","check","hello world"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.APITest","return_values":[],"parameters":[]},"eel":{"return_values":["APITest"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.APITest()","eel":"APITest()","python":"RPR_APITest()","cpp":"void APITest()"},"title":"APITest","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Displays a message window with \"Hello World\", if the API was successfully called.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["arrangeviewmanagement","nudge","snap","value","units","trim","position","content","duplicate","editcursor","ms","grid","pixels","frames","samples","measures","beats","length","selection"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"ReaProject project","description":"the project, in which to nudge; 0 for the current project"},{"identifier":"integer nudgeflag","description":"the way to nudge\n&1, set to value(otherwise nudge by values)\n&2, snap"},{"identifier":"integer nudgewhat","description":"what to nudge\n0, position\n1, left trim\n2, left edge\n3, right edge\n4, contents\n5, duplicate\n6, editcursor"},{"identifier":"integer nudgeunits","description":"the unit, in which to nudge\n0, ms\n1, seconds\n2, grid\n3, 256th notes\n...\n15, whole notes\n16, measures.beats (1.15 = 1 measure + 1.5 beats)\n17, samples\n18, frames\n19, pixels \n20, item lengths\n21, item selections"},{"identifier":"number value","description":"amount to nudge by, or value to set to(depending on the settings in nudgeflag and the unit in nudgeunits)"},{"identifier":"boolean reverse","description":"in nudge mode: true nudges left; right doesn't nudge to left"},{"identifier":"integer copies","description":"in nudge duplicate mode, number of copies (otherwise ignored)"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ApplyNudge","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"project","type":"ReaProject"},{"identifier":"nudgeflag","type":"integer"},{"identifier":"nudgewhat","type":"integer"},{"identifier":"nudgeunits","type":"integer"},{"identifier":"value","type":"number"},{"identifier":"reverse","type":"boolean"},{"identifier":"copies","type":"integer"}]},"eel":{"method_name":"ApplyNudge","return_values":["bool"],"parameters":[{"type_name":"ReaProject","identifier":"project"},{"type_name":"int","identifier":"nudgeflag"},{"type_name":"int","identifier":"nudgewhat"},{"type_name":"int","identifier":"nudgeunits"},{"identifier":"value"},{"type_name":"bool","identifier":"reverse"},{"type_name":"int","identifier":"copies"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, if it worked; false, if it didn't"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.ApplyNudge(ReaProject project, integer nudgeflag, integer nudgewhat, integer nudgeunits, number value, boolean reverse, integer copies)","eel":"bool ApplyNudge(ReaProject project, int nudgeflag, int nudgewhat, int nudgeunits, value, bool reverse, int copies)","python":"Boolean retval = RPR_ApplyNudge(ReaProject project, Int nudgeflag, Int nudgewhat, Int nudgeunits, Float value, Boolean reverse, Int copies)","cpp":"bool ApplyNudge(ReaProject* project, int nudgeflag, int nudgewhat, int nudgeunits, double value, bool reverse, int copies)"},"title":"ApplyNudge","chapters":["Mediaitem Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Nudges elements like items, cursor, contents, etc to or by a value you want. Nudges only selected mediaitems.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["audio","midi","audiomanagement","open","devices"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.Audio_Init","return_values":[],"parameters":[]},"eel":{"return_values":["Audio_Init"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Audio_Init()","eel":"Audio_Init()","python":"RPR_Audio_Init()","cpp":"void Audio_Init()"},"title":"Audio_Init","chapters":["Input/Output Devices","Audio"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"open all audio and MIDI devices, if not open\n\nSo if the audio-device(s) are closed, you can use this to try to (re)-activate them.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.Audio_IsPreBuffer","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"Audio_IsPreBuffer","return_values":["int"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.Audio_IsPreBuffer()","eel":"int Audio_IsPreBuffer()","python":"Int retval = RPR_Audio_IsPreBuffer()","cpp":"int Audio_IsPreBuffer()"},"title":"Audio_IsPreBuffer","chapters":["Input/Output Devices","Audio"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"is in pre-buffer? threadsafe","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["audio","midi","audiomanagement","running","devices"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.Audio_IsRunning","return_values":[{"identifier":"audio_running","type":"integer"}],"parameters":[]},"eel":{"method_name":"Audio_IsRunning","return_values":["int"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer audio_running","description":"0, audio is not running; 1, audio is running"}],"prog_lang":"*"},"functioncall":{"lua":"integer audio_running = reaper.Audio_IsRunning()","eel":"int Audio_IsRunning()","python":"Int retval = RPR_Audio_IsRunning()","cpp":"int Audio_IsRunning()"},"title":"Audio_IsRunning","chapters":["Input/Output Devices","Audio"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"is audio running at all? threadsafe\n\nIt is an indicator, if the current audio-device is closed(0) or not(1).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["audio","midi","audiomanagement","quit","devices"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.Audio_Quit","return_values":[],"parameters":[]},"eel":{"return_values":["Audio_Quit"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Audio_Quit()","eel":"Audio_Quit()","python":"RPR_Audio_Quit()","cpp":"void Audio_Quit()"},"title":"Audio_Quit","chapters":["Input/Output Devices","Audio"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"close all audio and MIDI devices, if open\n\nThis sets all audio-devices to closed.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["audio","accessor","get","statechange"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"AudioAccessor accessor","description":"the AudioAccessor, whose sample-statechange you want to get"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.AudioAccessorStateChanged","return_values":[{"identifier":"changed_samples","type":"boolean"}],"parameters":[{"identifier":"accessor","type":"AudioAccessor"}]},"eel":{"method_name":"AudioAccessorStateChanged","return_values":["bool"],"parameters":[{"type_name":"AudioAccessor","identifier":"accessor"}]}},"requires":{"Reaper":"5.97"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean changed_samples","description":"true, underlying samples changed; false, underlying samples didn't change"}],"prog_lang":"*"},"functioncall":{"lua":"boolean changed_samples = reaper.AudioAccessorStateChanged(AudioAccessor accessor)","eel":"bool AudioAccessorStateChanged(AudioAccessor accessor)","python":"Boolean retval = RPR_AudioAccessorStateChanged(AudioAccessor accessor)","cpp":"bool AudioAccessorStateChanged(AudioAccessor* accessor)"},"title":"AudioAccessorStateChanged","chapters":["Input/Output Devices","Accessor"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns true if the underlying samples (track or media item take) have changed, but does not update the audio accessor, so the user can selectively call AudioAccessorValidateState only when needed. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["audio","accessor","update","mediatrack","mediaitemtake"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"AudioAccessor accessor","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.AudioAccessorUpdate","return_values":[],"parameters":[{"identifier":"accessor","type":"AudioAccessor"}]},"eel":{"return_values":["AudioAccessorUpdate"],"parameters":[{"type_name":"AudioAccessor","identifier":"accessor"}]}},"requires":{"Reaper":"5.97"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.AudioAccessorUpdate(AudioAccessor accessor)","eel":"AudioAccessorUpdate(AudioAccessor accessor)","python":"RPR_AudioAccessorUpdate(AudioAccessor accessor)","cpp":"void AudioAccessorUpdate(AudioAccessor* accessor)"},"title":"AudioAccessorUpdate","chapters":["Input/Output Devices","Accessor"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Force the accessor to reload its state from the underlying track or media item take. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["audiomanagement","validate","audio","accessor","item","take"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"AudioAccessor accessor","description":"the AudioAccessor for a MediaTrack or a MediaItem_Take"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.AudioAccessorValidateState","return_values":[{"identifier":"statechange","type":"boolean"}],"parameters":[{"identifier":"accessor","type":"AudioAccessor"}]},"eel":{"method_name":"AudioAccessorValidateState","return_values":["bool"],"parameters":[{"type_name":"AudioAccessor","identifier":"accessor"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean statechange","description":"true, if state has changed; false, if state hasn't changed"}],"prog_lang":"*"},"functioncall":{"lua":"boolean statechange = reaper.AudioAccessorValidateState(AudioAccessor accessor)","eel":"bool AudioAccessorValidateState(AudioAccessor accessor)","python":"Boolean retval = RPR_AudioAccessorValidateState(AudioAccessor accessor)","cpp":"bool AudioAccessorValidateState(AudioAccessor* accessor)"},"title":"AudioAccessorValidateState","chapters":["Input/Output Devices","Accessor"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Validates the current state of the audio accessor -- must ONLY call this from the main thread. Returns true if the state changed.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","track","bypass","fx"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer bypass","description":"-1, bypass all if not all bypassed,otherwise unbypass all"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BypassFxAllTracks","return_values":[],"parameters":[{"identifier":"bypass","type":"integer"}]},"eel":{"return_values":["BypassFxAllTracks"],"parameters":[{"type_name":"int","identifier":"bypass"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.BypassFxAllTracks(integer bypass)","eel":"BypassFxAllTracks(int bypass)","python":"RPR_BypassFxAllTracks(Int bypass)","cpp":"void BypassFxAllTracks(int bypass)"},"title":"BypassFxAllTracks","chapters":["Track Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Does bypassing of the fx of all tracks.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["audio management","calculated","loudness","source","lufs","rms","peak","true peak"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PCM_source source","description":"the source to calculate the loudness from"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CalcMediaSrcLoudness","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"mediasource","type":"PCM_source"}]},"eel":{"method_name":"retval","return_values":["int"],"parameters":[{"type_name":"PCM_source","identifier":"mediasource"}]}},"requires":{"Reaper":"6.64"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"1, calculation was successful; -1, calculation was unsuccessful/canceled by the user"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.CalcMediaSrcLoudness(PCM_source mediasource)","eel":"int retval = CalcMediaSrcLoudness(PCM_source mediasource)","python":"Int retval = RPR_CalcMediaSrcLoudness(PCM_source mediasource)","cpp":"int retval = CalcMediaSrcLoudness(PCM_source* mediasource)"},"title":"CalcMediaSrcLoudness","chapters":["Audio Management","Source Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Calculates loudness statistics of media via dry run render. Statistics will be displayed to the user; call GetSetProjectInfo_String(\"RENDER_STATS\") to retrieve via API. Returns 1 if loudness was calculated successfully, -1 if user canceled the dry run render.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["audio management","calculated","loudness","source","lufs","rms","peak","true peak"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"PCM_source source","description":"the source to be normalized"},{"identifier":"integer normalizeTo","description":"the normalizing mode\n0, LUFS-I \n1, RMS-I \n2, peak\n3, true peak\n4, LUFS-M max\n5, LUFS-S max"},{"identifier":"number normalizeTarget","description":"the target to normalize to, dBFS or LUFS value"},{"identifier":"number normalizeStart","description":"the start-position from where to normalize; 0, for start of source"},{"identifier":"number normalizeEnd","description":"the endposition to where to normalize; 0, for end of source"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CalculateNormalization","return_values":[{"identifier":"normalized_value","type":"number"}],"parameters":[{"identifier":"source","type":"PCM_source"},{"identifier":"normalizeTo","type":"integer"},{"identifier":"normalizeTarget","type":"number"},{"identifier":"normalizeStart","type":"number"},{"identifier":"normalizeEnd","type":"number"}]},"eel":{"method_name":"retval","return_values":["double"],"parameters":[{"type_name":"PCM_source","identifier":"source"},{"type_name":"int","identifier":"normalizeTo"},{"identifier":"normalizeTarget"},{"identifier":"normalizeStart"},{"identifier":"normalizeEnd"}]}},"requires":{"Reaper":"6.44"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number normalized_value","description":"the normalized value"}],"prog_lang":"*"},"functioncall":{"lua":"number normalized_value = reaper.CalculateNormalization(PCM_source source, integer normalizeTo, number normalizeTarget, number normalizeStart, number normalizeEnd)","eel":"double retval = CalculateNormalization(PCM_source source, int normalizeTo, normalizeTarget, normalizeStart, normalizeEnd)","python":"Float retval = RPR_CalculateNormalization(PCM_source source, Int normalizeTo, Float normalizeTarget, Float normalizeStart, Float normalizeEnd)","cpp":"double retval = CalculateNormalization(PCM_source* source, int normalizeTo, double normalizeTarget, double normalizeStart, double normalizeEnd)"},"title":"CalculateNormalization","chapters":["Audio Management","Source Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Calculate normalize adjustment for source media. normalizeTo: 0=LUFS-I, 1=RMS-I, 2=peak, 3=true peak, 4=LUFS-M max, 5=LUFS-S max. normalizeTarget: dBFS or LUFS value. normalizeStart, normalizeEnd: time bounds within source media for normalization calculation. If normalizationStart=0 and normalizationEnd=0, the full duration of the media will be used for the calculation","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","rec","arm","state","clear","off"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ClearAllRecArmed","return_values":[],"parameters":[]},"eel":{"return_values":["ClearAllRecArmed"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ClearAllRecArmed()","eel":"ClearAllRecArmed()","python":"RPR_ClearAllRecArmed()","cpp":"void ClearAllRecArmed()"},"title":"ClearAllRecArmed","chapters":["Track Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Clears all armed states of all tracks.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","console","clear","reaconsole"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ClearConsole","return_values":[],"parameters":[]},"eel":{"return_values":["ClearConsole"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ClearConsole()","eel":"ClearConsole()","python":"RPR_ClearConsole()","cpp":"void ClearConsole()"},"title":"ClearConsole","chapters":["Api-Helper-Functions","ReaScript Console"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Clear the ReaScript console.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","peak","cache","clear"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ClearPeakCache","return_values":[],"parameters":[]},"eel":{"return_values":["ClearPeakCache"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ClearPeakCache()","eel":"ClearPeakCache()","python":"RPR_ClearPeakCache()","cpp":"void ClearPeakCache()"},"title":"ClearPeakCache","chapters":["Audio Management","Peaks/Waveforms"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"resets the global peak caches","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["colormanagement","native","from","conversion"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer col","description":"the colorvalue to convert from"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ColorFromNative","return_values":[{"identifier":"r","type":"integer"},{"identifier":"g","type":"integer"},{"identifier":"b","type":"integer"}],"parameters":[{"identifier":"col","type":"integer"}]},"eel":{"return_values":["ColorFromNative"],"parameters":[{"type_name":"int","identifier":"col"},{"type_name":"int","identifier":"&r"},{"type_name":"int","identifier":"&g"},{"type_name":"int","identifier":"&b"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer r","description":"the value for red, from 0 to 255"},{"identifier":"integer g","description":"the value for green, from 0 to 255"},{"identifier":"integer b","description":"the value for blue, from 0 to 255"}],"prog_lang":"*"},"functioncall":{"lua":"integer r, integer g, integer b = reaper.ColorFromNative(integer col)","eel":"ColorFromNative(int col, int &r, int &g, int &b)","python":"(Int col, Int rOut, Int gOut, Int bOut) = RPR_ColorFromNative(col, rOut, gOut, bOut)","cpp":"void ColorFromNative(int col, int* rOut, int* gOut, int* bOut)"},"title":"ColorFromNative","chapters":["Api-Helper-Functions","Value Conversion"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Extract RGB values from an OS dependent color.\n\nAs Reaper treats colors differently on Mac and Windows, you should always use ColorFromNative and ColorToNative.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["colormanagement","native","from","conversion"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer r","description":"the value for red, from 0 to 255"},{"identifier":"integer g","description":"the value for green, from 0 to 255"},{"identifier":"integer b","description":"the value for blue, from 0 to 255"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ColorToNative","return_values":[{"identifier":"col","type":"integer"}],"parameters":[{"identifier":"r","type":"integer"},{"identifier":"g","type":"integer"},{"identifier":"b","type":"integer"}]},"eel":{"method_name":"ColorToNative","return_values":["int"],"parameters":[{"type_name":"int","identifier":"r"},{"type_name":"int","identifier":"g"},{"type_name":"int","identifier":"b"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer col","description":"the correct colorvalue, fitting to your system."}],"prog_lang":"*"},"functioncall":{"lua":"integer col = reaper.ColorToNative(integer r, integer g, integer b)","eel":"int ColorToNative(int r, int g, int b)","python":"Int retval = RPR_ColorToNative(Int r, Int g, Int b)","cpp":"int ColorToNative(int r, int g, int b)"},"title":"ColorToNative","chapters":["Api-Helper-Functions","Value Conversion"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Make an OS dependent color from RGB values (e.g. RGB() macro on Windows). r,g and b are in [0..255]. \nAs Reaper treats colors differently on Mac and Windows, you should always use ColorFromNative and ColorToNative.\n\nWhen using the returned colorvalue, you need to add |0x1000000 at the end of it, like ColorToNative(20,30,40)|0x1000000.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["shortcuts","count"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"KbdSectionInfo section","description":"the section, in which the action is located, use retval of SectionFromUniqueID for this parameter\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"},{"identifier":"integer cmdID","description":"the action command-id of the action, whose shortcuts you want to count"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CountActionShortcuts","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"section","type":"KbdSectionInfo"},{"identifier":"cmdID","type":"integer"}]},"eel":{"method_name":"retval","return_values":["int"],"parameters":[{"type_name":"KbdSectionInfo","identifier":"section"},{"type_name":"int","identifier":"cmdID"}]}},"requires":{"Reaper":"6.72"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the number of available shortcuts for this action"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.CountActionShortcuts(KbdSectionInfo section, integer cmdID)","eel":"int retval = CountActionShortcuts(KbdSectionInfo section, int cmdID)","python":"Int retval = RPR_CountActionShortcuts(KbdSectionInfo section, Int cmdID)","cpp":"int retval = CountActionShortcuts(KbdSectionInfo* section, int cmdID)"},"title":"CountActionShortcuts","chapters":["Api-Helper-Functions","Shortcuts"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the number of shortcuts that exist for the given command ID.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["envelopemanagement","automation items","count","envelopes"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"TrackEnvelope env","description":"the envelope-object for the envelope-lane"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CountAutomationItems","return_values":[{"identifier":"ai_count","type":"integer"}],"parameters":[{"identifier":"env","type":"TrackEnvelope"}]},"eel":{"method_name":"CountAutomationItems","return_values":["int"],"parameters":[{"type_name":"TrackEnvelope","identifier":"env"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer ai_count","description":"number of automation items"}],"prog_lang":"*"},"functioncall":{"lua":"integer ai_count = reaper.CountAutomationItems(TrackEnvelope env)","eel":"int CountAutomationItems(TrackEnvelope env)","python":"Int retval = RPR_CountAutomationItems(TrackEnvelope env)","cpp":"int CountAutomationItems(TrackEnvelope* env)"},"title":"CountAutomationItems","chapters":["Envelope Management","Automation Items"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the number of automation items on this envelope.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["envelopemanagement","envelopes","count","points"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"TrackEnvelope envelope","description":"the TrackEnvelope-object, in which to count for the envelope-points"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CountEnvelopePoints","return_values":[{"identifier":"count_envpoints","type":"integer"}],"parameters":[{"identifier":"envelope","type":"TrackEnvelope"}]},"eel":{"method_name":"CountEnvelopePoints","return_values":["int"],"parameters":[{"type_name":"TrackEnvelope","identifier":"envelope"}]}},"requires":{"Reaper":"5.979"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer count_envpoints","description":"the number of envelope-points in the envelopeobject envelope"}],"prog_lang":"*"},"functioncall":{"lua":"integer count_envpoints = reaper.CountEnvelopePoints(TrackEnvelope envelope)","eel":"int CountEnvelopePoints(TrackEnvelope envelope)","python":"Int retval = RPR_CountEnvelopePoints(TrackEnvelope envelope)","cpp":"int CountEnvelopePoints(TrackEnvelope* envelope)"},"title":"CountEnvelopePoints","chapters":["Envelope Management","Envelope Points"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the number of points in the envelope.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["envelopemanagement","envelopes","count","points","automation items"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"TrackEnvelope envelope","description":"the TrackEnvelope-object, in which to count for the envelope-points"},{"identifier":"integer autoitem_idx","description":"-1, for the underlying envelope, 0, for the first automation item on the envelope, etc."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CountEnvelopePointsEx","return_values":[{"identifier":"count_envpoints","type":"integer"}],"parameters":[{"identifier":"envelope","type":"TrackEnvelope"},{"identifier":"autoitem_idx","type":"integer"}]},"eel":{"method_name":"CountEnvelopePointsEx","return_values":["int"],"parameters":[{"type_name":"TrackEnvelope","identifier":"envelope"},{"type_name":"int","identifier":"autoitem_idx"}]}},"requires":{"Reaper":"5.979"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer count_envpoints","description":"the number of envelope-points in the envelopeobject envelope"}],"prog_lang":"*"},"functioncall":{"lua":"integer count_envpoints = reaper.CountEnvelopePointsEx(TrackEnvelope envelope, integer autoitem_idx)","eel":"int CountEnvelopePointsEx(TrackEnvelope envelope, int autoitem_idx)","python":"Int retval = RPR_CountEnvelopePointsEx(TrackEnvelope envelope, Int autoitem_idx)","cpp":"int CountEnvelopePointsEx(TrackEnvelope* envelope, int autoitem_idx)"},"title":"CountEnvelopePointsEx","chapters":["Envelope Management","Envelope Points"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the number of points in the envelope.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["mediaitemmanagement","count","mediaitems"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project, in which to count for the number of items; 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CountMediaItems","return_values":[{"identifier":"count_items","type":"integer"}],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"method_name":"CountMediaItems","return_values":["int"],"parameters":[{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer count_items","description":"the number of MediaItems in a project"}],"prog_lang":"*"},"functioncall":{"lua":"integer count_items = reaper.CountMediaItems(ReaProject proj)","eel":"int CountMediaItems(ReaProject proj)","python":"Int retval = RPR_CountMediaItems(ReaProject proj)","cpp":"int CountMediaItems(ReaProject* proj)"},"title":"CountMediaItems","chapters":["Mediaitem Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"count the number of items in the project (proj=0 for active project)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["markermanagement","count","all","markers","regions"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project, in which to count the markers; 0 for current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CountProjectMarkers","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"num_markers","type":"integer"},{"identifier":"num_regions","type":"integer"}],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"method_name":"CountProjectMarkers","return_values":["int"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"int","identifier":"&num_markers"},{"type_name":"int","identifier":"&num_regions"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer retval","description":"all markers and regions in the project"},{"identifier":"integer num_markers","description":"the number of markers in the project"},{"identifier":"integer num_regions","description":"the number of regions in the project"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, integer num_markers, integer num_regions = reaper.CountProjectMarkers(ReaProject proj)","eel":"int CountProjectMarkers(ReaProject proj, int &num_markers, int &num_regions)","python":"(Int retval, ReaProject proj, Int num_markersOut, Int num_regionsOut) = RPR_CountProjectMarkers(proj, num_markersOut, num_regionsOut)","cpp":"int CountProjectMarkers(ReaProject* proj, int* num_markersOut, int* num_regionsOut)"},"title":"CountProjectMarkers","chapters":["Marker Management","Project Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns the number of all markers and regions, as well as all markers and all regions in a project.\nnum_markersOut and num_regionsOut may be NULL.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["mediaitemmanagement","count","selected","mediaitem"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project, in which to count for the selected mediaitems; 0 for the current project."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CountSelectedMediaItems","return_values":[{"identifier":"count_sel_items","type":"integer"}],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"method_name":"CountSelectedMediaItems","return_values":["int"],"parameters":[{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer count_sel_items","description":"the number of selected items in the project"}],"prog_lang":"*"},"functioncall":{"lua":"integer count_sel_items = reaper.CountSelectedMediaItems(ReaProject proj)","eel":"int CountSelectedMediaItems(ReaProject proj)","python":"Int retval = RPR_CountSelectedMediaItems(ReaProject proj)","cpp":"int CountSelectedMediaItems(ReaProject* proj)"},"title":"CountSelectedMediaItems","chapters":["Mediaitem Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"count the number of selected items in the project (proj=0 for active project)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","track","selected","count"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project in which to count the selected tracks; 0 for current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CountSelectedTracks","return_values":[{"identifier":"count_sel_tracks","type":"integer"}],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"method_name":"CountSelectedTracks","return_values":["int"],"parameters":[{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer count_sel_tracks","description":"the number of selected tracks in the project"}],"prog_lang":"*"},"functioncall":{"lua":"integer count_sel_tracks = reaper.CountSelectedTracks(ReaProject proj)","eel":"int CountSelectedTracks(ReaProject proj)","python":"Int retval = RPR_CountSelectedTracks(ReaProject proj)","cpp":"int CountSelectedTracks(ReaProject* proj)"},"title":"CountSelectedTracks","chapters":["Track Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Count the number of selected tracks in the project. \nThis function ignores the master track, see CountSelectedTracks2 if you need master-track as well.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","selected","track","master","count"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the number of the project in which to count the selected tracks; 0 for current project. "},{"identifier":"boolean wantmaster","description":"true, if you want to count the master-track as well; false, if you don't want to count it"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CountSelectedTracks2","return_values":[{"identifier":"count_sel_tracks","type":"integer"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"wantmaster","type":"boolean"}]},"eel":{"method_name":"CountSelectedTracks2","return_values":["int"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"bool","identifier":"wantmaster"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer count_sel_tracks","description":"the number of selected tracks in your project"}],"prog_lang":"*"},"functioncall":{"lua":"integer count_sel_tracks = reaper.CountSelectedTracks2(ReaProject proj, boolean wantmaster)","eel":"int CountSelectedTracks2(ReaProject proj, bool wantmaster)","python":"Int retval = RPR_CountSelectedTracks2(ReaProject proj, Boolean wantmaster)","cpp":"int CountSelectedTracks2(ReaProject* proj, bool wantmaster)"},"title":"CountSelectedTracks2","chapters":["Track Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Count the number of selected tracks in the project.\nif you set wantmaster to true, it will include the master track as well.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["mediaitemmanagement","take","envelope"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":"the mediaitem-object for a certain take"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CountTakeEnvelopes","return_values":[{"identifier":"count_take_env","type":"integer"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"method_name":"CountTakeEnvelopes","return_values":["int"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer count_take_env","description":"number of envelopes of this take of a mediaitem"}],"prog_lang":"*"},"functioncall":{"lua":"integer count_take_env = reaper.CountTakeEnvelopes(MediaItem_Take take)","eel":"int CountTakeEnvelopes(MediaItem_Take take)","python":"Int retval = RPR_CountTakeEnvelopes(MediaItem_Take take)","cpp":"int CountTakeEnvelopes(MediaItem_Take* take)"},"title":"CountTakeEnvelopes","chapters":["Mediaitem Take Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Counts take-envelopes.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["mediaitemmanagement","count","takes","mediaitem"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem item","description":"the mediaitem to count the takes of"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CountTakes","return_values":[{"identifier":"count_takes","type":"integer"}],"parameters":[{"identifier":"item","type":"MediaItem"}]},"eel":{"method_name":"CountTakes","return_values":["int"],"parameters":[{"type_name":"MediaItem","identifier":"item"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer count_takes","description":"the number of takes in a mediaitem"}],"prog_lang":"*"},"functioncall":{"lua":"integer count_takes = reaper.CountTakes(MediaItem item)","eel":"int CountTakes(MediaItem item)","python":"Int retval = RPR_CountTakes(MediaItem item)","cpp":"int CountTakes(MediaItem* item)"},"title":"CountTakes","chapters":["Mediaitem Take Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"count the number of takes in the item","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","count","fx","parameter","knobs","track"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject project","description":"the project, in which to count the knobs"},{"identifier":"MediaTrack track","description":"the track of which to count the knobs"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CountTCPFXParms","return_values":[{"identifier":"count_params","type":"integer"}],"parameters":[{"identifier":"project","type":"ReaProject"},{"identifier":"track","type":"MediaTrack"}]},"eel":{"method_name":"CountTCPFXParms","return_values":["int"],"parameters":[{"type_name":"ReaProject","identifier":"project"},{"type_name":"MediaTrack","identifier":"track"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer count_params","description":"the number of FX-parameter-knobs "}],"prog_lang":"*"},"functioncall":{"lua":"integer count_params = reaper.CountTCPFXParms(ReaProject project, MediaTrack track)","eel":"int CountTCPFXParms(ReaProject project, MediaTrack track)","python":"Int retval = RPR_CountTCPFXParms(ReaProject project, MediaTrack track)","cpp":"int CountTCPFXParms(ReaProject* project, MediaTrack* track)"},"title":"CountTCPFXParms","chapters":["Track Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Count the number of FX parameter knobs displayed on the track control panel.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["markermanagement","tempo","timesignature","count"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"project number; 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CountTempoTimeSigMarkers","return_values":[{"identifier":"count_tempo_markers","type":"integer"}],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"method_name":"CountTempoTimeSigMarkers","return_values":["int"],"parameters":[{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer count_tempo_markers","description":"the number of tempo/time-signature markers in the project."}],"prog_lang":"*"},"functioncall":{"lua":"integer count_tempo_markers = reaper.CountTempoTimeSigMarkers(ReaProject proj)","eel":"int CountTempoTimeSigMarkers(ReaProject proj)","python":"Int retval = RPR_CountTempoTimeSigMarkers(ReaProject proj)","cpp":"int CountTempoTimeSigMarkers(ReaProject* proj)"},"title":"CountTempoTimeSigMarkers","chapters":["Marker Management","Time Signature Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Count the number of tempo/time signature markers in the project.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["envelopemanagement","count","track-envelopes","track"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack track","description":"the object of the track to count it's envelopes"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CountTrackEnvelopes","return_values":[{"identifier":"count_track_envs","type":"integer"}],"parameters":[{"identifier":"track","type":"MediaTrack"}]},"eel":{"method_name":"CountTrackEnvelopes","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"track"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer count_track_envs","description":"the number of track-envelopes in a track"}],"prog_lang":"*"},"functioncall":{"lua":"integer count_track_envs = reaper.CountTrackEnvelopes(MediaTrack track)","eel":"int CountTrackEnvelopes(MediaTrack track)","python":"Int retval = RPR_CountTrackEnvelopes(MediaTrack track)","cpp":"int CountTrackEnvelopes(MediaTrack* track)"},"title":"CountTrackEnvelopes","chapters":["Envelope Management","Track Envelopes"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Counts the number of track-envelopes of a certain track.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["mediaitemmanagement","track","count","mediaitem"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack track","description":"the MediaTrack to count the items of"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CountTrackMediaItems","return_values":[{"identifier":"count_trackitems","type":"integer"}],"parameters":[{"identifier":"track","type":"MediaTrack"}]},"eel":{"method_name":"CountTrackMediaItems","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"track"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer count_trackitems","description":"the number of mediaitems in the track"}],"prog_lang":"*"},"functioncall":{"lua":"integer count_trackitems = reaper.CountTrackMediaItems(MediaTrack track)","eel":"int CountTrackMediaItems(MediaTrack track)","python":"Int retval = RPR_CountTrackMediaItems(MediaTrack track)","cpp":"int CountTrackMediaItems(MediaTrack* track)"},"title":"CountTrackMediaItems","chapters":["Mediaitem Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"count the number of items in the track","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","count","track"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project in which to count the tracks; 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CountTracks","return_values":[{"identifier":"count_tracks","type":"integer"}],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"method_name":"CountTracks","return_values":["int"],"parameters":[{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"6.20"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer count_tracks","description":"the number of tracks in the project, excluding the master-track."}],"prog_lang":"*"},"functioncall":{"lua":"integer count_tracks = reaper.CountTracks(ReaProject proj)","eel":"int CountTracks(ReaProject proj)","python":"Int retval = RPR_CountTracks(ReaProject projOptional)","cpp":"int CountTracks(ReaProject* projOptional)"},"title":"CountTracks","chapters":["Track Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"count the number of tracks in the project (proj=0 for active project)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["mediaitemmanagement","midi","track","mediaitem"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaTrack track","description":"the object of the track, in which to create this mediaitem"},{"identifier":"number starttime","description":"starttime of the item in seconds, unless qnIn is set to true"},{"identifier":"number endtime","description":"endtime of the item in seconds, unless qnIn is set to true"},{"identifier":"boolean qnIn","description":"unknown; can be set to true, or false or be omitted"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CreateNewMIDIItemInProj","return_values":[{"identifier":"item","type":"MediaItem"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"starttime","type":"number"},{"identifier":"endtime","type":"number"},{"isOptional":true,"type":"boolean","identifier":"qnIn"}]},"eel":{"method_name":"CreateNewMIDIItemInProj","return_values":["MediaItem"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"identifier":"starttime"},{"identifier":"endtime"},{"identifier":"qnIn","modifier":"optional","type_name":"bool"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem item","description":"the newly created MIDI-mediaitem."}],"prog_lang":"*"},"functioncall":{"lua":"MediaItem item = reaper.CreateNewMIDIItemInProj(MediaTrack track, number starttime, number endtime, optional boolean qnIn)","eel":"MediaItem CreateNewMIDIItemInProj(MediaTrack track, starttime, endtime, optional bool qnIn)","python":"MediaItem item = RPR_CreateNewMIDIItemInProj(MediaTrack track, Float starttime, Float endtime, const bool qnInOptional)","cpp":"MediaItem* CreateNewMIDIItemInProj(MediaTrack* track, double starttime, double endtime, const bool* qnInOptional)"},"title":"CreateNewMIDIItemInProj","chapters":["Mediaitem Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Create a new MIDI media item, containing no MIDI events. Time is in seconds unless qn is set.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["audiomanagement","audio","accessor","create","item","take"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":"the take from a MediaItem-object, of which you want to create a new AudioAccessor"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CreateTakeAudioAccessor","return_values":[{"identifier":"acc","type":"AudioAccessor"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"method_name":"CreateTakeAudioAccessor","return_values":["AudioAccessor"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"}]}},"requires":{"Reaper":"5.97"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"AudioAccessor acc","description":"the newly created AudioAccessor"}],"prog_lang":"*"},"functioncall":{"lua":"AudioAccessor acc = reaper.CreateTakeAudioAccessor(MediaItem_Take take)","eel":"AudioAccessor CreateTakeAudioAccessor(MediaItem_Take take)","python":"AudioAccessor retval = RPR_CreateTakeAudioAccessor(MediaItem_Take take)","cpp":"AudioAccessor* CreateTakeAudioAccessor(MediaItem_Take* take)"},"title":"CreateTakeAudioAccessor","chapters":["Input/Output Devices","Accessor"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Create an audio accessor object for this take. Must only call from the main thread. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["audiomanagement","audio","accessor","create","track"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack track","description":"the MediaTrack, of which you want to create an AudioAccessor"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CreateTrackAudioAccessor","return_values":[{"identifier":"acc","type":"AudioAccessor"}],"parameters":[{"identifier":"track","type":"MediaTrack"}]},"eel":{"method_name":"CreateTrackAudioAccessor","return_values":["AudioAccessor"],"parameters":[{"type_name":"MediaTrack","identifier":"track"}]}},"requires":{"Reaper":"5.97"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"AudioAccessor acc","description":"the newly created AudioAccessor for this MediaTrack"}],"prog_lang":"*"},"functioncall":{"lua":"AudioAccessor acc = reaper.CreateTrackAudioAccessor(MediaTrack track)","eel":"AudioAccessor CreateTrackAudioAccessor(MediaTrack track)","python":"AudioAccessor retval = RPR_CreateTrackAudioAccessor(MediaTrack track)","cpp":"AudioAccessor* CreateTrackAudioAccessor(MediaTrack* track)"},"title":"CreateTrackAudioAccessor","chapters":["Input/Output Devices","Accessor"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Create an audio accessor object for this track. Must only call from the main thread.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","create","routing","hwout","hardware out","send","receive"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack tr","description":"the MediaTrack in which to create the send/hwout"},{"identifier":"MediaTrack desttrIn","description":"destination track input; \na MediaTrack-object, creates a new send to tr from MediaTrack-object; \nnil(or no MediaTrack-object), creates a new hardware-output"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CreateTrackSend","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"tr","type":"MediaTrack"},{"identifier":"desttrIn","type":"MediaTrack"}]},"eel":{"method_name":"CreateTrackSend","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"tr"},{"type_name":"MediaTrack","identifier":"desttrIn"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the id of the new HWOut or Send created. HWOut and Send have their own individual index-numbering."}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.CreateTrackSend(MediaTrack tr, MediaTrack desttrIn)","eel":"int CreateTrackSend(MediaTrack tr, MediaTrack desttrIn)","python":"Int retval = RPR_CreateTrackSend(MediaTrack tr, MediaTrack desttrInOptional)","cpp":"int CreateTrackSend(MediaTrack* tr, MediaTrack* desttrInOptional)"},"title":"CreateTrackSend","chapters":["Track Management","Routing"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Create a send/receive (desttrInOptional!=NULL), or a hardware output (desttrInOptional==NULL) with default properties, return >=0 on success (== new send/receive index).\n\nFor ReaRoute-users: the outputs are hardware outputs, but with 512 added to the destination channel index (512 is the first rearoute channel, 513 the second, etc).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean force","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_FlushUndo","return_values":[],"parameters":[{"identifier":"force","type":"boolean"}]},"eel":{"return_values":["CSurf_FlushUndo"],"parameters":[{"type_name":"bool","identifier":"force"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_FlushUndo(boolean force)","eel":"CSurf_FlushUndo(bool force)","python":"RPR_CSurf_FlushUndo(Boolean force)","cpp":"void CSurf_FlushUndo(bool force)"},"title":"CSurf_FlushUndo","chapters":["Input/Output Devices","Surfaces"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"call this to force flushing of the undo states after using CSurf_On*Change()","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack trackid","description":""},{"identifier":"integer isPan","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_GetTouchState","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"isPan","type":"integer"}]},"eel":{"method_name":"CSurf_GetTouchState","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"type_name":"int","identifier":"isPan"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.CSurf_GetTouchState(MediaTrack trackid, integer isPan)","eel":"bool CSurf_GetTouchState(MediaTrack trackid, int isPan)","python":"Boolean retval = RPR_CSurf_GetTouchState(MediaTrack trackid, Int isPan)","cpp":"bool CSurf_GetTouchState(MediaTrack* trackid, int isPan)"},"title":"CSurf_GetTouchState","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","move","cursor","end","project"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.CSurf_GoEnd","return_values":[],"parameters":[]},"eel":{"return_values":["CSurf_GoEnd"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_GoEnd()","eel":"CSurf_GoEnd()","python":"RPR_CSurf_GoEnd()","cpp":"void CSurf_GoEnd()"},"title":"CSurf_GoEnd","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Moves the cursor to the end of the last item in the project.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","move","cursor","start","project"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.CSurf_GoStart","return_values":[],"parameters":[]},"eel":{"return_values":["CSurf_GoStart"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_GoStart()","eel":"CSurf_GoStart()","python":"RPR_CSurf_GoStart()","cpp":"void CSurf_GoStart()"},"title":"CSurf_GoStart","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Moves the cursor to the start of the project.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","count","tracks","visible","invisible"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean mcpView","description":"true, only return the number of tracks visible in MCP; false, count all tracks, incl. invisible"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_NumTracks","return_values":[{"identifier":"count_tracks","type":"integer"}],"parameters":[{"identifier":"mcpView","type":"boolean"}]},"eel":{"method_name":"CSurf_NumTracks","return_values":["int"],"parameters":[{"type_name":"bool","identifier":"mcpView"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer count_tracks","description":"number of tracks"}],"prog_lang":"*"},"functioncall":{"lua":"integer count_tracks = reaper.CSurf_NumTracks(boolean mcpView)","eel":"int CSurf_NumTracks(bool mcpView)","python":"Int retval = RPR_CSurf_NumTracks(Boolean mcpView)","cpp":"int CSurf_NumTracks(bool mcpView)"},"title":"CSurf_NumTracks","chapters":["Track Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"counts the number of tracks, or the number of visible tracks, when mcpView is set to true.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["arrangeviewmanagement","zoom","vertical","scroll","arrange","view"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer whichdir","description":"into which (zoom-)direction to change\n  0, move arrangeview upward(one track each step)/zoom in\n  1, move arrangeview downward(one track each step)/zoom out"},{"identifier":"boolean wantzoom","description":"true, adjust vertical zoom; false, adjust vertical scrolling"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnArrow","return_values":[],"parameters":[{"identifier":"whichdir","type":"integer"},{"identifier":"wantzoom","type":"boolean"}]},"eel":{"return_values":["CSurf_OnArrow"],"parameters":[{"type_name":"int","identifier":"whichdir"},{"type_name":"bool","identifier":"wantzoom"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_OnArrow(integer whichdir, boolean wantzoom)","eel":"CSurf_OnArrow(int whichdir, bool wantzoom)","python":"RPR_CSurf_OnArrow(Int whichdir, Boolean wantzoom)","cpp":"void CSurf_OnArrow(int whichdir, bool wantzoom)"},"title":"CSurf_OnArrow","chapters":["User Interface","Arrangeview Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Zoom or scroll the Arrangeview vertically. \nThe stepsize with scrolling is track by track.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","cursor","forward","jump","seekplay"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer seekplay","description":"how to move the editcursor forward\n  0, move cursor forward in small steps. Stepsize depends on horizontal zoomfactor.\n  1, move cursor forward, in half-second steps when stopped; when playing it jumps ahead with playing restarting at editcursor"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnFwd","return_values":[],"parameters":[{"identifier":"seekplay","type":"integer"}]},"eel":{"return_values":["CSurf_OnFwd"],"parameters":[{"type_name":"int","identifier":"seekplay"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_OnFwd(integer seekplay)","eel":"CSurf_OnFwd(int seekplay)","python":"RPR_CSurf_OnFwd(Int seekplay)","cpp":"void CSurf_OnFwd(int seekplay)"},"title":"CSurf_OnFwd","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Moves editcursor forward, and optionally with seekplay.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","fx","set","toggle","chain"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack trackid","description":"the MediaTrack, whose FX-chain you want to de-/activate"},{"identifier":"integer en","description":"activation state of FX-chain\n  -1, toggle FX-chain on/off\n   0, set FX-chain off\n   1, set FX-chain on"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnFXChange","return_values":[{"identifier":"active_fxchain","type":"boolean"}],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"en","type":"integer"}]},"eel":{"method_name":"CSurf_OnFXChange","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"type_name":"int","identifier":"en"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean active_fxchain","description":"true, if FX-chain is activated; false, if FX-chain is deactivated"}],"prog_lang":"*"},"functioncall":{"lua":"boolean active_fxchain = reaper.CSurf_OnFXChange(MediaTrack trackid, integer en)","eel":"bool CSurf_OnFXChange(MediaTrack trackid, int en)","python":"Boolean retval = RPR_CSurf_OnFXChange(MediaTrack trackid, Int en)","cpp":"bool CSurf_OnFXChange(MediaTrack* trackid, int en)"},"title":"CSurf_OnFXChange","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets/toggles activation of FX-Chain.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","rec","toggle","monitoring"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack trackid","description":"the MediaTrack, of which you want to toggle the monitor-button"},{"identifier":"integer monitor","description":"monitor-input-state\n  -1, monitor input on(tape auto style) (can be set with negative values, and 2 as well)\n   0, monitor off (can be set with 3 and higher as well)\n   1, monitor input on"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnInputMonitorChange","return_values":[{"identifier":"inp_mon_state","type":"integer"}],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"monitor","type":"integer"}]},"eel":{"method_name":"CSurf_OnInputMonitorChange","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"type_name":"int","identifier":"monitor"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer inp_mon_state","description":"the new input-monitor-state (refer to parameter monitor for description)"}],"prog_lang":"*"},"functioncall":{"lua":"integer inp_mon_state = reaper.CSurf_OnInputMonitorChange(MediaTrack trackid, integer monitor)","eel":"int CSurf_OnInputMonitorChange(MediaTrack trackid, int monitor)","python":"Int retval = RPR_CSurf_OnInputMonitorChange(MediaTrack trackid, Int monitor)","cpp":"int CSurf_OnInputMonitorChange(MediaTrack* trackid, int monitor)"},"title":"CSurf_OnInputMonitorChange","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"sets rec-monitoring of a specific track.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","set","monitor","input","tape auto style","allowgang"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack trackid","description":"the MediaTrack, whose monitor-input-state you want to set"},{"identifier":"integer monitor","description":"monitor-input-state\n  -1, monitor input on(tape auto style) (can be set with negative values, and 2 as well)\n   0, monitor off (can be set with 3 and higher as well)\n   1, monitor input on"},{"identifier":"boolean allowgang","description":"true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnInputMonitorChangeEx","return_values":[{"identifier":"inp_mon_state","type":"integer"}],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"monitor","type":"integer"},{"identifier":"allowgang","type":"boolean"}]},"eel":{"method_name":"CSurf_OnInputMonitorChangeEx","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"type_name":"int","identifier":"monitor"},{"type_name":"bool","identifier":"allowgang"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer inp_mon_state","description":"the new input-monitor-state (refer to parameter monitor for description)"}],"prog_lang":"*"},"functioncall":{"lua":"integer inp_mon_state = reaper.CSurf_OnInputMonitorChangeEx(MediaTrack trackid, integer monitor, boolean allowgang)","eel":"int CSurf_OnInputMonitorChangeEx(MediaTrack trackid, int monitor, bool allowgang)","python":"Int retval = RPR_CSurf_OnInputMonitorChangeEx(MediaTrack trackid, Int monitor, Boolean allowgang)","cpp":"int CSurf_OnInputMonitorChangeEx(MediaTrack* trackid, int monitor, bool allowgang)"},"title":"CSurf_OnInputMonitorChangeEx","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets monitor-input-state. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","mute","set","toggle"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack trackid","description":"the MediaTrack to be muted"},{"identifier":"integer mute","description":"mute state\n  0, mute off\n  1 and higher, mute on\n  negative values toggle mute-state"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnMuteChange","return_values":[{"identifier":"mute_state","type":"boolean"}],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"mute","type":"integer"}]},"eel":{"method_name":"CSurf_OnMuteChange","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"type_name":"int","identifier":"mute"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean mute_state","description":"the new mute-state; true, mute is on; false, mute is off"}],"prog_lang":"*"},"functioncall":{"lua":"boolean mute_state = reaper.CSurf_OnMuteChange(MediaTrack trackid, integer mute)","eel":"bool CSurf_OnMuteChange(MediaTrack trackid, int mute)","python":"Boolean retval = RPR_CSurf_OnMuteChange(MediaTrack trackid, Int mute)","cpp":"bool CSurf_OnMuteChange(MediaTrack* trackid, int mute)"},"title":"CSurf_OnMuteChange","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets mute state of a MediaTrack.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","mute","set","toggle"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack trackid","description":"the MediaTrack to be muted"},{"identifier":"integer mute","description":"mute state\n  0, mute off\n  1, and higher, mute on\n  negative values toggle mute-state"},{"identifier":"boolean allowgang","description":"true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnMuteChangeEx","return_values":[{"identifier":"mute_state","type":"boolean"}],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"mute","type":"integer"},{"identifier":"allowgang","type":"boolean"}]},"eel":{"method_name":"CSurf_OnMuteChangeEx","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"type_name":"int","identifier":"mute"},{"type_name":"bool","identifier":"allowgang"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean mute_state","description":"the new mute-state; true, mute is on; false, mute is off"}],"prog_lang":"*"},"functioncall":{"lua":"boolean mute_state = reaper.CSurf_OnMuteChangeEx(MediaTrack trackid, integer mute, boolean allowgang)","eel":"bool CSurf_OnMuteChangeEx(MediaTrack trackid, int mute, bool allowgang)","python":"Boolean retval = RPR_CSurf_OnMuteChangeEx(MediaTrack trackid, Int mute, Boolean allowgang)","cpp":"bool CSurf_OnMuteChangeEx(MediaTrack* trackid, int mute, bool allowgang)"},"title":"CSurf_OnMuteChangeEx","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets/toggles mute-state for a MediaTrack. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","pan","value","center","relative","set","change"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack trackid","description":"the MediaTrack in which to change the pan"},{"identifier":"number pan","description":"-1, full pan left; 1, full pan right; 0, pan centered"},{"identifier":"boolean relative","description":"true, add/subtract pan to the currently set pan-value"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnPanChange","return_values":[{"identifier":"pan_value","type":"number"}],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"pan","type":"number"},{"identifier":"relative","type":"boolean"}]},"eel":{"method_name":"CSurf_OnPanChange","return_values":["double"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"identifier":"pan"},{"type_name":"bool","identifier":"relative"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number pan_value","description":"the new pan-value"}],"prog_lang":"*"},"functioncall":{"lua":"number pan_value = reaper.CSurf_OnPanChange(MediaTrack trackid, number pan, boolean relative)","eel":"double CSurf_OnPanChange(MediaTrack trackid, pan, bool relative)","python":"Float retval = RPR_CSurf_OnPanChange(MediaTrack trackid, Float pan, Boolean relative)","cpp":"double CSurf_OnPanChange(MediaTrack* trackid, double pan, bool relative)"},"title":"CSurf_OnPanChange","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Changes the pan-value of a track.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","pan","value","center","relative","set","change","allowgang"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaTrack trackid","description":"the MediaTrack in which to change the pan"},{"identifier":"number pan","description":"-1, full pan left; 1, full pan right; 0, pan centered"},{"identifier":"boolean relative","description":"true, add/subtract pan to the currently set pan-value"},{"identifier":"boolean allowgang","description":"true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnPanChangeEx","return_values":[{"identifier":"pan_value","type":"number"}],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"pan","type":"number"},{"identifier":"relative","type":"boolean"},{"identifier":"allowGang","type":"boolean"}]},"eel":{"method_name":"CSurf_OnPanChangeEx","return_values":["double"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"identifier":"pan"},{"type_name":"bool","identifier":"relative"},{"type_name":"bool","identifier":"allowGang"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number pan_value","description":"the new pan-value"}],"prog_lang":"*"},"functioncall":{"lua":"number pan_value = reaper.CSurf_OnPanChangeEx(MediaTrack trackid, number pan, boolean relative, boolean allowGang)","eel":"double CSurf_OnPanChangeEx(MediaTrack trackid, pan, bool relative, bool allowGang)","python":"Float retval = RPR_CSurf_OnPanChangeEx(MediaTrack trackid, Float pan, Boolean relative, Boolean allowGang)","cpp":"double CSurf_OnPanChangeEx(MediaTrack* trackid, double pan, bool relative, bool allowGang)"},"title":"CSurf_OnPanChangeEx","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Changes the pan-value of a track. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","toggle","play","rec","pause"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.CSurf_OnPause","return_values":[],"parameters":[]},"eel":{"return_values":["CSurf_OnPause"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_OnPause()","eel":"CSurf_OnPause()","python":"RPR_CSurf_OnPause()","cpp":"void CSurf_OnPause()"},"title":"CSurf_OnPause","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Toggles between pause and play or when recording has started between pause and rec. Unlike CSurf_OnPlay it toggles pause first, then plays.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","toggle","play","rec","pause"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.CSurf_OnPlay","return_values":[],"parameters":[]},"eel":{"return_values":["CSurf_OnPlay"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_OnPlay()","eel":"CSurf_OnPlay()","python":"RPR_CSurf_OnPlay()","cpp":"void CSurf_OnPlay()"},"title":"CSurf_OnPlay","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Toggles between play and pause or, when recording, rec and pause. Unlike CSurf_OnPause it toggles play first, then pauses.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","playback","rate","playrate"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number playrate","description":"the playbackrate of the current project. 0.25 to 4.00"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnPlayRateChange","return_values":[],"parameters":[{"identifier":"playrate","type":"number"}]},"eel":{"return_values":["CSurf_OnPlayRateChange"],"parameters":[{"identifier":"playrate"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_OnPlayRateChange(number playrate)","eel":"CSurf_OnPlayRateChange(playrate)","python":"RPR_CSurf_OnPlayRateChange(Float playrate)","cpp":"void CSurf_OnPlayRateChange(double playrate)"},"title":"CSurf_OnPlayRateChange","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets the playbackrate of the current project. Can be between 0.25x to 4x.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","arm","state","set"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack trackid","description":"the MediaTrack in which to set the armed-state"},{"identifier":"integer recarm","description":"the armstate; \n   0, set to unarmed\n   1 and higher, set to armed\n  -1 and lower, toggle recarm"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnRecArmChange","return_values":[{"identifier":"arm_state","type":"boolean"}],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"recarm","type":"integer"}]},"eel":{"method_name":"CSurf_OnRecArmChange","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"type_name":"int","identifier":"recarm"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean arm_state","description":"true, if set to armed; false, if not"}],"prog_lang":"*"},"functioncall":{"lua":"boolean arm_state = reaper.CSurf_OnRecArmChange(MediaTrack trackid, integer recarm)","eel":"bool CSurf_OnRecArmChange(MediaTrack trackid, int recarm)","python":"Boolean retval = RPR_CSurf_OnRecArmChange(MediaTrack trackid, Int recarm)","cpp":"bool CSurf_OnRecArmChange(MediaTrack* trackid, int recarm)"},"title":"CSurf_OnRecArmChange","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets a MediaTrack's armed state.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","arm","state","set","allowgang"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack trackid","description":"the MediaTrack in which to set the armed-state"},{"identifier":"integer recarm","description":"the armstate; \n   0, set to unarmed\n   1 and higher, set to armed\n  -1 and lower, toggle recarm"},{"identifier":"boolean allowgang","description":"true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnRecArmChangeEx","return_values":[{"identifier":"arm_state","type":"boolean"}],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"recarm","type":"integer"},{"identifier":"allowgang","type":"boolean"}]},"eel":{"method_name":"CSurf_OnRecArmChangeEx","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"type_name":"int","identifier":"recarm"},{"type_name":"bool","identifier":"allowgang"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean arm_state","description":"true, if set to armed; false, if not"}],"prog_lang":"*"},"functioncall":{"lua":"boolean arm_state = reaper.CSurf_OnRecArmChangeEx(MediaTrack trackid, integer recarm, boolean allowgang)","eel":"bool CSurf_OnRecArmChangeEx(MediaTrack trackid, int recarm, bool allowgang)","python":"Boolean retval = RPR_CSurf_OnRecArmChangeEx(MediaTrack trackid, Int recarm, Boolean allowgang)","cpp":"bool CSurf_OnRecArmChangeEx(MediaTrack* trackid, int recarm, bool allowgang)"},"title":"CSurf_OnRecArmChangeEx","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets a MediaTrack's armed state. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","recording","toggle","on","off"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.CSurf_OnRecord","return_values":[],"parameters":[]},"eel":{"return_values":["CSurf_OnRecord"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_OnRecord()","eel":"CSurf_OnRecord()","python":"RPR_CSurf_OnRecord()","cpp":"void CSurf_OnRecord()"},"title":"CSurf_OnRecord","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Toggles recording on and off. Starts recording from edit-cursor-position.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","routing","receive","pan","set","alter","relative"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaTrack trackid","description":"the MediaTrack-object whose receive-pan you want to change"},{"identifier":"integer recv_index","description":"the receive to be changed. 0 for the first receive, 1 for the second, etc"},{"identifier":"number pan","description":"the new pan value; -1, full left; 1, full right; 0, center"},{"identifier":"boolean relative","description":"false, set pan to new value; true, alter pan by new value"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnRecvPanChange","return_values":[{"identifier":"new_recv_pan_val","type":"number"}],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"recv_index","type":"integer"},{"identifier":"pan","type":"number"},{"identifier":"relative","type":"boolean"}]},"eel":{"method_name":"CSurf_OnRecvPanChange","return_values":["double"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"type_name":"int","identifier":"recv_index"},{"identifier":"pan"},{"type_name":"bool","identifier":"relative"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number new_recv_pan_val","description":"the new receive-pan-value"}],"prog_lang":"*"},"functioncall":{"lua":"number new_recv_pan_val = reaper.CSurf_OnRecvPanChange(MediaTrack trackid, integer recv_index, number pan, boolean relative)","eel":"double CSurf_OnRecvPanChange(MediaTrack trackid, int recv_index, pan, bool relative)","python":"Float retval = RPR_CSurf_OnRecvPanChange(MediaTrack trackid, Int recv_index, Float pan, Boolean relative)","cpp":"double CSurf_OnRecvPanChange(MediaTrack* trackid, int recv_index, double pan, bool relative)"},"title":"CSurf_OnRecvPanChange","chapters":["Track Management","Routing"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets/alters a pan-value for a received-track. Will also change pan in the accompanying send-track!","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","routing","receive","volume","set","alter","relative"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaTrack trackid","description":"the MediaTrack-object whose receive-pan you want to change"},{"identifier":"integer recv_index","description":"the receive to be changed. 0 for the first receive, 1 for the second, etc"},{"identifier":"number volume","description":"the volume-level of the receive; 0, -inf; 1, 0dB; 4, ca +12 db; higher values are possible, though fader will not reflect them. but higher values will still be applied."},{"identifier":"boolean relative","description":"false, set volume to new value; true, alter volume by new value"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnRecvVolumeChange","return_values":[{"identifier":"new_recv_pan_val","type":"number"}],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"recv_index","type":"integer"},{"identifier":"volume","type":"number"},{"identifier":"relative","type":"boolean"}]},"eel":{"method_name":"CSurf_OnRecvVolumeChange","return_values":["double"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"type_name":"int","identifier":"recv_index"},{"identifier":"volume"},{"type_name":"bool","identifier":"relative"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number new_recv_pan_val","description":"the new receive-volume-value"}],"prog_lang":"*"},"functioncall":{"lua":"number new_recv_pan_val = reaper.CSurf_OnRecvVolumeChange(MediaTrack trackid, integer recv_index, number volume, boolean relative)","eel":"double CSurf_OnRecvVolumeChange(MediaTrack trackid, int recv_index, volume, bool relative)","python":"Float retval = RPR_CSurf_OnRecvVolumeChange(MediaTrack trackid, Int recv_index, Float volume, Boolean relative)","cpp":"double CSurf_OnRecvVolumeChange(MediaTrack* trackid, int recv_index, double volume, bool relative)"},"title":"CSurf_OnRecvVolumeChange","chapters":["Track Management","Routing"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sets/alters the volume-value of a received track. Will also change volume in the accompanying send-track!\n\nNote: You can't(!) use SLIDER2DB or DB2SLIDER for getting the volume-values, you want to set here! Use mkvolstr instead.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","cursor","backward","jump","seekplay"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer seekplay","description":"how to move the editcursor backward\n  0, move cursor backward in small steps. Stepsize depends on horizontal zoomfactor.\n  1, move cursor backward, in half-second steps when stopped; when playing, playing will restart at playcursor"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnRew","return_values":[],"parameters":[{"identifier":"seekplay","type":"integer"}]},"eel":{"return_values":["CSurf_OnRew"],"parameters":[{"type_name":"int","identifier":"seekplay"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_OnRew(integer seekplay)","eel":"CSurf_OnRew(int seekplay)","python":"RPR_CSurf_OnRew(Int seekplay)","cpp":"void CSurf_OnRew(int seekplay)"},"title":"CSurf_OnRew","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Moves editcursor backward, and optionally with seekplay.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","move","editcursor","seekplay","forward","backward"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer seekplay","description":"turns seekplay on or off; has no effect during recording\n  0, when stopped, jump for/backwards in small steps(stepsize depending on zoom-factor)\n  1, when stopped, jump for/backwards in 0.5 seconds steps. When play/rec"},{"identifier":"integer dir","description":"the direction; -1, move backwards; 0, keep the position; 1, move forwards"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnRewFwd","return_values":[],"parameters":[{"identifier":"seekplay","type":"integer"},{"identifier":"dir","type":"integer"}]},"eel":{"return_values":["CSurf_OnRewFwd"],"parameters":[{"type_name":"int","identifier":"seekplay"},{"type_name":"int","identifier":"dir"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_OnRewFwd(integer seekplay, integer dir)","eel":"CSurf_OnRewFwd(int seekplay, int dir)","python":"RPR_CSurf_OnRewFwd(Int seekplay, Int dir)","cpp":"void CSurf_OnRewFwd(int seekplay, int dir)"},"title":"CSurf_OnRewFwd","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Will move editcursor for or backward, depending on parameter dir.\nDuring play and whith seekplay set, the movement of the editcursor depends on the playcursor-position at the time of calling CSurf_OnRewFwd.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["arrangeviewmanagement","scroll","horizontal","vertical","relative"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer xdir","description":"scroll horizontally(timeline) through the project. \nNegative values toward the beginning, positive toward the end. The higher the values, the farther the movement."},{"identifier":"integer ydir","description":"scroll vertically(tracks) through the project. \nNegative values toward the top, positive toward the bottom. The higher the values, the farther the movement."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnScroll","return_values":[],"parameters":[{"identifier":"xdir","type":"integer"},{"identifier":"ydir","type":"integer"}]},"eel":{"return_values":["CSurf_OnScroll"],"parameters":[{"type_name":"int","identifier":"xdir"},{"type_name":"int","identifier":"ydir"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_OnScroll(integer xdir, integer ydir)","eel":"CSurf_OnScroll(int xdir, int ydir)","python":"RPR_CSurf_OnScroll(Int xdir, Int ydir)","cpp":"void CSurf_OnScroll(int xdir, int ydir)"},"title":"CSurf_OnScroll","chapters":["User Interface","Arrangeview Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Scroll arrangeview relative to it's current view-settings.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","select","deselect","unselect","set"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack trackid","description":"the MediaTrack to be selected/unselected"},{"identifier":"integer selected","description":"select-state; 0, track is selected; 1, track is unselected"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnSelectedChange","return_values":[{"identifier":"tr_select_state","type":"boolean"}],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"selected","type":"integer"}]},"eel":{"method_name":"CSurf_OnSelectedChange","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"type_name":"int","identifier":"selected"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean tr_select_state","description":"true, track is selected; false, track is unselected"}],"prog_lang":"*"},"functioncall":{"lua":"boolean tr_select_state = reaper.CSurf_OnSelectedChange(MediaTrack trackid, integer selected)","eel":"bool CSurf_OnSelectedChange(MediaTrack trackid, int selected)","python":"Boolean retval = RPR_CSurf_OnSelectedChange(MediaTrack trackid, Int selected)","cpp":"bool CSurf_OnSelectedChange(MediaTrack* trackid, int selected)"},"title":"CSurf_OnSelectedChange","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets a track selected or not.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","receive","pan","routing","set","alter","relative"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaTrack trackid","description":"the MediaTrackObject, whose pan-value you want to change"},{"identifier":"integer send_index","description":"the index-number of the send-track. 0 for the first, 2 for the second, etc"},{"identifier":"number pan","description":"the pan value; -1 for hard left; 1 for hard right; 0 for center"},{"identifier":"boolean relative","description":"false, set pan to new value; true, alter pan by new value"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnSendPanChange","return_values":[{"identifier":"pan_value","type":"number"}],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"send_index","type":"integer"},{"identifier":"pan","type":"number"},{"identifier":"relative","type":"boolean"}]},"eel":{"method_name":"CSurf_OnSendPanChange","return_values":["double"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"type_name":"int","identifier":"send_index"},{"identifier":"pan"},{"type_name":"bool","identifier":"relative"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number pan_value","description":"the new pan-value"}],"prog_lang":"*"},"functioncall":{"lua":"number pan_value = reaper.CSurf_OnSendPanChange(MediaTrack trackid, integer send_index, number pan, boolean relative)","eel":"double CSurf_OnSendPanChange(MediaTrack trackid, int send_index, pan, bool relative)","python":"Float retval = RPR_CSurf_OnSendPanChange(MediaTrack trackid, Int send_index, Float pan, Boolean relative)","cpp":"double CSurf_OnSendPanChange(MediaTrack* trackid, int send_index, double pan, bool relative)"},"title":"CSurf_OnSendPanChange","chapters":["Track Management","Routing"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets/alters the pan-volume of a send-track. Will also change the volume of the accompanying receive-track!","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","routing","receive","volume","set","alter","relative"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaTrack trackid","description":"the MediaTrackObject, whose volume-value you want to change"},{"identifier":"integer send_index","description":"the index-number of the send-track. 0 for the first, 2 for the second, etc"},{"identifier":"number volume","description":"the volume-level of the receive; 0, -inf; 1, 0dB; 4, ca +12 db; \nhigher values are possible, though fader will not reflect them. but higher values will still be applied."},{"identifier":"boolean relative","description":"false, set volume to new value; true, alter volume by new value"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnSendVolumeChange","return_values":[{"identifier":"volume_value","type":"number"}],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"send_index","type":"integer"},{"identifier":"volume","type":"number"},{"identifier":"relative","type":"boolean"}]},"eel":{"method_name":"CSurf_OnSendVolumeChange","return_values":["double"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"type_name":"int","identifier":"send_index"},{"identifier":"volume"},{"type_name":"bool","identifier":"relative"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number volume_value","description":"the new volume-value"}],"prog_lang":"*"},"functioncall":{"lua":"number volume_value = reaper.CSurf_OnSendVolumeChange(MediaTrack trackid, integer send_index, number volume, boolean relative)","eel":"double CSurf_OnSendVolumeChange(MediaTrack trackid, int send_index, volume, bool relative)","python":"Float retval = RPR_CSurf_OnSendVolumeChange(MediaTrack trackid, Int send_index, Float volume, Boolean relative)","cpp":"double CSurf_OnSendVolumeChange(MediaTrack* trackid, int send_index, double volume, bool relative)"},"title":"CSurf_OnSendVolumeChange","chapters":["Track Management","Routing"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets/alters the volume-value of a send-track. Will also alter the volume of the accompanying receive-track.\n\nNote: You can't(!) use SLIDER2DB or DB2SLIDER for getting the volume-values, you want to set here!","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","solo","toggle","set"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack trackid","description":"the MediaTrack in which to toggle solo state"},{"identifier":"integer solo","description":"solo state. \n   0, solo off\n   1 and higher, solo on\n  -1 and lower, toggle solo on/off"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnSoloChange","return_values":[{"identifier":"solo_state","type":"boolean"}],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"solo","type":"integer"}]},"eel":{"method_name":"CSurf_OnSoloChange","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"type_name":"int","identifier":"solo"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean solo_state","description":"true, solo has been turned on; false, solo has been turned off"}],"prog_lang":"*"},"functioncall":{"lua":"boolean solo_state = reaper.CSurf_OnSoloChange(MediaTrack trackid, integer solo)","eel":"bool CSurf_OnSoloChange(MediaTrack trackid, int solo)","python":"Boolean retval = RPR_CSurf_OnSoloChange(MediaTrack trackid, Int solo)","cpp":"bool CSurf_OnSoloChange(MediaTrack* trackid, int solo)"},"title":"CSurf_OnSoloChange","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets/toggles solo state of a track.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","solo","toggle","set","allowgang"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack trackid","description":"the MediaTrack in which to toggle solo state"},{"identifier":"integer solo","description":"solo state. \n  0, solo off\n  1 and higher, solo on\n -1 and lower, toggle solo on/off"},{"identifier":"boolean allowgang","description":"true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnSoloChangeEx","return_values":[{"identifier":"solo_state","type":"boolean"}],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"solo","type":"integer"},{"identifier":"allowgang","type":"boolean"}]},"eel":{"method_name":"CSurf_OnSoloChangeEx","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"type_name":"int","identifier":"solo"},{"type_name":"bool","identifier":"allowgang"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean solo_state","description":"true, solo has been turned on; false, solo has been turned off"}],"prog_lang":"*"},"functioncall":{"lua":"boolean solo_state = reaper.CSurf_OnSoloChangeEx(MediaTrack trackid, integer solo, boolean allowgang)","eel":"bool CSurf_OnSoloChangeEx(MediaTrack trackid, int solo, bool allowgang)","python":"Boolean retval = RPR_CSurf_OnSoloChangeEx(MediaTrack trackid, Int solo, Boolean allowgang)","cpp":"bool CSurf_OnSoloChangeEx(MediaTrack* trackid, int solo, bool allowgang)"},"title":"CSurf_OnSoloChangeEx","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets/toggles solo state of a track. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","stop","recording","play","pause"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.CSurf_OnStop","return_values":[],"parameters":[]},"eel":{"return_values":["CSurf_OnStop"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_OnStop()","eel":"CSurf_OnStop()","python":"RPR_CSurf_OnStop()","cpp":"void CSurf_OnStop()"},"title":"CSurf_OnStop","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Stops playing/recording in current project.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["projectmanagement","tempo","bpm","beats per minute"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number bpm","description":"the beats per minute value; 1 to 1000"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnTempoChange","return_values":[],"parameters":[{"identifier":"bpm","type":"number"}]},"eel":{"return_values":["CSurf_OnTempoChange"],"parameters":[{"identifier":"bpm"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_OnTempoChange(number bpm)","eel":"CSurf_OnTempoChange(bpm)","python":"RPR_CSurf_OnTempoChange(Float bpm)","cpp":"void CSurf_OnTempoChange(double bpm)"},"title":"CSurf_OnTempoChange","chapters":["Project Management","Project States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets the tempo of the project in beats per minute.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack trackid","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnTrackSelection","return_values":[],"parameters":[{"identifier":"trackid","type":"MediaTrack"}]},"eel":{"return_values":["CSurf_OnTrackSelection"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_OnTrackSelection(MediaTrack trackid)","eel":"CSurf_OnTrackSelection(MediaTrack trackid)","python":"RPR_CSurf_OnTrackSelection(MediaTrack trackid)","cpp":"void CSurf_OnTrackSelection(MediaTrack* trackid)"},"title":"CSurf_OnTrackSelection","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","volume","set","alter","relative","value"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack trackid","description":"the MediaTrack, whose volume you want to change."},{"identifier":"number volume","description":"volume-value; 3.1622776601684e-008(minimum) to 3.981071705535(maximum). Higher values are possible to set but are out of fader-range."},{"identifier":"boolean relative","description":"false, set volume to new value; true, alter volume by new value"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnVolumeChange","return_values":[{"identifier":"volume_value","type":"number"}],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"volume","type":"number"},{"identifier":"relative","type":"boolean"}]},"eel":{"method_name":"CSurf_OnVolumeChange","return_values":["double"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"identifier":"volume"},{"type_name":"bool","identifier":"relative"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number volume_value","description":"the new volume-value"}],"prog_lang":"*"},"functioncall":{"lua":"number volume_value = reaper.CSurf_OnVolumeChange(MediaTrack trackid, number volume, boolean relative)","eel":"double CSurf_OnVolumeChange(MediaTrack trackid, volume, bool relative)","python":"Float retval = RPR_CSurf_OnVolumeChange(MediaTrack trackid, Float volume, Boolean relative)","cpp":"double CSurf_OnVolumeChange(MediaTrack* trackid, double volume, bool relative)"},"title":"CSurf_OnVolumeChange","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sets or alters volume of a track to a new value.\n\nUse DB2SLIDER to convert dB-value to fitting numbers of the volume-parameter.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","volume","set","alter","relative","value","allowgang"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaTrack trackid","description":"the MediaTrack, whose volume you want to change."},{"identifier":"number volume","description":"volume-value; 3.1622776601684e-008(minimum) to 3.981071705535(maximum). Higher values are possible to set but are out of fader-range."},{"identifier":"boolean relative","description":"false, set volume to new value; true, alter volume by new value"},{"identifier":"boolean allowgang","description":"true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnVolumeChangeEx","return_values":[{"identifier":"volume_value","type":"number"}],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"volume","type":"number"},{"identifier":"relative","type":"boolean"},{"identifier":"allowGang","type":"boolean"}]},"eel":{"method_name":"CSurf_OnVolumeChangeEx","return_values":["double"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"identifier":"volume"},{"type_name":"bool","identifier":"relative"},{"type_name":"bool","identifier":"allowGang"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number volume_value","description":"the new volume-value"}],"prog_lang":"*"},"functioncall":{"lua":"number volume_value = reaper.CSurf_OnVolumeChangeEx(MediaTrack trackid, number volume, boolean relative, boolean allowGang)","eel":"double CSurf_OnVolumeChangeEx(MediaTrack trackid, volume, bool relative, bool allowGang)","python":"Float retval = RPR_CSurf_OnVolumeChangeEx(MediaTrack trackid, Float volume, Boolean relative, Boolean allowGang)","cpp":"double CSurf_OnVolumeChangeEx(MediaTrack* trackid, double volume, bool relative, bool allowGang)"},"title":"CSurf_OnVolumeChangeEx","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sets or alters volume of a track to a new value. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.\n\nUse DB2SLIDER to convert dB-value to fitting numbers of the volume-parameter.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","width","set","alter"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack trackid","description":"the MediaItem, whose width you want to change"},{"identifier":"number width","description":"the width-value; -1 to 1; 0 is no width/mono"},{"identifier":"boolean relative","description":"false, set width to the new width-value; true, alter width by the new width-value"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnWidthChange","return_values":[{"identifier":"width_value","type":"number"}],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"width","type":"number"},{"identifier":"relative","type":"boolean"}]},"eel":{"method_name":"CSurf_OnWidthChange","return_values":["double"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"identifier":"width"},{"type_name":"bool","identifier":"relative"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number width_value","description":"the new width-value"}],"prog_lang":"*"},"functioncall":{"lua":"number width_value = reaper.CSurf_OnWidthChange(MediaTrack trackid, number width, boolean relative)","eel":"double CSurf_OnWidthChange(MediaTrack trackid, width, bool relative)","python":"Float retval = RPR_CSurf_OnWidthChange(MediaTrack trackid, Float width, Boolean relative)","cpp":"double CSurf_OnWidthChange(MediaTrack* trackid, double width, bool relative)"},"title":"CSurf_OnWidthChange","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets/alters the width-value of a track.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","width","set","alter","allowgang"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaTrack trackid","description":"the MediaItem, whose width you want to change"},{"identifier":"number width","description":"the width-value; -1 to 1; 0 is no width/mono"},{"identifier":"boolean relative","description":"false, set width to the new width-value; true, alter width by the new width-value"},{"identifier":"boolean allowgang","description":"true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnWidthChangeEx","return_values":[{"identifier":"width_value","type":"number"}],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"width","type":"number"},{"identifier":"relative","type":"boolean"},{"identifier":"allowGang","type":"boolean"}]},"eel":{"method_name":"CSurf_OnWidthChangeEx","return_values":["double"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"identifier":"width"},{"type_name":"bool","identifier":"relative"},{"type_name":"bool","identifier":"allowGang"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number width_value","description":"the new width-value"}],"prog_lang":"*"},"functioncall":{"lua":"number width_value = reaper.CSurf_OnWidthChangeEx(MediaTrack trackid, number width, boolean relative, boolean allowGang)","eel":"double CSurf_OnWidthChangeEx(MediaTrack trackid, width, bool relative, bool allowGang)","python":"Float retval = RPR_CSurf_OnWidthChangeEx(MediaTrack trackid, Float width, Boolean relative, Boolean allowGang)","cpp":"double CSurf_OnWidthChangeEx(MediaTrack* trackid, double width, bool relative, bool allowGang)"},"title":"CSurf_OnWidthChangeEx","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets/alters the width-value of a track. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["arrangeviewmanagement","zoom","vertical","horizontal"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer xdir","description":"horizontal zoom; 0, no change; negative values, zoom out; positive values, zoom in; the higher the values, the bigger the zoom-stepsize."},{"identifier":"integer ydir","description":"vertical zoom; 0, no change; negative values, zoom out; positive values, zoom in; the higher the values, the bigger the zoom-stepsize."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_OnZoom","return_values":[],"parameters":[{"identifier":"xdir","type":"integer"},{"identifier":"ydir","type":"integer"}]},"eel":{"return_values":["CSurf_OnZoom"],"parameters":[{"type_name":"int","identifier":"xdir"},{"type_name":"int","identifier":"ydir"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_OnZoom(integer xdir, integer ydir)","eel":"CSurf_OnZoom(int xdir, int ydir)","python":"RPR_CSurf_OnZoom(Int xdir, Int ydir)","cpp":"void CSurf_OnZoom(int xdir, int ydir)"},"title":"CSurf_OnZoom","chapters":["User Interface","Arrangeview Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Changes horizontal/vertical zoom.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","reset","vol","pan","state","cache"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.CSurf_ResetAllCachedVolPanStates","return_values":[],"parameters":[]},"eel":{"return_values":["CSurf_ResetAllCachedVolPanStates"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_ResetAllCachedVolPanStates()","eel":"CSurf_ResetAllCachedVolPanStates()","python":"RPR_CSurf_ResetAllCachedVolPanStates()","cpp":"void CSurf_ResetAllCachedVolPanStates()"},"title":"CSurf_ResetAllCachedVolPanStates","chapters":["Track Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Resets all cached vol-pan-states.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","playcursor","editcursor","move"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number amt","description":"how far to change position of the editcursor in seconds. Positive values toward the end, negative toward the beginning of the project."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_ScrubAmt","return_values":[],"parameters":[{"identifier":"amt","type":"number"}]},"eel":{"return_values":["CSurf_ScrubAmt"],"parameters":[{"identifier":"amt"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_ScrubAmt(number amt)","eel":"CSurf_ScrubAmt(amt)","python":"RPR_CSurf_ScrubAmt(Float amt)","cpp":"void CSurf_ScrubAmt(double amt)"},"title":"CSurf_ScrubAmt","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Changes position of the editcursor by amt-value in seconds. When playing, the playposition changes to the editcursor-position.\nDuring recording, it changes only the position of the editcursor.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer mode","description":""},{"identifier":"IReaperControlSurface ignoresurf","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_SetAutoMode","return_values":[],"parameters":[{"identifier":"mode","type":"integer"},{"identifier":"ignoresurf","type":"IReaperControlSurface"}]},"eel":{"return_values":["CSurf_SetAutoMode"],"parameters":[{"type_name":"int","identifier":"mode"},{"type_name":"IReaperControlSurface","identifier":"ignoresurf"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_SetAutoMode(integer mode, IReaperControlSurface ignoresurf)","eel":"CSurf_SetAutoMode(int mode, IReaperControlSurface ignoresurf)","python":"RPR_CSurf_SetAutoMode(Int mode, IReaperControlSurface ignoresurf)","cpp":"void CSurf_SetAutoMode(int mode, IReaperControlSurface* ignoresurf)"},"title":"CSurf_SetAutoMode","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"boolean play","description":""},{"identifier":"boolean pause","description":""},{"identifier":"boolean rec","description":""},{"identifier":"IReaperControlSurface ignoresurf","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_SetPlayState","return_values":[],"parameters":[{"identifier":"play","type":"boolean"},{"identifier":"pause","type":"boolean"},{"identifier":"rec","type":"boolean"},{"identifier":"ignoresurf","type":"IReaperControlSurface"}]},"eel":{"return_values":["CSurf_SetPlayState"],"parameters":[{"type_name":"bool","identifier":"play"},{"type_name":"bool","identifier":"pause"},{"type_name":"bool","identifier":"rec"},{"type_name":"IReaperControlSurface","identifier":"ignoresurf"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_SetPlayState(boolean play, boolean pause, boolean rec, IReaperControlSurface ignoresurf)","eel":"CSurf_SetPlayState(bool play, bool pause, bool rec, IReaperControlSurface ignoresurf)","python":"RPR_CSurf_SetPlayState(Boolean play, Boolean pause, Boolean rec, IReaperControlSurface ignoresurf)","cpp":"void CSurf_SetPlayState(bool play, bool pause, bool rec, IReaperControlSurface* ignoresurf)"},"title":"CSurf_SetPlayState","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean rep","description":""},{"identifier":"IReaperControlSurface ignoresurf","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_SetRepeatState","return_values":[],"parameters":[{"identifier":"rep","type":"boolean"},{"identifier":"ignoresurf","type":"IReaperControlSurface"}]},"eel":{"return_values":["CSurf_SetRepeatState"],"parameters":[{"type_name":"bool","identifier":"rep"},{"type_name":"IReaperControlSurface","identifier":"ignoresurf"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_SetRepeatState(boolean rep, IReaperControlSurface ignoresurf)","eel":"CSurf_SetRepeatState(bool rep, IReaperControlSurface ignoresurf)","python":"RPR_CSurf_SetRepeatState(Boolean rep, IReaperControlSurface ignoresurf)","cpp":"void CSurf_SetRepeatState(bool rep, IReaperControlSurface* ignoresurf)"},"title":"CSurf_SetRepeatState","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack trackid","description":""},{"identifier":"integer mute","description":""},{"identifier":"IReaperControlSurface ignoresurf","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_SetSurfaceMute","return_values":[],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"mute","type":"boolean"},{"identifier":"ignoresurf","type":"IReaperControlSurface"}]},"eel":{"return_values":["CSurf_SetSurfaceMute"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"type_name":"bool","identifier":"mute"},{"type_name":"IReaperControlSurface","identifier":"ignoresurf"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_SetSurfaceMute(MediaTrack trackid, boolean mute, IReaperControlSurface ignoresurf)","eel":"CSurf_SetSurfaceMute(MediaTrack trackid, bool mute, IReaperControlSurface ignoresurf)","python":"RPR_CSurf_SetSurfaceMute(MediaTrack trackid, Boolean mute, IReaperControlSurface ignoresurf)","cpp":"void CSurf_SetSurfaceMute(MediaTrack* trackid, bool mute, IReaperControlSurface* ignoresurf)"},"title":"CSurf_SetSurfaceMute","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack trackid","description":""},{"identifier":"number pan","description":""},{"identifier":"IReaperControlSurface ignoresurf","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_SetSurfacePan","return_values":[],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"pan","type":"number"},{"identifier":"ignoresurf","type":"IReaperControlSurface"}]},"eel":{"return_values":["CSurf_SetSurfacePan"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"identifier":"pan"},{"type_name":"IReaperControlSurface","identifier":"ignoresurf"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_SetSurfacePan(MediaTrack trackid, number pan, IReaperControlSurface ignoresurf)","eel":"CSurf_SetSurfacePan(MediaTrack trackid, pan, IReaperControlSurface ignoresurf)","python":"RPR_CSurf_SetSurfacePan(MediaTrack trackid, Float pan, IReaperControlSurface ignoresurf)","cpp":"void CSurf_SetSurfacePan(MediaTrack* trackid, double pan, IReaperControlSurface* ignoresurf)"},"title":"CSurf_SetSurfacePan","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack trackid","description":""},{"identifier":"boolean recarm","description":""},{"identifier":"IReaperControlSurface ignoresurf","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_SetSurfaceRecArm","return_values":[],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"recarm","type":"boolean"},{"identifier":"ignoresurf","type":"IReaperControlSurface"}]},"eel":{"return_values":["CSurf_SetSurfaceRecArm"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"type_name":"bool","identifier":"recarm"},{"type_name":"IReaperControlSurface","identifier":"ignoresurf"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_SetSurfaceRecArm(MediaTrack trackid, boolean recarm, IReaperControlSurface ignoresurf)","eel":"CSurf_SetSurfaceRecArm(MediaTrack trackid, bool recarm, IReaperControlSurface ignoresurf)","python":"RPR_CSurf_SetSurfaceRecArm(MediaTrack trackid, Boolean recarm, IReaperControlSurface ignoresurf)","cpp":"void CSurf_SetSurfaceRecArm(MediaTrack* trackid, bool recarm, IReaperControlSurface* ignoresurf)"},"title":"CSurf_SetSurfaceRecArm","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack trackid","description":""},{"identifier":"boolean selected","description":""},{"identifier":"IReaperControlSurface ignoresurf","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_SetSurfaceSelected","return_values":[],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"selected","type":"boolean"},{"identifier":"ignoresurf","type":"IReaperControlSurface"}]},"eel":{"return_values":["CSurf_SetSurfaceSelected"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"type_name":"bool","identifier":"selected"},{"type_name":"IReaperControlSurface","identifier":"ignoresurf"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_SetSurfaceSelected(MediaTrack trackid, boolean selected, IReaperControlSurface ignoresurf)","eel":"CSurf_SetSurfaceSelected(MediaTrack trackid, bool selected, IReaperControlSurface ignoresurf)","python":"RPR_CSurf_SetSurfaceSelected(MediaTrack trackid, Boolean selected, IReaperControlSurface ignoresurf)","cpp":"void CSurf_SetSurfaceSelected(MediaTrack* trackid, bool selected, IReaperControlSurface* ignoresurf)"},"title":"CSurf_SetSurfaceSelected","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack trackid","description":""},{"identifier":"boolean solo","description":""},{"identifier":"IReaperControlSurface ignoresurf","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_SetSurfaceSolo","return_values":[],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"solo","type":"boolean"},{"identifier":"ignoresurf","type":"IReaperControlSurface"}]},"eel":{"return_values":["CSurf_SetSurfaceSolo"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"type_name":"bool","identifier":"solo"},{"type_name":"IReaperControlSurface","identifier":"ignoresurf"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_SetSurfaceSolo(MediaTrack trackid, boolean solo, IReaperControlSurface ignoresurf)","eel":"CSurf_SetSurfaceSolo(MediaTrack trackid, bool solo, IReaperControlSurface ignoresurf)","python":"RPR_CSurf_SetSurfaceSolo(MediaTrack trackid, Boolean solo, IReaperControlSurface ignoresurf)","cpp":"void CSurf_SetSurfaceSolo(MediaTrack* trackid, bool solo, IReaperControlSurface* ignoresurf)"},"title":"CSurf_SetSurfaceSolo","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack trackid","description":""},{"identifier":"number volume","description":""},{"identifier":"IReaperControlSurface ignoresurf","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_SetSurfaceVolume","return_values":[],"parameters":[{"identifier":"trackid","type":"MediaTrack"},{"identifier":"volume","type":"number"},{"identifier":"ignoresurf","type":"IReaperControlSurface"}]},"eel":{"return_values":["CSurf_SetSurfaceVolume"],"parameters":[{"type_name":"MediaTrack","identifier":"trackid"},{"identifier":"volume"},{"type_name":"IReaperControlSurface","identifier":"ignoresurf"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_SetSurfaceVolume(MediaTrack trackid, number volume, IReaperControlSurface ignoresurf)","eel":"CSurf_SetSurfaceVolume(MediaTrack trackid, volume, IReaperControlSurface ignoresurf)","python":"RPR_CSurf_SetSurfaceVolume(MediaTrack trackid, Float volume, IReaperControlSurface ignoresurf)","cpp":"void CSurf_SetSurfaceVolume(MediaTrack* trackid, double volume, IReaperControlSurface* ignoresurf)"},"title":"CSurf_SetSurfaceVolume","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.CSurf_SetTrackListChange","return_values":[],"parameters":[]},"eel":{"return_values":["CSurf_SetTrackListChange"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CSurf_SetTrackListChange()","eel":"CSurf_SetTrackListChange()","python":"RPR_CSurf_SetTrackListChange()","cpp":"void CSurf_SetTrackListChange()"},"title":"CSurf_SetTrackListChange","chapters":["User Interface","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","id","tracknumber","mediatrack","get"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer idx","description":"the tracknumber of the track you want to have; 0 for track 1, 1 for track 2, etc."},{"identifier":"boolean mcpView","description":"true, count only tracks, that are visible in MixerControlPanel"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_TrackFromID","return_values":[{"identifier":"tr","type":"MediaTrack"}],"parameters":[{"identifier":"idx","type":"integer"},{"identifier":"mcpView","type":"boolean"}]},"eel":{"method_name":"CSurf_TrackFromID","return_values":["MediaTrack"],"parameters":[{"type_name":"int","identifier":"idx"},{"type_name":"bool","identifier":"mcpView"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack tr","description":"the MediaTrack-object of the track you requested"}],"prog_lang":"*"},"functioncall":{"lua":"MediaTrack tr = reaper.CSurf_TrackFromID(integer idx, boolean mcpView)","eel":"MediaTrack CSurf_TrackFromID(int idx, bool mcpView)","python":"MediaTrack tr = RPR_CSurf_TrackFromID(Int idx, Boolean mcpView)","cpp":"MediaTrack* CSurf_TrackFromID(int idx, bool mcpView)"},"title":"CSurf_TrackFromID","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Gets a MediaTrack-object by it's number.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","id","tracknumber","mediatrack","get"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":"the MediaTrack-object, whose number you want to know"},{"identifier":"boolean mcpView","description":"true, only tracks visible in MixerControlPanel; false, all tracks visible in MixerControlPanel"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CSurf_TrackToID","return_values":[{"identifier":"tracknumber","type":"integer"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"mcpView","type":"boolean"}]},"eel":{"method_name":"CSurf_TrackToID","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"bool","identifier":"mcpView"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer tracknumber","description":"the tracknumber of the MediaTrack; when mcpView is true, invisible tracks will return -1 as number"}],"prog_lang":"*"},"functioncall":{"lua":"integer tracknumber = reaper.CSurf_TrackToID(MediaTrack track, boolean mcpView)","eel":"int CSurf_TrackToID(MediaTrack track, bool mcpView)","python":"Int retval = RPR_CSurf_TrackToID(MediaTrack track, Boolean mcpView)","cpp":"int CSurf_TrackToID(MediaTrack* track, bool mcpView)"},"title":"CSurf_TrackToID","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get the tracknumber of a MediaTrack-object.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","db","slider","converter","value"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number x","description":"the dB-value to be converted. Minimum -332db for position 0"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.DB2SLIDER","return_values":[{"identifier":"slider_value","type":"number"}],"parameters":[{"identifier":"x","type":"number"}]},"eel":{"method_name":"DB2SLIDER","return_values":["double"],"parameters":[{"identifier":"x"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number slider_value","description":"the slider-value"}],"prog_lang":"*"},"functioncall":{"lua":"number slider_value = reaper.DB2SLIDER(number x)","eel":"double DB2SLIDER(x)","python":"Float retval = RPR_DB2SLIDER(Float x)","cpp":"double DB2SLIDER(double x)"},"title":"DB2SLIDER","chapters":["Api-Helper-Functions","Value Conversion"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Converts dB-value into a slider-value. Good for converting envelope-point-values.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["shortcuts","delete"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"KbdSectionInfo section","description":"the section, in which the action is located\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"},{"identifier":"integer cmdID","description":"the action command-id of the action, whose shortcut you want to delete"},{"identifier":"integer shortcutidx","description":"the index of the shortcut"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.DeleteActionShortcut","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"section","type":"KbdSectionInfo"},{"identifier":"cmdID","type":"integer"},{"identifier":"shortcutidx","type":"integer"}]},"eel":{"method_name":"retval","return_values":["bool"],"parameters":[{"type_name":"KbdSectionInfo","identifier":"section"},{"type_name":"int","identifier":"cmdID"},{"type_name":"int","identifier":"shortcutidx"}]}},"requires":{"Reaper":"6.71"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, such shortcuts exists; false, no such shortcut"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.DeleteActionShortcut(KbdSectionInfo section, integer cmdID, integer shortcutidx)","eel":"bool retval = DeleteActionShortcut(KbdSectionInfo section, int cmdID, int shortcutidx)","python":"Boolean retval = RPR_DeleteActionShortcut(KbdSectionInfo section, Int cmdID, Int shortcutidx)","cpp":"bool retval = DeleteActionShortcut(KbdSectionInfo* section, int cmdID, int shortcutidx)"},"title":"DeleteActionShortcut","chapters":["Api-Helper-Functions","Shortcuts"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Delete the specific shortcut for the given command ID.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["envelopemanagement","envelopepoints","delete","range"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"TrackEnvelope envelope","description":"the envelope, in which the point lies, that you want to delete"},{"identifier":"integer autoitem_idx","description":"-1, the underlying envelope; \n0 to x, the 1st to x-1th automation-item\n|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations."},{"identifier":"integer ptidx","description":"the envelope-point to delete"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.DeleteEnvelopePointEx","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"envelope","type":"TrackEnvelope"},{"identifier":"autoitem_idx","type":"integer"},{"identifier":"ptidx","type":"integer"}]},"eel":{"method_name":"DeleteEnvelopePointEx","return_values":["bool"],"parameters":[{"type_name":"TrackEnvelope","identifier":"envelope"},{"type_name":"int","identifier":"autoitem_idx"},{"type_name":"int","identifier":"ptidx"}]}},"requires":{"Reaper":"5.979"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, deleting was successful; false, deleting was unsuccessful"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.DeleteEnvelopePointEx(TrackEnvelope envelope, integer autoitem_idx, integer ptidx)","eel":"bool DeleteEnvelopePointEx(TrackEnvelope envelope, int autoitem_idx, int ptidx)","python":"Boolean retval = RPR_DeleteEnvelopePointEx(TrackEnvelope envelope, Int autoitem_idx, Int ptidx)","cpp":"bool DeleteEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, int ptidx)"},"title":"DeleteEnvelopePointEx","chapters":["Envelope Management","Envelope Points"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Delete an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["envelopemanagement","envelopepoints","delete","range"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"TrackEnvelope envelope","description":"the envelope-point-object, in which to delete the envelope-points"},{"identifier":"number time_start","description":"the starttime of the deletionrange in seconds"},{"identifier":"number time_end","description":"the endtime of the deletionrange in seconds"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.DeleteEnvelopePointRange","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"envelope","type":"TrackEnvelope"},{"identifier":"time_start","type":"number"},{"identifier":"time_end","type":"number"}]},"eel":{"method_name":"DeleteEnvelopePointRange","return_values":["bool"],"parameters":[{"type_name":"TrackEnvelope","identifier":"envelope"},{"identifier":"time_start"},{"identifier":"time_end"}]}},"requires":{"Reaper":"5.979"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, if it succeeded"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.DeleteEnvelopePointRange(TrackEnvelope envelope, number time_start, number time_end)","eel":"bool DeleteEnvelopePointRange(TrackEnvelope envelope, time_start, time_end)","python":"Boolean retval = RPR_DeleteEnvelopePointRange(TrackEnvelope envelope, Float time_start, Float time_end)","cpp":"bool DeleteEnvelopePointRange(TrackEnvelope* envelope, double time_start, double time_end)"},"title":"DeleteEnvelopePointRange","chapters":["Envelope Management","Envelope Points"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Delete a range of envelope points. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["envelopemanagement","envelopepoints","delete","range","automation item"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"TrackEnvelope envelope","description":"the envelope-point-object, in which to delete the envelope-points"},{"identifier":"integer autoitem_idx","description":"the automation item to be affected by deletion; -1, for the underlying envelope itself; 0, for the first automation item on the envelope; 1 for the second, etc"},{"identifier":"number time_start","description":"the starttime of the deletionrange in seconds"},{"identifier":"number time_end","description":"the endtime of the deletionrange in seconds"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.DeleteEnvelopePointRangeEx","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"envelope","type":"TrackEnvelope"},{"identifier":"autoitem_idx","type":"integer"},{"identifier":"time_start","type":"number"},{"identifier":"time_end","type":"number"}]},"eel":{"method_name":"DeleteEnvelopePointRangeEx","return_values":["bool"],"parameters":[{"type_name":"TrackEnvelope","identifier":"envelope"},{"type_name":"int","identifier":"autoitem_idx"},{"identifier":"time_start"},{"identifier":"time_end"}]}},"requires":{"Reaper":"5.975"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, if deleting was successful; false, if not"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.DeleteEnvelopePointRangeEx(TrackEnvelope envelope, integer autoitem_idx, number time_start, number time_end)","eel":"bool DeleteEnvelopePointRangeEx(TrackEnvelope envelope, int autoitem_idx, time_start, time_end)","python":"Boolean retval = RPR_DeleteEnvelopePointRangeEx(TrackEnvelope envelope, Int autoitem_idx, Float time_start, Float time_end)","cpp":"bool DeleteEnvelopePointRangeEx(TrackEnvelope* envelope, int autoitem_idx, double time_start, double time_end)"},"title":"DeleteEnvelopePointRangeEx","chapters":["Envelope Management","Envelope Points"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Delete a range of envelope points. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["extension state","state","value","delete","section","key"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"string section","description":"the section, in which the value is stored"},{"identifier":"string key","description":"the key, with which the value is stored"},{"identifier":"boolean persist","description":"true, the value shall be deleted permanently; false, delete it only temporarily."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.DeleteExtState","return_values":[],"parameters":[{"identifier":"section","type":"string"},{"identifier":"key","type":"string"},{"identifier":"persist","type":"boolean"}]},"eel":{"return_values":["DeleteExtState"],"parameters":[{"identifier":"\"section\""},{"identifier":"\"key\""},{"type_name":"bool","identifier":"persist"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.DeleteExtState(string section, string key, boolean persist)","eel":"DeleteExtState(\"section\", \"key\", bool persist)","python":"RPR_DeleteExtState(String section, String key, Boolean persist)","cpp":"void DeleteExtState(const char* section, const char* key, bool persist)"},"title":"DeleteExtState","chapters":["Api-Helper-Functions","Extension States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Delete the extended state value for a specific section and key. persist=true means the value should remain deleted the next time REAPER is opened. If persistent, the value will be deleted from the file reaper-extstate.ini in the ressources-folder.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["markermanagement","delete","marker","regions","shown number"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"integer markrgnindexnumber","description":"the shown number of the marker to be deleted"},{"identifier":"boolean isrgn","description":"true, marker is a region; false, marker is a normal marker"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.DeleteProjectMarker","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"markrgnindexnumber","type":"integer"},{"identifier":"isrgn","type":"boolean"}]},"eel":{"method_name":"DeleteProjectMarker","return_values":["bool"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"int","identifier":"markrgnindexnumber"},{"type_name":"bool","identifier":"isrgn"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, deleting was successful; false, deleting was unsuccessful."}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.DeleteProjectMarker(ReaProject proj, integer markrgnindexnumber, boolean isrgn)","eel":"bool DeleteProjectMarker(ReaProject proj, int markrgnindexnumber, bool isrgn)","python":"Boolean retval = RPR_DeleteProjectMarker(ReaProject proj, Int markrgnindexnumber, Boolean isrgn)","cpp":"bool DeleteProjectMarker(ReaProject* proj, int markrgnindexnumber, bool isrgn)"},"title":"DeleteProjectMarker","chapters":["Marker Management","Project Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Deletes a marker or a region. proj==NULL for the active project.\n\nDoes not delete tempo/timesignature markers!","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["markermanagement","delete","marker","regions","shown number"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"integer markrgnidx","description":"the id of the marker within the project, 0 for the first, 1 for the second, etc. Ignores the shown marker-index!"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.DeleteProjectMarkerByIndex","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"markrgnidx","type":"integer"}]},"eel":{"method_name":"DeleteProjectMarkerByIndex","return_values":["bool"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"int","identifier":"markrgnidx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, deleting was successful; false, deleting was unsuccessful."}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.DeleteProjectMarkerByIndex(ReaProject proj, integer markrgnidx)","eel":"bool DeleteProjectMarkerByIndex(ReaProject proj, int markrgnidx)","python":"Boolean retval = RPR_DeleteProjectMarkerByIndex(ReaProject proj, Int markrgnidx)","cpp":"bool DeleteProjectMarkerByIndex(ReaProject* proj, int markrgnidx)"},"title":"DeleteProjectMarkerByIndex","chapters":["Marker Management","Project Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Differs from DeleteProjectMarker only in that markrgnidx is 0 for the first marker/region in the project, 1 for the next, etc, rather than representing the displayed marker/region ID number.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["markermanagement","delete","takemarker"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":"the take, whose take-marker you want to delete"},{"identifier":"integer idx","description":"the id of the marker within the take, 0 for the first, 1 for the second, etc."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.DeleteTakeMarker","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"idx","type":"integer"}]},"eel":{"method_name":"retval","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"idx"}]}},"requires":{"Reaper":"6.09"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, deleting was successful; false, deleting was unsuccessful."}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.DeleteTakeMarker(MediaItem_Take take, integer idx)","eel":"bool retval = DeleteTakeMarker(MediaItem_Take take, int idx)","python":"Boolean retval = RPR_DeleteTakeMarker(MediaItem_Take take, Int idx)","cpp":"bool retval = DeleteTakeMarker(MediaItem_Take* take, int idx)"},"title":"DeleteTakeMarker","chapters":["Marker Management","Take Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Delete a take marker. Note that idx will change for all following take markers. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer idx","description":""},{"identifier":"optional integer countIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.DeleteTakeStretchMarkers","return_values":[{"identifier":"count_del_stretchmarkers","type":"integer"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"idx","type":"integer"},{"isOptional":true,"type":"integer","identifier":"countIn"}]},"eel":{"method_name":"DeleteTakeStretchMarkers","return_values":["int"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"idx"},{"identifier":"countIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer count_del_stretchmarkers","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer count_del_stretchmarkers = reaper.DeleteTakeStretchMarkers(MediaItem_Take take, integer idx, optional integer countIn)","eel":"int DeleteTakeStretchMarkers(MediaItem_Take take, int idx, optional int countIn)","python":"Int retval = RPR_DeleteTakeStretchMarkers(MediaItem_Take take, Int idx, const int countInOptional)","cpp":"int DeleteTakeStretchMarkers(MediaItem_Take* take, int idx, const int* countInOptional)"},"title":"DeleteTakeStretchMarkers","chapters":["Marker Management","Stretch Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Deletes one or more stretch markers. Returns number of stretch markers deleted.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject project","description":"the project-number. 0 for the current project. "},{"identifier":"integer markerindex","description":"the index of the marker, that you want to delete"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.DeleteTempoTimeSigMarker","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"project","type":"ReaProject"},{"identifier":"markerindex","type":"integer"}]},"eel":{"method_name":"DeleteTempoTimeSigMarker","return_values":["bool"],"parameters":[{"type_name":"ReaProject","identifier":"project"},{"type_name":"int","identifier":"markerindex"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, deleting was successful; false, deleting wasn't successful"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.DeleteTempoTimeSigMarker(ReaProject project, integer markerindex)","eel":"bool DeleteTempoTimeSigMarker(ReaProject project, int markerindex)","python":"Boolean retval = RPR_DeleteTempoTimeSigMarker(ReaProject project, Int markerindex)","cpp":"bool DeleteTempoTimeSigMarker(ReaProject* project, int markerindex)"},"title":"DeleteTempoTimeSigMarker","chapters":["Marker Management","Time Signature Marker"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Delete a tempo/time signature marker. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","delete","track"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack tr","description":"the MediaTrack to be deleted"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.DeleteTrack","return_values":[],"parameters":[{"identifier":"tr","type":"MediaTrack"}]},"eel":{"return_values":["DeleteTrack"],"parameters":[{"type_name":"MediaTrack","identifier":"tr"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.DeleteTrack(MediaTrack tr)","eel":"DeleteTrack(MediaTrack tr)","python":"RPR_DeleteTrack(MediaTrack tr)","cpp":"void DeleteTrack(MediaTrack* tr)"},"title":"DeleteTrack","chapters":["Track Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"deletes a track","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["mediaitemmanagement","delete"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack tr","description":"the MediaTrack, in which the MediaItem lies, that you want to delete"},{"identifier":"MediaItem it","description":"the MediaItem-object you want to delete"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.DeleteTrackMediaItem","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"tr","type":"MediaTrack"},{"identifier":"it","type":"MediaItem"}]},"eel":{"method_name":"DeleteTrackMediaItem","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"tr"},{"type_name":"MediaItem","identifier":"it"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, deleting was successful; false, deleting was unsuccessful"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.DeleteTrackMediaItem(MediaTrack tr, MediaItem it)","eel":"bool DeleteTrackMediaItem(MediaTrack tr, MediaItem it)","python":"Boolean retval = RPR_DeleteTrackMediaItem(MediaTrack tr, MediaItem it)","cpp":"bool DeleteTrackMediaItem(MediaTrack* tr, MediaItem* it)"},"title":"DeleteTrackMediaItem","chapters":["Mediaitem Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Deletes a MediaItem.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["audiomanagement","audio","accessor","destroy"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"AudioAccessor accessor","description":"the AudioAccessor to be destroyed"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.DestroyAudioAccessor","return_values":[],"parameters":[{"identifier":"accessor","type":"AudioAccessor"}]},"eel":{"return_values":["DestroyAudioAccessor"],"parameters":[{"type_name":"AudioAccessor","identifier":"accessor"}]}},"requires":{"Reaper":"5.97"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.DestroyAudioAccessor(AudioAccessor accessor)","eel":"DestroyAudioAccessor(AudioAccessor accessor)","python":"RPR_DestroyAudioAccessor(AudioAccessor accessor)","cpp":"void DestroyAudioAccessor(AudioAccessor* accessor)"},"title":"DestroyAudioAccessor","chapters":["Input/Output Devices","Accessor"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Destroy an audio accessor. Must only call from the main thread. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["shortcuts","add","edit"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"HWND hwnd","description":"unknown, which hwnd to pass over here"},{"identifier":"KbdSectionInfo section","description":"the section, in which the action is located \n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"},{"identifier":"integer cmdID","description":"the action command-id of the action, whose shortcut you want to delete"},{"identifier":"integer shortcutidx","description":"the index of the shortcut to add/edit"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.DoActionShortcutDialog","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"hwnd","type":"HWND"},{"identifier":"section","type":"KbdSectionInfo"},{"identifier":"cmdID","type":"integer"},{"identifier":"shortcutidx","type":"integer"}]},"eel":{"method_name":"retval","return_values":["bool"],"parameters":[{"type_name":"HWND","identifier":"hwnd"},{"type_name":"KbdSectionInfo","identifier":"section"},{"type_name":"int","identifier":"cmdID"},{"type_name":"int","identifier":"shortcutidx"}]}},"requires":{"Reaper":"6.71"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, shortcuts has been edited/added; false, not added/edited"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.DoActionShortcutDialog(HWND hwnd, KbdSectionInfo section, integer cmdID, integer shortcutidx)","eel":"bool retval = DoActionShortcutDialog(HWND hwnd, KbdSectionInfo section, int cmdID, int shortcutidx)","python":"Boolean retval = RPR_DoActionShortcutDialog(HWND hwnd, KbdSectionInfo section, Int cmdID, Int shortcutidx)","cpp":"bool retval = DoActionShortcutDialog(HWND hwnd, KbdSectionInfo* section, int cmdID, int shortcutidx)"},"title":"DoActionShortcutDialog","chapters":["Api-Helper-Functions","Shortcuts"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Open the action shortcut dialog to edit or add a shortcut for the given command ID. If (shortcutidx >= 0 && shortcutidx < CountActionShortcuts()), that specific shortcut will be replaced, otherwise a new shortcut will be added.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string ident_str","description":""},{"identifier":"integer whichDock","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Dock_UpdateDockID","return_values":[],"parameters":[{"identifier":"ident_str","type":"string"},{"identifier":"whichDock","type":"integer"}]},"eel":{"return_values":["Dock_UpdateDockID"],"parameters":[{"identifier":"\"ident_str\""},{"type_name":"int","identifier":"whichDock"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Dock_UpdateDockID(string ident_str, integer whichDock)","eel":"Dock_UpdateDockID(\"ident_str\", int whichDock)","python":"RPR_Dock_UpdateDockID(String ident_str, Int whichDock)","cpp":"void Dock_UpdateDockID(const char* ident_str, int whichDock)"},"title":"Dock_UpdateDockID","chapters":["User Interface","Dockers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"updates preference for docker window ident_str to be in dock whichDock on next open","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer whichDock","description":"the docker, whose position you want to get\n-1, not found\n0, bottom\n1, left\n2, top\n3, right\n4, floating"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.DockGetPosition","return_values":[{"identifier":"dock_position","type":"integer"}],"parameters":[{"identifier":"whichDock","type":"integer"}]},"eel":{"method_name":"DockGetPosition","return_values":["int"],"parameters":[{"type_name":"int","identifier":"whichDock"}]}},"requires":{"Reaper":"6.02"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer dock_position","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer dock_position = reaper.DockGetPosition(integer whichDock)","eel":"int DockGetPosition(int whichDock)","python":"Int retval = RPR_DockGetPosition(Int whichDock)","cpp":"int DockGetPosition(int whichDock)"},"title":"DockGetPosition","chapters":["User Interface","Dockers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns the position of docker whichDock","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"HWND hwnd","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.DockIsChildOfDock","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"isFloatingDocker","type":"boolean"}],"parameters":[{"identifier":"hwnd","type":"HWND"}]},"eel":{"method_name":"DockIsChildOfDock","return_values":["int"],"parameters":[{"type_name":"HWND","identifier":"hwnd"},{"type_name":"bool","identifier":"&isFloatingDocker"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":""},{"identifier":"boolean isFloatingDocker","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, boolean isFloatingDocker = reaper.DockIsChildOfDock(HWND hwnd)","eel":"int DockIsChildOfDock(HWND hwnd, bool &isFloatingDocker)","python":"(Int retval, HWND hwnd, Boolean isFloatingDockerOut) = RPR_DockIsChildOfDock(hwnd, isFloatingDockerOut)","cpp":"int DockIsChildOfDock(HWND hwnd, bool* isFloatingDockerOut)"},"title":"DockIsChildOfDock","chapters":["User Interface","Dockers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns dock index that contains hwnd, or -1","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"HWND hwnd","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.DockWindowActivate","return_values":[],"parameters":[{"identifier":"hwnd","type":"HWND"}]},"eel":{"return_values":["DockWindowActivate"],"parameters":[{"type_name":"HWND","identifier":"hwnd"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.DockWindowActivate(HWND hwnd)","eel":"DockWindowActivate(HWND hwnd)","python":"RPR_DockWindowActivate(HWND hwnd)","cpp":"void DockWindowActivate(HWND hwnd)"},"title":"DockWindowActivate","chapters":["User Interface","Dockers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"HWND hwnd","description":""},{"identifier":"string name","description":""},{"identifier":"integer pos","description":""},{"identifier":"boolean allowShow","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.DockWindowAdd","return_values":[],"parameters":[{"identifier":"hwnd","type":"HWND"},{"identifier":"name","type":"string"},{"identifier":"pos","type":"integer"},{"identifier":"allowShow","type":"boolean"}]},"eel":{"return_values":["DockWindowAdd"],"parameters":[{"type_name":"HWND","identifier":"hwnd"},{"identifier":"\"name\""},{"type_name":"int","identifier":"pos"},{"type_name":"bool","identifier":"allowShow"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.DockWindowAdd(HWND hwnd, string name, integer pos, boolean allowShow)","eel":"DockWindowAdd(HWND hwnd, \"name\", int pos, bool allowShow)","python":"RPR_DockWindowAdd(HWND hwnd, String name, Int pos, Boolean allowShow)","cpp":"void DockWindowAdd(HWND hwnd, const char* name, int pos, bool allowShow)"},"title":"DockWindowAdd","chapters":["User Interface","Dockers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"HWND hwnd","description":""},{"identifier":"string name","description":""},{"identifier":"string identstr","description":""},{"identifier":"boolean allowShow","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.DockWindowAddEx","return_values":[],"parameters":[{"identifier":"hwnd","type":"HWND"},{"identifier":"name","type":"string"},{"identifier":"identstr","type":"string"},{"identifier":"allowShow","type":"boolean"}]},"eel":{"return_values":["DockWindowAddEx"],"parameters":[{"type_name":"HWND","identifier":"hwnd"},{"identifier":"\"name\""},{"identifier":"\"identstr\""},{"type_name":"bool","identifier":"allowShow"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.DockWindowAddEx(HWND hwnd, string name, string identstr, boolean allowShow)","eel":"DockWindowAddEx(HWND hwnd, \"name\", \"identstr\", bool allowShow)","python":"RPR_DockWindowAddEx(HWND hwnd, String name, String identstr, Boolean allowShow)","cpp":"void DockWindowAddEx(HWND hwnd, const char* name, const char* identstr, bool allowShow)"},"title":"DockWindowAddEx","chapters":["User Interface","Dockers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["userinterface","window","refresh","docking"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.DockWindowRefresh","return_values":[],"parameters":[]},"eel":{"return_values":["DockWindowRefresh"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.DockWindowRefresh()","eel":"DockWindowRefresh()","python":"RPR_DockWindowRefresh()","cpp":"void DockWindowRefresh()"},"title":"DockWindowRefresh","chapters":["User Interface","Dockers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Refreshes docked windows.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"HWND hwnd","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.DockWindowRefreshForHWND","return_values":[],"parameters":[{"identifier":"hwnd","type":"HWND"}]},"eel":{"return_values":["DockWindowRefreshForHWND"],"parameters":[{"type_name":"HWND","identifier":"hwnd"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.DockWindowRefreshForHWND(HWND hwnd)","eel":"DockWindowRefreshForHWND(HWND hwnd)","python":"RPR_DockWindowRefreshForHWND(HWND hwnd)","cpp":"void DockWindowRefreshForHWND(HWND hwnd)"},"title":"DockWindowRefreshForHWND","chapters":["User Interface","Dockers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"HWND hwnd","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.DockWindowRemove","return_values":[],"parameters":[{"identifier":"hwnd","type":"HWND"}]},"eel":{"return_values":["DockWindowRemove"],"parameters":[{"type_name":"HWND","identifier":"hwnd"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.DockWindowRemove(HWND hwnd)","eel":"DockWindowRemove(HWND hwnd)","python":"RPR_DockWindowRemove(HWND hwnd)","cpp":"void DockWindowRemove(HWND hwnd)"},"title":"DockWindowRemove","chapters":["User Interface","Dockers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject project","description":"the project-number. 0 for the current project. "},{"identifier":"integer markerindex","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.EditTempoTimeSigMarker","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"project","type":"ReaProject"},{"identifier":"markerindex","type":"integer"}]},"eel":{"method_name":"EditTempoTimeSigMarker","return_values":["bool"],"parameters":[{"type_name":"ReaProject","identifier":"project"},{"type_name":"int","identifier":"markerindex"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, if user clicked OK button; false if user clicked cancel"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.EditTempoTimeSigMarker(ReaProject project, integer markerindex)","eel":"bool EditTempoTimeSigMarker(ReaProject project, int markerindex)","python":"Boolean retval = RPR_EditTempoTimeSigMarker(ReaProject project, Int markerindex)","cpp":"bool EditTempoTimeSigMarker(ReaProject* project, int markerindex)"},"title":"EditTempoTimeSigMarker","chapters":["Marker Management","Time Signature Marker"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Open the tempo/time signature marker editor dialog.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"integer r.left","description":""},{"identifier":"integer r.top","description":""},{"identifier":"integer r.right","description":""},{"identifier":"integer r.bot","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"r.left","return_values":[{"identifier":"r.left","type":"integer"},{"identifier":"r.top","type":"integer"},{"identifier":"r.right","type":"integer"},{"identifier":"r.bot","type":"integer"}],"parameters":[{"identifier":"r.left","type":"integer"},{"identifier":"r.top","type":"integer"},{"identifier":"r.right","type":"integer"},{"identifier":"r.bot","type":"integer"}]},"eel":{"return_values":["EnsureNotCompletelyOffscreen"],"parameters":[{"type_name":"int","identifier":"&r.left"},{"type_name":"int","identifier":"&r.top"},{"type_name":"int","identifier":"&r.right"},{"type_name":"int","identifier":"&r.bot"}]}},"requires":{"Reaper":"5.978"},"return_values":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"integer r.left","description":""},{"identifier":"integer r.top","description":""},{"identifier":"integer r.right","description":""},{"identifier":"integer r.bot","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer r.left, integer r.top, integer r.right, integer r.bot = reaper.EnsureNotCompletelyOffscreen(integer r.left, integer r.top, integer r.right, integer r.bot)","eel":"EnsureNotCompletelyOffscreen(int &r.left, int &r.top, int &r.right, int &r.bot)","python":"RPR_EnsureNotCompletelyOffscreen(RECT rInOut)","cpp":"void EnsureNotCompletelyOffscreen(RECT* rInOut)"},"title":"EnsureNotCompletelyOffscreen","chapters":["User Interface","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"call with a saved window rect for your window and it'll correct any positioning info.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["filemanagement","enumerate","files","path","fileindex","folder"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string path","description":"the path, where the filenames will be read from"},{"identifier":"integer fileindex","description":"the number of the file, with 0 the first file. Ordered by first letter in ascending order."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.EnumerateFiles","return_values":[{"identifier":"filename_with_path","type":"string"}],"parameters":[{"identifier":"path","type":"string"},{"identifier":"fileindex","type":"integer"}]},"eel":{"method_name":"EnumerateFiles","return_values":["bool"],"parameters":[{"identifier":"#retval"},{"identifier":"\"path\""},{"type_name":"int","identifier":"fileindex"}]}},"requires":{"Reaper":"6.20"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string filename_with_path","description":"the filename in path, with index fileindex"}],"prog_lang":"*"},"functioncall":{"lua":"string filename_with_path = reaper.EnumerateFiles(string path, integer fileindex)","eel":"bool EnumerateFiles(#retval, \"path\", int fileindex)","python":"String retval = RPR_EnumerateFiles(String path, Int fileindex)","cpp":"const char* EnumerateFiles(const char* path, int fileindex)"},"title":"EnumerateFiles","chapters":["File Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"List the files in the \"path\" directory. Returns NULL/nil when all files have been listed. Use fileindex = -1 to force re-read of directory (invalidate cache). ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["filemanagement","enumerate","directory","folder","path","directoryindex"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string path","description":"the path, where the directorynames will be read from"},{"identifier":"integer subdirindex","description":"the number of the directory, with 0 the first directory. Ordered by first letter in ascending order."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.EnumerateSubdirectories","return_values":[{"identifier":"filename_with_path","type":"string"}],"parameters":[{"identifier":"path","type":"string"},{"identifier":"subdirindex","type":"integer"}]},"eel":{"method_name":"EnumerateSubdirectories","return_values":["bool"],"parameters":[{"identifier":"#retval"},{"identifier":"\"path\""},{"type_name":"int","identifier":"subdirindex"}]}},"requires":{"Reaper":"6.20"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string filename_with_path","description":"the filename in path"}],"prog_lang":"*"},"functioncall":{"lua":"string filename_with_path = reaper.EnumerateSubdirectories(string path, integer subdirindex)","eel":"bool EnumerateSubdirectories(#retval, \"path\", int subdirindex)","python":"String retval = RPR_EnumerateSubdirectories(String path, Int subdirindex)","cpp":"const char* EnumerateSubdirectories(const char* path, int subdirindex)"},"title":"EnumerateSubdirectories","chapters":["File Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"List the subdirectories in the \"path\" directory. Use subdirindex = -1 to force re-read of directory (invalidate cache). Returns NULL/nil when all subdirectories have been listed. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer mode","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.EnumPitchShiftModes","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"str","type":"string"}],"parameters":[{"identifier":"mode","type":"integer"}]},"eel":{"method_name":"EnumPitchShiftModes","return_values":["bool"],"parameters":[{"type_name":"int","identifier":"mode"},{"identifier":"#str"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string str","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string str = reaper.EnumPitchShiftModes(integer mode)","eel":"bool EnumPitchShiftModes(int mode, #str)","python":"Boolean retval = RPR_EnumPitchShiftModes(Int mode, String strOut)","cpp":"bool EnumPitchShiftModes(int mode, const char** strOut)"},"title":"EnumPitchShiftModes","chapters":["Pitchshifting"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Start querying modes at 0, returns FALSE when no more modes possible, sets strOut to NULL if a mode is currently unsupported","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer mode","description":""},{"identifier":"integer submode","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.EnumPitchShiftSubModes","return_values":[{"identifier":"pitch_shift_submode","type":"string"}],"parameters":[{"identifier":"mode","type":"integer"},{"identifier":"submode","type":"integer"}]},"eel":{"method_name":"EnumPitchShiftSubModes","return_values":["bool"],"parameters":[{"identifier":"#retval"},{"type_name":"int","identifier":"mode"},{"type_name":"int","identifier":"submode"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string pitch_shift_submode","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string pitch_shift_submode = reaper.EnumPitchShiftSubModes(integer mode, integer submode)","eel":"bool EnumPitchShiftSubModes(#retval, int mode, int submode)","python":"String retval = RPR_EnumPitchShiftSubModes(Int mode, Int submode)","cpp":"const char* EnumPitchShiftSubModes(int mode, int submode)"},"title":"EnumPitchShiftSubModes","chapters":["Pitchshifting"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns submode name, or NULL","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["markermanagement","enum","project","markers","region"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer idx","description":"the number of the marker, beginning with 0 for the first marker"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.EnumProjectMarkers","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"isrgn","type":"boolean"},{"identifier":"pos","type":"number"},{"identifier":"rgnend","type":"number"},{"identifier":"name","type":"string"},{"identifier":"markrgnindexnumber","type":"integer"}],"parameters":[{"identifier":"idx","type":"integer"}]},"eel":{"method_name":"EnumProjectMarkers","return_values":["int"],"parameters":[{"type_name":"int","identifier":"idx"},{"type_name":"bool","identifier":"&isrgn"},{"identifier":"&pos"},{"identifier":"&rgnend"},{"identifier":"#name"},{"type_name":"int","identifier":"&markrgnindexnumber"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"integer retval","description":"number of marker beginning with 1 for the first marker\nignore the order of first,second,etc creation of markers but counts from position 00:00:00 to end of project. So if you created a marker at position 00:00:00 and move the first created marker to the end of the timeline, \nit will be the last one, NOT the first one in the retval!"},{"identifier":"boolean isgrn","description":"is the marker a region?"},{"identifier":"number pos","description":"the time-position in seconds with 12 digits precision (1.123456789012)"},{"identifier":"number rgnend","description":"if it's a region, the position of the end of the region in seconds with 12 digits precision(123.123456789012); \nif it's just a marker it's 0.0"},{"identifier":"string name","description":"name of the marker"},{"identifier":"integer markrgnindexnumber","description":"marker/region index number. \nNote: the numbering of markers and regions is independent. If you have one region and one marker, \nboth share the number 1, even though you have 2 in your project(one marker and one region)."}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, boolean isrgn, number pos, number rgnend, string name, integer markrgnindexnumber = reaper.EnumProjectMarkers(integer idx)","eel":"int EnumProjectMarkers(int idx, bool &isrgn, &pos, &rgnend, #name, int &markrgnindexnumber)","python":"(Int retval, Int idx, Boolean isrgnOut, Float posOut, Float rgnendOut, String nameOut, Int markrgnindexnumberOut) = RPR_EnumProjectMarkers(idx, isrgnOut, posOut, rgnendOut, nameOut, markrgnindexnumberOut)","cpp":"int EnumProjectMarkers(int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut)"},"title":"EnumProjectMarkers","chapters":["Marker Management","Project Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the values of a given marker or region idx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["markermanagement","enum","project","markers","project"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"Projectnumber. 0, current project; \n1 to x the first(1) to the last project(x) (in tabs for example); "},{"identifier":"integer idx","description":"the number of the marker, beginning with 0 for the first marker"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.EnumProjectMarkers2","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"isrgn","type":"boolean"},{"identifier":"pos","type":"number"},{"identifier":"rgnend","type":"number"},{"identifier":"name","type":"string"},{"identifier":"markrgnindexnumber","type":"integer"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"idx","type":"integer"}]},"eel":{"method_name":"EnumProjectMarkers2","return_values":["int"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"int","identifier":"idx"},{"type_name":"bool","identifier":"&isrgn"},{"identifier":"&pos"},{"identifier":"&rgnend"},{"identifier":"#name"},{"type_name":"int","identifier":"&markrgnindexnumber"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"integer retval","description":"number of marker beginning with 1 for the first marker\nignore the order of first,second,etc creation of markers but counts from position 00:00:00 to end of project. \nSo if you created a marker at position 00:00:00 and move the first created marker to the end of the timeline, it will be the last one, NOT the first one in the retval!"},{"identifier":"boolean isgrn","description":"is the marker a region?"},{"identifier":"number pos","description":"the time-position in seconds with 12 digits precision (1.123456789012)"},{"identifier":"number rgnend","description":"if it's a region, the end of the region in seconds with 12 digits precision(123.123456789012); if just marker it's 0.0"},{"identifier":"string name","description":"name of the marker"},{"identifier":"integer markrgnindexnumber","description":"marker/region index number. \nNote: the numbering of markers and regions is independent. If you have one region and one marker, \nboth share the number 1, even though you have 2 in your project(one marker and one region)."}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, boolean isrgn, number pos, number rgnend, string name, integer markrgnindexnumber = reaper.EnumProjectMarkers2(ReaProject proj, integer idx)","eel":"int EnumProjectMarkers2(ReaProject proj, int idx, bool &isrgn, &pos, &rgnend, #name, int &markrgnindexnumber)","python":"(Int retval, ReaProject proj, Int idx, Boolean isrgnOut, Float posOut, Float rgnendOut, String nameOut, Int markrgnindexnumberOut) = RPR_EnumProjectMarkers2(proj, idx, isrgnOut, posOut, rgnendOut, nameOut, markrgnindexnumberOut)","cpp":"int EnumProjectMarkers2(ReaProject* proj, int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut)"},"title":"EnumProjectMarkers2","chapters":["Marker Management","Project Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the values of a given marker or region idx from a given project proj.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["markermanagement","enum","project","markers","project","color"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"Projectnumber. 0, current project; 1 to x the first(1) to the last project(x) (in tabs for example)"},{"identifier":"integer idx","description":"the number of the marker, beginning with 0 for the first marker"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.EnumProjectMarkers3","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"isrgn","type":"boolean"},{"identifier":"pos","type":"number"},{"identifier":"rgnend","type":"number"},{"identifier":"name","type":"string"},{"identifier":"markrgnindexnumber","type":"integer"},{"identifier":"color","type":"integer"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"idx","type":"integer"}]},"eel":{"method_name":"EnumProjectMarkers3","return_values":["int"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"int","identifier":"idx"},{"type_name":"bool","identifier":"&isrgn"},{"identifier":"&pos"},{"identifier":"&rgnend"},{"identifier":"#name"},{"type_name":"int","identifier":"&markrgnindexnumber"},{"type_name":"int","identifier":"&color"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"integer retval","description":"number of marker beginning with 1 for the first marker; \nignore the order of first,second,etc creation of markers but counts from \nposition 00:00:00 to end of project. \nSo if you created a marker at position 00:00:00 and move the first created marker \nto the end of the timeline, it will be the last one, NOT the first one in the retval!"},{"identifier":"boolean isgrn","description":"is the marker a region?"},{"identifier":"number pos","description":"the time-position in seconds with 12 digits precision (1.123456789012)"},{"identifier":"number rgnend","description":"if it's a region, the end of the region in seconds with 12 digits precision(123.123456789012); if just marker it's 0.0"},{"identifier":"string name","description":"name of the marker"},{"identifier":"integer markrgnindexnumber","description":"marker/region index number. \nNote: the numbering of markers and regions is independent. If you have one region and one marker, \nboth share the number 1, even though you have 2 in your project(one marker and one region)."},{"identifier":"integer color","description":"number of color of the marker/region"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, boolean isrgn, number pos, number rgnend, string name, integer markrgnindexnumber, integer color = reaper.EnumProjectMarkers3(ReaProject proj, integer idx)","eel":"int EnumProjectMarkers3(ReaProject proj, int idx, bool &isrgn, &pos, &rgnend, #name, int &markrgnindexnumber, int &color)","python":"(Int retval, ReaProject proj, Int idx, Boolean isrgnOut, Float posOut, Float rgnendOut, String nameOut, Int markrgnindexnumberOut, Int colorOut) = RPR_EnumProjectMarkers3(proj, idx, isrgnOut, posOut, rgnendOut, nameOut, markrgnindexnumberOut, colorOut)","cpp":"int EnumProjectMarkers3(ReaProject* proj, int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut, int* colorOut)"},"title":"EnumProjectMarkers3","chapters":["Marker Management","Project Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the values of a given marker or region idx from a given project proj.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["projectmanagement","enumerate","projects","filename"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer idx","description":"-1 for current project; 0 and higher for the projects; 0x40000000 for currently rendering project, if any."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.EnumProjects","return_values":[{"identifier":"retval","type":"ReaProject"},{"isOptional":true,"type":"string","identifier":"projfn"}],"parameters":[{"identifier":"idx","type":"integer"}]},"eel":{"method_name":"EnumProjects","return_values":["ReaProject"],"parameters":[{"type_name":"int","identifier":"idx"},{"type_name":"optional","identifier":"#projfn"}]}},"requires":{"Reaper":"5.982"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject retval","description":"a ReaProject-object of the project you requested"},{"identifier":"optional string projfn","description":"the path+filename.rpp of the project. returns nil if no filename exists"}],"prog_lang":"*"},"functioncall":{"lua":"ReaProject retval, optional string projfn = reaper.EnumProjects(integer idx)","eel":"ReaProject EnumProjects(int idx, optional #projfn)","python":"(ReaProject retval, Int idx, String projfnOutOptional, Int projfnOutOptional_sz) = RPR_EnumProjects(idx, projfnOutOptional, projfnOutOptional_sz)","cpp":"ReaProject* EnumProjects(int idx, char* projfnOutOptional, int projfnOutOptional_sz)"},"title":"EnumProjects","chapters":["Project Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get ReaProject-object and filename of a project.\nidx=-1 for current project,projfn can be NULL if not interested in filename. use idx 0x40000000 for currently rendering project, if any.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["projectmanagement","extended","state","section","extname","value","key","enumerate","enum"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"string extname","description":"the section of the extended-states"},{"identifier":"integer idx","description":"the id of the entry within \"extname\"-section to be returned; 0 for the first, 1 for the second, etc."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.EnumProjExtState","return_values":[{"identifier":"retval","type":"boolean"},{"isOptional":true,"type":"string","identifier":"key"},{"isOptional":true,"type":"string","identifier":"val"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"extname","type":"string"},{"identifier":"idx","type":"integer"}]},"eel":{"method_name":"EnumProjExtState","return_values":["bool"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"identifier":"\"extname\""},{"type_name":"int","identifier":"idx"},{"type_name":"optional","identifier":"#key"},{"type_name":"optional","identifier":"#val"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"boolean retval","description":"true, key and value to this section exist; false, no such key and value exists"},{"identifier":"string key","description":"the idx'th key in the section"},{"identifier":"string val","description":"the accompanying value to key"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, optional string key, optional string val = reaper.EnumProjExtState(ReaProject proj, string extname, integer idx)","eel":"bool EnumProjExtState(ReaProject proj, \"extname\", int idx, optional #key, optional #val)","python":"(Boolean retval, ReaProject proj, String extname, Int idx, String keyOutOptional, Int keyOutOptional_sz, String valOutOptional, Int valOutOptional_sz) = RPR_EnumProjExtState(proj, extname, idx, keyOutOptional, keyOutOptional_sz, valOutOptional, valOutOptional_sz)","cpp":"bool EnumProjExtState(ReaProject* proj, const char* extname, int idx, char* keyOutOptional, int keyOutOptional_sz, char* valOutOptional, int valOutOptional_sz)"},"title":"EnumProjExtState","chapters":["Project Management","Project Extension States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Enumerate the data stored with the project for a specific extname. Returns false when there is no more data.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"integer regionindex","description":""},{"identifier":"integer rendertrack","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.EnumRegionRenderMatrix","return_values":[{"identifier":"tr","type":"MediaTrack"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"regionindex","type":"integer"},{"identifier":"rendertrack","type":"integer"}]},"eel":{"method_name":"EnumRegionRenderMatrix","return_values":["MediaTrack"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"int","identifier":"regionindex"},{"type_name":"int","identifier":"rendertrack"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack tr","description":""}],"prog_lang":"*"},"functioncall":{"lua":"MediaTrack tr = reaper.EnumRegionRenderMatrix(ReaProject proj, integer regionindex, integer rendertrack)","eel":"MediaTrack EnumRegionRenderMatrix(ReaProject proj, int regionindex, int rendertrack)","python":"MediaTrack tr = RPR_EnumRegionRenderMatrix(ReaProject proj, Int regionindex, Int rendertrack)","cpp":"MediaTrack* EnumRegionRenderMatrix(ReaProject* proj, int regionindex, int rendertrack)"},"title":"EnumRegionRenderMatrix","chapters":["Marker Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Enumerate which tracks will be rendered within this region when using the region render matrix. When called with rendertrack==0, the function returns the first track that will be rendered (which may be the master track); rendertrack==1 will return the next track rendered, and so on. The function returns NULL when there are no more tracks that will be rendered within this region.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer track","description":""},{"identifier":"string programNumber","description":""},{"identifier":"string programName","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.EnumTrackMIDIProgramNames","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"programName","type":"string"}],"parameters":[{"identifier":"track","type":"integer"},{"identifier":"programNumber","type":"integer"},{"identifier":"programName","type":"string"}]},"eel":{"method_name":"EnumTrackMIDIProgramNames","return_values":["bool"],"parameters":[{"type_name":"int","identifier":"track"},{"type_name":"int","identifier":"programNumber"},{"identifier":"#programName"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string programName","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string programName = reaper.EnumTrackMIDIProgramNames(integer track, integer programNumber, string programName)","eel":"bool EnumTrackMIDIProgramNames(int track, int programNumber, #programName)","python":"(Boolean retval, Int track, Int programNumber, String programName, Int programName_sz) = RPR_EnumTrackMIDIProgramNames(track, programNumber, programName, programName_sz)","cpp":"bool EnumTrackMIDIProgramNames(int track, int programNumber, char* programName, int programName_sz)"},"title":"EnumTrackMIDIProgramNames","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"MediaTrack track","description":""},{"identifier":"integer programNumber","description":""},{"identifier":"string programName","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.EnumTrackMIDIProgramNamesEx","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"programName","type":"string"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"track","type":"MediaTrack"},{"identifier":"programNumber","type":"integer"},{"identifier":"programName","type":"string"}]},"eel":{"method_name":"EnumTrackMIDIProgramNamesEx","return_values":["bool"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"programNumber"},{"identifier":"#programName"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string programName","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string programName = reaper.EnumTrackMIDIProgramNamesEx(ReaProject proj, MediaTrack track, integer programNumber, string programName)","eel":"bool EnumTrackMIDIProgramNamesEx(ReaProject proj, MediaTrack track, int programNumber, #programName)","python":"(Boolean retval, ReaProject proj, MediaTrack track, Int programNumber, String programName, Int programName_sz) = RPR_EnumTrackMIDIProgramNamesEx(proj, track, programNumber, programName, programName_sz)","cpp":"bool EnumTrackMIDIProgramNamesEx(ReaProject* proj, MediaTrack* track, int programNumber, char* programName, int programName_sz)"},"title":"EnumTrackMIDIProgramNamesEx","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"TrackEnvelope envelope","description":""},{"identifier":"number time","description":""},{"identifier":"number samplerate","description":""},{"identifier":"integer samplesRequested","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Envelope_Evaluate","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"value","type":"number"},{"identifier":"dVdS","type":"number"},{"identifier":"ddVdS","type":"number"},{"identifier":"dddVdS","type":"number"}],"parameters":[{"identifier":"envelope","type":"TrackEnvelope"},{"identifier":"time","type":"number"},{"identifier":"samplerate","type":"number"},{"identifier":"samplesRequested","type":"integer"}]},"eel":{"method_name":"Envelope_Evaluate","return_values":["int"],"parameters":[{"type_name":"TrackEnvelope","identifier":"envelope"},{"identifier":"time"},{"identifier":"samplerate"},{"type_name":"int","identifier":"samplesRequested"},{"identifier":"&value"},{"identifier":"&dVdS"},{"identifier":"&ddVdS"},{"identifier":"&dddVdS"}]}},"requires":{"Reaper":"6.43"},"return_values":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"integer retval","description":""},{"identifier":"number value","description":""},{"identifier":"number dVdS","description":"the change in value per sample (first derivative)"},{"identifier":"number ddVdS","description":"the second derivative"},{"identifier":"number dddVdS","description":"is the third derivative"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, number value, number dVdS, number ddVdS, number dddVdS = reaper.Envelope_Evaluate(TrackEnvelope envelope, number time, number samplerate, integer samplesRequested)","eel":"int Envelope_Evaluate(TrackEnvelope envelope, time, samplerate, int samplesRequested, &value, &dVdS, &ddVdS, &dddVdS)","python":"(Int retval, TrackEnvelope envelope, Float time, Float samplerate, Int samplesRequested, Float valueOut, Float dVdSOut, Float ddVdSOut, Float dddVdSOut) = RPR_Envelope_Evaluate(envelope, time, samplerate, samplesRequested, valueOut, dVdSOut, ddVdSOut, dddVdSOut)","cpp":"int Envelope_Evaluate(TrackEnvelope* envelope, double time, double samplerate, int samplesRequested, double* valueOut, double* dVdSOut, double* ddVdSOut, double* dddVdSOut)"},"title":"Envelope_Evaluate","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get the effective envelope value at a given time position. \n\nsamplesRequested is how long the caller expects until the next call to Envelope_Evaluate (often, the buffer block size). \n\nThe return value is how many samples beyond that time position that the returned values are valid. \n\ndVdS is the change in value per sample (first derivative), ddVdS is the second derivative, dddVdS is the third derivative. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"TrackEnvelope env","description":""},{"identifier":"number value","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Envelope_FormatValue","return_values":[{"identifier":"formatted_value","type":"string"}],"parameters":[{"identifier":"env","type":"TrackEnvelope"},{"identifier":"value","type":"number"}]},"eel":{"return_values":["Envelope_FormatValue"],"parameters":[{"type_name":"TrackEnvelope","identifier":"env"},{"identifier":"value"},{"identifier":"#buf"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string formatted_value","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string formatted_value = reaper.Envelope_FormatValue(TrackEnvelope env, number value)","eel":"Envelope_FormatValue(TrackEnvelope env, value, #buf)","python":"(TrackEnvelope env, Float value, String bufOut, Int bufOut_sz) = RPR_Envelope_FormatValue(env, value, bufOut, bufOut_sz)","cpp":"void Envelope_FormatValue(TrackEnvelope* env, double value, char* bufOut, int bufOut_sz)"},"title":"Envelope_FormatValue","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Formats the value of an envelope to a user-readable form","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"TrackEnvelope env","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Envelope_GetParentTake","return_values":[{"identifier":"retval","type":"MediaItem_Take"},{"identifier":"index","type":"integer"},{"identifier":"index2","type":"integer"}],"parameters":[{"identifier":"env","type":"TrackEnvelope"}]},"eel":{"method_name":"Envelope_GetParentTake","return_values":["MediaItem_Take"],"parameters":[{"type_name":"TrackEnvelope","identifier":"env"},{"type_name":"int","identifier":"&index"},{"type_name":"int","identifier":"&index2"}]}},"requires":{"Reaper":"6.43"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem_Take retval","description":""},{"identifier":"integer index","description":""},{"identifier":"integer index2","description":""}],"prog_lang":"*"},"functioncall":{"lua":"MediaItem_Take retval, integer index, integer index2 = reaper.Envelope_GetParentTake(TrackEnvelope env)","eel":"MediaItem_Take Envelope_GetParentTake(TrackEnvelope env, int &index, int &index2)","python":"(MediaItem_Take retval, TrackEnvelope env, Int indexOut, Int index2Out) = RPR_Envelope_GetParentTake(env, indexOut, index2Out)","cpp":"MediaItem_Take* Envelope_GetParentTake(TrackEnvelope* env, int* indexOut, int* index2Out)"},"title":"Envelope_GetParentTake","chapters":["Envelope Management","Take Envelopes"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"If take envelope, gets the take from the envelope. If FX, indexOut set to FX index, index2Out set to parameter index, otherwise -1.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"TrackEnvelope env","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Envelope_GetParentTrack","return_values":[{"identifier":"retval","type":"MediaTrack"},{"identifier":"index","type":"integer"},{"identifier":"index2","type":"integer"}],"parameters":[{"identifier":"env","type":"TrackEnvelope"}]},"eel":{"method_name":"Envelope_GetParentTrack","return_values":["MediaTrack"],"parameters":[{"type_name":"TrackEnvelope","identifier":"env"},{"type_name":"int","identifier":"&index"},{"type_name":"int","identifier":"&index2"}]}},"requires":{"Reaper":"6.43"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack retval","description":""},{"identifier":"integer index","description":""},{"identifier":"integer index2","description":""}],"prog_lang":"*"},"functioncall":{"lua":"MediaTrack retval, integer index, integer index2 = reaper.Envelope_GetParentTrack(TrackEnvelope env)","eel":"MediaTrack Envelope_GetParentTrack(TrackEnvelope env, int &index, int &index2)","python":"(MediaTrack retval, TrackEnvelope env, Int indexOut, Int index2Out) = RPR_Envelope_GetParentTrack(env, indexOut, index2Out)","cpp":"MediaTrack* Envelope_GetParentTrack(TrackEnvelope* env, int* indexOut, int* index2Out)"},"title":"Envelope_GetParentTrack","chapters":["Envelope Management","Track Envelopes"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"If track envelope, gets the track from the envelope. If FX, indexOut set to FX index, index2Out set to parameter index, otherwise -1.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"TrackEnvelope envelope","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Envelope_SortPoints","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"envelope","type":"TrackEnvelope"}]},"eel":{"method_name":"Envelope_SortPoints","return_values":["bool"],"parameters":[{"type_name":"TrackEnvelope","identifier":"envelope"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.Envelope_SortPoints(TrackEnvelope envelope)","eel":"bool Envelope_SortPoints(TrackEnvelope envelope)","python":"Boolean retval = RPR_Envelope_SortPoints(TrackEnvelope envelope)","cpp":"bool Envelope_SortPoints(TrackEnvelope* envelope)"},"title":"Envelope_SortPoints","chapters":["Envelope Management","Envelope Points"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sort envelope points by time.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"TrackEnvelope envelope","description":""},{"identifier":"integer autoitem_idx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Envelope_SortPointsEx","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"envelope","type":"TrackEnvelope"},{"identifier":"autoitem_idx","type":"integer"}]},"eel":{"method_name":"Envelope_SortPointsEx","return_values":["bool"],"parameters":[{"type_name":"TrackEnvelope","identifier":"envelope"},{"type_name":"int","identifier":"autoitem_idx"}]}},"requires":{"Reaper":"5.975"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.Envelope_SortPointsEx(TrackEnvelope envelope, integer autoitem_idx)","eel":"bool Envelope_SortPointsEx(TrackEnvelope envelope, int autoitem_idx)","python":"Boolean retval = RPR_Envelope_SortPointsEx(TrackEnvelope envelope, Int autoitem_idx)","cpp":"bool Envelope_SortPointsEx(TrackEnvelope* envelope, int autoitem_idx)"},"title":"Envelope_SortPointsEx","chapters":["Envelope Management","Envelope Points"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sort envelope points by time. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","shell","exec","process","command","terminate"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string cmdline","description":"the command to execute "},{"identifier":"integer timeoutmsec","description":"how long to wait, until termination of execution\npositive value, the time to wait for execution in milliseconds\n   0, command will be allowed to run indefinitely (recommended for large amounts of returned output).\n  -1, for no wait/terminate\n  -2, for no wait and minimize"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ExecProcess","return_values":[{"identifier":"command_output","type":"string"}],"parameters":[{"identifier":"cmdline","type":"string"},{"identifier":"timeoutmsec","type":"integer"}]},"eel":{"method_name":"ExecProcess","return_values":["bool"],"parameters":[{"identifier":"#retval"},{"identifier":"\"cmdline\""},{"type_name":"int","identifier":"timeoutmsec"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string command_output","description":"return value, newline and output of the command; otherwise nil"}],"prog_lang":"*"},"functioncall":{"lua":"string command_output = reaper.ExecProcess(string cmdline, integer timeoutmsec)","eel":"bool ExecProcess(#retval, \"cmdline\", int timeoutmsec)","python":"String retval = RPR_ExecProcess(String cmdline, Int timeoutmsec)","cpp":"const char* ExecProcess(const char* cmdline, int timeoutmsec)"},"title":"ExecProcess","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Executes command line, returns NULL on total failure, otherwise the return value, a newline, and then the output of the command.\n\nCommands executed with ExecProcess() don't benefit from PATH-system-variables. That said, you must give the full path to a command, even if you can usually just type the command into a shell. You also may need to set a codepage manually to get the correct character-encoding. So in some cases, writing a batch-script and executing it with ExecProcess() might be a good idea.\n\nNote: when using this in Lua, you need to take care of the right file-separators: / on Mac and Linux or \\ on Windows. Unlike other Lua/Lua-used-ReaScript-functions, this will not convert the file-separators to the current system's equivalent.\nKeep that in mind, when doing multi-platform-scripts!\n\nThe base-directory is Reaper's appdirectory.\n\nOn Windows, you can not use command-line-internal commands, like dir or cd, directly. To use them, you need to use cmd.exe. \nYou can do it like:\n\n-    \"$Path_to_Command_Exe\\\\cmd.exe /Q /C command\"\n\nwhere \"/Q\" executes cmd.exe silently(otherwise a command-line-window pops up; but output of commands will show anyway) and \"/C command\" executes command.\n\nTo get a full directory-listing of c:\\\\ in a file c:\\\\directorylisting.txt, you can use:\n-   \"c:\\\\windows\\\\system32\\\\cmd.exe /Q /C dir c:\\\\ >c:\\\\directorylisting.txt\"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["filemanagement","check","file","existing","existence"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string path","description":"filename with path"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.file_exists","return_values":[{"identifier":"file_exists","type":"boolean"}],"parameters":[{"identifier":"path","type":"string"}]},"eel":{"method_name":"file_exists","return_values":["bool"],"parameters":[{"identifier":"\"path\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean file_exists","description":"true, if file exists; false, if it doesn't"}],"prog_lang":"*"},"functioncall":{"lua":"boolean file_exists  = reaper.file_exists(string path)","eel":"bool file_exists(\"path\")","python":"Boolean retval = RPR_file_exists(String path)","cpp":"bool file_exists(const char* path)"},"title":"file_exists","chapters":["File Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Checks, if a specified file exists and is readable.\n\nreturns true if path points to a valid, readable file","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject project","description":"the project-number. 0 for the current project. "},{"identifier":"number time","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.FindTempoTimeSigMarker","return_values":[{"identifier":"time_sig_marker_index","type":"integer"}],"parameters":[{"identifier":"project","type":"ReaProject"},{"identifier":"time","type":"number"}]},"eel":{"method_name":"FindTempoTimeSigMarker","return_values":["int"],"parameters":[{"type_name":"ReaProject","identifier":"project"},{"identifier":"time"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer time_sig_marker_index","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer time_sig_marker_index = reaper.FindTempoTimeSigMarker(ReaProject project, number time)","eel":"int FindTempoTimeSigMarker(ReaProject project, time)","python":"Int retval = RPR_FindTempoTimeSigMarker(ReaProject project, Float time)","cpp":"int FindTempoTimeSigMarker(ReaProject* project, double time)"},"title":"FindTempoTimeSigMarker","chapters":["Marker Management","Time Signature Marker"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Find the tempo/time signature marker that falls at or before this time position (the marker that is in effect as of this time position).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","format","timestring"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number tpos","description":"the position in seconds, that you want to have formatted"},{"identifier":"string buf","description":"needed by Reaper, just set it to \"\""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.format_timestr","return_values":[{"identifier":"formatted_time","type":"string"}],"parameters":[{"identifier":"tpos","type":"number"},{"identifier":"buf","type":"string"}]},"eel":{"return_values":["format_timestr"],"parameters":[{"identifier":"tpos"},{"identifier":"#buf"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string formatted_time","description":"the formatted timestring"}],"prog_lang":"*"},"functioncall":{"lua":"string formatted_time = reaper.format_timestr(number tpos, string buf)","eel":"format_timestr(tpos, #buf)","python":"(Float tpos, String buf, Int buf_sz) = RPR_format_timestr(tpos, buf, buf_sz)","cpp":"void format_timestr(double tpos, char* buf, int buf_sz)"},"title":"format_timestr","chapters":["Api-Helper-Functions","Value Conversion"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Creates a timestring and formats it as hh:mm:ss.sss. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"number tpos","description":""},{"identifier":"string buf","description":""},{"identifier":"number offset","description":""},{"identifier":"integer modeoverride","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.format_timestr_len","return_values":[{"identifier":"formatted_time","type":"string"}],"parameters":[{"identifier":"tpos","type":"number"},{"identifier":"buf","type":"string"},{"identifier":"offset","type":"number"},{"identifier":"modeoverride","type":"integer"}]},"eel":{"return_values":["format_timestr_len"],"parameters":[{"identifier":"tpos"},{"identifier":"#buf"},{"identifier":"offset"},{"type_name":"int","identifier":"modeoverride"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string formatted_time","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string formatted_time = reaper.format_timestr_len(number tpos, string buf, number offset, integer modeoverride)","eel":"format_timestr_len(tpos, #buf, offset, int modeoverride)","python":"(Float tpos, String buf, Int buf_sz, Float offset, Int modeoverride) = RPR_format_timestr_len(tpos, buf, buf_sz, offset, modeoverride)","cpp":"void format_timestr_len(double tpos, char* buf, int buf_sz, double offset, int modeoverride)"},"title":"format_timestr_len","chapters":["Api-Helper-Functions","Value Conversion"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"creates a timestring and formats with overrides and offset for a time-length\n\ntime formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f\noffset is start of where the length will be calculated from","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"number tpos","description":""},{"identifier":"string buf","description":""},{"identifier":"integer modeoverride","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.format_timestr_pos","return_values":[{"identifier":"formatted_time","type":"string"}],"parameters":[{"identifier":"tpos","type":"number"},{"identifier":"buf","type":"string"},{"identifier":"modeoverride","type":"integer"}]},"eel":{"return_values":["format_timestr_pos"],"parameters":[{"identifier":"tpos"},{"identifier":"#buf"},{"type_name":"int","identifier":"modeoverride"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string formatted_time","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string formatted_time = reaper.format_timestr_pos(number tpos, string buf, integer modeoverride)","eel":"format_timestr_pos(tpos, #buf, int modeoverride)","python":"(Float tpos, String buf, Int buf_sz, Int modeoverride) = RPR_format_timestr_pos(tpos, buf, buf_sz, modeoverride)","cpp":"void format_timestr_pos(double tpos, char* buf, int buf_sz, int modeoverride)"},"title":"format_timestr_pos","chapters":["Api-Helper-Functions","Value Conversion"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"time formatting mode overrides: -1=proj default.\n    0=time\n    1=measures.beats + time\n    2=measures.beats\n    3=seconds\n    4=samples\n    5=h:m:s:f","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","guid","generate","create"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string gGUID","description":"set it to \"\""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.genGuid","return_values":[{"identifier":"gGUID","type":"string"}],"parameters":[{"identifier":"gGUID","type":"string"}]},"eel":{"return_values":["genGuid"],"parameters":[{"identifier":"#gGUID"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string gGUID","description":"the generated GUID"}],"prog_lang":"*"},"functioncall":{"lua":"string gGUID = reaper.genGuid(string gGUID)","eel":"genGuid(#gGUID)","python":"RPR_genGuid(GUID g)","cpp":"void genGuid(GUID* g)"},"title":"genGuid","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Generates a GUID.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","configuration variable","configvar","string","get"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string name","description":"the config-var, whose value you want"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.get_config_var_string","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"name","type":"string"}]},"eel":{"method_name":"get_config_var_string","return_values":["bool"],"parameters":[{"identifier":"\"name\""},{"identifier":"#buf"}]}},"requires":{"Reaper":"5.972"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, the configuration-variable is a valid string variable"},{"identifier":"string buf","description":"the current value of the configuration-variable"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string buf = reaper.get_config_var_string(string name)","eel":"bool get_config_var_string(\"name\", #buf)","python":"(Boolean retval, String name, String bufOut, Int bufOut_sz) = RPR_get_config_var_string(name, bufOut, bufOut_sz)","cpp":"bool get_config_var_string(const char* name, char* bufOut, int bufOut_sz)"},"title":"get_config_var_string","chapters":["Api-Helper-Functions","Config Variables"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"gets ini configuration variable value as string\n\nsee the <a href=\"Reaper_Config_Variables.html\">configuration-variable documentation</a> for more details","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","reaper.ini","get","path"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.get_ini_file","return_values":[{"identifier":"filename_with_path","type":"string"}],"parameters":[]},"eel":{"method_name":"get_ini_file","return_values":["bool"],"parameters":[{"identifier":"#retval"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string filename_with_path","description":"the reaper.ini with path"}],"prog_lang":"*"},"functioncall":{"lua":"string filename_with_path = reaper.get_ini_file()","eel":"bool get_ini_file(#retval)","python":"String retval = RPR_get_ini_file()","cpp":"const char* get_ini_file()"},"title":"get_ini_file","chapters":["File Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get reaper.ini full filename+path.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["shortcuts","get","description"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"KbdSectionInfo section","description":"the section, in which the action is located\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"},{"identifier":"integer cmdID","description":"the action command-id of the action, whose shortcut's description you want"},{"identifier":"integer shortcutidx","description":"the index of the shortcut"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetActionShortcutDesc","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"desc","type":"string"}],"parameters":[{"identifier":"section","type":"KbdSectionInfo"},{"identifier":"cmdID","type":"integer"},{"identifier":"shortcutidx","type":"integer"}]},"eel":{"method_name":"GetActionShortcutDesc","return_values":["bool"],"parameters":[{"type_name":"KbdSectionInfo","identifier":"section"},{"type_name":"int","identifier":"cmdID"},{"type_name":"int","identifier":"shortcutidx"},{"identifier":"#desc"}]}},"requires":{"Reaper":"6.72"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, such shortcuts exists; false, no such shortcut"},{"identifier":"string desc","description":"the description of the shortcut"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string desc = reaper.GetActionShortcutDesc(KbdSectionInfo section, integer cmdID, integer shortcutidx)","eel":"bool GetActionShortcutDesc(KbdSectionInfo section, int cmdID, int shortcutidx, #desc)","python":"(Boolean retval, KbdSectionInfo section, Int cmdID, Int shortcutidx, String descOut, Int descOut_sz) = RPR_GetActionShortcutDesc(section, cmdID, shortcutidx, descOut, descOut_sz)","cpp":"bool GetActionShortcutDesc(KbdSectionInfo* section, int cmdID, int shortcutidx, char* descOut, int descOut_sz)"},"title":"GetActionShortcutDesc","chapters":["Api-Helper-Functions","Shortcuts"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get the text description of a specific shortcut for the given command ID.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["mediaitemmanagement","get","active","take","item"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem item","description":"the MediaItem, whose active take you want to have returned"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetActiveTake","return_values":[{"identifier":"take","type":"MediaItem_Take"}],"parameters":[{"identifier":"item","type":"MediaItem"}]},"eel":{"method_name":"GetActiveTake","return_values":["MediaItem_Take"],"parameters":[{"type_name":"MediaItem","identifier":"item"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":"the active take of the MediaItem"}],"prog_lang":"*"},"functioncall":{"lua":"MediaItem_Take take = reaper.GetActiveTake(MediaItem item)","eel":"MediaItem_Take GetActiveTake(MediaItem item)","python":"MediaItem_Take take = RPR_GetActiveTake(MediaItem item)","cpp":"MediaItem_Take* GetActiveTake(MediaItem* item)"},"title":"GetActiveTake","chapters":["Mediaitem Take Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"get the active take in this item","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","get","play","pause","recording","state"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject ignoreProject","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetAllProjectPlayStates","return_values":[{"identifier":"proj_playstates","type":"integer"}],"parameters":[{"identifier":"ignoreProject","type":"ReaProject"}]},"eel":{"method_name":"GetAllProjectPlayStates","return_values":["int"],"parameters":[{"type_name":"ReaProject","identifier":"ignoreProject"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer proj_playstates","description":"the bitwise play-state of alle projects\n&1, at least one project is playing\n&2, at least one project is paused\n&4, at least one project is recording"}],"prog_lang":"*"},"functioncall":{"lua":"integer proj_playstates = reaper.GetAllProjectPlayStates(ReaProject ignoreProject)","eel":"int GetAllProjectPlayStates(ReaProject ignoreProject)","python":"Int retval = RPR_GetAllProjectPlayStates(ReaProject ignoreProject)","cpp":"int GetAllProjectPlayStates(ReaProject* ignoreProject)"},"title":"GetAllProjectPlayStates","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns the bitwise OR of all project play states, eg. and project is playing/pausing/recording (1=playing, 2=pause, 4=recording)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","reaper","app","version"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetAppVersion","return_values":[{"identifier":"reaper_app_version","type":"string"}],"parameters":[]},"eel":{"method_name":"GetAppVersion","return_values":["bool"],"parameters":[{"identifier":"#retval"}]}},"requires":{"Reaper":"6.18"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string reaper_app_version","description":"the returned version-number of Reaper"}],"prog_lang":"*"},"functioncall":{"lua":"string reaper_app_version = reaper.GetAppVersion()","eel":"bool GetAppVersion(#retval)","python":"String retval = RPR_GetAppVersion()","cpp":"const char* GetAppVersion()"},"title":"GetAppVersion","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns app version which may include an OS/arch signifier, such as: \"6.17\" (windows 32-bit), \"6.17/x64\" (windows 64-bit), \"6.17/OSX64\" (macOS 64-bit Intel), \"6.17/OSX\" (macOS 32-bit), \"6.17/macOS-arm64\", \"6.17/linux-x86_64\", \"6.17/linux-i686\", \"6.17/linux-aarch64\", \"6.17/linux-armv7l\", etc","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["audiomanagement","accessor","end","length"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"AudioAccessor accessor","description":"the AudioAccessor, whose end-time you want to have"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetAudioAccessorEndTime","return_values":[{"identifier":"length","type":"number"}],"parameters":[{"identifier":"accessor","type":"AudioAccessor"}]},"eel":{"method_name":"GetAudioAccessorEndTime","return_values":["double"],"parameters":[{"type_name":"AudioAccessor","identifier":"accessor"}]}},"requires":{"Reaper":"5.97"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number length","description":"the length of the AudioAccessor"}],"prog_lang":"*"},"functioncall":{"lua":"number length = reaper.GetAudioAccessorEndTime(AudioAccessor accessor)","eel":"double GetAudioAccessorEndTime(AudioAccessor accessor)","python":"Float retval = RPR_GetAudioAccessorEndTime(AudioAccessor accessor)","cpp":"double GetAudioAccessorEndTime(AudioAccessor* accessor)"},"title":"GetAudioAccessorEndTime","chapters":["Input/Output Devices","Accessor"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get the end time of the audio that can be returned from this accessor.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"AudioAccessor accessor","description":""},{"identifier":"string hashNeed128","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetAudioAccessorHash","return_values":[{"identifier":"hashNeed128","type":"string"}],"parameters":[{"identifier":"accessor","type":"AudioAccessor"},{"identifier":"hashNeed128","type":"string"}]},"eel":{"return_values":["GetAudioAccessorHash"],"parameters":[{"type_name":"AudioAccessor","identifier":"accessor"},{"identifier":"#hashNeed128"}]}},"requires":{"Reaper":"5.97"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string hashNeed128","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string hashNeed128 = reaper.GetAudioAccessorHash(AudioAccessor accessor, string hashNeed128)","eel":"GetAudioAccessorHash(AudioAccessor accessor, #hashNeed128)","python":"(AudioAccessor accessor, String hashNeed128) = RPR_GetAudioAccessorHash(accessor, hashNeed128)","cpp":"void GetAudioAccessorHash(AudioAccessor* accessor, char* hashNeed128)"},"title":"GetAudioAccessorHash","chapters":["Input/Output Devices","Accessor"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get a short hash string (128 chars or less) that will change only if the underlying samples change.\n\nDeprecated.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"AudioAccessor accessor","description":""},{"identifier":"integer samplerate","description":""},{"identifier":"integer numchannels","description":""},{"identifier":"number starttime_sec","description":""},{"identifier":"integer numsamplesperchannel","description":""},{"identifier":"reaper.array samplebuffer","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetAudioAccessorSamples","return_values":[{"identifier":"samples","type":"integer"}],"parameters":[{"identifier":"accessor","type":"AudioAccessor"},{"identifier":"samplerate","type":"integer"},{"identifier":"numchannels","type":"integer"},{"identifier":"starttime_sec","type":"number"},{"identifier":"numsamplesperchannel","type":"integer"},{"identifier":"samplebuffer","type":"reaper.array"}]},"eel":{"method_name":"GetAudioAccessorSamples","return_values":["int"],"parameters":[{"type_name":"AudioAccessor","identifier":"accessor"},{"type_name":"int","identifier":"samplerate"},{"type_name":"int","identifier":"numchannels"},{"identifier":"starttime_sec"},{"type_name":"int","identifier":"numsamplesperchannel"},{"type_name":"buffer_ptr","identifier":"samplebuffer"}]}},"requires":{"Reaper":"5.97"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer samples","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer samples = reaper.GetAudioAccessorSamples(AudioAccessor accessor, integer samplerate, integer numchannels, number starttime_sec, integer numsamplesperchannel, reaper.array samplebuffer)","eel":"int GetAudioAccessorSamples(AudioAccessor accessor, int samplerate, int numchannels, starttime_sec, int numsamplesperchannel, buffer_ptr samplebuffer)","python":"(Int retval, AudioAccessor accessor, Int samplerate, Int numchannels, Float starttime_sec, Int numsamplesperchannel, Float samplebuffer) = RPR_GetAudioAccessorSamples(accessor, samplerate, numchannels, starttime_sec, numsamplesperchannel, samplebuffer)","cpp":"int GetAudioAccessorSamples(AudioAccessor* accessor, int samplerate, int numchannels, double starttime_sec, int numsamplesperchannel, double* samplebuffer)"},"title":"GetAudioAccessorSamples","chapters":["Input/Output Devices","Accessor"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get a block of samples from the audio accessor. Samples are extracted immediately pre-FX, and returned interleaved (first sample of first channel, first sample of second channel...). Returns 0 if no audio, 1 if audio, -1 on error.\n\nThis function has special handling in Python, and only returns two objects, the API function return value, and the sample buffer. \n\nExample usage:\n    <pre><code>\n            tr = RPR_GetTrack(0, 0)\n            aa = RPR_CreateTrackAudioAccessor(tr)\n            buf = list([0]*2*1024) # 2 channels, 1024 samples each, initialized to zero\n            pos = 0.0\n            (ret, buf) = GetAudioAccessorSamples(aa, 44100, 2, pos, 1024, buf)\n            # buf now holds the first 2*1024 audio samples from the track.\n            # typically GetAudioAccessorSamples() would be called within a loop, increasing pos each time.\n    </code></pre>","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"AudioAccessor accessor","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetAudioAccessorStartTime","return_values":[{"identifier":"audio_start_time","type":"number"}],"parameters":[{"identifier":"accessor","type":"AudioAccessor"}]},"eel":{"method_name":"GetAudioAccessorStartTime","return_values":["double"],"parameters":[{"type_name":"AudioAccessor","identifier":"accessor"}]}},"requires":{"Reaper":"5.97"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number audio_start_time","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number audio_start_time = reaper.GetAudioAccessorStartTime(AudioAccessor accessor)","eel":"double GetAudioAccessorStartTime(AudioAccessor accessor)","python":"Float retval = RPR_GetAudioAccessorStartTime(AudioAccessor accessor)","cpp":"double GetAudioAccessorStartTime(AudioAccessor* accessor)"},"title":"GetAudioAccessorStartTime","chapters":["Input/Output Devices","Accessor"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get the start time of the audio that can be returned from this accessor.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string attribute","description":"the attribute to get, as set in Preferences -> Device\nMODE - the Audio system selected \nIDENT_IN - the selected Input device\nIDENT_OUT - the selected Output device \nBSIZE - the Buffer-sample-size (not the multiplier!)\nSRATE - the samplerate in Hz\nBPS - the sample-format (e.g 16, 24, 32 bit)"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetAudioDeviceInfo","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"desc","type":"string"}],"parameters":[{"identifier":"attribute","type":"string"}]},"eel":{"method_name":"GetAudioDeviceInfo","return_values":["bool"],"parameters":[{"identifier":"\"attribute\""},{"identifier":"#desc"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, if returning a value is possible; false, if not(unknown attribute or device not open)"},{"identifier":"string desc","description":"the returned value; will not return a value, if Preferences are opened"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string desc = reaper.GetAudioDeviceInfo(string attribute)","eel":"bool GetAudioDeviceInfo(\"attribute\", #desc)","python":"(Boolean retval, String attribute, String descOut, Int descOut_sz) = RPR_GetAudioDeviceInfo(attribute, descOut, descOut_sz)","cpp":"bool GetAudioDeviceInfo(const char* attribute, char* descOut, int descOut_sz)"},"title":"GetAudioDeviceInfo","chapters":["Input/Output Devices","Audio"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"get information about the currently open audio device. \nAttribute can be MODE, IDENT_IN, IDENT_OUT, BSIZE, SRATE, BPS. \n\nreturns false if unknown attribute or device not open.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string ident_str","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetConfigWantsDock","return_values":[{"identifier":"dock_id","type":"integer"}],"parameters":[{"identifier":"ident_str","type":"string"}]},"eel":{"method_name":"GetConfigWantsDock","return_values":["int"],"parameters":[{"identifier":"\"ident_str\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer dock_id","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer dock_id = reaper.GetConfigWantsDock(string ident_str)","eel":"int GetConfigWantsDock(\"ident_str\")","python":"Int retval = RPR_GetConfigWantsDock(String ident_str)","cpp":"int GetConfigWantsDock(const char* ident_str)"},"title":"GetConfigWantsDock","chapters":["User Interface","Dockers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"gets the dock ID desired by ident_str, if any","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetCurrentProjectInLoadSave","return_values":[{"identifier":"proj","type":"ReaProject"}],"parameters":[]},"eel":{"method_name":"GetCurrentProjectInLoadSave","return_values":["ReaProject"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":""}],"prog_lang":"*"},"functioncall":{"lua":"ReaProject proj = reaper.GetCurrentProjectInLoadSave()","eel":"ReaProject GetCurrentProjectInLoadSave()","python":"ReaProject proj = RPR_GetCurrentProjectInLoadSave()","cpp":"ReaProject* GetCurrentProjectInLoadSave()"},"title":"GetCurrentProjectInLoadSave","chapters":["Project Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns current project if in load/save (usually only used from project_config_extension_t)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["arrangeviewmanagement","cursor","context","track","item","envelope","get"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetCursorContext","return_values":[{"identifier":"context","type":"integer"}],"parameters":[]},"eel":{"method_name":"GetCursorContext","return_values":["int"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer context","description":"the cursor context\n  -1, unknown\n   0, track panels\n   1, items\n   2, envelopes"}],"prog_lang":"*"},"functioncall":{"lua":"integer context = reaper.GetCursorContext()","eel":"int GetCursorContext()","python":"Int retval = RPR_GetCursorContext()","cpp":"int GetCursorContext()"},"title":"GetCursorContext","chapters":["User Interface","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"return the current cursor context.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["arrangeviewmanagement","cursor","context","track","item","envelope","get","valid"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean want_last_valid","description":"true, get the last valid context; false, get the current context"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetCursorContext2","return_values":[{"identifier":"context","type":"integer"}],"parameters":[{"identifier":"want_last_valid","type":"boolean"}]},"eel":{"method_name":"GetCursorContext2","return_values":["int"],"parameters":[{"type_name":"bool","identifier":"want_last_valid"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer context","description":"the cursor context\n  -1, unknown\n   0, track panels\n   1, items\n   2, envelopes"}],"prog_lang":"*"},"functioncall":{"lua":"integer context = reaper.GetCursorContext2(boolean want_last_valid)","eel":"int GetCursorContext2(bool want_last_valid)","python":"Int retval = RPR_GetCursorContext2(Boolean want_last_valid)","cpp":"int GetCursorContext2(bool want_last_valid)"},"title":"GetCursorContext2","chapters":["User Interface","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"0 if track panels, 1 if items, 2 if envelopes, otherwise unknown (unlikely when want_last_valid is true)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","edit","cursor","get","last","position"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetCursorPosition","return_values":[{"identifier":"position","type":"number"}],"parameters":[]},"eel":{"method_name":"GetCursorPosition","return_values":["double"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number position","description":"the editcursor-position in seconds"}],"prog_lang":"*"},"functioncall":{"lua":"number position = reaper.GetCursorPosition()","eel":"double GetCursorPosition()","python":"Float retval = RPR_GetCursorPosition()","cpp":"double GetCursorPosition()"},"title":"GetCursorPosition","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"edit cursor position","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","edit","cursor","position","get","project"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetCursorPositionEx","return_values":[{"identifier":"position","type":"number"}],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"method_name":"GetCursorPositionEx","return_values":["double"],"parameters":[{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number position","description":"the position in seconds"}],"prog_lang":"*"},"functioncall":{"lua":"number position = reaper.GetCursorPositionEx(ReaProject proj)","eel":"double GetCursorPositionEx(ReaProject proj)","python":"Float retval = RPR_GetCursorPositionEx(ReaProject proj)","cpp":"double GetCursorPositionEx(ReaProject* proj)"},"title":"GetCursorPositionEx","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get the edit cursor position in a given project","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem item","description":"the MediaItem, whose color you want to get"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetDisplayedMediaItemColor","return_values":[{"identifier":"color","type":"integer"}],"parameters":[{"identifier":"item","type":"MediaItem"}]},"eel":{"method_name":"GetDisplayedMediaItemColor","return_values":["int"],"parameters":[{"type_name":"MediaItem","identifier":"item"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer color","description":"the native color-value of the MediaItem"}],"prog_lang":"*"},"functioncall":{"lua":"integer color = reaper.GetDisplayedMediaItemColor(MediaItem item)","eel":"int GetDisplayedMediaItemColor(MediaItem item)","python":"Int retval = RPR_GetDisplayedMediaItemColor(MediaItem item)","cpp":"int GetDisplayedMediaItemColor(MediaItem* item)"},"title":"GetDisplayedMediaItemColor","chapters":["Mediaitem Management","Item States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"gets the color of a MediaItem","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem item","description":""},{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetDisplayedMediaItemColor2","return_values":[{"identifier":"color","type":"integer"}],"parameters":[{"identifier":"item","type":"MediaItem"},{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"method_name":"GetDisplayedMediaItemColor2","return_values":["int"],"parameters":[{"type_name":"MediaItem","identifier":"item"},{"type_name":"MediaItem_Take","identifier":"take"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer color","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer color = reaper.GetDisplayedMediaItemColor2(MediaItem item, MediaItem_Take take)","eel":"int GetDisplayedMediaItemColor2(MediaItem item, MediaItem_Take take)","python":"Int retval = RPR_GetDisplayedMediaItemColor2(MediaItem item, MediaItem_Take take)","cpp":"int GetDisplayedMediaItemColor2(MediaItem* item, MediaItem_Take* take)"},"title":"GetDisplayedMediaItemColor2","chapters":["Mediaitem Management","Item States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the custom take, item, or track color that is used (according to the user preference) to color the media item. The returned color is OS dependent|0x01000000 (i.e. ColorToNative(r,g,b)|0x01000000), so a return of zero means \"no color\", not black.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["envelope management","get","attribute","value","height","offset","track"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"TrackEnvelope env","description":"the TrackEnvelope, of which you want to retrieve the attribute-value"},{"identifier":"string parmname","description":"the attribute, whose value you want; \nsee description for the attributes you can use for more details"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetEnvelopeInfo_Value","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"env","type":"TrackEnvelope"},{"identifier":"parmname","type":"string"}]},"eel":{"method_name":"GetEnvelopeInfo_Value","return_values":["double"],"parameters":[{"type_name":"TrackEnvelope","identifier":"env"},{"identifier":"\"parmname\""}]}},"requires":{"Reaper":"6.30"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":"the returned value of the attribute"}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.GetEnvelopeInfo_Value(TrackEnvelope env, string parmname)","eel":"double GetEnvelopeInfo_Value(TrackEnvelope env, \"parmname\")","python":"Float retval = RPR_GetEnvelopeInfo_Value(TrackEnvelope env, String parmname)","cpp":"double GetEnvelopeInfo_Value(TrackEnvelope* env, const char* parmname)"},"title":"GetEnvelopeInfo_Value","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Gets an envelope numerical-value attribute:\n    I_TCPY : int : Y offset of envelope relative to parent track (may be separate lane or overlap with track contents)\n    I_TCPH : int : visible height of envelope\n    I_TCPY_USED : int : Y offset of envelope relative to parent track, exclusive of padding\n    I_TCPH_USED : int : visible height of envelope, exclusive of padding\n    P_TRACK : MediaTrack * : parent track pointer (if any)\n    P_DESTTRACK : MediaTrack * : destination track pointer, if on a send\n    P_ITEM : MediaItem * : parent item pointer (if any)\n    P_TAKE : MediaItem_Take * : parent take pointer (if any)\n    I_SEND_IDX : int : 1-based index of send in P_TRACK, or 0 if not a send\n    I_HWOUT_IDX : int : 1-based index of hardware output in P_TRACK or 0 if not a hardware output\n    I_RECV_IDX : int : 1-based index of receive in P_DESTTRACK or 0 if not a send/receive","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"TrackEnvelope env","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetEnvelopeName","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"env","type":"TrackEnvelope"},{"identifier":"buf","type":"string"}]},"eel":{"method_name":"GetEnvelopeName","return_values":["bool"],"parameters":[{"type_name":"TrackEnvelope","identifier":"env"},{"identifier":"#buf"}]}},"requires":{"Reaper":"5.974"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string buf = reaper.GetEnvelopeName(TrackEnvelope env, string buf)","eel":"bool GetEnvelopeName(TrackEnvelope env, #buf)","python":"(Boolean retval, TrackEnvelope env, String bufOut, Int bufOut_sz) = RPR_GetEnvelopeName(env, bufOut, bufOut_sz)","cpp":"bool GetEnvelopeName(TrackEnvelope* env, char* bufOut, int bufOut_sz)"},"title":"GetEnvelopeName","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"TrackEnvelope envelope","description":""},{"identifier":"integer ptidx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetEnvelopePoint","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"time","type":"number"},{"identifier":"value","type":"number"},{"identifier":"shape","type":"integer"},{"identifier":"tension","type":"number"},{"identifier":"selected","type":"boolean"}],"parameters":[{"identifier":"envelope","type":"TrackEnvelope"},{"identifier":"ptidx","type":"integer"}]},"eel":{"method_name":"GetEnvelopePoint","return_values":["bool"],"parameters":[{"type_name":"TrackEnvelope","identifier":"envelope"},{"type_name":"int","identifier":"ptidx"},{"identifier":"&time"},{"identifier":"&value"},{"type_name":"int","identifier":"&shape"},{"identifier":"&tension"},{"type_name":"bool","identifier":"&selected"}]}},"requires":{"Reaper":"6.43"},"return_values":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number time","description":""},{"identifier":"number value","description":""},{"identifier":"integer shape","description":""},{"identifier":"number tension","description":""},{"identifier":"boolean selected","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number time, number value, integer shape, number tension, boolean selected = reaper.GetEnvelopePoint(TrackEnvelope envelope, integer ptidx)","eel":"bool GetEnvelopePoint(TrackEnvelope envelope, int ptidx, &time, &value, int &shape, &tension, bool &selected)","python":"(Boolean retval, TrackEnvelope envelope, Int ptidx, Float timeOut, Float valueOut, Int shapeOut, Float tensionOut, Boolean selectedOut) = RPR_GetEnvelopePoint(envelope, ptidx, timeOut, valueOut, shapeOut, tensionOut, selectedOut)","cpp":"bool GetEnvelopePoint(TrackEnvelope* envelope, int ptidx, double* timeOut, double* valueOut, int* shapeOut, double* tensionOut, bool* selectedOut)"},"title":"GetEnvelopePoint","chapters":["Envelope Management","Envelope Points"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get the attributes of an envelope point.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"TrackEnvelope envelope","description":""},{"identifier":"number time","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetEnvelopePointByTime","return_values":[{"identifier":"envelope_index","type":"integer"}],"parameters":[{"identifier":"envelope","type":"TrackEnvelope"},{"identifier":"time","type":"number"}]},"eel":{"method_name":"GetEnvelopePointByTime","return_values":["int"],"parameters":[{"type_name":"TrackEnvelope","identifier":"envelope"},{"identifier":"time"}]}},"requires":{"Reaper":"5.979"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer envelope_index","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer envelope_index = reaper.GetEnvelopePointByTime(TrackEnvelope envelope, number time)","eel":"int GetEnvelopePointByTime(TrackEnvelope envelope, time)","python":"Int retval = RPR_GetEnvelopePointByTime(TrackEnvelope envelope, Float time)","cpp":"int GetEnvelopePointByTime(TrackEnvelope* envelope, double time)"},"title":"GetEnvelopePointByTime","chapters":["Envelope Management","Envelope Points"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the envelope point at or immediately prior to the given time position. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"TrackEnvelope envelope","description":""},{"identifier":"integer autoitem_idx","description":""},{"identifier":"number time","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetEnvelopePointByTimeEx","return_values":[{"identifier":"envelope_index","type":"integer"}],"parameters":[{"identifier":"envelope","type":"TrackEnvelope"},{"identifier":"autoitem_idx","type":"integer"},{"identifier":"time","type":"number"}]},"eel":{"method_name":"GetEnvelopePointByTimeEx","return_values":["int"],"parameters":[{"type_name":"TrackEnvelope","identifier":"envelope"},{"type_name":"int","identifier":"autoitem_idx"},{"identifier":"time"}]}},"requires":{"Reaper":"5.979"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer envelope_index","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer envelope_index = reaper.GetEnvelopePointByTimeEx(TrackEnvelope envelope, integer autoitem_idx, number time)","eel":"int GetEnvelopePointByTimeEx(TrackEnvelope envelope, int autoitem_idx, time)","python":"Int retval = RPR_GetEnvelopePointByTimeEx(TrackEnvelope envelope, Int autoitem_idx, Float time)","cpp":"int GetEnvelopePointByTimeEx(TrackEnvelope* envelope, int autoitem_idx, double time)"},"title":"GetEnvelopePointByTimeEx","chapters":["Envelope Management","Envelope Points"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the envelope point at or immediately prior to the given time position.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"TrackEnvelope envelope","description":""},{"identifier":"integer autoitem_idx","description":""},{"identifier":"integer ptidx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetEnvelopePointEx","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"time","type":"number"},{"identifier":"value","type":"number"},{"identifier":"shape","type":"integer"},{"identifier":"tension","type":"number"},{"identifier":"selected","type":"boolean"}],"parameters":[{"identifier":"envelope","type":"TrackEnvelope"},{"identifier":"autoitem_idx","type":"integer"},{"identifier":"ptidx","type":"integer"}]},"eel":{"method_name":"GetEnvelopePointEx","return_values":["bool"],"parameters":[{"type_name":"TrackEnvelope","identifier":"envelope"},{"type_name":"int","identifier":"autoitem_idx"},{"type_name":"int","identifier":"ptidx"},{"identifier":"&time"},{"identifier":"&value"},{"type_name":"int","identifier":"&shape"},{"identifier":"&tension"},{"type_name":"bool","identifier":"&selected"}]}},"requires":{"Reaper":"6.43"},"return_values":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number time","description":""},{"identifier":"number value","description":""},{"identifier":"integer shape","description":""},{"identifier":"number tension","description":""},{"identifier":"boolean selected","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number time, number value, integer shape, number tension, boolean selected = reaper.GetEnvelopePointEx(TrackEnvelope envelope, integer autoitem_idx, integer ptidx)","eel":"bool GetEnvelopePointEx(TrackEnvelope envelope, int autoitem_idx, int ptidx, &time, &value, int &shape, &tension, bool &selected)","python":"(Boolean retval, TrackEnvelope envelope, Int autoitem_idx, Int ptidx, Float timeOut, Float valueOut, Int shapeOut, Float tensionOut, Boolean selectedOut) = RPR_GetEnvelopePointEx(envelope, autoitem_idx, ptidx, timeOut, valueOut, shapeOut, tensionOut, selectedOut)","cpp":"bool GetEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, int ptidx, double* timeOut, double* valueOut, int* shapeOut, double* tensionOut, bool* selectedOut)"},"title":"GetEnvelopePointEx","chapters":["Envelope Management","Envelope Points"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get the attributes of an envelope point.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"TrackEnvelope env","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetEnvelopeScalingMode","return_values":[{"identifier":"scaling_mode","type":"integer"}],"parameters":[{"identifier":"env","type":"TrackEnvelope"}]},"eel":{"method_name":"GetEnvelopeScalingMode","return_values":["int"],"parameters":[{"type_name":"TrackEnvelope","identifier":"env"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer scaling_mode","description":"the sscaling mode of the envelope\n0, no scaling\n1, fader scaling"}],"prog_lang":"*"},"functioncall":{"lua":"integer scaling_mode = reaper.GetEnvelopeScalingMode(TrackEnvelope env)","eel":"int GetEnvelopeScalingMode(TrackEnvelope env)","python":"Int retval = RPR_GetEnvelopeScalingMode(TrackEnvelope env)","cpp":"int GetEnvelopeScalingMode(TrackEnvelope* env)"},"title":"GetEnvelopeScalingMode","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the envelope scaling mode: 0=no scaling, 1=fader scaling. \n\nNote: All API functions deal with raw envelope point values, to convert raw from/to scaled values see ScaleFromEnvelopeMode, ScaleToEnvelopeMode.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["envelopemanagement","get","statechunk"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"TrackEnvelope env","description":"the Track-Envelope-object, whose trackstate you want to have"},{"identifier":"string str","description":"just pass \"\" to it"},{"identifier":"boolean isundo","description":"Undo flag is a performance/caching hint."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetEnvelopeStateChunk","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"str","type":"string"}],"parameters":[{"identifier":"env","type":"TrackEnvelope"},{"identifier":"str","type":"string"},{"identifier":"isundo","type":"boolean"}]},"eel":{"method_name":"GetEnvelopeStateChunk","return_values":["bool"],"parameters":[{"type_name":"TrackEnvelope","identifier":"env"},{"identifier":"#str"},{"type_name":"bool","identifier":"isundo"}]}},"requires":{"Reaper":"5.982"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, if it's successful; false, if unsuccessful"},{"identifier":"string str","description":"the state-chunk"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string str = reaper.GetEnvelopeStateChunk(TrackEnvelope env, string str, boolean isundo)","eel":"bool GetEnvelopeStateChunk(TrackEnvelope env, #str, bool isundo)","python":"(Boolean retval, TrackEnvelope env, String strNeedBig, Int strNeedBig_sz, Boolean isundoOptional) = RPR_GetEnvelopeStateChunk(env, strNeedBig, strNeedBig_sz, isundoOptional)","cpp":"bool GetEnvelopeStateChunk(TrackEnvelope* env, char* strNeedBig, int strNeedBig_sz, bool isundoOptional)"},"title":"GetEnvelopeStateChunk","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Gets the RPPXML state of an envelope.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["envelopemanagement","ui","state","get"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"TrackEnvelope env","description":"the envelope, whose ui-state you want"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetEnvelopeUIState","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"env","type":"TrackEnvelope"}]},"eel":{"method_name":"retval","return_values":["int"],"parameters":[{"type_name":"TrackEnvelope","identifier":"env"}]}},"requires":{"Reaper":"6.71"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the ui-state as flag-value"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.GetEnvelopeUIState(TrackEnvelope env)","eel":"int retval = GetEnvelopeUIState(TrackEnvelope env)","python":"Int retval = RPR_GetEnvelopeUIState(TrackEnvelope env)","cpp":"int retval = GetEnvelopeUIState(TrackEnvelope* env)"},"title":"GetEnvelopeUIState","chapters":["Envelope Management","Get"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"gets information on the UI state of an envelope: returns &1 if automation/modulation is playing back, &2 if automation is being actively written, &4 if the envelope recently had an effective automation mode change","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","reaper","get","exe","path"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetExePath","return_values":[{"identifier":"path","type":"string"}],"parameters":[]},"eel":{"method_name":"GetExePath","return_values":["bool"],"parameters":[{"identifier":"#retval"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string path","description":"the path to the reaper.exe or reaper.app"}],"prog_lang":"*"},"functioncall":{"lua":"string path = reaper.GetExePath()","eel":"bool GetExePath(#retval)","python":"String retval = RPR_GetExePath()","cpp":"const char* GetExePath()"},"title":"GetExePath","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns path of REAPER.exe (not including EXE), i.e. C:\\Program Files\\REAPER","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["extension state","state","value","get"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string section","description":"the section, in which the key and value is stored "},{"identifier":"string key","description":"the key, that contains the value"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetExtState","return_values":[{"identifier":"extstate_value","type":"string"}],"parameters":[{"identifier":"section","type":"string"},{"identifier":"key","type":"string"}]},"eel":{"method_name":"GetExtState","return_values":["bool"],"parameters":[{"identifier":"#retval"},{"identifier":"\"section\""},{"identifier":"\"key\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string extstate_value","description":"the value of the extstate"}],"prog_lang":"*"},"functioncall":{"lua":"string extstate_value= reaper.GetExtState(string section, string key)","eel":"bool GetExtState(#retval, \"section\", \"key\")","python":"String retval = RPR_GetExtState(String section, String key)","cpp":"const char* GetExtState(const char* section, const char* key)"},"title":"GetExtState","chapters":["Api-Helper-Functions","Extension States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get the extended state value for a specific section and key.\n\nNote: section and key are not case-sensitive","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["fxmanagement","get","focused","fx"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetFocusedFX","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"tracknumber","type":"integer"},{"identifier":"itemnumber","type":"integer"},{"identifier":"fxnumber","type":"integer"}],"parameters":[]},"eel":{"method_name":"GetFocusedFX","return_values":["int"],"parameters":[{"type_name":"int","identifier":"&tracknumber"},{"type_name":"int","identifier":"&itemnumber"},{"type_name":"int","identifier":"&fxnumber"}]}},"requires":{"Reaper":"5.979"},"return_values":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"integer retval","description":"0, if no FX window has focus\n1, if a track FX window has focus or was the last focused and still open\n2, if an item FX window has focus or was the last focused and still open"},{"identifier":"integer tracknumber","description":"tracknumber; 0, master track; 1, track 1; etc. "},{"identifier":"integer itemnumber","description":"-1, if it's a track-fx; 0 and higher, the mediaitem-number"},{"identifier":"integer fxnumber","description":"If item FX, fxnumber will have the high word be the take index, the low word the FX index"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, integer tracknumber, integer itemnumber, integer fxnumber = reaper.GetFocusedFX()","eel":"int GetFocusedFX(int &tracknumber, int &itemnumber, int &fxnumber)","python":"(Int retval, Int tracknumberOut, Int itemnumberOut, Int fxnumberOut) = RPR_GetFocusedFX(tracknumberOut, itemnumberOut, fxnumberOut)","cpp":"int GetFocusedFX(int* tracknumberOut, int* itemnumberOut, int* fxnumberOut)"},"title":"GetFocusedFX","chapters":["FX Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get focused FX. \n\n!!Deprecated, use GetFocusedFX2 instead\n\nSee GetLastTouchedFX","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["fxmanagement","get","focused","fx"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetFocusedFX2","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"tracknumber","type":"number"},{"identifier":"itemnumber","type":"number"},{"identifier":"fxnumber","type":"number"}],"parameters":[]},"eel":{"method_name":"GetFocusedFX2","return_values":["int"],"parameters":[{"type_name":"int","identifier":"&tracknumber"},{"type_name":"int","identifier":"&itemnumber"},{"type_name":"int","identifier":"&fxnumber"}]}},"requires":{"Reaper":"6.16"},"return_values":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"integer retval","description":"0, if no FX window has focus\n1, if a track FX window has focus or was the last focused and still open\n2, if an item FX window has focus or was the last focused and still open\n&4, if FX is no longer focused but still open"},{"identifier":"integer tracknumber","description":"tracknumber; 0, master track; 1, track 1; etc. "},{"identifier":"integer itemnumber","description":"-1, if it's a track-fx; 0 and higher, the mediaitem-number"},{"identifier":"integer fxnumber","description":"If item FX, fxnumber will have the high word be the take index, the low word the FX index"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, number tracknumber, number itemnumber, number fxnumber = reaper.GetFocusedFX2()","eel":"int GetFocusedFX2(int &tracknumber, int &itemnumber, int &fxnumber)","python":"(Int retval, Int tracknumberOut, Int itemnumberOut, Int fxnumberOut) = RPR_GetFocusedFX2(tracknumberOut, itemnumberOut, fxnumberOut)","cpp":"int GetFocusedFX2(int* tracknumberOut, int* itemnumberOut, int* fxnumberOut)"},"title":"GetFocusedFX2","chapters":["FX Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Return value has 1 set if track FX, 2 if take/item FX, &4 is set if FX is no longer focused but still open. \n\ntracknumber==0 means the master track, 1 means track 1, etc. itemnumber is zero-based (or -1 if not an item). ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["projectmanagement","free disk space","get","primary recording path","secondary recording path"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"integer pathidx","description":"recording path; 0, primary recording path; 1, secondary recording path"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetFreeDiskSpaceForRecordPath","return_values":[{"identifier":"diskspace_in_mb","type":"integer"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"pathidx","type":"integer"}]},"eel":{"method_name":"GetFreeDiskSpaceForRecordPath","return_values":["int"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"int","identifier":"pathidx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer diskspace_in_mb","description":"the freedisk-size in megabytes"}],"prog_lang":"*"},"functioncall":{"lua":"integer diskspace_in_mb = reaper.GetFreeDiskSpaceForRecordPath(ReaProject proj, integer pathidx)","eel":"int GetFreeDiskSpaceForRecordPath(ReaProject proj, int pathidx)","python":"Int retval = RPR_GetFreeDiskSpaceForRecordPath(ReaProject proj, Int pathidx)","cpp":"int GetFreeDiskSpaceForRecordPath(ReaProject* proj, int pathidx)"},"title":"GetFreeDiskSpaceForRecordPath","chapters":["Project Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns free disk space in megabytes, pathIdx 0 for normal, 1 for alternate.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["envelope management","get","create","fx envelope"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer fxindex","description":""},{"identifier":"integer parameterindex","description":""},{"identifier":"boolean create","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetFXEnvelope","return_values":[{"identifier":"env","type":"TrackEnvelope"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fxindex","type":"integer"},{"identifier":"parameterindex","type":"integer"},{"identifier":"create","type":"boolean"}]},"eel":{"method_name":"GetFXEnvelope","return_values":["TrackEnvelope"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fxindex"},{"type_name":"int","identifier":"parameterindex"},{"type_name":"bool","identifier":"create"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"TrackEnvelope env","description":""}],"prog_lang":"*"},"functioncall":{"lua":"TrackEnvelope env = reaper.GetFXEnvelope(MediaTrack track, integer fxindex, integer parameterindex, boolean create)","eel":"TrackEnvelope GetFXEnvelope(MediaTrack track, int fxindex, int parameterindex, bool create)","python":"TrackEnvelope env = RPR_GetFXEnvelope(MediaTrack track, Int fxindex, Int parameterindex, Boolean create)","cpp":"TrackEnvelope* GetFXEnvelope(MediaTrack* track, int fxindex, int parameterindex, bool create)"},"title":"GetFXEnvelope","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetGlobalAutomationOverride","return_values":[{"identifier":"automation_override","type":"integer"}],"parameters":[]},"eel":{"method_name":"GetGlobalAutomationOverride","return_values":["int"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer automation_override","description":"global automation override-mode\n  -1, no override\n  0, trim/read\n  1, read\n  2, touch\n  3, write\n  4, latch\n  5, bypass"}],"prog_lang":"*"},"functioncall":{"lua":"integer automation_override = reaper.GetGlobalAutomationOverride()","eel":"int GetGlobalAutomationOverride()","python":"Int retval = RPR_GetGlobalAutomationOverride()","cpp":"int GetGlobalAutomationOverride()"},"title":"GetGlobalAutomationOverride","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"return -1=no override, 0=trim/read, 1=read, 2=touch, 3=write, 4=latch, 5=bypass","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["arrangeviewmanagement","zoom","horizontal","get","factor"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetHZoomLevel","return_values":[{"identifier":"pixels_per_second","type":"number"}],"parameters":[]},"eel":{"method_name":"GetHZoomLevel","return_values":["double"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number pixels_per_second","description":"pixels/shown per second visible in arrange-view"}],"prog_lang":"*"},"functioncall":{"lua":"number pixels_per_second = reaper.GetHZoomLevel()","eel":"double GetHZoomLevel()","python":"Float retval = RPR_GetHZoomLevel()","cpp":"double GetHZoomLevel()"},"title":"GetHZoomLevel","chapters":["User Interface","Arrangeview Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns pixels/second","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["audio","audiomanagement","input","activity level","get"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer input_id","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetInputActivityLevel","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"input_id","type":"integer"}]},"eel":{"method_name":"GetInputActivityLevel","return_values":["double"],"parameters":[{"type_name":"int","identifier":"input_id"}]}},"requires":{"Reaper":"6.75"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.GetInputActivityLevel(integer input_id)","eel":"double GetInputActivityLevel(int input_id)","python":"Float RPR_GetInputActivityLevel(Int input_id)","cpp":"double GetInputActivityLevel(int input_id)"},"title":"GetInputActivityLevel","chapters":["Input/Output Devices","Audio"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns approximate input level if available, 0-511 mono inputs, |1024 for stereo pairs, 4096+devidx*32 for MIDI devices","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["audio","audiomanagement","input","channels","name","get"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer channelIndex","description":"the index of the input-channels, with 0 for the first, 1 for the second, etc."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetInputChannelName","return_values":[{"identifier":"chan_name","type":"string"}],"parameters":[{"identifier":"channelIndex","type":"integer"}]},"eel":{"method_name":"GetInputChannelName","return_values":["bool"],"parameters":[{"identifier":"#retval"},{"type_name":"int","identifier":"channelIndex"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string chan_name","description":"the name of the input-channel."}],"prog_lang":"*"},"functioncall":{"lua":"string chan_name = reaper.GetInputChannelName(integer channelIndex)","eel":"bool GetInputChannelName(#retval, int channelIndex)","python":"String retval = RPR_GetInputChannelName(Int channelIndex)","cpp":"const char* GetInputChannelName(int channelIndex)"},"title":"GetInputChannelName","chapters":["Input/Output Devices","Audio"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the name of a input-channel.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["audio","device","management","input","output","latency"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetInputOutputLatency","return_values":[{"isOptional":true,"type":"number","identifier":"retval"},{"identifier":"outputLatency","type":"number"}],"parameters":[]},"eel":{"return_values":["GetInputOutputLatency"],"parameters":[{"type_name":"int","identifier":"&inputlatency"},{"type_name":"int","identifier":"&outputLatency"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer inputlatency retval","description":"the input-latency"},{"identifier":"integer outputLatency","description":"the output-latency"}],"prog_lang":"*"},"functioncall":{"lua":"number inputlatency retval, number outputLatency = reaper.GetInputOutputLatency()","eel":"GetInputOutputLatency(int &inputlatency, int &outputLatency)","python":"(Int inputlatencyOut, Int outputLatencyOut) = RPR_GetInputOutputLatency(inputlatencyOut, outputLatencyOut)","cpp":"void GetInputOutputLatency(int* inputlatencyOut, int* outputLatencyOut)"},"title":"GetInputOutputLatency","chapters":["Input/Output Devices","Audio"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Gets the audio device input/output latency in samples","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetItemEditingTime2","return_values":[{"identifier":"position","type":"number"},{"identifier":"which_item","type":"PCM_source"},{"identifier":"flags","type":"integer"}],"parameters":[]},"eel":{"method_name":"GetItemEditingTime2","return_values":["double"],"parameters":[{"type_name":"PCM_source","identifier":"&which_item"},{"type_name":"int","identifier":"&flags"}]}},"requires":{"Reaper":"5.97"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"number position","description":""},{"identifier":"PCM_source which_item","description":""},{"identifier":"integer flags","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number position, PCM_source which_item, integer flags = reaper.GetItemEditingTime2()","eel":"double GetItemEditingTime2(PCM_source &which_item, int &flags)","python":"(Float retval, PCM_source* which_itemOut, Int flagsOut) = RPR_GetItemEditingTime2(which_itemOut, flagsOut)","cpp":"double GetItemEditingTime2(PCM_source** which_itemOut, int* flagsOut)"},"title":"GetItemEditingTime2","chapters":["Audio Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns time of relevant edit, set which_item to the pcm_source (if applicable), flags (if specified) will be set to 1 for edge resizing, 2 for fade change, 4 for item move, 8 for item slip edit (edit cursor time or start of item)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["mediaitemmanagement","get","item","mediaitem","mediaitem take","take","at position"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer screen_x","description":"the x-position in pixels"},{"identifier":"integer screen_y","description":"the y-position in pixels"},{"identifier":"boolean allow_locked","description":"true, allow getting locked items as well; false, don't get locked items"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetItemFromPoint","return_values":[{"identifier":"item","type":"MediaItem"},{"identifier":"take","type":"MediaItem_Take"}],"parameters":[{"identifier":"screen_x","type":"integer"},{"identifier":"screen_y","type":"integer"},{"identifier":"allow_locked","type":"boolean"}]},"eel":{"method_name":"GetItemFromPoint","return_values":["MediaItem"],"parameters":[{"type_name":"int","identifier":"screen_x"},{"type_name":"int","identifier":"screen_y"},{"type_name":"bool","identifier":"allow_locked"},{"type_name":"MediaItem_Take","identifier":"&take"}]}},"requires":{"Reaper":"5.975"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem item","description":"the MediaItem at the position"},{"identifier":"MediaItem_Take take","description":"the MediaItem_Take at the position"}],"prog_lang":"*"},"functioncall":{"lua":"MediaItem item, MediaItem_Take take = reaper.GetItemFromPoint(integer screen_x, integer screen_y, boolean allow_locked)","eel":"MediaItem GetItemFromPoint(int screen_x, int screen_y, bool allow_locked, MediaItem_Take &take)","python":"MediaItem item = RPR_GetItemFromPoint(Int screen_x, Int screen_y, Boolean allow_locked, MediaItem_Take* takeOutOptional)","cpp":"MediaItem* GetItemFromPoint(int screen_x, int screen_y, bool allow_locked, MediaItem_Take** takeOutOptional)"},"title":"GetItemFromPoint","chapters":["Mediaitem Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the first item at the screen coordinates specified. If allow_locked is false, locked items are ignored. If takeOutOptional specified, returns the take hit(in Lua, this function simply returns the take as additional return-value).\n\nNote: You can not get the item at screen-coordinates, where it is hidden by other windows.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["mediaitemmanagement","get","project","context","item"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem item","description":"the MediaItem, whose project-location you want to know"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetItemProjectContext","return_values":[{"identifier":"proj","type":"ReaProject"}],"parameters":[{"identifier":"item","type":"MediaItem"}]},"eel":{"method_name":"GetItemProjectContext","return_values":["ReaProject"],"parameters":[{"type_name":"MediaItem","identifier":"item"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project, in which the MediaItem is located; returned as a reaper-object"}],"prog_lang":"*"},"functioncall":{"lua":"ReaProject proj = reaper.GetItemProjectContext(MediaItem item)","eel":"ReaProject GetItemProjectContext(MediaItem item)","python":"ReaProject proj = RPR_GetItemProjectContext(MediaItem item)","cpp":"ReaProject* GetItemProjectContext(MediaItem* item)"},"title":"GetItemProjectContext","chapters":["Mediaitem Management","Item States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the project, in which a MediaItem is located.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["mediaitemmanagement","statechunk","item","get"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem item","description":"the MediaItem, whose statechunk you want"},{"identifier":"string str","description":"just pass \"\" to it"},{"identifier":"boolean isundo","description":"Undo flag is a performance/caching hint."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetItemStateChunk","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"str","type":"string"}],"parameters":[{"identifier":"item","type":"MediaItem"},{"identifier":"str","type":"string"},{"identifier":"isundo","type":"boolean"}]},"eel":{"method_name":"GetItemStateChunk","return_values":["bool"],"parameters":[{"type_name":"MediaItem","identifier":"item"},{"identifier":"#str"},{"type_name":"bool","identifier":"isundo"}]}},"requires":{"Reaper":"5.982"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, getting statechunk was successful"},{"identifier":"string str","description":"the statechunk of the MediaItem"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string str = reaper.GetItemStateChunk(MediaItem item, string str, boolean isundo)","eel":"bool GetItemStateChunk(MediaItem item, #str, bool isundo)","python":"(Boolean retval, MediaItem item, String strNeedBig, Int strNeedBig_sz, Boolean isundoOptional) = RPR_GetItemStateChunk(item, strNeedBig, strNeedBig_sz, isundoOptional)","cpp":"bool GetItemStateChunk(MediaItem* item, char* strNeedBig, int strNeedBig_sz, bool isundoOptional)"},"title":"GetItemStateChunk","chapters":["Mediaitem Management","Item States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Gets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["userinterface","get","color","theme","file","path"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetLastColorThemeFile","return_values":[{"identifier":"theme_filename_with_path","type":"string"}],"parameters":[]},"eel":{"method_name":"GetLastColorThemeFile","return_values":["bool"],"parameters":[{"identifier":"#retval"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string theme_filename_with_path","description":"the path and filename of the last used theme"}],"prog_lang":"*"},"functioncall":{"lua":"string theme_filename_with_path = reaper.GetLastColorThemeFile()","eel":"bool GetLastColorThemeFile(#retval)","python":"String retval = RPR_GetLastColorThemeFile()","cpp":"const char* GetLastColorThemeFile()"},"title":"GetLastColorThemeFile","chapters":["Theme Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get the last used color-theme-file.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["markermanagement","get","last","current","region","marker"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"number time","description":"the position to check in seconds"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetLastMarkerAndCurRegion","return_values":[{"isOptional":true,"type":"integer","identifier":"retval"},{"identifier":"regionidx","type":"integer"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"time","type":"number"}]},"eel":{"return_values":["GetLastMarkerAndCurRegion"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"identifier":"time"},{"type_name":"int","identifier":"&markeridx"},{"type_name":"int","identifier":"&regionidx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer markeridx retval","description":"the last marker-number(not shown number!) before parameter time"},{"identifier":"integer regionidx","description":"the region, in which parameter time lies"}],"prog_lang":"*"},"functioncall":{"lua":"integer markeridx retval, integer regionidx = reaper.GetLastMarkerAndCurRegion(ReaProject proj, number time)","eel":"GetLastMarkerAndCurRegion(ReaProject proj, time, int &markeridx, int &regionidx)","python":"(ReaProject proj, Float time, Int markeridxOut, Int regionidxOut) = RPR_GetLastMarkerAndCurRegion(proj, time, markeridxOut, regionidxOut)","cpp":"void GetLastMarkerAndCurRegion(ReaProject* proj, double time, int* markeridxOut, int* regionidxOut)"},"title":"GetLastMarkerAndCurRegion","chapters":["Marker Management","Project Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get the last project marker before time, and/or the project region that includes time. \nmarkeridx and regionidx are returned not necessarily as the displayed marker/region index, but as the index that can be passed to EnumProjectMarkers. Either or both of markeridx and regionidx may be NULL. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["fxmanagement","last","touched","get","parameter","track"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetLastTouchedFX","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"tracknumber","type":"integer"},{"identifier":"fxnumber","type":"integer"},{"identifier":"paramnumber","type":"integer"}],"parameters":[]},"eel":{"method_name":"GetLastTouchedFX","return_values":["bool"],"parameters":[{"type_name":"int","identifier":"&tracknumber"},{"type_name":"int","identifier":"&fxnumber"},{"type_name":"int","identifier":"&paramnumber"}]}},"requires":{"Reaper":"5.979"},"return_values":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"boolean retval","description":"true, if last touched FX parameter is valid; false, if otherwise"},{"identifier":"integer tracknumber","description":"the tracknumber; 0 means the master track, 1 means track 1, etc.\nIf the high word of tracknumber is nonzero, it refers to the 1-based item index (1 is the first item on the track, etc)."},{"identifier":"integer fxnumber","description":"the id of the FX in the track tracknumber, zero-based\nFor track FX, the low 24 bits of fxnumber refer to the FX index in the chain, and if the next 8 bits are 01, then the FX is record FX. \nFor item FX, the low word defines the FX index in the chain, and the high word defines the take number. "},{"identifier":"integer paramnumber","description":"the id of the last parameter touched, zero-based"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer tracknumber, integer fxnumber, integer paramnumber = reaper.GetLastTouchedFX()","eel":"bool GetLastTouchedFX(int &tracknumber, int &fxnumber, int &paramnumber)","python":"(Boolean retval, Int tracknumberOut, Int fxnumberOut, Int paramnumberOut) = RPR_GetLastTouchedFX(tracknumberOut, fxnumberOut, paramnumberOut)","cpp":"bool GetLastTouchedFX(int* tracknumberOut, int* fxnumberOut, int* paramnumberOut)"},"title":"GetLastTouchedFX","chapters":["FX Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the last touched track, it's last touched parameter and tracknumber.\n\nThe low word of tracknumber is the 1-based track index -- 0 means the master track, 1 means track 1, etc. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","get","last","touched","track"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetLastTouchedTrack","return_values":[{"identifier":"tr","type":"MediaTrack"}],"parameters":[]},"eel":{"method_name":"GetLastTouchedTrack","return_values":["MediaTrack"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack tr","description":"the last touched MediaTrack as an object"}],"prog_lang":"*"},"functioncall":{"lua":"MediaTrack tr = reaper.GetLastTouchedTrack()","eel":"MediaTrack GetLastTouchedTrack()","python":"MediaTrack tr = RPR_GetLastTouchedTrack()","cpp":"MediaTrack* GetLastTouchedTrack()"},"title":"GetLastTouchedTrack","chapters":["Track Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Gets the MediaTrack, that has been last touched.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["userinterface","get","reaper","window"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetMainHwnd","return_values":[{"identifier":"hwnd","type":"HWND"}],"parameters":[]},"eel":{"method_name":"GetMainHwnd","return_values":["HWND"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"HWND hwnd","description":"the Reaper-Window"}],"prog_lang":"*"},"functioncall":{"lua":"HWND hwnd = reaper.GetMainHwnd()","eel":"HWND GetMainHwnd()","python":"HWND hwnd = RPR_GetMainHwnd()","cpp":"HWND GetMainHwnd()"},"title":"GetMainHwnd","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get the Reaper-window as an HWND-object","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","get","master","track","mute","solo","flag"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetMasterMuteSoloFlags","return_values":[{"identifier":"mastermutesolo","type":"integer"}],"parameters":[]},"eel":{"method_name":"GetMasterMuteSoloFlags","return_values":["int"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer mastermutesolo","description":"state of mute/solo of the master-track; &1=master mute,&2=master solo."}],"prog_lang":"*"},"functioncall":{"lua":"integer mastermutesolo = reaper.GetMasterMuteSoloFlags()","eel":"int GetMasterMuteSoloFlags()","python":"Int retval = RPR_GetMasterMuteSoloFlags()","cpp":"int GetMasterMuteSoloFlags()"},"title":"GetMasterMuteSoloFlags","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Deprecated: Get the mute/solo-state of the master-track. This is deprecated as you can just query the master track as well.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","get","master","track"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetMasterTrack","return_values":[{"identifier":"track","type":"MediaTrack"}],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"method_name":"GetMasterTrack","return_values":["MediaTrack"],"parameters":[{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack track","description":"the MediaTrack-object of the MasterTrack"}],"prog_lang":"*"},"functioncall":{"lua":"MediaTrack track = reaper.GetMasterTrack(ReaProject proj)","eel":"MediaTrack GetMasterTrack(ReaProject proj)","python":"MediaTrack track = RPR_GetMasterTrack(ReaProject proj)","cpp":"MediaTrack* GetMasterTrack(ReaProject* proj)"},"title":"GetMasterTrack","chapters":["Track Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get a MediaTrack-object of the MasterTrack.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","get","master","visibility","tcp","mcp"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetMasterTrackVisibility","return_values":[{"identifier":"master_visibility","type":"integer"}],"parameters":[]},"eel":{"method_name":"GetMasterTrackVisibility","return_values":["int"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer master_visibility","description":"state of visibility of the master-track\n&1 - 1, master track visible in tcp; 0, master track invisible in mixer\n&2 - 2, master track invisible in mixer; 0, master track visible in mixer"}],"prog_lang":"*"},"functioncall":{"lua":"integer master_visibility = reaper.GetMasterTrackVisibility()","eel":"int GetMasterTrackVisibility()","python":"Int retval = RPR_GetMasterTrackVisibility()","cpp":"int GetMasterTrackVisibility()"},"title":"GetMasterTrackVisibility","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get the visibility of the master-track in mixer and track-control-panel.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["midimanagement","device","input","get","maximum"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetMaxMidiInputs","return_values":[{"identifier":"max_midi_inputs","type":"integer"}],"parameters":[]},"eel":{"method_name":"GetMaxMidiInputs","return_values":["int"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer max_midi_inputs","description":"the number of max midi inputs"}],"prog_lang":"*"},"functioncall":{"lua":"integer max_midi_inputs = reaper.GetMaxMidiInputs()","eel":"int GetMaxMidiInputs()","python":"Int retval = RPR_GetMaxMidiInputs()","cpp":"int GetMaxMidiInputs()"},"title":"GetMaxMidiInputs","chapters":["Input/Output Devices","Midi"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns max dev for midi inputs","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["midimanagement","device","output","get","maximum"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetMaxMidiOutputs","return_values":[{"identifier":"max_midi_outputs","type":"integer"}],"parameters":[]},"eel":{"method_name":"GetMaxMidiOutputs","return_values":["int"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer max_midi_outputs","description":"the number of max midi outputs"}],"prog_lang":"*"},"functioncall":{"lua":"integer max_midi_outputs = reaper.GetMaxMidiOutputs()","eel":"int GetMaxMidiOutputs()","python":"Int retval = RPR_GetMaxMidiOutputs()","cpp":"int GetMaxMidiOutputs()"},"title":"GetMaxMidiOutputs","chapters":["Input/Output Devices","Midi"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns max dev for midi outputs","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["filemanagement","get","metadata"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"PCM_source mediaSource","description":"the PCM-source of a file, whose metadata you want to get"},{"identifier":"string identifier","description":"the identifier; use \"\" to get all availbale identifier from the sourcefile"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetMediaFileMetadata","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"mediaSource","type":"PCM_source"},{"identifier":"identifier","type":"string"}]},"eel":{"method_name":"GetMediaFileMetadata","return_values":["int"],"parameters":[{"type_name":"PCM_source","identifier":"mediaSource"},{"identifier":"\"identifier\""},{"identifier":"#buf"}]}},"requires":{"Reaper":"6.59"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":"0, identifier not available; 1, identifier available"},{"identifier":"string buf","description":"the returned metadata-value of the identifier"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, string buf = reaper.GetMediaFileMetadata(PCM_source mediaSource, string identifier)","eel":"int GetMediaFileMetadata(PCM_source mediaSource, \"identifier\", #buf)","python":"(Int retval, PCM_source mediaSource, String identifier, String bufOutNeedBig, Int bufOutNeedBig_sz) = RPR_GetMediaFileMetadata(mediaSource, identifier, bufOutNeedBig, bufOutNeedBig_sz)","cpp":"int GetMediaFileMetadata(PCM_source* mediaSource, const char* identifier, char* bufOutNeedBig, int bufOutNeedBig_sz)"},"title":"GetMediaFileMetadata","chapters":["File Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get text-based metadata from a media file for a given identifier. Call with identifier=\"\" to list all identifiers contained in the file, separated by newlines. May return \"[Binary data]\" for metadata that REAPER doesn't handle.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["mediaitemmanagement","get","item","project"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project."},{"identifier":"integer itemidx","description":"the number of the item within the whole project; 0 for the first, 1 for the second, etc; numberingorder depending on, when was a MediaItem added to the project(recording, import, etc)"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetMediaItem","return_values":[{"identifier":"item","type":"MediaItem"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"itemidx","type":"integer"}]},"eel":{"method_name":"GetMediaItem","return_values":["MediaItem"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"int","identifier":"itemidx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem item","description":"the requested MediaItem as a MediaItem-object"}],"prog_lang":"*"},"functioncall":{"lua":"MediaItem item = reaper.GetMediaItem(ReaProject proj, integer itemidx)","eel":"MediaItem GetMediaItem(ReaProject proj, int itemidx)","python":"MediaItem item = RPR_GetMediaItem(ReaProject proj, Int itemidx)","cpp":"MediaItem* GetMediaItem(ReaProject* proj, int itemidx)"},"title":"GetMediaItem","chapters":["Mediaitem Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"get an item from a project by item count (zero-based)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","mediaitemmanagement","get","track","mediaitem"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem item","description":"the MediaItem, whose track you want to know"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetMediaItem_Track","return_values":[{"identifier":"track","type":"MediaTrack"}],"parameters":[{"identifier":"item","type":"MediaItem"}]},"eel":{"method_name":"GetMediaItem_Track","return_values":["MediaTrack"],"parameters":[{"type_name":"MediaItem","identifier":"item"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack track","description":"the returned MediaTrack, in which the MediaItem lies"}],"prog_lang":"*"},"functioncall":{"lua":"MediaTrack track = reaper.GetMediaItem_Track(MediaItem item)","eel":"MediaTrack GetMediaItem_Track(MediaItem item)","python":"MediaTrack track = RPR_GetMediaItem_Track(MediaItem item)","cpp":"MediaTrack* GetMediaItem_Track(MediaItem* item)"},"title":"GetMediaItem_Track","chapters":["Mediaitem Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get parent track of media item","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["miscellaneous","get","armed","command"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetArmedCommand","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"sec","type":"string"}],"parameters":[]},"eel":{"method_name":"GetArmedCommand","return_values":["int"],"parameters":[{"identifier":"#sec"}]}},"requires":{"Reaper":"5.95"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":""},{"identifier":"string sec","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, string sec = reaper.GetArmedCommand()","eel":"int GetArmedCommand(#sec)","python":"(Int retval, String secOut, Int secOut_sz) = RPR_GetArmedCommand(secOut, secOut_sz)","cpp":"int GetArmedCommand(char* secOut, int secOut_sz)"},"title":"GetArmedCommand","chapters":["Api-Helper-Functions","Actions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"gets the currently armed command and section name (returns 0 if nothing armed). section name is empty-string for main section.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["miscellaneous","get","armed","command"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer cmd","description":""},{"identifier":"string sectionname","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ArmCommand","return_values":[],"parameters":[{"identifier":"cmd","type":"integer"},{"identifier":"sectionname","type":"string"}]},"eel":{"return_values":["ArmCommand"],"parameters":[{"type_name":"int","identifier":"cmd"},{"identifier":"\"sectionname\""}]}},"requires":{"Reaper":"5.95"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ArmCommand(integer cmd, string sectionname)","eel":"ArmCommand(int cmd, \"sectionname\")","python":"RPR_ArmCommand(Int cmd, String sectionname)","cpp":"void ArmCommand(int cmd, const char* sectionname)"},"title":"ArmCommand","chapters":["Api-Helper-Functions","Actions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"arms a command (or disarms if 0 passed) in section sectionname (empty string for main)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["mediaitemmanagement","get","parameter","numerical values"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem item","description":"the MediaItem, whose value you want to have"},{"identifier":"string parmname","description":"the parametername, whose value you want to have; refer description for more details"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetMediaItemInfo_Value","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"item","type":"MediaItem"},{"identifier":"parmname","type":"string"}]},"eel":{"method_name":"GetMediaItemInfo_Value","return_values":["double"],"parameters":[{"type_name":"MediaItem","identifier":"item"},{"identifier":"\"parmname\""}]}},"requires":{"Reaper":"6.34"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":"the value you requested"}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.GetMediaItemInfo_Value(MediaItem item, string parmname)","eel":"double GetMediaItemInfo_Value(MediaItem item, \"parmname\")","python":"Float retval = RPR_GetMediaItemInfo_Value(MediaItem item, String parmname)","cpp":"double GetMediaItemInfo_Value(MediaItem* item, const char* parmname)"},"title":"GetMediaItemInfo_Value","chapters":["Mediaitem Management","Item States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get media item numerical-value attributes.\n    B_MUTE : bool * : muted (item solo overrides). setting this value will clear C_MUTE_SOLO.\n    B_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.\n    C_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.\n    B_LOOPSRC : bool * : loop source\n    B_ALLTAKESPLAY : bool * : all takes play\n    B_UISEL : bool * : selected in arrange view\n    C_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1\n    C_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1\n    C_LOCK : char * : locked, &1=locked, &2=lock to active take\n    D_VOL : double * : item volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\n    D_POSITION : double * : item position in seconds\n    D_LENGTH : double * : item length in seconds\n    D_SNAPOFFSET : double * : item snap offset in seconds\n    D_FADEINLEN : double * : item manual fadein length in seconds\n    D_FADEOUTLEN : double * : item manual fadeout length in seconds\n    D_FADEINDIR : double * : item fadein curvature, -1..1\n    D_FADEOUTDIR : double * : item fadeout curvature, -1..1\n    D_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein\n    D_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout\n    C_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear\n    C_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear\n    I_GROUPID : int * : group ID, 0=no group\n    I_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\n    I_LASTH : int * : height in pixels (read-only)\n    I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\n    I_CURTAKE : int * : active take number\n    IP_ITEMNUMBER : int : item number on this track (read-only, returns the item number directly)\n    F_FREEMODE_Y : float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1)\n    F_FREEMODE_H : float * : free item positioning height, 0=no height, 1=full height of track (will never be 0)\n    P_TRACK : MediaTrack * : (read-only)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["mediaitemmanagement","take","count","number"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem item","description":"the MediaItem-object, whose number of takes you want to know."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetMediaItemNumTakes","return_values":[{"identifier":"itemnumtakes","type":"integer"}],"parameters":[{"identifier":"item","type":"MediaItem"}]},"eel":{"method_name":"GetMediaItemNumTakes","return_values":["int"],"parameters":[{"type_name":"MediaItem","identifier":"item"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer itemnumtakes","description":"the number of takes within the MediaItem-object"}],"prog_lang":"*"},"functioncall":{"lua":"integer itemnumtakes = reaper.GetMediaItemNumTakes(MediaItem item)","eel":"int GetMediaItemNumTakes(MediaItem item)","python":"Int retval = RPR_GetMediaItemNumTakes(MediaItem item)","cpp":"int GetMediaItemNumTakes(MediaItem* item)"},"title":"GetMediaItemNumTakes","chapters":["Mediaitem Take Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get the number of takes in a MediaItem-object.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["mediaitemmanagement","item","take","get"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem item","description":"the MediaItem, whose take you want to request"},{"identifier":"integer tk","description":"the id of the take, that you want to request"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetMediaItemTake","return_values":[{"identifier":"take","type":"MediaItem_Take"}],"parameters":[{"identifier":"item","type":"MediaItem"},{"identifier":"tk","type":"integer"}]},"eel":{"method_name":"GetMediaItemTake","return_values":["MediaItem_Take"],"parameters":[{"type_name":"MediaItem","identifier":"item"},{"type_name":"int","identifier":"tk"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":"the returned take as a MediaItem_Take-object"}],"prog_lang":"*"},"functioncall":{"lua":"MediaItem_Take take = reaper.GetMediaItemTake(MediaItem item, integer tk)","eel":"MediaItem_Take GetMediaItemTake(MediaItem item, int tk)","python":"MediaItem_Take take = RPR_GetMediaItemTake(MediaItem item, Int tk)","cpp":"MediaItem_Take* GetMediaItemTake(MediaItem* item, int tk)"},"title":"GetMediaItemTake","chapters":["Mediaitem Take Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get a take from a MediaItem as a MediaItem_Take-object.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["mediaitemmanagement","take","get","item"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":"the MediaItem_Take-object, whose accompanying MediaItem you want to request."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetMediaItemTake_Item","return_values":[{"identifier":"item","type":"MediaItem"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"method_name":"GetMediaItemTake_Item","return_values":["MediaItem"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem item","description":"the MediaItem, in which the MediaItem_Take takes place."}],"prog_lang":"*"},"functioncall":{"lua":"MediaItem item = reaper.GetMediaItemTake_Item(MediaItem_Take take)","eel":"MediaItem GetMediaItemTake_Item(MediaItem_Take take)","python":"MediaItem item = RPR_GetMediaItemTake_Item(MediaItem_Take take)","cpp":"MediaItem* GetMediaItemTake_Item(MediaItem_Take* take)"},"title":"GetMediaItemTake_Item","chapters":["Mediaitem Take Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get parent item of media item take.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"number peakrate","description":""},{"identifier":"number starttime","description":""},{"identifier":"integer numchannels","description":""},{"identifier":"integer numsamplesperchannel","description":""},{"identifier":"integer want_extra_type","description":""},{"identifier":"reaper.array buf","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetMediaItemTake_Peaks","return_values":[{"identifier":"peaks","type":"integer"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"peakrate","type":"number"},{"identifier":"starttime","type":"number"},{"identifier":"numchannels","type":"integer"},{"identifier":"numsamplesperchannel","type":"integer"},{"identifier":"want_extra_type","type":"integer"},{"identifier":"buf","type":"reaper.array"}]},"eel":{"method_name":"GetMediaItemTake_Peaks","return_values":["int"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"identifier":"peakrate"},{"identifier":"starttime"},{"type_name":"int","identifier":"numchannels"},{"type_name":"int","identifier":"numsamplesperchannel"},{"type_name":"int","identifier":"want_extra_type"},{"type_name":"buffer_ptr","identifier":"buf"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer peaks","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer peaks = reaper.GetMediaItemTake_Peaks(MediaItem_Take take, number peakrate, number starttime, integer numchannels, integer numsamplesperchannel, integer want_extra_type, reaper.array buf)","eel":"int GetMediaItemTake_Peaks(MediaItem_Take take, peakrate, starttime, int numchannels, int numsamplesperchannel, int want_extra_type, buffer_ptr buf)","python":"(Int retval, MediaItem_Take take, Float peakrate, Float starttime, Int numchannels, Int numsamplesperchannel, Int want_extra_type, Float buf) = RPR_GetMediaItemTake_Peaks(take, peakrate, starttime, numchannels, numsamplesperchannel, want_extra_type, buf)","cpp":"int GetMediaItemTake_Peaks(MediaItem_Take* take, double peakrate, double starttime, int numchannels, int numsamplesperchannel, int want_extra_type, double* buf)"},"title":"GetMediaItemTake_Peaks","chapters":["Mediaitem Take Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.\npeakrate is number of pixels in seconds.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetMediaItemTake_Source","return_values":[{"identifier":"source","type":"PCM_source"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"method_name":"GetMediaItemTake_Source","return_values":["PCM_source"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PCM_source source","description":""}],"prog_lang":"*"},"functioncall":{"lua":"PCM_source source = reaper.GetMediaItemTake_Source(MediaItem_Take take)","eel":"PCM_source GetMediaItemTake_Source(MediaItem_Take take)","python":"PCM_source source = RPR_GetMediaItemTake_Source(MediaItem_Take take)","cpp":"PCM_source* GetMediaItemTake_Source(MediaItem_Take* take)"},"title":"GetMediaItemTake_Source","chapters":["Mediaitem Take Management","Take States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get media source of media item take","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetMediaItemTake_Track","return_values":[{"identifier":"track","type":"MediaTrack"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"method_name":"GetMediaItemTake_Track","return_values":["MediaTrack"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack track","description":""}],"prog_lang":"*"},"functioncall":{"lua":"MediaTrack track = reaper.GetMediaItemTake_Track(MediaItem_Take take)","eel":"MediaTrack GetMediaItemTake_Track(MediaItem_Take take)","python":"MediaTrack track = RPR_GetMediaItemTake_Track(MediaItem_Take take)","cpp":"MediaTrack* GetMediaItemTake_Track(MediaItem_Take* take)"},"title":"GetMediaItemTake_Track","chapters":["Mediaitem Take Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get parent track of media item take","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject project","description":"the project-number. 0 for the current project. "},{"identifier":"string guidGUID","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetMediaItemTakeByGUID","return_values":[{"identifier":"take","type":"MediaItem_Take"}],"parameters":[{"identifier":"project","type":"ReaProject"},{"identifier":"guidGUID","type":"string"}]},"eel":{"method_name":"GetMediaItemTakeByGUID","return_values":["MediaItem_Take"],"parameters":[{"type_name":"ReaProject","identifier":"project"},{"identifier":"\"guidGUID\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"functioncall":{"lua":"MediaItem_Take take = reaper.GetMediaItemTakeByGUID(ReaProject project, string guidGUID)","eel":"MediaItem_Take GetMediaItemTakeByGUID(ReaProject project, \"guidGUID\")","python":"MediaItem_Take take = RPR_GetMediaItemTakeByGUID(ReaProject project, const GUID guid)","cpp":"MediaItem_Take* GetMediaItemTakeByGUID(ReaProject* project, const GUID* guid)"},"title":"GetMediaItemTakeByGUID","chapters":["Mediaitem Take Management","Take States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"string parmname","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetMediaItemTakeInfo_Value","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"parmname","type":"string"}]},"eel":{"method_name":"GetMediaItemTakeInfo_Value","return_values":["double"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"identifier":"\"parmname\""}]}},"requires":{"Reaper":"6.34"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.GetMediaItemTakeInfo_Value(MediaItem_Take take, string parmname)","eel":"double GetMediaItemTakeInfo_Value(MediaItem_Take take, \"parmname\")","python":"Float retval = RPR_GetMediaItemTakeInfo_Value(MediaItem_Take take, String parmname)","cpp":"double GetMediaItemTakeInfo_Value(MediaItem_Take* take, const char* parmname)"},"title":"GetMediaItemTakeInfo_Value","chapters":["Mediaitem Take Management","Take States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get media item take numerical-value attributes.\nD_STARTOFFS : double * : start offset in source media, in seconds\nD_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped\nD_PAN : double * : take pan, -1..1\nD_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc\nD_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc\nD_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc\nB_PPITCH : bool * : preserve pitch when changing playback rate\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right\nI_PITCHMODE : int * : pitch shifter mode, -1=projext default, otherwise high 2 bytes=shifter, low 2 bytes=parameter\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color.\nIP_TAKENUMBER : int : take number (read-only, returns the take number directly)\nP_TRACK : pointer to MediaTrack (read-only)\nP_ITEM : pointer to MediaItem (read-only)\nP_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","get","item","track","associated"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem item","description":"the MediaItem, whose associated MediaTrack you want to have"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetMediaItemTrack","return_values":[{"identifier":"tr","type":"MediaTrack"}],"parameters":[{"identifier":"item","type":"MediaItem"}]},"eel":{"method_name":"GetMediaItemTrack","return_values":["MediaTrack"],"parameters":[{"type_name":"MediaItem","identifier":"item"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack tr","description":"the MediaTrack, where the MediaItem is located in "}],"prog_lang":"*"},"functioncall":{"lua":"MediaTrack tr = reaper.GetMediaItemTrack(MediaItem item)","eel":"MediaTrack GetMediaItemTrack(MediaItem item)","python":"MediaTrack tr = RPR_GetMediaItemTrack(MediaItem item)","cpp":"MediaTrack* GetMediaItemTrack(MediaItem* item)"},"title":"GetMediaItemTrack","chapters":["Mediaitem Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get the associated MediaTrack of a MediaItem.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PCM_source source","description":"the source, whose source-filename you want to retrieve"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetMediaSourceFileName","return_values":[{"identifier":"filenamebuf","type":"string"}],"parameters":[{"identifier":"source","type":"PCM_source"}]},"eel":{"return_values":["GetMediaSourceFileName"],"parameters":[{"type_name":"PCM_source","identifier":"source"},{"identifier":"#filenamebuf"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string filenamebuf","description":"the filename of the source-file"}],"prog_lang":"*"},"functioncall":{"lua":"string filenamebuf = reaper.GetMediaSourceFileName(PCM_source source)","eel":"GetMediaSourceFileName(PCM_source source, #filenamebuf)","python":"(PCM_source source, String filenamebufOut, Int filenamebufOut_sz) = RPR_GetMediaSourceFileName(source, filenamebufOut, filenamebufOut_sz)","cpp":"void GetMediaSourceFileName(PCM_source* source, char* filenamebufOut, int filenamebufOut_sz)"},"title":"GetMediaSourceFileName","chapters":["Audio Management","Source Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Copies the media source filename to filenamebuf. Note that in-project MIDI media sources have no associated filename. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PCM_source source","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetMediaSourceLength","return_values":[{"identifier":"retval","type":"number"},{"identifier":"lengthIsQN","type":"boolean"}],"parameters":[{"identifier":"source","type":"PCM_source"}]},"eel":{"method_name":"GetMediaSourceLength","return_values":["double"],"parameters":[{"type_name":"PCM_source","identifier":"source"},{"type_name":"bool","identifier":"&lengthIsQN"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number retval","description":""},{"identifier":"boolean lengthIsQN","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval, boolean lengthIsQN = reaper.GetMediaSourceLength(PCM_source source)","eel":"double GetMediaSourceLength(PCM_source source, bool &lengthIsQN)","python":"(Float retval, PCM_source source, Boolean lengthIsQNOut) = RPR_GetMediaSourceLength(source, lengthIsQNOut)","cpp":"double GetMediaSourceLength(PCM_source* source, bool* lengthIsQNOut)"},"title":"GetMediaSourceLength","chapters":["Audio Management","Source Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the length of the source media. If the media source is beat-based, the length will be in quarter notes, otherwise it will be in seconds.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PCM_source source","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetMediaSourceNumChannels","return_values":[{"identifier":"mediasourcenumchans","type":"integer"}],"parameters":[{"identifier":"source","type":"PCM_source"}]},"eel":{"method_name":"GetMediaSourceNumChannels","return_values":["int"],"parameters":[{"type_name":"PCM_source","identifier":"source"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer mediasourcenumchans","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer mediasourcenumchans = reaper.GetMediaSourceNumChannels(PCM_source source)","eel":"int GetMediaSourceNumChannels(PCM_source source)","python":"Int retval = RPR_GetMediaSourceNumChannels(PCM_source source)","cpp":"int GetMediaSourceNumChannels(PCM_source* source)"},"title":"GetMediaSourceNumChannels","chapters":["Audio Management","Source Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the number of channels in the source media.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PCM_source src","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetMediaSourceParent","return_values":[{"identifier":"parent_src","type":"PCM_source"}],"parameters":[{"identifier":"src","type":"PCM_source"}]},"eel":{"method_name":"GetMediaSourceParent","return_values":["PCM_source"],"parameters":[{"type_name":"PCM_source","identifier":"src"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PCM_source parent_src","description":""}],"prog_lang":"*"},"functioncall":{"lua":"PCM_source parent_src = reaper.GetMediaSourceParent(PCM_source src)","eel":"PCM_source GetMediaSourceParent(PCM_source src)","python":"PCM_source parent_src = RPR_GetMediaSourceParent(PCM_source src)","cpp":"PCM_source* GetMediaSourceParent(PCM_source* src)"},"title":"GetMediaSourceParent","chapters":["Audio Management","Source Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the parent source, or NULL if src is the root source. This can be used to retrieve the parent properties of sections or reversed sources for example.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PCM_source source","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetMediaSourceSampleRate","return_values":[{"identifier":"mediasourcesamplerate","type":"integer"}],"parameters":[{"identifier":"source","type":"PCM_source"}]},"eel":{"method_name":"GetMediaSourceSampleRate","return_values":["int"],"parameters":[{"type_name":"PCM_source","identifier":"source"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer mediasourcesamplerate","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer mediasourcesamplerate = reaper.GetMediaSourceSampleRate(PCM_source source)","eel":"int GetMediaSourceSampleRate(PCM_source source)","python":"Int retval = RPR_GetMediaSourceSampleRate(PCM_source source)","cpp":"int GetMediaSourceSampleRate(PCM_source* source)"},"title":"GetMediaSourceSampleRate","chapters":["Audio Management","Source Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the sample rate. MIDI source media will return zero.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PCM_source source","description":"the source, whose source-type you want to get"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetMediaSourceType","return_values":[{"identifier":"typebuf","type":"string"}],"parameters":[{"identifier":"source","type":"PCM_source"}]},"eel":{"return_values":["GetMediaSourceType"],"parameters":[{"type_name":"PCM_source","identifier":"source"},{"identifier":"#typebuf"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string typebuf","description":"the source-type"}],"prog_lang":"*"},"functioncall":{"lua":"string typebuf = reaper.GetMediaSourceType(PCM_source source)","eel":"GetMediaSourceType(PCM_source source, #typebuf)","python":"(PCM_source source, String typebufOut, Int typebufOut_sz) = RPR_GetMediaSourceType(source, typebufOut, typebufOut_sz)","cpp":"void GetMediaSourceType(PCM_source* source, char* typebufOut, int typebufOut_sz)"},"title":"GetMediaSourceType","chapters":["Audio Management","Source Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"copies the media source type (\"WAV\", \"MIDI\", etc) to typebuf","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack tr","description":"the MediaTrack-object, whose attribute you want to request"},{"identifier":"string parmname","description":"the attribute, that you want to request, like D_VOL or B_SHOWINMIXER etc"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetMediaTrackInfo_Value","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"tr","type":"MediaTrack"},{"identifier":"parmname","type":"string"}]},"eel":{"method_name":"GetMediaTrackInfo_Value","return_values":["double"],"parameters":[{"type_name":"MediaTrack","identifier":"tr"},{"identifier":"\"parmname\""}]}},"requires":{"Reaper":"6.65"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":"the value of the requested attribute"}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.GetMediaTrackInfo_Value(MediaTrack tr, string parmname)","eel":"double GetMediaTrackInfo_Value(MediaTrack tr, \"parmname\")","python":"Float retval = RPR_GetMediaTrackInfo_Value(MediaTrack tr, String parmname)","cpp":"double GetMediaTrackInfo_Value(MediaTrack* tr, const char* parmname)"},"title":"GetMediaTrackInfo_Value","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get track numerical-value attributes.\nB_MUTE : bool * : muted\nB_PHASE : bool * : track phase inverted\nB_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread playback state, read-only)\nIP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)\nI_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place\nB_SOLO_DEFEAT : bool * : when set, if anything else is soloed and this track is not muted, this track acts soloed\nI_FXEN : int * : fx enabled, 0=bypassed, !0=fx active\nI_RECARM : int * : record armed, 0=not record armed, 1=record armed\nI_RECINPUT : int * : record input, <0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.\nI_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace\nI_RECMODE_FLAGS : int * : record mode flags, &3=output recording mode (0=post fader, 1=pre-fx, 2=post-fx/pre-fader)\nI_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)\nI_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on\nB_AUTO_RECARM : bool * : automatically set record arm when selected (does not immediately affect recarm state, script should set directly if desired)\nI_VUMODE : int * : track vu mode, &1:disabled, &30==0:stereo peaks, &30==2:multichannel peaks, &30==4:stereo RMS, &30==8:combined RMS, &30==12:LUFS-M, &30==16:LUFS-S (readout=max), &30==20:LUFS-S (readout=current), &32:LUFS calculation on channels 1+2 only            \nI_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch\nI_NCHAN : int * : number of track channels, 2-64, even numbers only\nI_SELECTED : int * : track selected, 0=unselected, 1=selected\nI_WNDH : int * : current TCP window height in pixels including envelopes (read-only)\nI_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)\nI_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)\nI_MCPX : int * : current MCP X-position in pixels relative to mixer container(read only)\nI_MCPY : int * : current MCP Y-position in pixels relative to mixer container(read only)\nI_MCPW : int * : current MCP width in pixels(read only)\nI_MCPH : int * : current MCP height in pixels(read only)\nI_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\nI_FOLDERCOMPACT : int * : folder compacted state (only valid on folders), 0=normal, 1=small, 2=tiny children\nI_MIDIHWOUT : int * : track midi hardware output index, <0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)\nI_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000), 0, default color. If you do not |0x1000000, then it will not be used, but will store the color.\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels\nB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)\nD_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_PAN : double * : trim pan of track, -1..1\nD_WIDTH : double * : width of track, -1..1\nD_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6\nD_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6\nI_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan\nD_PANLAW : double * : pan law of track, <0=project default, 0.5=-6dB, 0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain compensation, etc\nI_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with deprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid taper\nP_ENV:&envchunkname or P_ENV:{GUID... : TrackEnvelope * : (read-only) chunkname can be &VOLENV, &PANENV, etc; GUID is the stringified envelope GUID\nB_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)\nB_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)\nB_MAINSEND : bool * : track sends audio to parent\nC_MAINSEND_OFFS : char * : channel offset of track send to parent\nC_MAINSEND_NCH : char * : channel count of track send to parent (0=use all child track channels, 1=use one channel only)\nI_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes enabled (call UpdateTimeline() after changing)\nC_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)\nF_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)\nI_PLAY_OFFSET_FLAG : int * : track media playback offset state, &1=bypassed, &2=offset value is measured in samples (otherwise measured in seconds)\nD_PLAY_OFFSET : double * : track media playback offset, units depend on I_PLAY_OFFSET_FLAG\nP_PARTRACK : MediaTrack * : parent track (read-only)\nP_PROJECT : ReaProject * : parent project (read-only)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer dev","description":""},{"identifier":"string nameout","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetMIDIInputName","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"nameout","type":"string"}],"parameters":[{"identifier":"dev","type":"integer"},{"identifier":"nameout","type":"string"}]},"eel":{"method_name":"GetMIDIInputName","return_values":["bool"],"parameters":[{"type_name":"int","identifier":"dev"},{"identifier":"#nameout"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string nameout","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string nameout = reaper.GetMIDIInputName(integer dev, string nameout)","eel":"bool GetMIDIInputName(int dev, #nameout)","python":"(Boolean retval, Int dev, String nameout, Int nameout_sz) = RPR_GetMIDIInputName(dev, nameout, nameout_sz)","cpp":"bool GetMIDIInputName(int dev, char* nameout, int nameout_sz)"},"title":"GetMIDIInputName","chapters":["Input/Output Devices","Midi"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns true if device present","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer dev","description":""},{"identifier":"string nameout","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetMIDIOutputName","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"nameout","type":"string"}],"parameters":[{"identifier":"dev","type":"integer"},{"identifier":"nameout","type":"string"}]},"eel":{"method_name":"GetMIDIOutputName","return_values":["bool"],"parameters":[{"type_name":"int","identifier":"dev"},{"identifier":"#nameout"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string nameout","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string nameout = reaper.GetMIDIOutputName(integer dev, string nameout)","eel":"bool GetMIDIOutputName(int dev, #nameout)","python":"(Boolean retval, Int dev, String nameout, Int nameout_sz) = RPR_GetMIDIOutputName(dev, nameout, nameout_sz)","cpp":"bool GetMIDIOutputName(int dev, char* nameout, int nameout_sz)"},"title":"GetMIDIOutputName","chapters":["Input/Output Devices","Midi"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns true if device present","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["userinterface","get","visible","leftmost","mcp","mixer","track"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetMixerScroll","return_values":[{"identifier":"leftmosttrack","type":"MediaTrack"}],"parameters":[]},"eel":{"method_name":"GetMixerScroll","return_values":["MediaTrack"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack leftmosttrack","description":"the leftmost track in the MCP"}],"prog_lang":"*"},"functioncall":{"lua":"MediaTrack leftmosttrack = reaper.GetMixerScroll()","eel":"MediaTrack GetMixerScroll()","python":"MediaTrack leftmosttrack = RPR_GetMixerScroll()","cpp":"MediaTrack* GetMixerScroll()"},"title":"GetMixerScroll","chapters":["User Interface","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get the leftmost track visible in the mixer","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string context","description":"the context of the mouse-modifier"},{"identifier":"integer modifier_flag","description":"the modifier-flag, whose action you want to retrieve"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetMouseModifier","return_values":[{"identifier":"action","type":"string"}],"parameters":[{"identifier":"context","type":"string"},{"identifier":"modifier_flag","type":"integer"}]},"eel":{"return_values":["GetMouseModifier"],"parameters":[{"identifier":"\"context\""},{"type_name":"int","identifier":"modifier_flag"},{"identifier":"#action"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string action","description":"the associated action with the mouse-modifier within the specific context"}],"prog_lang":"*"},"functioncall":{"lua":"string action = reaper.GetMouseModifier(string context, integer modifier_flag)","eel":"GetMouseModifier(\"context\", int modifier_flag, #action)","python":"(String context, Int modifier_flag, String actionOut, Int actionOut_sz) = RPR_GetMouseModifier(context, modifier_flag, actionOut, actionOut_sz)","cpp":"void GetMouseModifier(const char* context, int modifier_flag, char* actionOut, int actionOut_sz)"},"title":"GetMouseModifier","chapters":["Input/Output Devices","Mouse"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get the current mouse modifier assignment for a specific modifier key assignment, in a specific context.\naction will be filled in with the command ID number for a built-in mouse modifier\nor built-in REAPER command ID, or the custom action ID string.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["userinterface","mouse","position","vertical","horizontal","get"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetMousePosition","return_values":[{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"}],"parameters":[]},"eel":{"return_values":["GetMousePosition"],"parameters":[{"type_name":"int","identifier":"&x"},{"type_name":"int","identifier":"&y"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer x","description":"horizontal position of the mouse in pixels"},{"identifier":"integer y","description":"vertical position of the mouse in pixels"}],"prog_lang":"*"},"functioncall":{"lua":"integer x, integer y = reaper.GetMousePosition()","eel":"GetMousePosition(int &x, int &y)","python":"(Int xOut, Int yOut) = RPR_GetMousePosition(xOut, yOut)","cpp":"void GetMousePosition(int* xOut, int* yOut)"},"title":"GetMousePosition","chapters":["Input/Output Devices","Mouse"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"get mouse position in screen coordinates","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["audio","count","input","hardware"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetNumAudioInputs","return_values":[{"identifier":"numAudioIns","type":"integer"}],"parameters":[]},"eel":{"method_name":"GetNumAudioInputs","return_values":["int"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer numAudioIns","description":"the number of audio hardware outputs available"}],"prog_lang":"*"},"functioncall":{"lua":"integer numAudioIns = reaper.GetNumAudioInputs()","eel":"int GetNumAudioInputs()","python":"Int retval = RPR_GetNumAudioInputs()","cpp":"int GetNumAudioInputs()"},"title":"GetNumAudioInputs","chapters":["Input/Output Devices","Audio"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Return number of normal audio hardware inputs available","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["audio","count","output","hardware"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetNumAudioOutputs","return_values":[{"identifier":"numAudioOuts","type":"integer"}],"parameters":[]},"eel":{"method_name":"GetNumAudioOutputs","return_values":["int"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer numAudioOuts","description":"the number of audio hardware outputs available"}],"prog_lang":"*"},"functioncall":{"lua":"integer numAudioOuts = reaper.GetNumAudioOutputs()","eel":"int GetNumAudioOutputs()","python":"Int retval = RPR_GetNumAudioOutputs()","cpp":"int GetNumAudioOutputs()"},"title":"GetNumAudioOutputs","chapters":["Input/Output Devices","Audio"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Return number of normal audio hardware outputs available","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["audio","midi","count","input","hardware"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetNumMIDIInputs","return_values":[{"identifier":"numMidiIns","type":"integer"}],"parameters":[]},"eel":{"method_name":"GetNumMIDIInputs","return_values":["int"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer numMidiIns","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer numMidiIns = reaper.GetNumMIDIInputs()","eel":"int GetNumMIDIInputs()","python":"Int retval = RPR_GetNumMIDIInputs()","cpp":"int GetNumMIDIInputs()"},"title":"GetNumMIDIInputs","chapters":["Input/Output Devices","Midi"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns max number of real midi hardware inputs","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["audio","midi","count","output","hardware"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetNumMIDIOutputs","return_values":[{"identifier":"numMidiOuts","type":"integer"}],"parameters":[]},"eel":{"method_name":"GetNumMIDIOutputs","return_values":["int"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer numMidiOuts","description":"the number of real midi hardware outputs"}],"prog_lang":"*"},"functioncall":{"lua":"integer numMidiOuts = reaper.GetNumMIDIOutputs()","eel":"int GetNumMIDIOutputs()","python":"Int retval = RPR_GetNumMIDIOutputs()","cpp":"int GetNumMIDIOutputs()"},"title":"GetNumMIDIOutputs","chapters":["Input/Output Devices","Midi"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns max number of real midi hardware outputs","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["markermanagement","count","takemarker"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":"the take, whose take-markers you want to count"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetNumTakeMarkers","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"method_name":"GetNumTakeMarkers","return_values":["int"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"}]}},"requires":{"Reaper":"6.09"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the number of found take-markers"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.GetNumTakeMarkers(MediaItem_Take take)","eel":"int GetNumTakeMarkers(MediaItem_Take take)","python":"Int retval = RPR_GetNumTakeMarkers(MediaItem_Take take)","cpp":"int GetNumTakeMarkers(MediaItem_Take* take)"},"title":"GetNumTakeMarkers","chapters":["Marker Management","Take Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns number of take markers.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","count","tracks"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetNumTracks","return_values":[{"identifier":"numtracks","type":"integer"}],"parameters":[]},"eel":{"method_name":"GetNumTracks","return_values":["int"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer numtracks","description":"the number of tracks in the current project."}],"prog_lang":"*"},"functioncall":{"lua":"integer numtracks = reaper.GetNumTracks()","eel":"int GetNumTracks()","python":"Int retval = RPR_GetNumTracks()","cpp":"int GetNumTracks()"},"title":"GetNumTracks","chapters":["Track Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get the number of tracks. Excluding the master-track.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","get","operating system","os","osx","windows"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetOS","return_values":[{"identifier":"operating_system","type":"string"}],"parameters":[]},"eel":{"method_name":"GetOS","return_values":["bool"],"parameters":[{"identifier":"#retval"}]}},"requires":{"Reaper":"6.18"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string operating_system","description":"\"Win32\", \"Win64\", \"OSX32\", \"OSX64\", \"macOS-arm64\" or \"Other\""}],"prog_lang":"*"},"functioncall":{"lua":"string operating_system = reaper.GetOS()","eel":"bool GetOS(#retval)","python":"String retval = RPR_GetOS()","cpp":"const char* GetOS()"},"title":"GetOS","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the current operating-system. Good for determining, e.g. the correct filesystem-separators.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["audio","audiomanagement","output","channels","name","get"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer channelIndex","description":"the index of the output-channel"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetOutputChannelName","return_values":[{"identifier":"outputchanname","type":"string"}],"parameters":[{"identifier":"channelIndex","type":"integer"}]},"eel":{"method_name":"GetOutputChannelName","return_values":["bool"],"parameters":[{"identifier":"#retval"},{"type_name":"int","identifier":"channelIndex"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string outputchanname","description":"the name of the output-channel."}],"prog_lang":"*"},"functioncall":{"lua":"string outputchanname= reaper.GetOutputChannelName(integer channelIndex)","eel":"bool GetOutputChannelName(#retval, int channelIndex)","python":"String retval = RPR_GetOutputChannelName(Int channelIndex)","cpp":"const char* GetOutputChannelName(int channelIndex)"},"title":"GetOutputChannelName","chapters":["Input/Output Devices","Audio"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get the name of a specific output-channel.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["audiomanagement","get","output","latency","seconds"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetOutputLatency","return_values":[{"identifier":"outputlatency","type":"number"}],"parameters":[]},"eel":{"method_name":"GetOutputLatency","return_values":["double"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number outputlatency","description":"output-latency in seconds"}],"prog_lang":"*"},"functioncall":{"lua":"number outputlatency = reaper.GetOutputLatency()","eel":"double GetOutputLatency()","python":"Float retval = RPR_GetOutputLatency()","cpp":"double GetOutputLatency()"},"title":"GetOutputLatency","chapters":["Input/Output Devices","Audio"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns output latency in seconds","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","get","parent","track","folder"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack track","description":"the MediaTrack in a folder, whose parent MediaTrack you want"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetParentTrack","return_values":[{"identifier":"parenttrack","type":"MediaTrack"}],"parameters":[{"identifier":"track","type":"MediaTrack"}]},"eel":{"method_name":"GetParentTrack","return_values":["MediaTrack"],"parameters":[{"type_name":"MediaTrack","identifier":"track"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack parenttrack","description":"the returned parent MediaTrack of a foldered MediaTrack"}],"prog_lang":"*"},"functioncall":{"lua":"MediaTrack parenttrack = reaper.GetParentTrack(MediaTrack track)","eel":"MediaTrack GetParentTrack(MediaTrack track)","python":"MediaTrack parenttrack = RPR_GetParentTrack(MediaTrack track)","cpp":"MediaTrack* GetParentTrack(MediaTrack* track)"},"title":"GetParentTrack","chapters":["Track Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get the parent MediaTrack, if a MediaTrack is a track of a foldered track.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string fn","description":"the filename of the mediafile"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetPeakFileName","return_values":[{"identifier":"peakfilename_with_path","type":"string"}],"parameters":[{"identifier":"fn","type":"string"}]},"eel":{"return_values":["GetPeakFileName"],"parameters":[{"identifier":"\"fn\""},{"identifier":"#buf"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string peakfilename_with_path","description":"the peakfilename with path"}],"prog_lang":"*"},"functioncall":{"lua":"string peakfilename_with_path = reaper.GetPeakFileName(string fn)","eel":"GetPeakFileName(\"fn\", #buf)","python":"(String fn, String buf, Int buf_sz) = RPR_GetPeakFileName(fn, buf, buf_sz)","cpp":"void GetPeakFileName(const char* fn, char* bufOut, int bufOut_sz)"},"title":"GetPeakFileName","chapters":["Audio Management","Peaks/Waveforms"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"string fn","description":""},{"identifier":"string buf","description":"a string-buffer needed by the function, just give \"\" in Lua"},{"identifier":"boolean forWrite","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetPeakFileNameEx","return_values":[{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"fn","type":"string"},{"identifier":"buf","type":"string"},{"identifier":"forWrite","type":"boolean"}]},"eel":{"return_values":["GetPeakFileNameEx"],"parameters":[{"identifier":"\"fn\""},{"identifier":"#buf"},{"type_name":"bool","identifier":"forWrite"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string buf","description":"the peak-filename"}],"prog_lang":"*"},"functioncall":{"lua":"string buf = reaper.GetPeakFileNameEx(string fn, string buf, boolean forWrite)","eel":"GetPeakFileNameEx(\"fn\", #buf, bool forWrite)","python":"(String fn, String buf, Int buf_sz, Boolean forWrite) = RPR_GetPeakFileNameEx(fn, buf, buf_sz, forWrite)","cpp":"void GetPeakFileNameEx(const char* fn, char* buf, int buf_sz, bool forWrite)"},"title":"GetPeakFileNameEx","chapters":["Audio Management","Peaks/Waveforms"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"string fn","description":""},{"identifier":"string buf","description":"a string-buffer needed by the function, just give \"\" in Lua"},{"identifier":"boolean forWrite","description":""},{"identifier":"string peaksfileextension","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetPeakFileNameEx2","return_values":[{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"fn","type":"string"},{"identifier":"buf","type":"string"},{"identifier":"forWrite","type":"boolean"},{"identifier":"peaksfileextension","type":"string"}]},"eel":{"return_values":["GetPeakFileNameEx2"],"parameters":[{"identifier":"\"fn\""},{"identifier":"#buf"},{"type_name":"bool","identifier":"forWrite"},{"identifier":"\"peaksfileextension\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string buf","description":"the peak-filename"}],"prog_lang":"*"},"functioncall":{"lua":"string buf = reaper.GetPeakFileNameEx2(string fn, string buf, boolean forWrite, string peaksfileextension)","eel":"GetPeakFileNameEx2(\"fn\", #buf, bool forWrite, \"peaksfileextension\")","python":"(String fn, String buf, Int buf_sz, Boolean forWrite, String peaksfileextension) = RPR_GetPeakFileNameEx2(fn, buf, buf_sz, forWrite, peaksfileextension)","cpp":"void GetPeakFileNameEx2(const char* fn, char* buf, int buf_sz, bool forWrite, const char* peaksfileextension)"},"title":"GetPeakFileNameEx2","chapters":["Audio Management","Peaks/Waveforms"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Like GetPeakFileNameEx, but you can specify peaksfileextension such as \".reapeaks\"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","get","play","position","latency compensated"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetPlayPosition","return_values":[{"identifier":"playposition","type":"number"}],"parameters":[]},"eel":{"method_name":"GetPlayPosition","return_values":["double"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number playposition","description":"the playposition in seconds"}],"prog_lang":"*"},"functioncall":{"lua":"number playposition = reaper.GetPlayPosition()","eel":"double GetPlayPosition()","python":"Float retval = RPR_GetPlayPosition()","cpp":"double GetPlayPosition()"},"title":"GetPlayPosition","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns latency-compensated actual-what-you-hear position","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","get","play","position","next audio block"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetPlayPosition2","return_values":[{"identifier":"playposition","type":"number"}],"parameters":[]},"eel":{"method_name":"GetPlayPosition2","return_values":["double"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number playposition","description":"the playposition in seconds"}],"prog_lang":"*"},"functioncall":{"lua":"number playposition = reaper.GetPlayPosition2()","eel":"double GetPlayPosition2()","python":"Float retval = RPR_GetPlayPosition2()","cpp":"double GetPlayPosition2()"},"title":"GetPlayPosition2","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns position of next audio block being processed","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","get","play","position","next audio block"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetPlayPosition2Ex","return_values":[{"identifier":"playposition","type":"number"}],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"method_name":"GetPlayPosition2Ex","return_values":["double"],"parameters":[{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number playposition","description":"the playposition in seconds"}],"prog_lang":"*"},"functioncall":{"lua":"number playposition = reaper.GetPlayPosition2Ex(ReaProject proj)","eel":"double GetPlayPosition2Ex(ReaProject proj)","python":"Float retval = RPR_GetPlayPosition2Ex(ReaProject proj)","cpp":"double GetPlayPosition2Ex(ReaProject* proj)"},"title":"GetPlayPosition2Ex","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns position of next audio block being processed from a specific project","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","get","play","position","latency compensated"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetPlayPositionEx","return_values":[{"identifier":"playposition","type":"number"}],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"method_name":"GetPlayPositionEx","return_values":["double"],"parameters":[{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number playposition","description":"the playposition in seconds"}],"prog_lang":"*"},"functioncall":{"lua":"number playposition = reaper.GetPlayPositionEx(ReaProject proj)","eel":"double GetPlayPositionEx(ReaProject proj)","python":"Float retval = RPR_GetPlayPositionEx(ReaProject proj)","cpp":"double GetPlayPositionEx(ReaProject* proj)"},"title":"GetPlayPositionEx","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns latency-compensated actual-what-you-hear position from a specific project","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","play","state","rec","pause","stop"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetPlayState","return_values":[{"identifier":"playstate","type":"integer"}],"parameters":[]},"eel":{"method_name":"GetPlayState","return_values":["int"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer playstate","description":"Either bitwise: &1=playing,&2=pause,&4=is recording, or\n0, stop\n1, play\n2, paused play\n5, recording\n6, paused recording"}],"prog_lang":"*"},"functioncall":{"lua":"integer playstate = reaper.GetPlayState()","eel":"int GetPlayState()","python":"Int retval = RPR_GetPlayState()","cpp":"int GetPlayState()"},"title":"GetPlayState","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns, in which play-state the current project is","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","stop","play","state","rec","pause","project"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetPlayStateEx","return_values":[{"identifier":"playstate","type":"integer"}],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"method_name":"GetPlayStateEx","return_values":["int"],"parameters":[{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer playstate","description":"Either bitwise: &1=playing,&2=pause,&4=is recording, or\n0, stop\n1, play\n2, paused play\n5, recording\n6, paused recording"}],"prog_lang":"*"},"functioncall":{"lua":"integer playstate = reaper.GetPlayStateEx(ReaProject proj)","eel":"int GetPlayStateEx(ReaProject proj)","python":"Int retval = RPR_GetPlayStateEx(ReaProject proj)","cpp":"int GetPlayStateEx(ReaProject* proj)"},"title":"GetPlayStateEx","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns, in which play-state a certain project is","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["projectmanagement","length","get","project"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetProjectLength","return_values":[{"identifier":"length","type":"number"}],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"method_name":"GetProjectLength","return_values":["double"],"parameters":[{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number length","description":"the length of the project in seconds"}],"prog_lang":"*"},"functioncall":{"lua":"number length = reaper.GetProjectLength(ReaProject proj)","eel":"double GetProjectLength(ReaProject proj)","python":"Float retval = RPR_GetProjectLength(ReaProject proj)","cpp":"double GetProjectLength(ReaProject* proj)"},"title":"GetProjectLength","chapters":["Project Management","Project States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns length of project (maximum of end of media item, markers, end of regions, tempo map)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["projectmanagement","get","project","name"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetProjectName","return_values":[{"identifier":"projectname","type":"string"}],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"return_values":["GetProjectName"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"identifier":"#buf"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string projectname","description":"the name of the project"}],"prog_lang":"*"},"functioncall":{"lua":"string projectname = reaper.GetProjectName(ReaProject proj)","eel":"GetProjectName(ReaProject proj, #buf)","python":"(ReaProject proj, String bufOut, Int bufOut_sz) = RPR_GetProjectName(proj, bufOut, bufOut_sz)","cpp":"void GetProjectName(ReaProject* proj, char* bufOut, int bufOut_sz)"},"title":"GetProjectName","chapters":["Project Management","Project States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get the name of the projectfile.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["projectmanagement","get","path","projectpath"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetProjectPath","return_values":[{"identifier":"project_path","type":"string"}],"parameters":[]},"eel":{"return_values":["GetProjectPath"],"parameters":[{"identifier":"#buf"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string project_path","description":"the returned path"}],"prog_lang":"*"},"functioncall":{"lua":"string project_path = reaper.GetProjectPath()","eel":"GetProjectPath(#buf)","python":"(String bufOut, Int bufOut_sz) = RPR_GetProjectPath(bufOut, bufOut_sz)","cpp":"void GetProjectPath(char* bufOut, int bufOut_sz)"},"title":"GetProjectPath","chapters":["Project Management","Project States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get the path of the project. Will return the defaults project-path's recording-folder, when the project hasn't been saved yet; when the project has been saved, it will return the path to the recording-folder.\n\nIf you need the filename of the path+projectfile itself, use EnumProjects instead.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["projectmanagement","get","path","projectpath","project"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetProjectPathEx","return_values":[{"identifier":"project_path","type":"string"}],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"return_values":["GetProjectPathEx"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"identifier":"#buf"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string project_path","description":"the path to the project"}],"prog_lang":"*"},"functioncall":{"lua":"string project_path = reaper.GetProjectPathEx(ReaProject proj)","eel":"GetProjectPathEx(ReaProject proj, #buf)","python":"(ReaProject proj, String bufOut, Int bufOut_sz) = RPR_GetProjectPathEx(proj, bufOut, bufOut_sz)","cpp":"void GetProjectPathEx(ReaProject* proj, char* bufOut, int bufOut_sz)"},"title":"GetProjectPathEx","chapters":["Project Management","Project States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get the path of a specific project, usually the recordings-folder.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["projectmanagement","get","state","changes","undo"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetProjectStateChangeCount","return_values":[{"identifier":"count_statechange","type":"integer"}],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"method_name":"GetProjectStateChangeCount","return_values":["int"],"parameters":[{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer count_statechange","description":"the number of changes, since (re-)opening of the project."}],"prog_lang":"*"},"functioncall":{"lua":"integer count_statechange = reaper.GetProjectStateChangeCount(ReaProject proj)","eel":"int GetProjectStateChangeCount(ReaProject proj)","python":"Int retval = RPR_GetProjectStateChangeCount(ReaProject proj)","cpp":"int GetProjectStateChangeCount(ReaProject* proj)"},"title":"GetProjectStateChangeCount","chapters":["Project Management","Project States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns an integer that changes when the project state changes, e.g. undoable-actions have been made.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["projectmanagement","get","project","time","offset"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"boolean rndframe","description":"true, the offset is rounded to a multiple of the project frame size; false, no rounding happening"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetProjectTimeOffset","return_values":[{"identifier":"time_offset","type":"number"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"rndframe","type":"boolean"}]},"eel":{"method_name":"GetProjectTimeOffset","return_values":["double"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"bool","identifier":"rndframe"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number time_offset","description":"the project-time-offset"}],"prog_lang":"*"},"functioncall":{"lua":"number time_offset = reaper.GetProjectTimeOffset(ReaProject proj, boolean rndframe)","eel":"double GetProjectTimeOffset(ReaProject proj, bool rndframe)","python":"Float retval = RPR_GetProjectTimeOffset(ReaProject proj, Boolean rndframe)","cpp":"double GetProjectTimeOffset(ReaProject* proj, bool rndframe)"},"title":"GetProjectTimeOffset","chapters":["Project Management","Project States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Gets project time offset in seconds (project settings -> project start time). ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetProjectTimeSignature","return_values":[{"identifier":"bpm","type":"number"},{"identifier":"bpi","type":"number"}],"parameters":[]},"eel":{"return_values":["GetProjectTimeSignature"],"parameters":[{"identifier":"&bpm"},{"identifier":"&bpi"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number bpm","description":"the bpm of the project's time-signature"},{"identifier":"number bpi","description":"the bpi of the project's time-signature"}],"prog_lang":"*"},"functioncall":{"lua":"number bpm, number bpi = reaper.GetProjectTimeSignature()","eel":"GetProjectTimeSignature(&bpm, &bpi)","python":"(Float bpmOut, Float bpiOut) = RPR_GetProjectTimeSignature(bpmOut, bpiOut)","cpp":"void GetProjectTimeSignature(double* bpmOut, double* bpiOut)"},"title":"GetProjectTimeSignature","chapters":["Marker Management","Time Signature Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"deprecated","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetProjectTimeSignature2","return_values":[{"identifier":"bpm","type":"number"},{"identifier":"bpi","type":"number"}],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"return_values":["GetProjectTimeSignature2"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"identifier":"&bpm"},{"identifier":"&bpi"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number bpm","description":"beats per minute"},{"identifier":"number bpi","description":"numerator of time signature in bpi"}],"prog_lang":"*"},"functioncall":{"lua":"number bpm, number bpi = reaper.GetProjectTimeSignature2(ReaProject proj)","eel":"GetProjectTimeSignature2(ReaProject proj, &bpm, &bpi)","python":"(ReaProject proj, Float bpmOut, Float bpiOut) = RPR_GetProjectTimeSignature2(proj, bpmOut, bpiOut)","cpp":"void GetProjectTimeSignature2(ReaProject* proj, double* bpmOut, double* bpiOut)"},"title":"GetProjectTimeSignature2","chapters":["Marker Management","Time Signature Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Gets basic time signature (beats per minute, numerator of time signature in bpi)\nthis does not reflect tempo envelopes but is purely what is set in the project settings.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["projectmanagement","extended","state","value","section","key","extname","get"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"string extname","description":"the section, in which the key requested is stored"},{"identifier":"string key","description":"the key, in which the requested value is stored"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetProjExtState","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"val","type":"string"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"extname","type":"string"},{"identifier":"key","type":"string"}]},"eel":{"method_name":"GetProjExtState","return_values":["int"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"identifier":"\"extname\""},{"identifier":"\"key\""},{"identifier":"#val"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":"0, no such extstate; 1, extstate exists and is returned"},{"identifier":"string val","description":"the value, as stored in extname->key"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, string val = reaper.GetProjExtState(ReaProject proj, string extname, string key)","eel":"int GetProjExtState(ReaProject proj, \"extname\", \"key\", #val)","python":"(Int retval, ReaProject proj, String extname, String key, String valOutNeedBig, Int valOutNeedBig_sz) = RPR_GetProjExtState(proj, extname, key, valOutNeedBig, valOutNeedBig_sz)","cpp":"int GetProjExtState(ReaProject* proj, const char* extname, const char* key, char* valOutNeedBig, int valOutNeedBig_sz)"},"title":"GetProjExtState","chapters":["Project Management","Project Extension States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get the value previously associated with this extname and key, the last time the project was saved or the value was changed.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","get","resource","path"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetResourcePath","return_values":[{"identifier":"resource_path","type":"string"}],"parameters":[]},"eel":{"method_name":"GetResourcePath","return_values":["bool"],"parameters":[{"identifier":"#retval"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string resource_path","description":"the path to the resource-folder"}],"prog_lang":"*"},"functioncall":{"lua":"string resource_path = reaper.GetResourcePath()","eel":"bool GetResourcePath(#retval)","python":"String retval = RPR_GetResourcePath()","cpp":"const char* GetResourcePath()"},"title":"GetResourcePath","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"returns path where ini files are stored, other things are in subdirectories.\n\nWhen resourcepath is equal to app-path(see GetExePath), it is an indicator that Reaper is installed as portable installation.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["envelopemanagement","get","selected","envelope"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSelectedEnvelope","return_values":[{"identifier":"env","type":"TrackEnvelope"}],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"method_name":"GetSelectedEnvelope","return_values":["TrackEnvelope"],"parameters":[{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"6.14"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"TrackEnvelope env","description":"the TrackEnvelope-object of the selected envelope-lane requested; 0, if no envelope is selected"}],"prog_lang":"*"},"functioncall":{"lua":"TrackEnvelope env = reaper.GetSelectedEnvelope(ReaProject proj)","eel":"TrackEnvelope GetSelectedEnvelope(ReaProject proj)","python":"TrackEnvelope env = RPR_GetSelectedEnvelope(ReaProject proj)","cpp":"TrackEnvelope* GetSelectedEnvelope(ReaProject* proj)"},"title":"GetSelectedEnvelope","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"get the currently selected envelope, returns NULL/nil if no envelope is selected","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["mediaitemmanagement","get","selected","item","project"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"integer selitem","description":"the id of the selected MediaItem, as multiple items can be selected."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSelectedMediaItem","return_values":[{"identifier":"sel_item","type":"MediaItem"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"selitem","type":"integer"}]},"eel":{"method_name":"GetSelectedMediaItem","return_values":["MediaItem"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"int","identifier":"selitem"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem sel_item","description":"the requested MediaItem as a MediaItem-object"}],"prog_lang":"*"},"functioncall":{"lua":"MediaItem sel_item = reaper.GetSelectedMediaItem(ReaProject proj, integer selitem)","eel":"MediaItem GetSelectedMediaItem(ReaProject proj, int selitem)","python":"MediaItem sel_item = RPR_GetSelectedMediaItem(ReaProject proj, Int selitem)","cpp":"MediaItem* GetSelectedMediaItem(ReaProject* proj, int selitem)"},"title":"GetSelectedMediaItem","chapters":["Mediaitem Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"get a selected item by selected item count (zero-based)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","get","selected","track"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"integer seltrackidx","description":"the idx of within the selected tracks, zero based, as multiple tracks can be selected by the user. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSelectedTrack","return_values":[{"identifier":"sel_tr","type":"MediaTrack"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"seltrackidx","type":"integer"}]},"eel":{"method_name":"GetSelectedTrack","return_values":["MediaTrack"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"int","identifier":"seltrackidx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack sel_tr","description":"the requested, selected MediaTrack"}],"prog_lang":"*"},"functioncall":{"lua":"MediaTrack sel_tr = reaper.GetSelectedTrack(ReaProject proj, integer seltrackidx)","eel":"MediaTrack GetSelectedTrack(ReaProject proj, int seltrackidx)","python":"MediaTrack sel_tr = RPR_GetSelectedTrack(ReaProject proj, Int seltrackidx)","cpp":"MediaTrack* GetSelectedTrack(ReaProject* proj, int seltrackidx)"},"title":"GetSelectedTrack","chapters":["Track Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get a selected track from a project by selected track count (zero-based). \nThis function ignores the master track, see GetSelectedTrack2 and CountSelectedTracks.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","master","track","get","selected"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"integer seltrackidx","description":"the idx of within the selected tracks, zero based, as multiple tracks can be selected by the user. "},{"identifier":"boolean wantmaster","description":"true, seltrackidx=0 is the master track, if selected; false, seltrackidx=0 is the first selected normal track"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSelectedTrack2","return_values":[{"identifier":"sel_tr","type":"MediaTrack"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"seltrackidx","type":"integer"},{"identifier":"wantmaster","type":"boolean"}]},"eel":{"method_name":"GetSelectedTrack2","return_values":["MediaTrack"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"int","identifier":"seltrackidx"},{"type_name":"bool","identifier":"wantmaster"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack sel_tr","description":"the requested, selected MediaTrack"}],"prog_lang":"*"},"functioncall":{"lua":"MediaTrack sel_tr = reaper.GetSelectedTrack2(ReaProject proj, integer seltrackidx, boolean wantmaster)","eel":"MediaTrack GetSelectedTrack2(ReaProject proj, int seltrackidx, bool wantmaster)","python":"MediaTrack sel_tr = RPR_GetSelectedTrack2(ReaProject proj, Int seltrackidx, Boolean wantmaster)","cpp":"MediaTrack* GetSelectedTrack2(ReaProject* proj, int seltrackidx, bool wantmaster)"},"title":"GetSelectedTrack2","chapters":["Track Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get a selected track from a project (proj=0 for active project) by selected track count (zero-based).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["envelopemanagement","get","selected","envelope"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSelectedTrackEnvelope","return_values":[{"identifier":"sel_env","type":"TrackEnvelope"}],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"method_name":"GetSelectedTrackEnvelope","return_values":["TrackEnvelope"],"parameters":[{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"6.14"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"TrackEnvelope sel_env","description":"the selected TrackEnvelope as an object; nil if no TrackEnvelope is selected"}],"prog_lang":"*"},"functioncall":{"lua":"TrackEnvelope sel_env = reaper.GetSelectedTrackEnvelope(ReaProject proj)","eel":"TrackEnvelope GetSelectedTrackEnvelope(ReaProject proj)","python":"TrackEnvelope sel_env = RPR_GetSelectedTrackEnvelope(ReaProject proj)","cpp":"TrackEnvelope* GetSelectedTrackEnvelope(ReaProject* proj)"},"title":"GetSelectedTrackEnvelope","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"get the currently selected track envelope, returns NULL/nil if no envelope is selected","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"boolean isSet","description":"true, set a new arrangeview-time position; false, only get the current arrangeview-time position"},{"identifier":"integer screen_x_start","description":"if isSet=false, this parameter returns the start-time-position at screen-pixel-x position. set this and screen_x_end to 0 for the whole shown arrangeview start/endtime"},{"identifier":"integer screen_x_end","description":"if isSet=false, this parameter returns the end-time-position at screen-pixel-x position. set this and screen_x_end to 0 for the whole shown arrangeview start/endtime"},{"identifier":"number start_time","description":"if isSet=true, this is the startposition of the arrangeview(the left side) in seconds"},{"identifier":"number end_time","description":"if isSet=true, this is the startposition of the arrangeview(the right side) in seconds"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSet_ArrangeView2","return_values":[{"identifier":"start_time","type":"number"},{"identifier":"end_time","type":"number"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"isSet","type":"boolean"},{"identifier":"screen_x_start","type":"integer"},{"identifier":"screen_x_end","type":"integer"},{"identifier":"start_time","type":"number"},{"identifier":"end_time","type":"number"}]},"eel":{"return_values":["GetSet_ArrangeView2"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"bool","identifier":"isSet"},{"type_name":"int","identifier":"screen_x_start"},{"type_name":"int","identifier":"screen_x_end"},{"identifier":"&start_time"},{"identifier":"&end_time"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number start_time","description":"the startposition of the arrangeview(left side) in seconds"},{"identifier":"number end_time","description":"the startposition of the arrangeview(right side) in seconds"}],"prog_lang":"*"},"functioncall":{"lua":"number start_time, number end_time = reaper.GetSet_ArrangeView2(ReaProject proj, boolean isSet, integer screen_x_start, integer screen_x_end, number start_time, number end_time)","eel":"GetSet_ArrangeView2(ReaProject proj, bool isSet, int screen_x_start, int screen_x_end, &start_time, &end_time)","python":"(ReaProject proj, Boolean isSet, Int screen_x_start, Int screen_x_end, Float start_timeOut, Float end_timeOut) = RPR_GetSet_ArrangeView2(proj, isSet, screen_x_start, screen_x_end, start_timeOut, end_timeOut)","cpp":"void GetSet_ArrangeView2(ReaProject* proj, bool isSet, int screen_x_start, int screen_x_end, double* start_timeOut, double* end_timeOut)"},"title":"GetSet_ArrangeView2","chapters":["User Interface","Arrangeview Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Gets or sets the arrange view start/end time for screen coordinates. use screen_x_start=screen_x_end=0 to use the full arrange view's start/end time\n\nIf you want to get the arrangeviewposition by pixels, set isSet=false and pass the pixel-position of the start and endposition to screen_x_start and screen_x_end.\n\nscreen_x_start and screen_x_end will be ignored, when isSet=true","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"boolean isSet","description":"false, get the current time-selection/loop-range; true, set a new time-selection/loop-range"},{"identifier":"boolean isLoop","description":"true, selection is a loop; false, selection is a regular time-selection"},{"identifier":"number start_sel","description":"the new startposition of the time-selection/loop-range"},{"identifier":"number end_sel","description":"the new endposition of the time-selection/loop-range"},{"identifier":"boolean allowautoseek","description":"true, when setting a new loop while playback, the playcursor jumps to the loop; false, playcursor stays unaffecte by the change"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSet_LoopTimeRange","return_values":[{"identifier":"start_sel","type":"number"},{"identifier":"end_sel","type":"number"}],"parameters":[{"identifier":"isSet","type":"boolean"},{"identifier":"isLoop","type":"boolean"},{"identifier":"start_sel","type":"number"},{"identifier":"end_sel","type":"number"},{"identifier":"allowautoseek","type":"boolean"}]},"eel":{"return_values":["GetSet_LoopTimeRange"],"parameters":[{"type_name":"bool","identifier":"isSet"},{"type_name":"bool","identifier":"isLoop"},{"identifier":"&start"},{"identifier":"&end"},{"type_name":"bool","identifier":"allowautoseek"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number start_sel","description":"the starting position of the time-selection/loop in seconds"},{"identifier":"number end_sel","description":"the end position of the time-selection/loop in seconds"}],"prog_lang":"*"},"functioncall":{"lua":"number start_sel, number end_sel = reaper.GetSet_LoopTimeRange(boolean isSet, boolean isLoop, number start_sel, number end_sel, boolean allowautoseek)","eel":"GetSet_LoopTimeRange(bool isSet, bool isLoop, &start, &end, bool allowautoseek)","python":"(Boolean isSet, Boolean isLoop, Float startOut, Float endOut, Boolean allowautoseek) = RPR_GetSet_LoopTimeRange(isSet, isLoop, startOut, endOut, allowautoseek)","cpp":"void GetSet_LoopTimeRange(bool isSet, bool isLoop, double* startOut, double* endOut, bool allowautoseek)"},"title":"GetSet_LoopTimeRange","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Gets/sets a time-selection/loop.\n\nLoops and time-selections can be unlinked in preferences -> Editing Behavior -> Link loops to time selection.\nSo you can control them individually, when you've unlinked them with this function.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"boolean isSet","description":"false, get the current time-selection/loop-range; true, set a new time-selection/loop-range"},{"identifier":"boolean isLoop","description":"true, selection is a loop; false, selection is a regular time-selection"},{"identifier":"number start_sel","description":"the new startposition of the time-selection/loop-range"},{"identifier":"number end_sel","description":"the new endposition of the time-selection/loop-range"},{"identifier":"boolean allowautoseek","description":"true, when setting a new loop while playback, the playcursor jumps to the loop; false, playcursor stays unaffecte by the change"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSet_LoopTimeRange2","return_values":[{"identifier":"start_sel","type":"number"},{"identifier":"end_sel","type":"number"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"isSet","type":"boolean"},{"identifier":"isLoop","type":"boolean"},{"identifier":"start_sel","type":"number"},{"identifier":"end_sel","type":"number"},{"identifier":"allowautoseek","type":"boolean"}]},"eel":{"return_values":["GetSet_LoopTimeRange2"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"bool","identifier":"isSet"},{"type_name":"bool","identifier":"isLoop"},{"identifier":"&start"},{"identifier":"&end"},{"type_name":"bool","identifier":"allowautoseek"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number start_sel","description":"the starting position of the time-selection/loop in seconds"},{"identifier":"number end_sel","description":"the end position of the time-selection/loop in seconds"}],"prog_lang":"*"},"functioncall":{"lua":"number start_sel, number end_sel = reaper.GetSet_LoopTimeRange2(ReaProject proj, boolean isSet, boolean isLoop, number start_sel, number end_sel, boolean allowautoseek)","eel":"GetSet_LoopTimeRange2(ReaProject proj, bool isSet, bool isLoop, &start, &end, bool allowautoseek)","python":"(ReaProject proj, Boolean isSet, Boolean isLoop, Float startOut, Float endOut, Boolean allowautoseek) = RPR_GetSet_LoopTimeRange2(proj, isSet, isLoop, startOut, endOut, allowautoseek)","cpp":"void GetSet_LoopTimeRange2(ReaProject* proj, bool isSet, bool isLoop, double* startOut, double* endOut, bool allowautoseek)"},"title":"GetSet_LoopTimeRange2","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Gets/sets a time-selection/loop.\n\nLoops and time-selections can be unlinked in preferences -> Editing Behavior -> Link loops to time selection.\nSo you can control them individually, when you've unlinked them with this function.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"TrackEnvelope env","description":"the envelope, that contains the automation-item"},{"identifier":"integer autoitem_idx","description":"the index of the automation-item, whose information-attribute you want to get/set"},{"identifier":"string desc","description":"the attribute to get/set"},{"identifier":"number value","description":"the new value to be set; write any value, when is_set=false"},{"identifier":"boolean is_set","description":"true, set a new value; false, get the current value"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSetAutomationItemInfo","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"env","type":"TrackEnvelope"},{"identifier":"autoitem_idx","type":"integer"},{"identifier":"desc","type":"string"},{"identifier":"value","type":"number"},{"identifier":"is_set","type":"boolean"}]},"eel":{"method_name":"GetSetAutomationItemInfo","return_values":["double"],"parameters":[{"type_name":"TrackEnvelope","identifier":"env"},{"type_name":"int","identifier":"autoitem_idx"},{"identifier":"\"desc\""},{"identifier":"value"},{"type_name":"bool","identifier":"is_set"}]}},"requires":{"Reaper":"6.01"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.GetSetAutomationItemInfo(TrackEnvelope env, integer autoitem_idx, string desc, number value, boolean is_set)","eel":"double GetSetAutomationItemInfo(TrackEnvelope env, int autoitem_idx, \"desc\", value, bool is_set)","python":"Float retval = RPR_GetSetAutomationItemInfo(TrackEnvelope env, Int autoitem_idx, String desc, Float value, Boolean is_set)","cpp":"double GetSetAutomationItemInfo(TrackEnvelope* env, int autoitem_idx, const char* desc, double value, bool is_set)"},"title":"GetSetAutomationItemInfo","chapters":["Envelope Management","Automation Items"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get or set automation item information. autoitem_idx=0 for the first automation item on an envelope, 1 for the second item, etc. desc can be any of the following:\nD_POOL_ID : double * : automation item pool ID (as an integer); edits are propagated to all other automation items that share a pool ID\nD_POSITION : double * : automation item timeline position in seconds\nD_LENGTH : double * : automation item length in seconds\nD_STARTOFFS : double * : automation item start offset in seconds\nD_PLAYRATE : double * : automation item playback rate\nD_BASELINE : double * : automation item baseline value in the range [0,1]\nD_AMPLITUDE : double * : automation item amplitude in the range [-1,1]\nD_LOOPSRC : double * : nonzero if the automation item contents are looped\nD_UISEL : double * : nonzero if the automation item is selected in the arrange view\nD_POOL_QNLEN : double * : automation item pooled source length in quarter notes (setting will affect all pooled instances)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"TrackEnvelope env","description":"the envelope, that contains the automation-item"},{"identifier":"integer autoitem_idx","description":"the index of the automation-item, whose information-attribute you want to get/set"},{"identifier":"string desc","description":"the attribute to get/set"},{"identifier":"string valuestrNeedBig","description":"the new value to set; set it to \"\" when is_set=false"},{"identifier":"boolean is_set","description":"true, set a new value; false, get the current value"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSetAutomationItemInfo_String","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"valuestrNeedBig","type":"string"}],"parameters":[{"identifier":"env","type":"TrackEnvelope"},{"identifier":"autoitem_idx","type":"integer"},{"identifier":"desc","type":"string"},{"identifier":"valuestrNeedBig","type":"string"},{"identifier":"is_set","type":"boolean"}]},"eel":{"method_name":"GetSetAutomationItemInfo_String","return_values":["bool"],"parameters":[{"type_name":"TrackEnvelope","identifier":"env"},{"type_name":"int","identifier":"autoitem_idx"},{"identifier":"\"desc\""},{"identifier":"#valuestrNeedBig"},{"type_name":"bool","identifier":"is_set"}]}},"requires":{"Reaper":"6.30"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, getting/setting the value was successful; falsem getting/setting the value was unsuccessful"},{"identifier":"string valuestrNeedBig","description":"the current value set"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string valuestrNeedBig = reaper.GetSetAutomationItemInfo_String(TrackEnvelope env, integer autoitem_idx, string desc, string valuestrNeedBig, boolean is_set)","eel":"bool GetSetAutomationItemInfo_String(TrackEnvelope env, int autoitem_idx, \"desc\", #valuestrNeedBig, bool is_set)","python":"(Boolean retval, TrackEnvelope env, Int autoitem_idx, String desc, String valuestrNeedBig, Boolean is_set) = RPR_GetSetAutomationItemInfo_String(env, autoitem_idx, desc, valuestrNeedBig, is_set)","cpp":"bool GetSetAutomationItemInfo_String(TrackEnvelope* env, int autoitem_idx, const char* desc, char* valuestrNeedBig, bool is_set)"},"title":"GetSetAutomationItemInfo_String","chapters":["Envelope Management","Automation Items"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get or set automation item information. autoitem_idx=0 for the first automation item on an envelope, 1 for the second item, etc. returns true on success. desc can be any of the following:\n\nP_POOL_NAME : char * : name of the underlying automation item pool\nP_POOL_EXT:xyz : char * : extension-specific persistent data","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"TrackEnvelope env","description":"the envelope, whose ext-attributes you want to get/set"},{"identifier":"string parmname_attribute","description":"the name of the parameter and attribute. For instance, \"P_EXT:FooBar\" will put the value into the envelope-ext-store named \"FooBar\"; you can have multiple ones with different names"},{"identifier":"string valueStringNeedBig","description":"the new value to set; set it to \"\", when setNewValue=false"},{"identifier":"boolean setNewValue","description":"true, set a new value; false, just return the current value"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSetEnvelopeInfo_String","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"stringNeedBig","type":"string"}],"parameters":[{"identifier":"env","type":"TrackEnvelope"},{"identifier":"parmname_attribute","type":"string"},{"identifier":"valueStringNeedBig","type":"string"},{"identifier":"setNewValue","type":"boolean"}]},"eel":{"method_name":"GetSetEnvelopeInfo_String","return_values":["bool"],"parameters":[{"type_name":"TrackEnvelope","identifier":"env"},{"identifier":"\"parmname\""},{"identifier":"#stringNeedBig"},{"type_name":"bool","identifier":"setNewValue"}]}},"requires":{"Reaper":"6.24"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, getting/setting the value was successful; falsem getting/setting the value was unsuccessful"},{"identifier":"string valuestrNeedBig","description":"the current value set"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string stringNeedBig = reaper.GetSetEnvelopeInfo_String(TrackEnvelope env, string parmname_attribute, string valueStringNeedBig, boolean setNewValue)","eel":"bool GetSetEnvelopeInfo_String(TrackEnvelope env, \"parmname\", #stringNeedBig, bool setNewValue)","python":"(Boolean retval, TrackEnvelope env, String parmname, String stringNeedBig, Boolean setNewValue) = RPR_GetSetEnvelopeInfo_String(env, parmname, stringNeedBig, setNewValue)","cpp":"bool GetSetEnvelopeInfo_String(TrackEnvelope* env, const char* parmname, char* stringNeedBig, bool setNewValue)"},"title":"GetSetEnvelopeInfo_String","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Gets/sets an attribute string:\nP_EXT:xyz : char * : extension-specific persistent data\nGUID : GUID * : 16-byte GUID, can query only, not set. If using a _String() function, GUID is a string {xyz-...}.\n\nThis is basically a key-value-store for envelopes.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"TrackEnvelope env","description":"the envelope, of which you want to get/set the value"},{"identifier":"string str","description":"the new value to set"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSetEnvelopeState","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"str","type":"string"}],"parameters":[{"identifier":"env","type":"TrackEnvelope"},{"identifier":"str","type":"string"}]},"eel":{"method_name":"GetSetEnvelopeState","return_values":["bool"],"parameters":[{"type_name":"TrackEnvelope","identifier":"env"},{"identifier":"#str"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, getting/setting was successful; false, getting/setting was unsuccessful"},{"identifier":"string str","description":"the value currently set"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string str = reaper.GetSetEnvelopeState(TrackEnvelope env, string str)","eel":"bool GetSetEnvelopeState(TrackEnvelope env, #str)","python":"(Boolean retval, TrackEnvelope env, String str, Int str_sz) = RPR_GetSetEnvelopeState(env, str, str_sz)","cpp":"bool GetSetEnvelopeState(TrackEnvelope* env, char* str, int str_sz)"},"title":"GetSetEnvelopeState","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"TrackEnvelope env","description":"the envelope to get/set the state of"},{"identifier":"string str","description":"the new value to set"},{"identifier":"boolean isundo","description":"true, undo; false, don't undo"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSetEnvelopeState2","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"str","type":"string"}],"parameters":[{"identifier":"env","type":"TrackEnvelope"},{"identifier":"str","type":"string"},{"identifier":"isundo","type":"boolean"}]},"eel":{"method_name":"GetSetEnvelopeState2","return_values":["bool"],"parameters":[{"type_name":"TrackEnvelope","identifier":"env"},{"identifier":"#str"},{"type_name":"bool","identifier":"isundo"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, getting/setting was successful; false, getting/setting was unsuccessful"},{"identifier":"string str","description":"the value currently set"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string str = reaper.GetSetEnvelopeState2(TrackEnvelope env, string str, boolean isundo)","eel":"bool GetSetEnvelopeState2(TrackEnvelope env, #str, bool isundo)","python":"(Boolean retval, TrackEnvelope env, String str, Int str_sz, Boolean isundo) = RPR_GetSetEnvelopeState2(env, str, str_sz, isundo)","cpp":"bool GetSetEnvelopeState2(TrackEnvelope* env, char* str, int str_sz, bool isundo)"},"title":"GetSetEnvelopeState2","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem item","description":""},{"identifier":"string str","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSetItemState","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"str","type":"string"}],"parameters":[{"identifier":"item","type":"MediaItem"},{"identifier":"str","type":"string"}]},"eel":{"method_name":"GetSetItemState","return_values":["bool"],"parameters":[{"type_name":"MediaItem","identifier":"item"},{"identifier":"#str"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, getting/setting was successful; false, getting/setting was unsuccessful"},{"identifier":"string str","description":"the value currently set"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string str = reaper.GetSetItemState(MediaItem item, string str)","eel":"bool GetSetItemState(MediaItem item, #str)","python":"(Boolean retval, MediaItem item, String str, Int str_sz) = RPR_GetSetItemState(item, str, str_sz)","cpp":"bool GetSetItemState(MediaItem* item, char* str, int str_sz)"},"title":"GetSetItemState","chapters":["Mediaitem Management","Item States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"deprecated -- see SetItemStateChunk, GetItemStateChunk","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem item","description":"the new item to set"},{"identifier":"string str","description":"the new value to set"},{"identifier":"boolean isundo","description":"true, undo; false, don't undo"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSetItemState2","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"str","type":"string"}],"parameters":[{"identifier":"item","type":"MediaItem"},{"identifier":"str","type":"string"},{"identifier":"isundo","type":"boolean"}]},"eel":{"method_name":"GetSetItemState2","return_values":["bool"],"parameters":[{"type_name":"MediaItem","identifier":"item"},{"identifier":"#str"},{"type_name":"bool","identifier":"isundo"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, getting/setting was successful; false, getting/setting was unsuccessful"},{"identifier":"string str","description":"the value currently set"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string str = reaper.GetSetItemState2(MediaItem item, string str, boolean isundo)","eel":"bool GetSetItemState2(MediaItem item, #str, bool isundo)","python":"(Boolean retval, MediaItem item, String str, Int str_sz, Boolean isundo) = RPR_GetSetItemState2(item, str, str_sz, isundo)","cpp":"bool GetSetItemState2(MediaItem* item, char* str, int str_sz, bool isundo)"},"title":"GetSetItemState2","chapters":["Mediaitem Management","Item States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"deprecated -- see SetItemStateChunk, GetItemStateChunk","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaItem item","description":""},{"identifier":"string parmname","description":""},{"identifier":"string stringNeedBig","description":""},{"identifier":"boolean setNewValue","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSetMediaItemInfo_String","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"stringNeedBig","type":"string"}],"parameters":[{"identifier":"item","type":"MediaItem"},{"identifier":"parmname","type":"string"},{"identifier":"stringNeedBig","type":"string"},{"identifier":"setNewValue","type":"boolean"}]},"eel":{"method_name":"GetSetMediaItemInfo_String","return_values":["bool"],"parameters":[{"type_name":"MediaItem","identifier":"item"},{"identifier":"\"parmname\""},{"identifier":"#stringNeedBig"},{"type_name":"bool","identifier":"setNewValue"}]}},"requires":{"Reaper":"5.975"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string stringNeedBig","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string stringNeedBig = reaper.GetSetMediaItemInfo_String(MediaItem item, string parmname, string stringNeedBig, boolean setNewValue)","eel":"bool GetSetMediaItemInfo_String(MediaItem item, \"parmname\", #stringNeedBig, bool setNewValue)","python":"(Boolean retval, MediaItem item, String parmname, String stringNeedBig, Boolean setNewValue) = RPR_GetSetMediaItemInfo_String(item, parmname, stringNeedBig, setNewValue)","cpp":"bool GetSetMediaItemInfo_String(MediaItem* item, const char* parmname, char* stringNeedBig, bool setNewValue)"},"title":"GetSetMediaItemInfo_String","chapters":["Mediaitem Management","Item States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Gets/sets an item attribute string:\n    P_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)\n    P_EXT:xyz : char * : extension-specific persistent data\n    GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaItem_Take tk","description":""},{"identifier":"string parmname","description":""},{"identifier":"string stringNeedBig","description":""},{"identifier":"boolean setnewvalue","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSetMediaItemTakeInfo_String","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"stringNeedBig","type":"string"}],"parameters":[{"identifier":"tk","type":"MediaItem_Take"},{"identifier":"parmname","type":"string"},{"identifier":"stringNeedBig","type":"string"},{"identifier":"setnewvalue","type":"boolean"}]},"eel":{"method_name":"GetSetMediaItemTakeInfo_String","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"tk"},{"identifier":"\"parmname\""},{"identifier":"#stringNeedBig"},{"type_name":"bool","identifier":"setnewvalue"}]}},"requires":{"Reaper":"5.975"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string stringNeedBig","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string stringNeedBig = reaper.GetSetMediaItemTakeInfo_String(MediaItem_Take tk, string parmname, string stringNeedBig, boolean setnewvalue)","eel":"bool GetSetMediaItemTakeInfo_String(MediaItem_Take tk, \"parmname\", #stringNeedBig, bool setnewvalue)","python":"(Boolean retval, MediaItem_Take tk, String parmname, String stringNeedBig, Boolean setnewvalue) = RPR_GetSetMediaItemTakeInfo_String(tk, parmname, stringNeedBig, setnewvalue)","cpp":"bool GetSetMediaItemTakeInfo_String(MediaItem_Take* tk, const char* parmname, char* stringNeedBig, bool setnewvalue)"},"title":"GetSetMediaItemTakeInfo_String","chapters":["Mediaitem Take Management","Take States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Gets/sets a take attribute string:\n    P_NAME : char * : take name\n    P_EXT:xyz : char * : extension-specific persistent data\n    GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaTrack tr","description":"the track, whose string-attributes you want to get/set"},{"identifier":"string parmname","description":"the attribute that you want to get/set(see description for details)"},{"identifier":"string stringNeedBig","description":"the new value; make \"\" when getting"},{"identifier":"boolean setnewvalue","description":"true, set a new value; false, get a value"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSetMediaTrackInfo_String","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"stringNeedBig","type":"string"}],"parameters":[{"identifier":"tr","type":"MediaTrack"},{"identifier":"parmname","type":"string"},{"identifier":"stringNeedBig","type":"string"},{"identifier":"setnewvalue","type":"boolean"}]},"eel":{"method_name":"GetSetMediaTrackInfo_String","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"tr"},{"identifier":"\"parmname\""},{"identifier":"#stringNeedBig"},{"type_name":"bool","identifier":"setnewvalue"}]}},"requires":{"Reaper":"6.54"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, getting/setting the value was successful; false, it was unsuccessful"},{"identifier":"string stringNeedBig","description":"the resulting/returned value"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string stringNeedBig = reaper.GetSetMediaTrackInfo_String(MediaTrack tr, string parmname, string stringNeedBig, boolean setnewvalue)","eel":"bool GetSetMediaTrackInfo_String(MediaTrack tr, \"parmname\", #stringNeedBig, bool setnewvalue)","python":"(Boolean retval, MediaTrack tr, String parmname, String stringNeedBig, Boolean setnewvalue) = RPR_GetSetMediaTrackInfo_String(tr, parmname, stringNeedBig, setnewvalue)","cpp":"bool GetSetMediaTrackInfo_String(MediaTrack* tr, const char* parmname, char* stringNeedBig, bool setnewvalue)"},"title":"GetSetMediaTrackInfo_String","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get or set track string attributes.\nP_NAME : char * : track name (on master returns NULL)\nP_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)\nP_MCP_LAYOUT : const char * : layout name\nP_RAZOREDITS : const char * : list of razor edit areas, as space-separated triples of start time, end time, and envelope GUID string.\n    Passing the guid sets selection within the envelope; not passing the guid sets the selection within the track itself.\n    Example: \"0.00 1.00 \\\"\\\" 0.00 1.00 \"{xyz-...}\"\n    Set stringNeedBig=\"\" and setnewvalue=false to query the currently set razor-edits on this track.\nP_RAZOREDITS_EXT : const char * : list of razor edit areas, as comma-separated sets of space-separated tuples of start time, end time, optional envelope GUID string, optional fixed/fipm top y-position, optional fixed/fipm bottom y-position(fipm means fixed item positioning).\n    Example: \"0.0 1.0,0.0 1.0 \"{xyz-...}\",1.0 2.0 \"\" 0.25 0.5\"\n    see P_RAZOREDITS above for more details\nP_TCP_LAYOUT : const char * : layout name\nP_EXT:xyz : char * : extension-specific persistent data\nP_UI_RECT:tcp.mute : char * : read-only, allows querying screen position + size of track WALTER elements (tcp.size queries screen position and size of entire TCP, etc).\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["projectmanagement","project","author","get","set"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"boolean set","description":"true, set new author; false, get current project's author"},{"identifier":"string author","description":"the new project author, when set is true. When set is false, author will be ignored."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSetProjectAuthor","return_values":[{"identifier":"author","type":"string"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"set","type":"boolean"},{"identifier":"author","type":"string"}]},"eel":{"return_values":["GetSetProjectAuthor"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"bool","identifier":"set"},{"identifier":"#author"}]}},"requires":{"Reaper":"6.38"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string author","description":"the (new) project's author"}],"prog_lang":"*"},"functioncall":{"lua":"string author = reaper.GetSetProjectAuthor(ReaProject proj, boolean set, string author)","eel":"GetSetProjectAuthor(ReaProject proj, bool set, #author)","python":"(ReaProject proj, Boolean set, String author, Int author_sz) = RPR_GetSetProjectAuthor(proj, set, author, author_sz)","cpp":"void GetSetProjectAuthor(ReaProject* proj, bool set, char* author, int author_sz)"},"title":"GetSetProjectAuthor","chapters":["Project Management","Project States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"deprecated, see GetSetProjectInfo_String with desc=\"PROJECT_AUTHOR\"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"ReaProject project","description":"the project-number. 0 for the current project. "},{"identifier":"boolean set","description":""},{"identifier":"optional number division","description":""},{"identifier":"optional integer swingmode","description":""},{"identifier":"optional number swingamt","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSetProjectGrid","return_values":[{"identifier":"retval","type":"integer"},{"isOptional":true,"type":"number","identifier":"division"},{"isOptional":true,"type":"integer","identifier":"swingmode"},{"isOptional":true,"type":"number","identifier":"swingamt"}],"parameters":[{"identifier":"project","type":"ReaProject"},{"identifier":"set","type":"boolean"},{"isOptional":true,"type":"number","identifier":"division"},{"isOptional":true,"type":"integer","identifier":"swingmode"},{"isOptional":true,"type":"number","identifier":"swingamt"}]},"eel":{"method_name":"GetSetProjectGrid","return_values":["int"],"parameters":[{"type_name":"ReaProject","identifier":"project"},{"type_name":"bool","identifier":"set"},{"type_name":"optional","identifier":"&division"},{"identifier":"&swingmode","modifier":"optional","type_name":"int"},{"type_name":"optional","identifier":"&swingamt"}]}},"requires":{"Reaper":"5.965"},"return_values":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"integer retval","description":""},{"identifier":"optional number division","description":""},{"identifier":"optional integer swingmode","description":""},{"identifier":"optional number swingamt","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, optional number division, optional integer swingmode, optional number swingamt = reaper.GetSetProjectGrid(ReaProject project, boolean set, optional number division, optional integer swingmode, optional number swingamt)","eel":"int GetSetProjectGrid(ReaProject project, bool set, optional &division, optional int &swingmode, optional &swingamt)","python":"(Int retval, ReaProject project, Boolean set, Float divisionInOutOptional, Int swingmodeInOutOptional, Float swingamtInOutOptional) = RPR_GetSetProjectGrid(project, set, divisionInOutOptional, swingmodeInOutOptional, swingamtInOutOptional)","cpp":"int GetSetProjectGrid(ReaProject* project, bool set, double* divisionInOutOptional, int* swingmodeInOutOptional, double* swingamtInOutOptional)"},"title":"GetSetProjectGrid","chapters":["Project Management","Project States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get or set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc. swingmode can be 1 for swing enabled, swingamt is -1..1. swingmode can be 3 for measure-grid. Returns grid configuration flags","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ReaProject project","description":"the project, whos project settings you want to get/set; 0, for the current project"},{"identifier":"string desc","description":"the attribute you want to get/set, like RENDER_CHANNELS, PROJECT_SRATE, RENDER_SETTINGS, etc"},{"identifier":"number value","description":"if is_set==true, this is the new value to set; if is_set==false, set this to 0"},{"identifier":"boolean is_set","description":"true, set a new value; false, get the current value"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSetProjectInfo","return_values":[{"identifier":"value","type":"number"}],"parameters":[{"identifier":"project","type":"ReaProject"},{"identifier":"desc","type":"string"},{"identifier":"value","type":"number"},{"identifier":"is_set","type":"boolean"}]},"eel":{"method_name":"GetSetProjectInfo","return_values":["double"],"parameters":[{"type_name":"ReaProject","identifier":"project"},{"identifier":"\"desc\""},{"identifier":"value"},{"type_name":"bool","identifier":"is_set"}]}},"requires":{"Reaper":"6.64"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number value","description":"the new/current value set with this attribute"}],"prog_lang":"*"},"functioncall":{"lua":"number value = reaper.GetSetProjectInfo(ReaProject project, string desc, number value, boolean is_set)","eel":"double GetSetProjectInfo(ReaProject project, \"desc\", value, bool is_set)","python":"Float retval = RPR_GetSetProjectInfo(ReaProject project, String desc, Float value, Boolean is_set)","cpp":"double GetSetProjectInfo(ReaProject* project, const char* desc, double value, bool is_set)"},"title":"GetSetProjectInfo","chapters":["Project Management","Project States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get or set project information.\n \nRENDER_SETTINGS : \n    &(1|2)=0:master mix, \n    &1=stems+master mix, \n    &2=stems only, \n    &4=multichannel tracks to multichannel files, \n    &8=use render matrix, \n    &16=tracks with only mono media to mono files, \n    &32=selected media items, \n    &64=selected media items via master, \n    &128=Selected tracks via master, \n    &256=Stretch markers/transient guide-checkbox(Only with WAV/AIFF and Source=Selected media items/Selected media items via master), \n    &512=Embed Metadata, if format supports is, \n    &1024=Take markers-checkbox(Only with WAV and Source=Selected media items/Selected media items via master); \n    &2048=2nd pass render  \nOGG, OPUS and FLAC support embedding of tempoinformation via metadata, settable using GetSetProjectInfo_String.  \nRENDER_BOUNDSFLAG : \n  0=custom time bounds, \n  1=entire project, \n  2=time selection, \n  3=all project regions, \n  4=selected media items, \n  5=selected project regions, \n  6=all project markers, \n  7=selected project markers\nRENDER_CHANNELS : number of channels in rendered file  \nRENDER_SRATE : sample rate of rendered file (or 0 for project sample rate)  \nRENDER_STARTPOS : render start time when RENDER_BOUNDSFLAG=0  \nRENDER_ENDPOS : render end time when RENDER_BOUNDSFLAG=0  \nRENDER_TAILFLAG : apply render tail setting when rendering: \n  &1=custom time bounds, \n  &2=entire project, \n  &4=time selection, \n  &8=all project markers/regions, \n  &16=selected media items, \n  &32=selected project markers/regions\nRENDER_TAILMS : tail length in ms to render (only used if RENDER_BOUNDSFLAG and RENDER_TAILFLAG are set)  \nRENDER_ADDTOPROJ : \n  &1=add rendered files to project, \n  &2=Do not render files that are likely silent  \nRENDER_DITHER : \n  &1=dither, \n  &2=noise shaping, \n  &4=dither stems, \n  &8=noise shaping on stems  \nRENDER_NORMALIZE: \n  &1=enable, (&14==0)=LUFS-I, (&14==2)=RMS, (&14==4)=peak, (&14==6)=true peak, (&14==8)=LUFS-M max, (&14==10)=LUFS-S max, \n  &32=normalize stems to common gain based on master, \n  &64=enable brickwall limit, \n  &128=brickwall limit true peak, \n  &256=only normalize files that are too loud, \n  &512=apply fade-in, \n  &1024=apply fade-out\nRENDER_NORMALIZE_TARGET: render normalization target as amplitude, so 0.5 means -6.02dB, 0.25 means -12.04dB, etc  \nRENDER_BRICKWALL: render brickwall limit as amplitude, so 0.5 means -6.02dB, 0.25 means -12.04dB, etc\nRENDER_FADEIN: render fade-in (0.001 means 1 ms, requires RENDER_NORMALIZE&512)\nRENDER_FADEOUT: render fade-out (0.001 means 1 ms, requires RENDER_NORMALIZE&1024)\nRENDER_FADEINSHAPE: render fade-in shape\nRENDER_FADEOUTSHAPE: render fade-out shape\nPROJECT_SRATE : samplerate (ignored unless PROJECT_SRATE_USE set)  \nPROJECT_SRATE_USE : set to 1 if project samplerate is used  ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ReaProject project","description":"the project, whose setting you want to get or set"},{"identifier":"string desc","description":"the setting, that you want to get/set; refer description for available ones"},{"identifier":"string valuestrNeedBig","description":"if is_set==true, this is the new value to set"},{"identifier":"boolean is_set","description":"true, set a new value; false, just get the current one"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSetProjectInfo_String","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"valuestrNeedBig","type":"string"}],"parameters":[{"identifier":"project","type":"ReaProject"},{"identifier":"desc","type":"string"},{"identifier":"valuestrNeedBig","type":"string"},{"identifier":"is_set","type":"boolean"}]},"eel":{"method_name":"GetSetProjectInfo_String","return_values":["bool"],"parameters":[{"type_name":"ReaProject","identifier":"project"},{"identifier":"\"desc\""},{"identifier":"#valuestrNeedBig"},{"type_name":"bool","identifier":"is_set"}]}},"requires":{"Reaper":"6.76"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, value can be set/get; false, value can't be set/get"},{"identifier":"string valuestrNeedBig","description":"the current value for this project-setting"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string valuestrNeedBig = reaper.GetSetProjectInfo_String(ReaProject project, string desc, string valuestrNeedBig, boolean is_set)","eel":"bool GetSetProjectInfo_String(ReaProject project, \"desc\", #valuestrNeedBig, bool is_set)","python":"(Boolean retval, ReaProject project, String desc, String valuestrNeedBig, Boolean is_set) = RPR_GetSetProjectInfo_String(project, desc, valuestrNeedBig, is_set)","cpp":"bool GetSetProjectInfo_String(ReaProject* project, const char* desc, char* valuestrNeedBig, bool is_set)"},"title":"GetSetProjectInfo_String","chapters":["Project Management","Project States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get or set project information.  \n\nPROJECT_NAME: project file name (read-only, is_set will be ignored)  \nPROJECT_TITLE: title field from Project Settings/Notes dialog  \nPROJECT_AUTHOR: author field from Project Settings/Notes dialog  \nTRACK_GROUP_NAME:X: track group name, X should be 1..64  \nMARKER_GUID:X : get the GUID (unique ID) of the marker or region with index X, where X is the index passed to EnumProjectMarkers, not necessarily the displayed number (read-only)\nMARKER_INDEX_FROM_GUID:{GUID} : get the GUID index of the marker or region with GUID {GUID} (read-only)\nOPENCOPY_CFGIDX : integer for the configuration of format to use when creating copies/applying FX. 0=wave (auto-depth), 1=APPLYFX_FORMAT, 2=RECORD_FORMAT\nRECORD_PATH: recording directory -- may be blank or a relative path, to get the effective path see [GetProjectPathEx](#GetProjectPathEx)  \nRECORD_PATH_SECONDARY: secondary recording directory  \nRECORD_FORMAT : base64-encoded sink configuration (see project files, etc). Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. \"evaw\" or \"l3pm\", to use default settings for that sink type.\nAPPLYFX_FORMAT : base64-encoded sink configuration (see project files, etc). Used only if RECFMT_OPENCOPY is set to 1. Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. \"evaw\" or \"l3pm\", to use default settings for that sink type.\nRENDER_FILE: render directory  \nRENDER_PATTERN: render file name (may contain wildcards)  \nRENDER_METADATA : get or set the metadata saved with the project (not metadata embedded in project media). Example, ID3 album name metadata: valuestr=\"ID3:TALB\" to get, valuestr=\"ID3:TALB|my album name\" to set. Call with valuestr=\"\" and is_set=false to get a semicolon-separated list of defined project metadata identifiers.  \nRENDER_TARGETS: semicolon separated list of filenames that would be written if the project is rendered using the most recent render settings  \nRENDER_TARGETS_EX: double-NULL (\\0\\0) separated list of filenames that would be written if the project is rendered using the most recent render settings  \nRENDER_STATS: (read-only) semicolon separated list of statistics for the most recently rendered files. call with valuestr=\"XXX\" to run an action (for example, \"42437\"=dry run render selected items) before returning statistics.  \n              returns nothing, when user aborted rendering.\nRENDER_FORMAT: base64-encoded sink configuration (see project files, etc). Callers can also pass a simple 4-byte string (non-base64-encoded), to use default settings for that sink type.  \nRENDER_FORMAT2: base64-encoded secondary sink configuration. Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. \"evaw\" or \"l3pm\", to use default settings for that sink type, or \"\" to disable secondary render.  \nsee <a href=\"misc_docs/RENDER_How_RenderCFG-Base64-strings_are_encoded.txt\">RENDER_How_RenderCFG-Base64-strings_are_encoded.txt</a> for how the unencoded RENDER_FORMAT-string is structured.  \n\nTo just use the 4-byte-string, you can use: \n\"wave\" for wave, \"aiff\" for aiff, \"caff\" for caf, \"iso \" for audio-cd, \"ddp \" for ddp, \"flac\" for flac, \"mp3l\" for mp3, \"oggv\" for ogg, \"OggS\" for Opus, \"FFMP\" for FFMpeg-video, \"FVAX\" for MP4Video/Audio on Mac, \"GIF \" for Gif, \"LCF \" for LCF, \"WMF\" for Windows Media Foundation(mp4, m4a), \"wvpk\" for wavepack\n\nRENDER_METADATA: get or set the metadata saved with the project (not metadata embedded in project media). Example, ID3 album name metadata: Uses common ID3-tagcodes like TALB(album), TPE1(Artist), etc.\nTo get album tag, use \"ID3:TALB\", to set album tag, use \"ID3:TALB|my album name\".  \n\nExamples in Lua:  \ngetting the album name from the metadata of the current project:  \n\n        retval, albumname    = reaper.GetSetProjectInfo_String(0, \"RENDER_METADATA\", \"ID3:TALB\", false)\n\nsetting the album name in the metadata of the current project:\n\n        retval, albumame_new = reaper.GetSetProjectInfo_String(0, \"RENDER_METADATA\", \"ID3:TALB|New album name\", true)\n\nSupported tags-codes are: TIT2(Title), TPE1(Artist), TPE2(Albumartist), TALB(Album), TRCK(Track), TCON(Genre), TYER(Year), TDRC(Recording time: YYYY-MM-DD), TKEY(Key), TBPM(Tempo), TSRC(International Standard Recording Code), COMM(Comment), COMM_LANG(Comment language), APIC_TYPE(Image type), APIC_DESC(Image description), APIC_FILE(Image file)  \n\nAPIC_TYPE can have be of the following:  \n\n0: Other  \n1: 32x32 pixel file icon (PNG only)  \n2: Other file icon  \n3: Cover (front)  \n4: Cover (back)  \n5: Leaflet page  \n6: Media  \n7: Lead artist/Lead Performer/Solo  \n8: Artist/Performer  \n9: Conductor  \n10: Band/Orchestra  \n11: Composer  \n12: Lyricist/Text writer  \n13: Recording location  \n14: During recording  \n15: During performance  \n16: Movie/video screen capture  \n17: A bright colored fish  \n18: Illustration  \n19: Band/Artist logotype  \n20: Publisher/Studiotype  ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["projectmanagement","get","set","project","notes"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"boolean set","description":"true, set the project's notes; false, get the project's notes"},{"identifier":"string notes","description":"the new project's notes, when set is set to true"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSetProjectNotes","return_values":[{"identifier":"notes","type":"string"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"set","type":"boolean"},{"identifier":"notes","type":"string"}]},"eel":{"return_values":["GetSetProjectNotes"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"bool","identifier":"set"},{"identifier":"#notes"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string notes","description":"the notes stored in the project's notes."}],"prog_lang":"*"},"functioncall":{"lua":"string notes = reaper.GetSetProjectNotes(ReaProject proj, boolean set, string notes)","eel":"GetSetProjectNotes(ReaProject proj, bool set, #notes)","python":"(ReaProject proj, Boolean set, String notesNeedBig, Int notesNeedBig_sz) = RPR_GetSetProjectNotes(proj, set, notesNeedBig, notesNeedBig_sz)","cpp":"void GetSetProjectNotes(ReaProject* proj, bool set, char* notesNeedBig, int notesNeedBig_sz)"},"title":"GetSetProjectNotes","chapters":["Project Management","Project States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"gets or sets project notes, notesNeedBig_sz is ignored when setting","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","get","set","repeat"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer val","description":"-1, query repeat-state\n0, clear repeat state\n1, set repeat to repeat\n2 and higher, toggle repeat state"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSetRepeat","return_values":[{"identifier":"repeat_state","type":"integer"}],"parameters":[{"identifier":"val","type":"integer"}]},"eel":{"method_name":"GetSetRepeat","return_values":["int"],"parameters":[{"type_name":"int","identifier":"val"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer repeat_state","description":"new/current repeat state; 0, repeat is off; 1, repeat is on"}],"prog_lang":"*"},"functioncall":{"lua":"integer repeat_state = reaper.GetSetRepeat(integer val)","eel":"int GetSetRepeat(int val)","python":"Int retval = RPR_GetSetRepeat(Int val)","cpp":"int GetSetRepeat(int val)"},"title":"GetSetRepeat","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets or gets repeat-state of the current project.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","get","set","repeat"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"integer val","description":"-1, query repeat-state\n0, clear repeat state\n1, set repeat to repeat\n2 and higher, toggle repeat state"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSetRepeatEx","return_values":[{"identifier":"repeat_state","type":"integer"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"val","type":"integer"}]},"eel":{"method_name":"GetSetRepeatEx","return_values":["int"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"int","identifier":"val"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer repeat_state","description":"new/current repeat state; 0, repeat is off; 1, repeat is on"}],"prog_lang":"*"},"functioncall":{"lua":"integer repeat_state = reaper.GetSetRepeatEx(ReaProject proj, integer val)","eel":"int GetSetRepeatEx(ReaProject proj, int val)","python":"Int retval = RPR_GetSetRepeatEx(ReaProject proj, Int val)","cpp":"int GetSetRepeatEx(ReaProject* proj, int val)"},"title":"GetSetRepeatEx","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets or gets repeat-state in a specific project.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaTrack tr","description":""},{"identifier":"string groupname","description":""},{"identifier":"integer setmask","description":""},{"identifier":"integer setvalue","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSetTrackGroupMembership","return_values":[{"identifier":"group_membership","type":"integer"}],"parameters":[{"identifier":"tr","type":"MediaTrack"},{"identifier":"groupname","type":"string"},{"identifier":"setmask","type":"integer"},{"identifier":"setvalue","type":"integer"}]},"eel":{"method_name":"GetSetTrackGroupMembership","return_values":["uint"],"parameters":[{"type_name":"MediaTrack","identifier":"tr"},{"identifier":"\"groupname\""},{"type_name":"uint","identifier":"setmask"},{"type_name":"uint","identifier":"setvalue"}]}},"requires":{"Reaper":"6.12"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer group_membership","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer group_membership = reaper.GetSetTrackGroupMembership(MediaTrack tr, string groupname, integer setmask, integer setvalue)","eel":"uint GetSetTrackGroupMembership(MediaTrack tr, \"groupname\", uint setmask, uint setvalue)","python":"Int retval = RPR_GetSetTrackGroupMembership(MediaTrack tr, String groupname, Int setmask, Int setvalue)","cpp":"unsigned int GetSetTrackGroupMembership(MediaTrack* tr, const char* groupname, unsigned int setmask, unsigned int setvalue)"},"title":"GetSetTrackGroupMembership","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\nVOLUME_LEAD\nVOLUME_FOLLOW\nVOLUME_VCA_LEAD\nVOLUME_VCA_FOLLOW\nPAN_LEAD\nPAN_FOLLOW\nWIDTH_LEAD\nWIDTH_FOLLOW\nMUTE_LEAD\nMUTE_FOLLOW\nSOLO_LEAD\nSOLO_FOLLOW\nRECARM_LEAD\nRECARM_FOLLOW\nPOLARITY_LEAD\nPOLARITY_FOLLOW\nAUTOMODE_LEAD\nAUTOMODE_FOLLOW\nVOLUME_REVERSE\nPAN_REVERSE\nWIDTH_REVERSE\nNO_LEAD_WHEN_FOLLOW\nVOLUME_VCA_FOLLOW_ISPREFX\n\nNote: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"string str","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSetTrackState","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"str","type":"string"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"str","type":"string"}]},"eel":{"method_name":"GetSetTrackState","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"identifier":"#str"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string str","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string str = reaper.GetSetTrackState(MediaTrack track, string str)","eel":"bool GetSetTrackState(MediaTrack track, #str)","python":"(Boolean retval, MediaTrack track, String str, Int str_sz) = RPR_GetSetTrackState(track, str, str_sz)","cpp":"bool GetSetTrackState(MediaTrack* track, char* str, int str_sz)"},"title":"GetSetTrackState","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"deprecated -- see SetTrackStateChunk, GetTrackStateChunk","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"string str","description":""},{"identifier":"boolean isundo","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSetTrackState2","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"str","type":"string"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"str","type":"string"},{"identifier":"isundo","type":"boolean"}]},"eel":{"method_name":"GetSetTrackState2","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"identifier":"#str"},{"type_name":"bool","identifier":"isundo"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string str","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string str = reaper.GetSetTrackState2(MediaTrack track, string str, boolean isundo)","eel":"bool GetSetTrackState2(MediaTrack track, #str, bool isundo)","python":"(Boolean retval, MediaTrack track, String str, Int str_sz, Boolean isundo) = RPR_GetSetTrackState2(track, str, str_sz, isundo)","cpp":"bool GetSetTrackState2(MediaTrack* track, char* str, int str_sz, bool isundo)"},"title":"GetSetTrackState2","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"deprecated -- see SetTrackStateChunk, GetTrackStateChunk","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PCM_source src","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSubProjectFromSource","return_values":[{"identifier":"sub_proj","type":"ReaProject"}],"parameters":[{"identifier":"src","type":"PCM_source"}]},"eel":{"method_name":"GetSubProjectFromSource","return_values":["ReaProject"],"parameters":[{"type_name":"PCM_source","identifier":"src"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject sub_proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"functioncall":{"lua":"ReaProject sub_proj = reaper.GetSubProjectFromSource(PCM_source src)","eel":"ReaProject GetSubProjectFromSource(PCM_source src)","python":"ReaProject sub_proj = RPR_GetSubProjectFromSource(PCM_source src)","cpp":"ReaProject* GetSubProjectFromSource(PCM_source* src)"},"title":"GetSubProjectFromSource","chapters":["Audio Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["mediaitemmanagement","get","take","idx","item"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem item","description":"the MediaItem, whose take you want to request"},{"identifier":"integer takeidx","description":"the index of the takes in a MediaItem"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTake","return_values":[{"identifier":"take","type":"MediaItem_Take"}],"parameters":[{"identifier":"item","type":"MediaItem"},{"identifier":"takeidx","type":"integer"}]},"eel":{"method_name":"GetTake","return_values":["MediaItem_Take"],"parameters":[{"type_name":"MediaItem","identifier":"item"},{"type_name":"int","identifier":"takeidx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":"the requested MediaItem_Take"}],"prog_lang":"*"},"functioncall":{"lua":"MediaItem_Take take = reaper.GetTake(MediaItem item, integer takeidx)","eel":"MediaItem_Take GetTake(MediaItem item, int takeidx)","python":"MediaItem_Take take = RPR_GetTake(MediaItem item, Int takeidx)","cpp":"MediaItem_Take* GetTake(MediaItem* item, int takeidx)"},"title":"GetTake","chapters":["Mediaitem Take Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"get a take from an item by take count (zero-based)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer envidx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTakeEnvelope","return_values":[{"identifier":"env","type":"TrackEnvelope"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"envidx","type":"integer"}]},"eel":{"method_name":"GetTakeEnvelope","return_values":["TrackEnvelope"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"envidx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"TrackEnvelope env","description":""}],"prog_lang":"*"},"functioncall":{"lua":"TrackEnvelope env = reaper.GetTakeEnvelope(MediaItem_Take take, integer envidx)","eel":"TrackEnvelope GetTakeEnvelope(MediaItem_Take take, int envidx)","python":"TrackEnvelope env = RPR_GetTakeEnvelope(MediaItem_Take take, Int envidx)","cpp":"TrackEnvelope* GetTakeEnvelope(MediaItem_Take* take, int envidx)"},"title":"GetTakeEnvelope","chapters":["Envelope Management","Take Envelopes"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"string envname","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTakeEnvelopeByName","return_values":[{"identifier":"env","type":"TrackEnvelope"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"envname","type":"string"}]},"eel":{"method_name":"GetTakeEnvelopeByName","return_values":["TrackEnvelope"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"identifier":"\"envname\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"TrackEnvelope env","description":""}],"prog_lang":"*"},"functioncall":{"lua":"TrackEnvelope env = reaper.GetTakeEnvelopeByName(MediaItem_Take take, string envname)","eel":"TrackEnvelope GetTakeEnvelopeByName(MediaItem_Take take, \"envname\")","python":"TrackEnvelope env = RPR_GetTakeEnvelopeByName(MediaItem_Take take, String envname)","cpp":"TrackEnvelope* GetTakeEnvelopeByName(MediaItem_Take* take, const char* envname)"},"title":"GetTakeEnvelopeByName","chapters":["Envelope Management","Take Envelopes"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["markermanagement","get","takemarker"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":"the take, whose take-marker you want to get"},{"identifier":"integer idx","description":"the id of the marker within the take, 0 for the first, 1 for the second, etc."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTakeMarker","return_values":[{"identifier":"position","type":"number"},{"identifier":"name","type":"string"},{"isOptional":true,"type":"integer","identifier":"color"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"idx","type":"integer"}]},"eel":{"method_name":"position","return_values":["double"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"idx"},{"identifier":"#name"},{"identifier":"&color","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.09"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"number position","description":"the position of the takemarker within the take in seconds"},{"identifier":"string name","description":"the name of the takemarker"},{"identifier":"optional integer color","description":"the color of the takemarker"}],"prog_lang":"*"},"functioncall":{"lua":"number position, string name, optional integer color = reaper.GetTakeMarker(MediaItem_Take take, integer idx)","eel":"double position = GetTakeMarker(MediaItem_Take take, int idx, #name, optional int &color)","python":"(Float position, MediaItem_Take take, Int idx, String nameOut, Int nameOut_sz, Int colorOutOptional) = RPR_GetTakeMarker(take, idx, nameOut, nameOut_sz, colorOutOptional))","cpp":"double position = GetTakeMarker(MediaItem_Take* take, int idx, char* nameOut, int nameOut_sz, int* colorOutOptional)"},"title":"GetTakeMarker","chapters":["Marker Management","Take Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get information about a take marker. Returns the position in media item source time, or -1 if the take marker does not exist.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["mediaitemmanagement","get","filename","media","take","item"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":"the MediaItem_Take, whose mediafilename you want to have"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTakeName","return_values":[{"type":"takename"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"method_name":"GetTakeName","return_values":["bool"],"parameters":[{"identifier":"#retval"},{"type_name":"MediaItem_Take","identifier":"take"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string takename","description":"the filename of the mediafile in the take"}],"prog_lang":"*"},"functioncall":{"lua":"takename = reaper.GetTakeName(MediaItem_Take take)","eel":"bool GetTakeName(#retval, MediaItem_Take take)","python":"String retval = RPR_GetTakeName(MediaItem_Take take)","cpp":"const char* GetTakeName(MediaItem_Take* take)"},"title":"GetTakeName","chapters":["Mediaitem Take Management","Take States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Retruns the filename of the mediafile in a take. returns NULL if the take is not valid","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTakeNumStretchMarkers","return_values":[{"identifier":"count_stretch_marker","type":"integer"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"method_name":"GetTakeNumStretchMarkers","return_values":["int"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer count_stretch_marker","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer count_stretch_marker = reaper.GetTakeNumStretchMarkers(MediaItem_Take take)","eel":"int GetTakeNumStretchMarkers(MediaItem_Take take)","python":"Int retval = RPR_GetTakeNumStretchMarkers(MediaItem_Take take)","cpp":"int GetTakeNumStretchMarkers(MediaItem_Take* take)"},"title":"GetTakeNumStretchMarkers","chapters":["Marker Management","Stretch Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns number of stretch markers in take","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer idx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTakeStretchMarker","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"pos","type":"number"},{"isOptional":true,"type":"number","identifier":"srcpos"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"idx","type":"integer"}]},"eel":{"method_name":"GetTakeStretchMarker","return_values":["int"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"idx"},{"identifier":"&pos"},{"type_name":"optional","identifier":"&srcpos"}]}},"requires":{"Reaper":"6.39"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer retval","description":""},{"identifier":"number pos","description":""},{"identifier":"optional number srcpos","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, number pos, optional number srcpos = reaper.GetTakeStretchMarker(MediaItem_Take take, integer idx)","eel":"int GetTakeStretchMarker(MediaItem_Take take, int idx, &pos, optional &srcpos)","python":"(Int retval, MediaItem_Take take, Int idx, Float posOut, Float srcposOutOptional) = RPR_GetTakeStretchMarker(take, idx, posOut, srcposOutOptional)","cpp":"int GetTakeStretchMarker(MediaItem_Take* take, int idx, double* posOut, double* srcposOutOptional)"},"title":"GetTakeStretchMarker","chapters":["Marker Management","Stretch Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Gets information on a stretch marker, idx is 0..n. \nReturns -1 if stretch marker not valid. \n\nposOut will be set to position in item\nsrcposOutOptional will be set to source media position. \n\nReturns index. if input index is -1, the following  marker is found using position (or source position if position is -1). \nIf position/source position are used to find marker position, their values are not updated.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer idx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTakeStretchMarkerSlope","return_values":[{"identifier":"take_marker_slope","type":"number"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"idx","type":"integer"}]},"eel":{"method_name":"GetTakeStretchMarkerSlope","return_values":["double"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"idx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number take_marker_slope","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number take_marker_slope = reaper.GetTakeStretchMarkerSlope(MediaItem_Take take, integer idx)","eel":"double GetTakeStretchMarkerSlope(MediaItem_Take take, int idx)","python":"Float retval = RPR_GetTakeStretchMarkerSlope(MediaItem_Take take, Int idx)","cpp":"double GetTakeStretchMarkerSlope(MediaItem_Take* take, int idx)"},"title":"GetTakeStretchMarkerSlope","chapters":["Marker Management","Stretch Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"See SetTakeStretchMarkerSlope","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ReaProject project","description":"the project-number. 0 for the current project. "},{"identifier":"MediaTrack track","description":""},{"identifier":"integer index","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTCPFXParm","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"fxindex","type":"integer"},{"identifier":"parmidx","type":"integer"}],"parameters":[{"identifier":"project","type":"ReaProject"},{"identifier":"track","type":"MediaTrack"},{"identifier":"index","type":"integer"}]},"eel":{"method_name":"GetTCPFXParm","return_values":["bool"],"parameters":[{"type_name":"ReaProject","identifier":"project"},{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"index"},{"type_name":"int","identifier":"&fxindex"},{"type_name":"int","identifier":"&parmidx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer fxindex","description":""},{"identifier":"integer parmidx","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer fxindex, integer parmidx = reaper.GetTCPFXParm(ReaProject project, MediaTrack track, integer index)","eel":"bool GetTCPFXParm(ReaProject project, MediaTrack track, int index, int &fxindex, int &parmidx)","python":"(Boolean retval, ReaProject project, MediaTrack track, Int index, Int fxindexOut, Int parmidxOut) = RPR_GetTCPFXParm(project, track, index, fxindexOut, parmidxOut)","cpp":"bool GetTCPFXParm(ReaProject* project, MediaTrack* track, int index, int* fxindexOut, int* parmidxOut)"},"title":"GetTCPFXParm","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get information about a specific FX parameter knob (see CountTCPFXParms).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"PCM_source source","description":""},{"identifier":"number srcscale","description":""},{"identifier":"number position","description":""},{"identifier":"number mult","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTempoMatchPlayRate","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"rate","type":"number"},{"identifier":"targetlen","type":"number"}],"parameters":[{"identifier":"source","type":"PCM_source"},{"identifier":"srcscale","type":"number"},{"identifier":"position","type":"number"},{"identifier":"mult","type":"number"}]},"eel":{"method_name":"GetTempoMatchPlayRate","return_values":["bool"],"parameters":[{"type_name":"PCM_source","identifier":"source"},{"identifier":"srcscale"},{"identifier":"position"},{"identifier":"mult"},{"identifier":"&rate"},{"identifier":"&targetlen"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number rate","description":""},{"identifier":"number targetlen","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number rate, number targetlen = reaper.GetTempoMatchPlayRate(PCM_source source, number srcscale, number position, number mult)","eel":"bool GetTempoMatchPlayRate(PCM_source source, srcscale, position, mult, &rate, &targetlen)","python":"(Boolean retval, PCM_source source, Float srcscale, Float position, Float mult, Float rateOut, Float targetlenOut) = RPR_GetTempoMatchPlayRate(source, srcscale, position, mult, rateOut, targetlenOut)","cpp":"bool GetTempoMatchPlayRate(PCM_source* source, double srcscale, double position, double mult, double* rateOut, double* targetlenOut)"},"title":"GetTempoMatchPlayRate","chapters":["Audio Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"finds the playrate and target length to insert this item stretched to a round power-of-2 number of bars, between 1/8 and 256","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"integer ptidx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTempoTimeSigMarker","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"timepos","type":"number"},{"identifier":"measurepos","type":"integer"},{"identifier":"beatpos","type":"number"},{"identifier":"bpm","type":"number"},{"identifier":"timesig_num","type":"integer"},{"identifier":"timesig_denom","type":"integer"},{"identifier":"lineartempo","type":"boolean"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"ptidx","type":"integer"}]},"eel":{"method_name":"GetTempoTimeSigMarker","return_values":["bool"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"int","identifier":"ptidx"},{"identifier":"&timepos"},{"type_name":"int","identifier":"&measurepos"},{"identifier":"&beatpos"},{"identifier":"&bpm"},{"type_name":"int","identifier":"&timesig_num"},{"type_name":"int","identifier":"&timesig_denom"},{"type_name":"bool","identifier":"&lineartempo"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number timepos","description":""},{"identifier":"integer measurepos","description":""},{"identifier":"number beatpos","description":""},{"identifier":"number bpm","description":""},{"identifier":"integer timesig_num","description":""},{"identifier":"integer timesig_denom","description":""},{"identifier":"boolean lineartempo","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number timepos, integer measurepos, number beatpos, number bpm, integer timesig_num, integer timesig_denom, boolean lineartempo = reaper.GetTempoTimeSigMarker(ReaProject proj, integer ptidx)","eel":"bool GetTempoTimeSigMarker(ReaProject proj, int ptidx, &timepos, int &measurepos, &beatpos, &bpm, int &timesig_num, int &timesig_denom, bool &lineartempo)","python":"(Boolean retval, ReaProject proj, Int ptidx, Float timeposOut, Int measureposOut, Float beatposOut, Float bpmOut, Int timesig_numOut, Int timesig_denomOut, Boolean lineartempoOut) = RPR_GetTempoTimeSigMarker(proj, ptidx, timeposOut, measureposOut, beatposOut, bpmOut, timesig_numOut, timesig_denomOut, lineartempoOut)","cpp":"bool GetTempoTimeSigMarker(ReaProject* proj, int ptidx, double* timeposOut, int* measureposOut, double* beatposOut, double* bpmOut, int* timesig_numOut, int* timesig_denomOut, bool* lineartempoOut)"},"title":"GetTempoTimeSigMarker","chapters":["Marker Management","Time Signature Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get information about a tempo/time signature marker. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["theme","get","theme","color"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string ini_key","description":""},{"identifier":"integer flags","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetThemeColor","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"ini_key","type":"string"},{"identifier":"flags","type":"integer"}]},"eel":{"method_name":"GetThemeColor","return_values":["int"],"parameters":[{"identifier":"\"ini_key\""},{"type_name":"int","identifier":"flags"}]}},"requires":{"Reaper":"6.14"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.GetThemeColor(string ini_key, integer flags)","eel":"int GetThemeColor(\"ini_key\", int flags)","python":"Int retval = RPR_GetThemeColor(String ini_key, Int flagsOptional)","cpp":"int GetThemeColor(const char* ini_key, int flagsOptional)"},"title":"GetThemeColor","chapters":["Theme Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the theme color specified, or -1 on failure. If the low bit of flags is set, the color as originally specified by the theme (before any transformations) is returned, otherwise the current (possibly transformed and modified) color is returned. \n\nSee SetThemeColor for a list of valid ini_key.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["miscellaneous","get","thing","from point"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer screen_x","description":"the x-position to query element"},{"identifier":"integer screen_y","description":"the y-position to query element"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetThingFromPoint","return_values":[{"isOptional":true,"type":"MediaTrack","identifier":"tr"},{"identifier":"info","type":"string"}],"parameters":[{"identifier":"screen_x","type":"integer"},{"identifier":"screen_y","type":"integer"}]},"eel":{"method_name":"GetThingFromPoint","return_values":["MediaTrack"],"parameters":[{"type_name":"int","identifier":"screen_x"},{"type_name":"int","identifier":"screen_y"},{"identifier":"#info"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"optional MediaTrack tr","description":"a track-object, if existing at this point"},{"identifier":"string info","description":"info like Walter-elements, arrange, fx_chain, etc"}],"prog_lang":"*"},"functioncall":{"lua":"optional MediaTrack tr, string info = reaper.GetThingFromPoint(integer screen_x, integer screen_y)","eel":"MediaTrack GetThingFromPoint(int screen_x, int screen_y, #info)","python":"(MediaTrack tr, Int screen_x, Int screen_y, String infoOut, Int infoOut_sz) = RPR_GetThingFromPoint(screen_x, screen_y, infoOut, infoOut_sz)","cpp":"MediaTrack* GetThingFromPoint(int screen_x, int screen_y, char* infoOut, int infoOut_sz)"},"title":"GetThingFromPoint","chapters":["User Interface","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Hit tests a point in screen coordinates. Updates infoOut with information such as \"arrange\", \"fx_chain\", \"fx_0\" (first FX in chain, floating) or Walter-elements. \nWhen hovering above a track, info is \"arrange\", while over envelopes, it is \"envelope x\" where x is the number of the active(!) envelope.\nIf a track panel is hit, string will begin with \"tcp\" or \"mcp\" or \"tcp.mute\" etc (future versions may append additional information). \n\nMay return NULL with valid info string to indicate non-track thing.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","toggle","get","command","state"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer command_id","description":"the command_id, whose toggle-state you want to know."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetToggleCommandState","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"command_id","type":"integer"}]},"eel":{"method_name":"GetToggleCommandState","return_values":["int"],"parameters":[{"type_name":"int","identifier":"command_id"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"toggle-state \n0, off\n&1, on/checked in menus\n&2, on/grayed out in menus\n&16, on/bullet in front of the entry in menus\n-1, NA because the action does not have on/off states."}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.GetToggleCommandState(integer command_id)","eel":"int GetToggleCommandState(int command_id)","python":"Int retval = RPR_GetToggleCommandState(Int command_id)","cpp":"int GetToggleCommandState(int command_id)"},"title":"GetToggleCommandState","chapters":["Api-Helper-Functions","Actions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Return toggle-state of an action. See GetToggleCommandStateEx.\nSee NamedCommandLookup() for the correct command_id.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","toggle","get","command","state","section"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer section_id","description":"the section, in which the action lies\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"},{"identifier":"integer command_id","description":"the command_id, whose toggle-state you want to know."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetToggleCommandStateEx","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"section_id","type":"integer"},{"identifier":"command_id","type":"integer"}]},"eel":{"method_name":"GetToggleCommandStateEx","return_values":["int"],"parameters":[{"type_name":"int","identifier":"section_id"},{"type_name":"int","identifier":"command_id"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"toggle-state \n0, off\n&1, on/checked in menus\n&2, on/grayed out in menus\n&16, on/bullet in front of the entry in menus\n-1, NA because the action does not have on/off states."}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.GetToggleCommandStateEx(integer section_id, integer command_id)","eel":"int GetToggleCommandStateEx(int section_id, int command_id)","python":"Int retval = RPR_GetToggleCommandStateEx(Int section_id, Int command_id)","cpp":"int GetToggleCommandStateEx(int section_id, int command_id)"},"title":"GetToggleCommandStateEx","chapters":["Api-Helper-Functions","Actions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Return toggle-state of an action.\n\nFor the main action context, the MIDI editor, or the media explorer, returns the toggle state of the action. For the MIDI editor, the action state for the most recently focused window will be returned.\nSee NamedCommandLookup() for the correct command_id.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["userinterface","hwnd","tooltip","window","get"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetTooltipWindow","return_values":[{"identifier":"hwnd","type":"HWND"}],"parameters":[]},"eel":{"method_name":"GetTooltipWindow","return_values":["HWND"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"HWND hwnd","description":"the tooltip-window"}],"prog_lang":"*"},"functioncall":{"lua":"HWND hwnd = reaper.GetTooltipWindow()","eel":"HWND GetTooltipWindow()","python":"HWND hwnd = RPR_GetTooltipWindow()","cpp":"HWND GetTooltipWindow()"},"title":"GetTooltipWindow","chapters":["User Interface","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"gets a tooltip window,in case you want to ask it for font information. Can return NULL.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","get","track"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"integer trackidx","description":"the tracknumber; 0 for the first track, 1 for the second track, etc."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrack","return_values":[{"identifier":"tr","type":"MediaTrack"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"trackidx","type":"integer"}]},"eel":{"method_name":"GetTrack","return_values":["MediaTrack"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"int","identifier":"trackidx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack tr","description":"the requested MediaTrack as an object"}],"prog_lang":"*"},"functioncall":{"lua":"MediaTrack tr = reaper.GetTrack(ReaProject proj, integer trackidx)","eel":"MediaTrack GetTrack(ReaProject proj, int trackidx)","python":"MediaTrack tr = RPR_GetTrack(ReaProject proj, Int trackidx)","cpp":"MediaTrack* GetTrack(ReaProject* proj, int trackidx)"},"title":"GetTrack","chapters":["Track Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"get a track from a project by track count (zero-based) (proj=0 for active project)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack tr","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackAutomationMode","return_values":[{"identifier":"automation_mode","type":"integer"}],"parameters":[{"identifier":"tr","type":"MediaTrack"}]},"eel":{"method_name":"GetTrackAutomationMode","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"tr"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer automation_mode","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer automation_mode = reaper.GetTrackAutomationMode(MediaTrack tr)","eel":"int GetTrackAutomationMode(MediaTrack tr)","python":"Int retval = RPR_GetTrackAutomationMode(MediaTrack tr)","cpp":"int GetTrackAutomationMode(MediaTrack* tr)"},"title":"GetTrackAutomationMode","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"return the track mode, regardless of global override","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","get","color","track","dependent"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack track","description":"the MediaTrack, whose color you want to request"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackColor","return_values":[{"identifier":"color","type":"integer"}],"parameters":[{"identifier":"track","type":"MediaTrack"}]},"eel":{"method_name":"GetTrackColor","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"track"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer color","description":"the os-dependent color"}],"prog_lang":"*"},"functioncall":{"lua":"integer color = reaper.GetTrackColor(MediaTrack track)","eel":"int GetTrackColor(MediaTrack track)","python":"Int retval = RPR_GetTrackColor(MediaTrack track)","cpp":"int GetTrackColor(MediaTrack* track)"},"title":"GetTrackColor","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the track custom color as OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). Black is returned as 0x01000000, no color setting is returned as 0.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","get","track","depth","folder","depth"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack track","description":"the MediaTrack whose position in the track-folder-structure you want to request"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackDepth","return_values":[{"identifier":"tr_depth","type":"integer"}],"parameters":[{"identifier":"track","type":"MediaTrack"}]},"eel":{"method_name":"GetTrackDepth","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"track"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer tr_depth","description":"the position in the track-folder-structure; 0 for the highest level or unfoldered tracks"}],"prog_lang":"*"},"functioncall":{"lua":"integer tr_depth = reaper.GetTrackDepth(MediaTrack track)","eel":"int GetTrackDepth(MediaTrack track)","python":"Int retval = RPR_GetTrackDepth(MediaTrack track)","cpp":"int GetTrackDepth(MediaTrack* track)"},"title":"GetTrackDepth","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get the depth of a track within a folder structure","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer envidx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackEnvelope","return_values":[{"identifier":"env","type":"TrackEnvelope"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"envidx","type":"integer"}]},"eel":{"method_name":"GetTrackEnvelope","return_values":["TrackEnvelope"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"envidx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"TrackEnvelope env","description":""}],"prog_lang":"*"},"functioncall":{"lua":"TrackEnvelope env = reaper.GetTrackEnvelope(MediaTrack track, integer envidx)","eel":"TrackEnvelope GetTrackEnvelope(MediaTrack track, int envidx)","python":"TrackEnvelope env = RPR_GetTrackEnvelope(MediaTrack track, Int envidx)","cpp":"TrackEnvelope* GetTrackEnvelope(MediaTrack* track, int envidx)"},"title":"GetTrackEnvelope","chapters":["Envelope Management","Track Envelopes"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Gets an envelope of a track.\n\nNote: to create an FX-envelope, use GetFXEnvelope with parameter create=true","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack tr","description":""},{"identifier":"string cfgchunkname_or_guid","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackEnvelopeByChunkName","return_values":[{"identifier":"env","type":"TrackEnvelope"}],"parameters":[{"identifier":"tr","type":"MediaTrack"},{"identifier":"cfgchunkname_or_guid","type":"string"}]},"eel":{"method_name":"GetTrackEnvelopeByChunkName","return_values":["TrackEnvelope"],"parameters":[{"type_name":"MediaTrack","identifier":"tr"},{"identifier":"\"cfgchunkname_or_guid\""}]}},"requires":{"Reaper":"6.24"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"TrackEnvelope env","description":""}],"prog_lang":"*"},"functioncall":{"lua":"TrackEnvelope env = reaper.GetTrackEnvelopeByChunkName(MediaTrack tr, string cfgchunkname_or_guid)","eel":"TrackEnvelope GetTrackEnvelopeByChunkName(MediaTrack tr, \"cfgchunkname_or_guid\")","python":"TrackEnvelope env = RPR_GetTrackEnvelopeByChunkName(MediaTrack tr, String cfgchunkname_or_guid)","cpp":"TrackEnvelope* GetTrackEnvelopeByChunkName(MediaTrack* tr, const char* cfgchunkname_or_guid)"},"title":"GetTrackEnvelopeByChunkName","chapters":["Envelope Management","Track Envelopes"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Gets a built-in track envelope by configuration chunk name, e.g. \"<VOLENV\" or GUID string, like \"{B577250D-146F-B544-9B34-F24FBE488F1F}\".\n\nNote: to create an FX-envelope, use GetFXEnvelope with parameter create=true","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"string envname","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackEnvelopeByName","return_values":[{"type":"TrackEnvelope"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"envname","type":"string"}]},"eel":{"method_name":"GetTrackEnvelopeByName","return_values":["TrackEnvelope"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"identifier":"\"envname\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"TrackEnvelope env","description":""}],"prog_lang":"*"},"functioncall":{"lua":"TrackEnvelope = reaper.GetTrackEnvelopeByName(MediaTrack track, string envname)","eel":"TrackEnvelope GetTrackEnvelopeByName(MediaTrack track, \"envname\")","python":"TrackEnvelope env = RPR_GetTrackEnvelopeByName(MediaTrack track, String envname)","cpp":"TrackEnvelope* GetTrackEnvelopeByName(MediaTrack* track, const char* envname)"},"title":"GetTrackEnvelopeByName","chapters":["Envelope Management","Track Envelopes"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Gets a TrackEnvelope by its name.\n\nNote: to create an FX-envelope, use GetFXEnvelope with parameter create=true","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer screen_x","description":"the x-position in pixels, from which you want to get the underlying track"},{"identifier":"integer screen_y","description":"the y-position in pixels, from which you want to get the underlying track"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackFromPoint","return_values":[{"identifier":"retval","type":"MediaTrack"},{"isOptional":true,"type":"integer","identifier":"info"}],"parameters":[{"identifier":"screen_x","type":"integer"},{"identifier":"screen_y","type":"integer"}]},"eel":{"method_name":"GetTrackFromPoint","return_values":["MediaTrack"],"parameters":[{"type_name":"int","identifier":"screen_x"},{"type_name":"int","identifier":"screen_y"},{"identifier":"&info","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"5.975"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack retval","description":"the MediaTrack at position; if the position is above a window associated with the track, this holds the track, where retval info will hold additional information"},{"identifier":"optional integer info","description":"additional information, if the position is above a windows associated with a track\n1, if it is likely an envelope\n2, if it is likely a track FX"}],"prog_lang":"*"},"functioncall":{"lua":"MediaTrack retval, optional integer info = reaper.GetTrackFromPoint(integer screen_x, integer screen_y)","eel":"MediaTrack GetTrackFromPoint(int screen_x, int screen_y, optional int &info)","python":"(MediaTrack retval, Int screen_x, Int screen_y, Int infoOutOptional) = RPR_GetTrackFromPoint(screen_x, screen_y, infoOutOptional)","cpp":"MediaTrack* GetTrackFromPoint(int screen_x, int screen_y, int* infoOutOptional)"},"title":"GetTrackFromPoint","chapters":["Track Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the track from the screen coordinates specified. If the screen coordinates refer to a window associated to the track (such as FX), the track will be returned. infoOutOptional will be set to 1 if it is likely an envelope, 2 if it is likely a track FX.\n\nNote: You can not get the track at screen-coordinates, where it is hidden by other windows.\n\nSee GetThingFromPoint","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack tr","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackGUID","return_values":[{"identifier":"GUID","type":"string"}],"parameters":[{"identifier":"tr","type":"MediaTrack"}]},"eel":{"method_name":"GetTrackGUID","return_values":["bool"],"parameters":[{"identifier":"#retguid"},{"type_name":"MediaTrack","identifier":"tr"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string GUID","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string GUID = reaper.GetTrackGUID(MediaTrack tr)","eel":"bool GetTrackGUID(#retguid, MediaTrack tr)","python":"String GUID = RPR_GetTrackGUID(MediaTrack tr)","cpp":"GUID* GetTrackGUID(MediaTrack* tr)"},"title":"GetTrackGUID","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get the guid of a MediaTrack","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack tr","description":""},{"identifier":"integer itemidx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackMediaItem","return_values":[{"identifier":"item","type":"MediaItem"}],"parameters":[{"identifier":"tr","type":"MediaTrack"},{"identifier":"itemidx","type":"integer"}]},"eel":{"method_name":"GetTrackMediaItem","return_values":["MediaItem"],"parameters":[{"type_name":"MediaTrack","identifier":"tr"},{"type_name":"int","identifier":"itemidx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem item","description":""}],"prog_lang":"*"},"functioncall":{"lua":"MediaItem item = reaper.GetTrackMediaItem(MediaTrack tr, integer itemidx)","eel":"MediaItem GetTrackMediaItem(MediaTrack tr, int itemidx)","python":"MediaItem item = RPR_GetTrackMediaItem(MediaTrack tr, Int itemidx)","cpp":"MediaItem* GetTrackMediaItem(MediaTrack* tr, int itemidx)"},"title":"GetTrackMediaItem","chapters":["Mediaitem Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer flag","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackMIDILyrics","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"flag","type":"integer"}]},"eel":{"method_name":"GetTrackMIDILyrics","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"flag"},{"identifier":"#buf"}]}},"requires":{"Reaper":"6.58"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string buf = reaper.GetTrackMIDILyrics(MediaTrack track, integer flag)","eel":"bool GetTrackMIDILyrics(MediaTrack track, int flag, #buf)","python":"(Boolean retval, MediaTrack track, Int flag, String bufOutWantNeedBig, Int bufOutWantNeedBig_sz) = RPR_GetTrackMIDILyrics(track, flag, bufOutWantNeedBig, bufOutWantNeedBig_sz)","cpp":"bool GetTrackMIDILyrics(MediaTrack* track, int flag, char* bufOutWantNeedBig, int* bufOutWantNeedBig_sz)"},"title":"GetTrackMIDILyrics","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get all MIDI lyrics on the track. Lyrics will be returned as one string with tabs between each word. \n\nflag&1: double tabs at the end of each measure and triple tabs when skipping measures, \nflag&2: each lyric is preceded by its beat position in the project \n\nexample with flag=2: \"1.1.2\\tLyric for measure 1 beat 2\\t2.1.1\\tLyric for measure 2 beat 1 \").\n\nSee SetTrackMIDILyrics","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer track","description":""},{"identifier":"integer pitch","description":""},{"identifier":"integer chan","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackMIDINoteName","return_values":[{"identifier":"notename","type":"string"}],"parameters":[{"identifier":"track","type":"integer"},{"identifier":"pitch","type":"integer"},{"identifier":"chan","type":"integer"}]},"eel":{"method_name":"GetTrackMIDINoteName","return_values":["bool"],"parameters":[{"identifier":"#retval"},{"type_name":"int","identifier":"track"},{"type_name":"int","identifier":"pitch"},{"type_name":"int","identifier":"chan"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string notename","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string notename = reaper.GetTrackMIDINoteName(integer track, integer pitch, integer chan)","eel":"bool GetTrackMIDINoteName(#retval, int track, int pitch, int chan)","python":"String retval = RPR_GetTrackMIDINoteName(Int track, Int pitch, Int chan)","cpp":"const char* GetTrackMIDINoteName(int track, int pitch, int chan)"},"title":"GetTrackMIDINoteName","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"see GetTrackMIDINoteNameEx","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"MediaTrack track","description":""},{"identifier":"integer pitch","description":""},{"identifier":"integer chan","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackMIDINoteNameEx","return_values":[{"identifier":"midi_notename","type":"string"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"track","type":"MediaTrack"},{"identifier":"pitch","type":"integer"},{"identifier":"chan","type":"integer"}]},"eel":{"method_name":"GetTrackMIDINoteNameEx","return_values":["bool"],"parameters":[{"identifier":"#retval"},{"type_name":"ReaProject","identifier":"proj"},{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"pitch"},{"type_name":"int","identifier":"chan"}]}},"requires":{"Reaper":"5.92"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string midi_notename","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string midi_notename = reaper.GetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, integer pitch, integer chan)","eel":"bool GetTrackMIDINoteNameEx(#retval, ReaProject proj, MediaTrack track, int pitch, int chan)","python":"String retval = RPR_GetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, Int pitch, Int chan)","cpp":"const char* GetTrackMIDINoteNameEx(ReaProject* proj, MediaTrack* track, int pitch, int chan)"},"title":"GetTrackMIDINoteNameEx","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get note/CC name. pitch 128 for CC0 name, 129 for CC1 name, etc. See SetTrackMIDINoteNameEx","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"MediaTrack track","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackMIDINoteRange","return_values":[{"identifier":"note_lo_retval","type":"integer"},{"identifier":"note_hi","type":"integer"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"track","type":"MediaTrack"}]},"eel":{"return_values":["GetTrackMIDINoteRange"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"&note_lo"},{"type_name":"int","identifier":"&note_hi"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer note_lo_retval","description":""},{"identifier":"integer note_hi","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer note_lo_retval, integer note_hi = reaper.GetTrackMIDINoteRange(ReaProject proj, MediaTrack track)","eel":"GetTrackMIDINoteRange(ReaProject proj, MediaTrack track, int &note_lo, int &note_hi)","python":"(ReaProject proj, MediaTrack track, Int note_loOut, Int note_hiOut) = RPR_GetTrackMIDINoteRange(proj, track, note_loOut, note_hiOut)","cpp":"void GetTrackMIDINoteRange(ReaProject* proj, MediaTrack* track, int* note_loOut, int* note_hiOut)"},"title":"GetTrackMIDINoteRange","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","get","name"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack track","description":"the MediaTrack, whose name you want to know"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackName","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"track","type":"MediaTrack"}]},"eel":{"method_name":"GetTrackName","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"identifier":"#buf"}]}},"requires":{"Reaper":"5.974"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, if successful"},{"identifier":"string buf","description":"the name of the track; \"MASTER\" for master-track; \"Track N\" if the track has no given name yet(N=tracknumber)"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string buf = reaper.GetTrackName(MediaTrack track)","eel":"bool GetTrackName(MediaTrack track, #buf)","python":"(Boolean retval, MediaTrack track, String bufOut, Int bufOut_sz) = RPR_GetTrackName(track, bufOut, bufOut_sz)","cpp":"bool GetTrackName(MediaTrack* track, char* bufOut, int bufOut_sz)"},"title":"GetTrackName","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns \"MASTER\" for master track, \"Track N\" if track has no name.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","get","count","item","track"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack tr","description":"the MediaTrack, whose number of MediaItems you want to count"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackNumMediaItems","return_values":[{"identifier":"num_media_items","type":"integer"}],"parameters":[{"identifier":"tr","type":"MediaTrack"}]},"eel":{"method_name":"GetTrackNumMediaItems","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"tr"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer num_media_items","description":"the number of MediaItems in the MediaTrack"}],"prog_lang":"*"},"functioncall":{"lua":"integer num_media_items = reaper.GetTrackNumMediaItems(MediaTrack tr)","eel":"int GetTrackNumMediaItems(MediaTrack tr)","python":"Int retval = RPR_GetTrackNumMediaItems(MediaTrack tr)","cpp":"int GetTrackNumMediaItems(MediaTrack* tr)"},"title":"GetTrackNumMediaItems","chapters":["Track Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get the number of MediaItems of a MediaTrack","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","get","count","send","receive","hardware output","hwout"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack tr","description":"the MediaTrack, whose number of sends/receives/hardware outputs you want to know"},{"identifier":"integer category","description":"<0 for receives; 0=sends; >0 for hardware outputs"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackNumSends","return_values":[{"identifier":"count_sends","type":"integer"}],"parameters":[{"identifier":"tr","type":"MediaTrack"},{"identifier":"category","type":"integer"}]},"eel":{"method_name":"GetTrackNumSends","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"tr"},{"type_name":"int","identifier":"category"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer count_sends","description":"the number of sends/receives/hardware outputs"}],"prog_lang":"*"},"functioncall":{"lua":"integer count_sends = reaper.GetTrackNumSends(MediaTrack tr, integer category)","eel":"int GetTrackNumSends(MediaTrack tr, int category)","python":"Int retval = RPR_GetTrackNumSends(MediaTrack tr, Int category)","cpp":"int GetTrackNumSends(MediaTrack* tr, int category)"},"title":"GetTrackNumSends","chapters":["Track Management","Routing"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns number of sends/receives/hardware outputs\n\nFor ReaRoute-users: the outputs are hardware outputs, but with 512 added to the destination channel index (512 is the first rearoute channel, 513 the second, etc).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":"the MediaTrack, whose receive-trackname you want to get"},{"identifier":"integer recv_index","description":"the index of the received track; 0-based"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackReceiveName","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"receive_trackname","type":"string"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"recv_index","type":"integer"}]},"eel":{"method_name":"GetTrackReceiveName","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"recv_index"},{"identifier":"#receive_trackname"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, receive is existing; false, receive is not existing"},{"identifier":"string receive_trackname","description":"the name of the track, MediaTrack is receiving"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string receive_trackname = reaper.GetTrackReceiveName(MediaTrack track, integer recv_index)","eel":"bool GetTrackReceiveName(MediaTrack track, int recv_index, #receive_trackname)","python":"(Boolean retval, MediaTrack track, Int recv_index, String receive_trackname, Int receive_trackname_sz) = RPR_GetTrackReceiveName(track, recv_index, receive_trackname, receive_trackname_sz)","cpp":"bool GetTrackReceiveName(MediaTrack* track, int recv_index, char* bufOut, int receive_trackname_sz)"},"title":"GetTrackReceiveName","chapters":["Track Management","Routing"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Gets the name of a track, that MediaTrack is receiving.\n\nIf the track has no name, the name will be something like \"Track 2\".\n\nSee GetTrackSendName.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":"the MediaTrack, whose receive-mutestate you want to get"},{"identifier":"integer recv_index","description":"the index of the received track; 0-based"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackReceiveUIMute","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"mute","type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"recv_index","type":"integer"}]},"eel":{"method_name":"GetTrackReceiveUIMute","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"recv_index"},{"type_name":"bool","identifier":"&mute"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, receive exists; false, receive doesn't exist"},{"identifier":"boolean mute","description":"true, receive is muted; false, receive is not muted"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, boolean mute = reaper.GetTrackReceiveUIMute(MediaTrack track, integer recv_index)","eel":"bool GetTrackReceiveUIMute(MediaTrack track, int recv_index, bool &mute)","python":"(Boolean retval, MediaTrack track, Int recv_index, Boolean muteOut) = RPR_GetTrackReceiveUIMute(track, recv_index, muteOut)","cpp":"bool GetTrackReceiveUIMute(MediaTrack* track, int recv_index, bool* muteOut)"},"title":"GetTrackReceiveUIMute","chapters":["Track Management","Routing"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the mute-state of a track, that MediaTrack is receiving.\n\nSee GetTrackSendUIMute.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":"the MediaTrack, whose receive-vol-pan-value you want to get"},{"identifier":"integer recv_index","description":"the index of the received track; 0-based"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackReceiveUIVolPan","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"volume","type":"number"},{"identifier":"pan","type":"number"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"recv_index","type":"integer"}]},"eel":{"method_name":"GetTrackReceiveUIVolPan","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"recv_index"},{"identifier":"&volume"},{"identifier":"&pan"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":"the MediaTrack, whose receive-mutestate you want to get"},{"identifier":"number volume","description":"the volume as mkvol-value(see description for how to convert it to dB)"},{"identifier":"number pan","description":"the pan-value; -1(L), 0(center), 1(R)"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number volume, number pan = reaper.GetTrackReceiveUIVolPan(MediaTrack track, integer recv_index)","eel":"bool GetTrackReceiveUIVolPan(MediaTrack track, int recv_index, &volume, &pan)","python":"(Boolean retval, MediaTrack track, Int recv_index, Float volumeOut, Float panOut) = RPR_GetTrackReceiveUIVolPan(track, recv_index, volumeOut, panOut)","cpp":"bool GetTrackReceiveUIVolPan(MediaTrack* track, int recv_index, double* volumeOut, double* panOut)"},"title":"GetTrackReceiveUIVolPan","chapters":["Track Management","Routing"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the pan and volume-values of a track that MediaTrack is receiving.\n\nNote: convert the volumevalue to dB using in Lua: dB_volume = math.log(volume)*8.68588963806\n\nSee GetTrackSendUIVolPan","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaTrack tr","description":"the MediaTrack, whose atributes of a send/receives/hwouts you want to get"},{"identifier":"integer category","description":"<0 to index receives, 0, to index sends; >0, to index hardware-outs"},{"identifier":"integer sendidx","description":"the index of the receive/send/hwout; 0-based"},{"identifier":"string parmname","description":"the parameter-name(see description for more details)"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackSendInfo_Value","return_values":[{"identifier":"value","type":"number"}],"parameters":[{"identifier":"tr","type":"MediaTrack"},{"identifier":"category","type":"integer"},{"identifier":"sendidx","type":"integer"},{"identifier":"parmname","type":"string"}]},"eel":{"method_name":"GetTrackSendInfo_Value","return_values":["double"],"parameters":[{"type_name":"MediaTrack","identifier":"tr"},{"type_name":"int","identifier":"category"},{"type_name":"int","identifier":"sendidx"},{"identifier":"\"parmname\""}]}},"requires":{"Reaper":"6.30"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number value","description":"the value of the parmname-attribute; see description for value-ranges"}],"prog_lang":"*"},"functioncall":{"lua":"number value = reaper.GetTrackSendInfo_Value(MediaTrack tr, integer category, integer sendidx, string parmname)","eel":"double GetTrackSendInfo_Value(MediaTrack tr, int category, int sendidx, \"parmname\")","python":"Float retval = RPR_GetTrackSendInfo_Value(MediaTrack tr, Int category, Int sendidx, String parmname)","cpp":"double GetTrackSendInfo_Value(MediaTrack* tr, int category, int sendidx, const char* parmname)"},"title":"GetTrackSendInfo_Value","chapters":["Track Management","Routing"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get send/receive/hardware output numerical-value attributes.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nparameter names:\n\n  B_MUTE : bool *\n  B_PHASE : bool * : true to flip phase\n  B_MONO : bool *\n  D_VOL : double * : 1.0 = +0dB etc\n  D_PAN : double * : -1..+1\n  D_PANLAW : double * : 1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\n  I_SENDMODE : int * : 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\n  I_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n  I_SRCCHAN : int * : -1 for no audio send. Low 10 bits specify channel offset, and higher bits specify channel count. (srcchan>>10) == 0 for stereo, 1 for mono, 2 for 4 channel, 3 for 6 channel, etc.\n  I_DSTCHAN : int * : low 10 bits are destination index, &1024 set to mix to mono.\n  I_MIDIFLAGS : int * : low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chanP_DESTTRACK : read only, returns MediaTrack *, destination track, only applies for sends/recvs\n  P_DESTTRACK : MediaTrack * : destination track, only applies for sends/recvs (read-only)\n  P_SRCTRACK : MediaTrack * : source track, only applies for sends/recvs (read-only)\n  P_ENV:&envchunkname : TrackEnvelope * : call with :&VOLENV, :&PANENV, etc appended (read-only)\n\nFor ReaRoute-users: the outputs are hardware outputs, but with 512 added to the destination channel index (512 is the first rearoute channel, 513 the second, etc).\n\nNote: convert the D_VOL-volume to dB using in Lua: dB_volume = math.log(volume)*8.68588963806","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":"the MediaTrack, whose track-send-name you want to get"},{"identifier":"integer send_index","description":"the index of the track-send"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackSendName","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"send_name","type":"string"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"send_index","type":"integer"}]},"eel":{"method_name":"GetTrackSendName","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"send_index"},{"identifier":"#send_name"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string send_name","description":"the name of the track to which you send"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string send_name = reaper.GetTrackSendName(MediaTrack track, integer send_index)","eel":"bool GetTrackSendName(MediaTrack track, int send_index, #send_name)","python":"(Boolean retval, MediaTrack track, Int send_index, String send_name, Int send_name_sz) = RPR_GetTrackSendName(track, send_index, send_name, send_name_sz)","cpp":"bool GetTrackSendName(MediaTrack* track, int send_index, char* send_name, int send_name_sz)"},"title":"GetTrackSendName","chapters":["Track Management","Routing"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"gets the name of a track, that MediaTrack is sending to\nsend_idx>=0 for hw outputs, >=nb_of_hw_outputs for sends. \n\nIf the send-track has no name, send_name can be something like \"Track 2\"\n\nSee GetTrackReceiveName","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer send_index","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackSendUIMute","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"mute","type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"send_index","type":"integer"}]},"eel":{"method_name":"GetTrackSendUIMute","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"send_index"},{"type_name":"bool","identifier":"&mute"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"boolean mute","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, boolean mute = reaper.GetTrackSendUIMute(MediaTrack track, integer send_index)","eel":"bool GetTrackSendUIMute(MediaTrack track, int send_index, bool &mute)","python":"(Boolean retval, MediaTrack track, Int send_index, Boolean muteOut) = RPR_GetTrackSendUIMute(track, send_index, muteOut)","cpp":"bool GetTrackSendUIMute(MediaTrack* track, int send_index, bool* muteOut)"},"title":"GetTrackSendUIMute","chapters":["Track Management","Routing"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"send_idx>=0 for hw outputs, >=nb_of_hw_outputs for sends. \n\nSee GetTrackReceiveUIMute.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer send_index","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackSendUIVolPan","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"volume","type":"number"},{"identifier":"pan","type":"number"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"send_index","type":"integer"}]},"eel":{"method_name":"GetTrackSendUIVolPan","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"send_index"},{"identifier":"&volume"},{"identifier":"&pan"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number volume","description":""},{"identifier":"number pan","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number volume, number pan = reaper.GetTrackSendUIVolPan(MediaTrack track, integer send_index)","eel":"bool GetTrackSendUIVolPan(MediaTrack track, int send_index, &volume, &pan)","python":"(Boolean retval, MediaTrack track, Int send_index, Float volumeOut, Float panOut) = RPR_GetTrackSendUIVolPan(track, send_index, volumeOut, panOut)","cpp":"bool GetTrackSendUIVolPan(MediaTrack* track, int send_index, double* volumeOut, double* panOut)"},"title":"GetTrackSendUIVolPan","chapters":["Track Management","Routing"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"send_idx>=0 for hw outputs, >=nb_of_hw_outputs for sends. \n\nSee GetTrackReceiveUIVolPan\n\nNote: convert the volumevalue to dB using in Lua: dB_volume = math.log(volume)*8.68588963806","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack track","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackState","return_values":[{"identifier":"retval","type":"string"},{"identifier":"flags","type":"integer"}],"parameters":[{"identifier":"track","type":"MediaTrack"}]},"eel":{"method_name":"GetTrackState","return_values":["bool"],"parameters":[{"identifier":"#retval"},{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"&flags"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string retval","description":""},{"identifier":"integer flags","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string retval, integer flags = reaper.GetTrackState(MediaTrack track)","eel":"bool GetTrackState(#retval, MediaTrack track, int &flags)","python":"(String retval, MediaTrack track, Int flagsOut) = RPR_GetTrackState(track, flagsOut)","cpp":"const char* GetTrackState(MediaTrack* track, int* flagsOut)"},"title":"GetTrackState","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Gets track state, returns track name.\nflags will be set to:\n&1=folder\n&2=selected\n&4=has fx enabled\n&8=muted\n&16=soloed\n&32=SIP'd (with &16)\n&64=rec armed\n&128=rec monitoring on\n&256=rec monitoring auto\n&512=hide from TCP\n&1024=hide from MCP","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"string str","description":""},{"identifier":"boolean isundo","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackStateChunk","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"str","type":"string"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"str","type":"string"},{"identifier":"isundo","type":"boolean"}]},"eel":{"method_name":"GetTrackStateChunk","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"identifier":"#str"},{"type_name":"bool","identifier":"isundo"}]}},"requires":{"Reaper":"5.982"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string str","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string str = reaper.GetTrackStateChunk(MediaTrack track, string str, boolean isundo)","eel":"bool GetTrackStateChunk(MediaTrack track, #str, bool isundo)","python":"(Boolean retval, MediaTrack track, String strNeedBig, Int strNeedBig_sz, Boolean isundoOptional) = RPR_GetTrackStateChunk(track, strNeedBig, strNeedBig_sz, isundoOptional)","cpp":"bool GetTrackStateChunk(MediaTrack* track, char* strNeedBig, int strNeedBig_sz, bool isundoOptional)"},"title":"GetTrackStateChunk","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Gets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack track","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackUIMute","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"mute","type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"}]},"eel":{"method_name":"GetTrackUIMute","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"bool","identifier":"&mute"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"boolean mute","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, boolean mute = reaper.GetTrackUIMute(MediaTrack track)","eel":"bool GetTrackUIMute(MediaTrack track, bool &mute)","python":"(Boolean retval, MediaTrack track, Boolean muteOut) = RPR_GetTrackUIMute(track, muteOut)","cpp":"bool GetTrackUIMute(MediaTrack* track, bool* muteOut)"},"title":"GetTrackUIMute","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack track","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackUIPan","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"pan1","type":"number"},{"identifier":"pan2","type":"number"},{"identifier":"panmode","type":"integer"}],"parameters":[{"identifier":"track","type":"MediaTrack"}]},"eel":{"method_name":"GetTrackUIPan","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"identifier":"&pan1"},{"identifier":"&pan2"},{"type_name":"int","identifier":"&panmode"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number pan1","description":""},{"identifier":"number pan2","description":""},{"identifier":"integer panmode","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number pan1, number pan2, integer panmode = reaper.GetTrackUIPan(MediaTrack track)","eel":"bool GetTrackUIPan(MediaTrack track, &pan1, &pan2, int &panmode)","python":"(Boolean retval, MediaTrack track, Float pan1Out, Float pan2Out, Int panmodeOut) = RPR_GetTrackUIPan(track, pan1Out, pan2Out, panmodeOut)","cpp":"bool GetTrackUIPan(MediaTrack* track, double* pan1Out, double* pan2Out, int* panmodeOut)"},"title":"GetTrackUIPan","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack track","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetTrackUIVolPan","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"volume","type":"number"},{"identifier":"pan","type":"number"}],"parameters":[{"identifier":"track","type":"MediaTrack"}]},"eel":{"method_name":"GetTrackUIVolPan","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"identifier":"&volume"},{"identifier":"&pan"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number volume","description":""},{"identifier":"number pan","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number volume, number pan = reaper.GetTrackUIVolPan(MediaTrack track)","eel":"bool GetTrackUIVolPan(MediaTrack track, &volume, &pan)","python":"(Boolean retval, MediaTrack track, Float volumeOut, Float panOut) = RPR_GetTrackUIVolPan(track, volumeOut, panOut)","cpp":"bool GetTrackUIVolPan(MediaTrack* track, double* volumeOut, double* panOut)"},"title":"GetTrackUIVolPan","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.GetUnderrunTime","return_values":[{"identifier":"audio_xrun","type":"integer"},{"identifier":"media_xrun","type":"integer"},{"identifier":"curtime","type":"integer"}],"parameters":[]},"eel":{"return_values":["GetUnderrunTime"],"parameters":[{"identifier":"&audio_xrun","modifier":"unsigned","type_name":"int"},{"identifier":"&media_xrun","modifier":"unsigned","type_name":"int"},{"identifier":"&curtime","modifier":"unsigned","type_name":"int"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer audio_xrun","description":""},{"identifier":"integer media_xrun","description":""},{"identifier":"integer curtime","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer audio_xrun, integer media_xrun, integer curtime = reaper.GetUnderrunTime()","eel":"GetUnderrunTime(unsigned int &audio_xrun, unsigned int &media_xrun, unsigned int &curtime)","python":"RPR_GetUnderrunTime(unsigned int audio_xrunOut, unsigned int media_xrunOut, unsigned int curtimeOut)","cpp":"void GetUnderrunTime(unsigned int* audio_xrunOut, unsigned int* media_xrunOut, unsigned int* curtimeOut)"},"title":"GetUnderrunTime","chapters":["Input/Output Devices","Audio"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"retrieves the last timestamps of audio xrun (yellow-flash, if available), media xrun (red-flash), and the current time stamp (all milliseconds)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["user","interface","file","requester","dialog","open"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"string filenameNeed4096","description":"default-filename the requester uses, until the user selects another file."},{"identifier":"string title","description":"title of the file-requester-window"},{"identifier":"string defext","description":"the filter for the fileextensions. Only files with an extension defined in defext are shown.\nexamples:\n\"\", all files\n\"*\", all files\n\"ini\", only .ini-files\n\"*.ini\", only .ini-files\n\"*.txt; *.ini; *.exe\", shows .txt; .ini; .exe-files"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetUserFileNameForRead","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"filenameNeed4096","type":"string"}],"parameters":[{"identifier":"filenameNeed4096","type":"string"},{"identifier":"title","type":"string"},{"identifier":"defext","type":"string"}]},"eel":{"method_name":"GetUserFileNameForRead","return_values":["bool"],"parameters":[{"identifier":"#filenameNeed4096"},{"identifier":"\"title\""},{"identifier":"\"defext\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, if the user selected a file; false if the user canceled the dialog"},{"identifier":"string filenameNeed4096","description":"the filename including the full absolute path of the file the user selected"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string filenameNeed4096 = reaper.GetUserFileNameForRead(string filenameNeed4096, string title, string defext)","eel":"bool GetUserFileNameForRead(#filenameNeed4096, \"title\", \"defext\")","python":"(Boolean retval, String filenameNeed4096, String title, String defext) = RPR_GetUserFileNameForRead(filenameNeed4096, title, defext)","cpp":"bool GetUserFileNameForRead(char* filenameNeed4096, const char* title, const char* defext)"},"title":"GetUserFileNameForRead","chapters":["User Interface","Dialogs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Opens a filerequester, where a user can select a file.\nThe requester only returns the file, but doesn't open or write to it. That said, this function can be used for both use-cases, BUT: keep in mind, that it shows an \"open\"-button, even if you want to use it in code for saving a file. You also can't use it for \"create new file\"-usecases, as you can't choose nonexisting files.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["user","interface","input","values","csv","dialog"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"string title","description":"title of the window"},{"identifier":"integer num_inputs","description":"number of input-fields, 1-16."},{"identifier":"string captions_csv","description":"a string with the captions for each input-field, each separated by a comma. Can be fewer than num_inputs. If a caption begins with *, the inputfield will display * instead of characters(for i.e. passwords)."},{"identifier":"string retvals_csv","description":"default-values for each input-field, separated by a comma or a separator you chose."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetUserInputs","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"retvals_csv","type":"string"}],"parameters":[{"identifier":"title","type":"string"},{"identifier":"num_inputs","type":"integer"},{"identifier":"captions_csv","type":"string"},{"identifier":"retvals_csv","type":"string"}]},"eel":{"method_name":"GetUserInputs","return_values":["bool"],"parameters":[{"identifier":"\"title\""},{"type_name":"int","identifier":"num_inputs"},{"identifier":"\"captions_csv\""},{"identifier":"#retvals_csv"}]}},"requires":{"Reaper":"5.979"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"did the user click OK in the dialog(true) or close/cancel the dialog(false)"},{"identifier":"string retvals_csv","description":"the data from each of the input-fields, separated by a comma , or a separator you chose."}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string retvals_csv = reaper.GetUserInputs(string title, integer num_inputs, string captions_csv, string retvals_csv)","eel":"bool GetUserInputs(\"title\", int num_inputs, \"captions_csv\", #retvals_csv)","python":"(Boolean retval, String title, Int num_inputs, String captions_csv, String retvals_csv, Int retvals_csv_sz) = RPR_GetUserInputs(title, num_inputs, captions_csv, retvals_csv, retvals_csv_sz)","cpp":"bool GetUserInputs(const char* title, int num_inputs, const char* captions_csv, char* retvals_csv, int retvals_csv_sz)"},"title":"GetUserInputs","chapters":["User Interface","Dialogs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Opens a window with input-fields to get values from the user.\nIf a caption begins with *, for example \"*password\", the edit field will not display the input text.\nMaximum fields is 16. Values are returned as a comma/custom separator-separated string. \nReturns false if the user canceled the dialog. \n\nYou can supply special extra information via additional caption fields: extrawidth=XXX to increase text field width, separator=X to use a different separator for returned fields(separator=\\n is recommended).\n\nExample:\n\n<pre><code>\n    retval, retvals_csv = reaper.GetUserInputs(\"Title\", 2, \"Hello,World, separator=\\n\", \"defaultvalue1\\ndefaultvalue2\")\n</code></pre>\n\nwill return the values input by the user, separated by a newline.\n\n\\n is recommended, as this allows the user entering everything, a one-lined-inputbox can handle.\n\nImportant: the separator-field in the captions has no effect on how captions in parameter captions_csv are separated from each other. They still need to be separated by commas!\n\nNote: the parameter retvals_csv follows undisclosed csv rules. This is important when you want to set the default-captions for multiple input-field.\nFor instance every entry for each input-field: \n\n- must contain an even number of quotes/single quotes\n- every ( or must be closed by with )\n\notherwise the separator will be ignored and the default-retvals will show in the wrong fields.\n\nExample:\n<pre><code>\na retval_csv of I'm enlightened,I am too\n</code></pre>\nwith one singlequote in it (the one in I'm) will NOT be shown in two fields\n\n<pre><code>\nI'm enlightened\nI am too\n</code></pre>\n\nbut rather in one field as \n\n<pre><code>\nI'm enlightened,I am too\n</code></pre>\n\nThese can't be escaped due Reaper's API-limitation. Keep this in mind!\n\nAnother note when only having one entry:\nYou may run into the situation of wanting to have a caption, that has a , in it.\nThis could be interpreted as separator, so an caption entry like:\n\"this, is, my, entry\"\nwill be shown like\n\"this\"\n\nTo avoid this, use separator=\\b in the caption_csv, so\n\"this, is, my, entry, separator=\\b\"\nwill be shown as\n\"this, is, my, entry\".\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","goto","marker","play","cursor","editcursor","playcursor"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"integer marker_index","description":"the markerindex, where you want to go to."},{"identifier":"boolean use_timeline_order","description":"false, use the shown-markernumber as marker_index; true, use markers in timelineorder, ignoring the shown-markernumber"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GoToMarker","return_values":[],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"marker_index","type":"integer"},{"identifier":"use_timeline_order","type":"boolean"}]},"eel":{"return_values":["GoToMarker"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"int","identifier":"marker_index"},{"type_name":"bool","identifier":"use_timeline_order"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.GoToMarker(ReaProject proj, integer marker_index, boolean use_timeline_order)","eel":"GoToMarker(ReaProject proj, int marker_index, bool use_timeline_order)","python":"RPR_GoToMarker(ReaProject proj, Int marker_index, Boolean use_timeline_order)","cpp":"void GoToMarker(ReaProject* proj, int marker_index, bool use_timeline_order)"},"title":"GoToMarker","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Go to marker. \nMove Editcursor to a given marker. When playing, the playcursor moves to the marker as well.\n\nFor Regions, use GoToRegion.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","goto","region","play","cursor","editcursor","playcursor"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"integer region_index","description":"the regionindex, where you want to got to."},{"identifier":"boolean use_timeline_order","description":"false, use the shown-regionnumber as region_index; true, use regions in timelineorder, ignoring the shown-regionnumber"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GoToRegion","return_values":[],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"region_index","type":"integer"},{"identifier":"use_timeline_order","type":"boolean"}]},"eel":{"return_values":["GoToRegion"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"int","identifier":"region_index"},{"type_name":"bool","identifier":"use_timeline_order"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.GoToRegion(ReaProject proj, integer region_index, boolean use_timeline_order)","eel":"GoToRegion(ReaProject proj, int region_index, bool use_timeline_order)","python":"RPR_GoToRegion(ReaProject proj, Int region_index, Boolean use_timeline_order)","cpp":"void GoToRegion(ReaProject* proj, int region_index, bool use_timeline_order)"},"title":"GoToRegion","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Go to beginning of a region.\nSeek to region after current region finishes playing (smooth seek). ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["userinterface","color","dialog","chooser","native","hwnd"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"HWND hwnd","description":"the window, in which to open the dialog. Nil is allowed in Lua."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GR_SelectColor","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"color","type":"integer"}],"parameters":[{"identifier":"hwnd","type":"HWND"}]},"eel":{"method_name":"GR_SelectColor","return_values":["int"],"parameters":[{"type_name":"HWND","identifier":"hwnd"},{"type_name":"int","identifier":"&color"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":"1, user chose a color; 0, user canceled dialog"},{"identifier":"integer color","description":"the returned color as a native-color-value."}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, integer color = reaper.GR_SelectColor(HWND hwnd)","eel":"int GR_SelectColor(HWND hwnd, int &color)","python":"(Int retval, HWND hwnd, Int colorOut) = RPR_GR_SelectColor(hwnd, colorOut)","cpp":"int GR_SelectColor(HWND hwnd, int* colorOut)"},"title":"GR_SelectColor","chapters":["User Interface","Dialogs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Runs the system color chooser dialog. Returns 0 if the user cancels the dialog.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer t","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GSC_mainwnd","return_values":[{"identifier":"color","type":"integer"}],"parameters":[{"identifier":"t","type":"integer"}]},"eel":{"method_name":"GSC_mainwnd","return_values":["int"],"parameters":[{"type_name":"int","identifier":"t"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer color","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer color = reaper.GSC_mainwnd(integer t)","eel":"int GSC_mainwnd(int t)","python":"Int retval = RPR_GSC_mainwnd(Int t)","cpp":"int GSC_mainwnd(int t)"},"title":"GSC_mainwnd","chapters":["User Interface","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"this is just like win32 GetSysColor() but can have overrides.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string gGUID","description":""},{"identifier":"string destNeed64","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.guidToString","return_values":[{"identifier":"destNeed64","type":"string"}],"parameters":[{"identifier":"gGUID","type":"string"},{"identifier":"destNeed64","type":"string"}]},"eel":{"return_values":["guidToString"],"parameters":[{"identifier":"\"gGUID\""},{"identifier":"#destNeed64"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string destNeed64","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string destNeed64 = reaper.guidToString(string gGUID, string destNeed64)","eel":"guidToString(\"gGUID\", #destNeed64)","python":"(const GUID g, String destNeed64) = RPR_guidToString(g, destNeed64)","cpp":"void guidToString(const GUID* g, char* destNeed64)"},"title":"guidToString","chapters":["Api-Helper-Functions","Value Conversion"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"dest should be at least 64 chars long to be safe","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string section","description":"the section of the extstate"},{"identifier":"string key","description":"the key of the extstate"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.HasExtState","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"section","type":"string"},{"identifier":"key","type":"string"}]},"eel":{"method_name":"HasExtState","return_values":["bool"],"parameters":[{"identifier":"\"section\""},{"identifier":"\"key\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, extstate exists; false, extstate does not exist"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.HasExtState(string section, string key)","eel":"bool HasExtState(\"section\", \"key\")","python":"Boolean retval = RPR_HasExtState(String section, String key)","cpp":"bool HasExtState(const char* section, const char* key)"},"title":"HasExtState","chapters":["Api-Helper-Functions","Extension States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns true if there exists an extended state value for a specific section and key.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer track","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.HasTrackMIDIPrograms","return_values":[{"identifier":"plugin_name","type":"string"}],"parameters":[{"identifier":"track","type":"integer"}]},"eel":{"method_name":"HasTrackMIDIPrograms","return_values":["bool"],"parameters":[{"identifier":"#retval"},{"type_name":"int","identifier":"track"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string plugin_name","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string plugin_name = reaper.HasTrackMIDIPrograms(integer track)","eel":"bool HasTrackMIDIPrograms(#retval, int track)","python":"String retval = RPR_HasTrackMIDIPrograms(Int track)","cpp":"const char* HasTrackMIDIPrograms(int track)"},"title":"HasTrackMIDIPrograms","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns name of track plugin that is supplying MIDI programs,or NULL if there is none","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"MediaTrack track","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.HasTrackMIDIProgramsEx","return_values":[{"identifier":"plugin_name","type":"string"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"track","type":"MediaTrack"}]},"eel":{"method_name":"HasTrackMIDIProgramsEx","return_values":["bool"],"parameters":[{"identifier":"#retval"},{"type_name":"ReaProject","identifier":"proj"},{"type_name":"MediaTrack","identifier":"track"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string plugin_name","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string plugin_name = reaper.HasTrackMIDIProgramsEx(ReaProject proj, MediaTrack track)","eel":"bool HasTrackMIDIProgramsEx(#retval, ReaProject proj, MediaTrack track)","python":"String retval = RPR_HasTrackMIDIProgramsEx(ReaProject proj, MediaTrack track)","cpp":"const char* HasTrackMIDIProgramsEx(ReaProject* proj, MediaTrack* track)"},"title":"HasTrackMIDIProgramsEx","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns name of track plugin that is supplying MIDI programs,or NULL if there is none","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaper","api","helper","display","help","information","message"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string helpstring","description":"the string to display"},{"identifier":"boolean is_temporary_help","description":"true, show until another message is displayed; false, show permanently, every time no other message is displayed."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Help_Set","return_values":[],"parameters":[{"identifier":"helpstring","type":"string"},{"identifier":"is_temporary_help","type":"boolean"}]},"eel":{"return_values":["Help_Set"],"parameters":[{"identifier":"\"helpstring\""},{"type_name":"bool","identifier":"is_temporary_help"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Help_Set(string helpstring, boolean is_temporary_help)","eel":"Help_Set(\"helpstring\", bool is_temporary_help)","python":"RPR_Help_Set(String helpstring, Boolean is_temporary_help)","cpp":"void Help_Set(const char* helpstring, bool is_temporary_help)"},"title":"Help_Set","chapters":["User Interface","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Displays an information in the help and information-display, underneath the TCP(might be missing, in certain themes).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string in","description":""},{"identifier":"string out","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.image_resolve_fn","return_values":[{"identifier":"out","type":"string"}],"parameters":[{"identifier":"in","type":"string"},{"identifier":"out","type":"string"}]},"eel":{"return_values":["image_resolve_fn"],"parameters":[{"identifier":"\"in\""},{"identifier":"#out"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string out","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string out = reaper.image_resolve_fn(string in, string out)","eel":"image_resolve_fn(\"in\", #out)","python":"(String in, String out, Int out_sz) = RPR_image_resolve_fn(in, out, out_sz)","cpp":"void image_resolve_fn(const char* in, char* out, int out_sz)"},"title":"image_resolve_fn","chapters":["Api-Helper-Functions","Value Conversion"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"TrackEnvelope env","description":""},{"identifier":"integer pool_id","description":""},{"identifier":"number position","description":""},{"identifier":"number length","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.InsertAutomationItem","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"env","type":"TrackEnvelope"},{"identifier":"pool_id","type":"integer"},{"identifier":"position","type":"number"},{"identifier":"length","type":"number"}]},"eel":{"method_name":"InsertAutomationItem","return_values":["int"],"parameters":[{"type_name":"TrackEnvelope","identifier":"env"},{"type_name":"int","identifier":"pool_id"},{"identifier":"position"},{"identifier":"length"}]}},"requires":{"Reaper":"5.96"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.InsertAutomationItem(TrackEnvelope env, integer pool_id, number position, number length)","eel":"int InsertAutomationItem(TrackEnvelope env, int pool_id, position, length)","python":"Int retval = RPR_InsertAutomationItem(TrackEnvelope env, Int pool_id, Float position, Float length)","cpp":"int InsertAutomationItem(TrackEnvelope* env, int pool_id, double position, double length)"},"title":"InsertAutomationItem","chapters":["Envelope Management","Automation Items"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Insert a new automation item. \n\npool_id < 0 collects existing envelope points into the automation item\nif pool_id is >= 0 the automation item will be a new instance of that pool (which will be created as an empty instance if it does not exist). \n\nReturns the index of the item, suitable for passing to other automation item API functions. \n\nSee GetSetAutomationItemInfo.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"TrackEnvelope envelope","description":""},{"identifier":"number time","description":""},{"identifier":"number value","description":""},{"identifier":"integer shape","description":""},{"identifier":"number tension","description":""},{"identifier":"boolean selected","description":""},{"identifier":"optional boolean noSortIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.InsertEnvelopePoint","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"envelope","type":"TrackEnvelope"},{"identifier":"time","type":"number"},{"identifier":"value","type":"number"},{"identifier":"shape","type":"integer"},{"identifier":"tension","type":"number"},{"identifier":"selected","type":"boolean"},{"isOptional":true,"type":"boolean","identifier":"noSortIn"}]},"eel":{"method_name":"InsertEnvelopePoint","return_values":["bool"],"parameters":[{"type_name":"TrackEnvelope","identifier":"envelope"},{"identifier":"time"},{"identifier":"value"},{"type_name":"int","identifier":"shape"},{"identifier":"tension"},{"type_name":"bool","identifier":"selected"},{"identifier":"noSortIn","modifier":"optional","type_name":"bool"}]}},"requires":{"Reaper":"5.979"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.InsertEnvelopePoint(TrackEnvelope envelope, number time, number value, integer shape, number tension, boolean selected, optional boolean noSortIn)","eel":"bool InsertEnvelopePoint(TrackEnvelope envelope, time, value, int shape, tension, bool selected, optional bool noSortIn)","python":"(Boolean retval, TrackEnvelope envelope, Float time, Float value, Int shape, Float tension, Boolean selected, Boolean noSortInOptional) = RPR_InsertEnvelopePoint(envelope, time, value, shape, tension, selected, noSortInOptional)","cpp":"bool InsertEnvelopePoint(TrackEnvelope* envelope, double time, double value, int shape, double tension, bool selected, bool* noSortInOptional)"},"title":"InsertEnvelopePoint","chapters":["Envelope Management","Envelope Points"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. \n\nSee InsertEnvelopePointEx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"TrackEnvelope envelope","description":""},{"identifier":"integer autoitem_idx","description":""},{"identifier":"number time","description":""},{"identifier":"number value","description":""},{"identifier":"integer shape","description":""},{"identifier":"number tension","description":""},{"identifier":"boolean selected","description":""},{"identifier":"optional boolean noSortIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.InsertEnvelopePointEx","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"envelope","type":"TrackEnvelope"},{"identifier":"autoitem_idx","type":"integer"},{"identifier":"time","type":"number"},{"identifier":"value","type":"number"},{"identifier":"shape","type":"integer"},{"identifier":"tension","type":"number"},{"identifier":"selected","type":"boolean"},{"isOptional":true,"type":"boolean","identifier":"noSortIn"}]},"eel":{"method_name":"InsertEnvelopePointEx","return_values":["bool"],"parameters":[{"type_name":"TrackEnvelope","identifier":"envelope"},{"type_name":"int","identifier":"autoitem_idx"},{"identifier":"time"},{"identifier":"value"},{"type_name":"int","identifier":"shape"},{"identifier":"tension"},{"type_name":"bool","identifier":"selected"},{"identifier":"noSortIn","modifier":"optional","type_name":"bool"}]}},"requires":{"Reaper":"5.979"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.InsertEnvelopePointEx(TrackEnvelope envelope, integer autoitem_idx, number time, number value, integer shape, number tension, boolean selected, optional boolean noSortIn)","eel":"bool InsertEnvelopePointEx(TrackEnvelope envelope, int autoitem_idx, time, value, int shape, tension, bool selected, optional bool noSortIn)","python":"(Boolean retval, TrackEnvelope envelope, Int autoitem_idx, Float time, Float value, Int shape, Float tension, Boolean selected, Boolean noSortInOptional) = RPR_InsertEnvelopePointEx(envelope, autoitem_idx, time, value, shape, tension, selected, noSortInOptional)","cpp":"bool InsertEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, double time, double value, int shape, double tension, bool selected, bool* noSortInOptional)"},"title":"InsertEnvelopePointEx","chapters":["Envelope Management","Envelope Points"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\n\nSee CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx, DeleteEnvelopePointEx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string file","description":"the file to insert"},{"identifier":"integer mode","description":"the mode, with which to insert the file(see description for more details)"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.InsertMedia","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"file","type":"string"},{"identifier":"mode","type":"integer"}]},"eel":{"method_name":"InsertMedia","return_values":["int"],"parameters":[{"identifier":"\"file\""},{"type_name":"int","identifier":"mode"}]}},"requires":{"Reaper":"6.23"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"0, inserting was unsuccessful; 1, inserting was successful\nNote: will always return 1, when mode=0 or mode=1, even if the file does not exist!"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.InsertMedia(string file, integer mode)","eel":"int InsertMedia(\"file\", int mode)","python":"Int retval = RPR_InsertMedia(String file, Int mode)","cpp":"int InsertMedia(const char* file, int mode)"},"title":"InsertMedia","chapters":["Mediaitem Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"mode: \n0=add to current track, \n1=add new track, \n3=add to selected items as takes, \n&4=stretch/loop to fit time sel, \n&8=try to match tempo 1x, \n&16=try to match tempo 0.5x, \n&32=try to match tempo 2x, \n&64=don't preserve pitch when matching tempo, \n&128=no loop/section if startpct/endpct set, \n&256=force loop regardless of global preference for looping imported items, \n&512=use high word as absolute track index if mode&3==0 or mode&2048, \n&1024=insert into reasamplomatic on a new track (add 1 to insert on last selected track), \n&2048=insert into open reasamplomatic instance (add 512 to use high word as absolute track index), \n&4096=move to source preferred position (BWF start offset), \n&8192=reverse\n\nExample:\nTo insert an item at a specific trackindex, use:\n<pre><code>\n    TrackIndex=3              -- set this to the track you want\n    TrackIndex=TrackIndex<<16 -- move the index to high-word-destination for further use\n    reaper.InsertMedia(\"C:\\\\test3.mp3\", 0+512+TrackIndex) -- insert at track; it is important to add 512 in this to mode!\n</code></pre>","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"string file","description":""},{"identifier":"integer mode","description":""},{"identifier":"number startpct","description":""},{"identifier":"number endpct","description":""},{"identifier":"number pitchshift","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.InsertMediaSection","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"file","type":"string"},{"identifier":"mode","type":"integer"},{"identifier":"startpct","type":"number"},{"identifier":"endpct","type":"number"},{"identifier":"pitchshift","type":"number"}]},"eel":{"method_name":"InsertMediaSection","return_values":["int"],"parameters":[{"identifier":"\"file\""},{"type_name":"int","identifier":"mode"},{"identifier":"startpct"},{"identifier":"endpct"},{"identifier":"pitchshift"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.InsertMediaSection(string file, integer mode, number startpct, number endpct, number pitchshift)","eel":"int InsertMediaSection(\"file\", int mode, startpct, endpct, pitchshift)","python":"Int retval = RPR_InsertMediaSection(String file, Int mode, Float startpct, Float endpct, Float pitchshift)","cpp":"int InsertMediaSection(const char* file, int mode, double startpct, double endpct, double pitchshift)"},"title":"InsertMediaSection","chapters":["Mediaitem Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"see InsertMedia for more details","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","insert","track","index","default"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer idx","description":"the index, in which to insert the track; 0, insert before the first track."},{"identifier":"boolean wantDefaults","description":"true, default envelopes/FX; false, no enabled FX/envelopes"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.InsertTrackAtIndex","return_values":[],"parameters":[{"identifier":"idx","type":"integer"},{"identifier":"wantDefaults","type":"boolean"}]},"eel":{"return_values":["InsertTrackAtIndex"],"parameters":[{"type_name":"int","identifier":"idx"},{"type_name":"bool","identifier":"wantDefaults"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.InsertTrackAtIndex(integer idx, boolean wantDefaults)","eel":"InsertTrackAtIndex(int idx, bool wantDefaults)","python":"RPR_InsertTrackAtIndex(Int idx, Boolean wantDefaults)","cpp":"void InsertTrackAtIndex(int idx, bool wantDefaults)"},"title":"InsertTrackAtIndex","chapters":["Track Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"inserts a track at idx,of course this will be clamped to 0..GetNumTracks().","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string ext","description":""},{"identifier":"boolean wantOthers","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.IsMediaExtension","return_values":[{"identifier":"is_mediaextension","type":"boolean"}],"parameters":[{"identifier":"ext","type":"string"},{"identifier":"wantOthers","type":"boolean"}]},"eel":{"method_name":"IsMediaExtension","return_values":["bool"],"parameters":[{"identifier":"\"ext\""},{"type_name":"bool","identifier":"wantOthers"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean is_mediaextension","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean is_mediaextension = reaper.IsMediaExtension(string ext, boolean wantOthers)","eel":"bool IsMediaExtension(\"ext\", bool wantOthers)","python":"Boolean retval = RPR_IsMediaExtension(String ext, Boolean wantOthers)","cpp":"bool IsMediaExtension(const char* ext, bool wantOthers)"},"title":"IsMediaExtension","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Tests a file extension (i.e. \"wav\" or \"mid\") to see if it's a media extension.\nIf wantOthers is set, then \"RPP\", \"TXT\" and other project-type formats will also pass.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["mediaitemmanagement","get","selected","state","unselected"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem item","description":"the MediaItem, whose selected-state you want to know"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.IsMediaItemSelected","return_values":[{"identifier":"item_selected","type":"boolean"}],"parameters":[{"identifier":"item","type":"MediaItem"}]},"eel":{"method_name":"IsMediaItemSelected","return_values":["bool"],"parameters":[{"type_name":"MediaItem","identifier":"item"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean item_selected","description":"true, MediaItem is selected; false, MediaItem is not selected"}],"prog_lang":"*"},"functioncall":{"lua":"boolean item_selected = reaper.IsMediaItemSelected(MediaItem item)","eel":"bool IsMediaItemSelected(MediaItem item)","python":"Boolean retval = RPR_IsMediaItemSelected(MediaItem item)","cpp":"bool IsMediaItemSelected(MediaItem* item)"},"title":"IsMediaItemSelected","chapters":["Mediaitem Management","Item States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get, if a MediaItem is selected or not.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["projectmanagement","get","dirty","state","saved","unsaved"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.IsProjectDirty","return_values":[{"identifier":"project_dirty","type":"integer"}],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"method_name":"IsProjectDirty","return_values":["int"],"parameters":[{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer project_dirty","description":"the state, if a project needs saving or not; 0, needs no saving; 1, needs saving"}],"prog_lang":"*"},"functioncall":{"lua":"integer project_dirty = reaper.IsProjectDirty(ReaProject proj)","eel":"int IsProjectDirty(ReaProject proj)","python":"Int retval = RPR_IsProjectDirty(ReaProject proj)","cpp":"int IsProjectDirty(ReaProject* proj)"},"title":"IsProjectDirty","chapters":["Project Management","Project States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Is the project dirty (needing save)? Always returns 0 if 'undo/prompt to save' is disabled in preferences.\n\nA project becomes dirty, as soon as it was changed since creation/last saving.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","get","state","selection","deselection"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack track","description":"the MediaTrack, whose selection-state you want to know"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.IsTrackSelected","return_values":[{"identifier":"track_selected","type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"}]},"eel":{"method_name":"IsTrackSelected","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean track_selected","description":"true, MediaTrack is selected; false, MediaTrack is not selected"}],"prog_lang":"*"},"functioncall":{"lua":"boolean track_selected = reaper.IsTrackSelected(MediaTrack track)","eel":"bool IsTrackSelected(MediaTrack track)","python":"Boolean retval = RPR_IsTrackSelected(MediaTrack track)","cpp":"bool IsTrackSelected(MediaTrack* track)"},"title":"IsTrackSelected","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get, if a MediaTrack is selected or not.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","visible","get","invisible","mixer","track control panel","tcp","mcp"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":"the MediaTrack, whose visibility-state you want to know"},{"identifier":"boolean mixer","description":"true, visibility-state of the MediaTrack in the mixer; false, visibility-state of the MediaTrack in the TrackControlPanel"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.IsTrackVisible","return_values":[{"identifier":"track_visible","type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"mixer","type":"boolean"}]},"eel":{"method_name":"IsTrackVisible","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"bool","identifier":"mixer"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean track_visible","description":"true, MediaTrack is visible; false, MediaTrack is invisible"}],"prog_lang":"*"},"functioncall":{"lua":"boolean track_visible = reaper.IsTrackVisible(MediaTrack track, boolean mixer)","eel":"bool IsTrackVisible(MediaTrack track, bool mixer)","python":"Boolean retval = RPR_IsTrackVisible(MediaTrack track, Boolean mixer)","cpp":"bool IsTrackVisible(MediaTrack* track, bool mixer)"},"title":"IsTrackVisible","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Gets visibility-state of a MediaTrack.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string guidGUID","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.joystick_create","return_values":[{"identifier":"joystick","type":"joystick_device"}],"parameters":[{"identifier":"guidGUID","type":"string"}]},"eel":{"method_name":"joystick_create","return_values":["joystick_device"],"parameters":[{"identifier":"\"guidGUID\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"joystick_device joystick","description":""}],"prog_lang":"*"},"functioncall":{"lua":"joystick_device joystick = reaper.joystick_create(string guidGUID)","eel":"joystick_device joystick_create(\"guidGUID\")","python":"joystick_device joystick = RPR_joystick_create(const GUID guid)","cpp":"joystick_device* joystick_create(const GUID* guid)"},"title":"joystick_create","chapters":["Input/Output Devices","Joystick"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"creates a joystick device","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"joystick_device device","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.joystick_destroy","return_values":[],"parameters":[{"identifier":"device","type":"joystick_device"}]},"eel":{"return_values":["joystick_destroy"],"parameters":[{"type_name":"joystick_device","identifier":"device"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.joystick_destroy(joystick_device device)","eel":"joystick_destroy(joystick_device device)","python":"RPR_joystick_destroy(joystick_device device)","cpp":"void joystick_destroy(joystick_device* device)"},"title":"joystick_destroy","chapters":["Input/Output Devices","Joystick"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"destroys a joystick device","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer index","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.joystick_enum","return_values":[{"identifier":"retval","type":"string"},{"isOptional":true,"type":"string","identifier":"namestr"}],"parameters":[{"identifier":"index","type":"integer"}]},"eel":{"method_name":"joystick_enum","return_values":["bool"],"parameters":[{"identifier":"#retval"},{"type_name":"int","identifier":"index"},{"type_name":"optional","identifier":"#namestr"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string retval","description":""},{"identifier":"string namestr","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string retval, optional string namestr = reaper.joystick_enum(integer index)","eel":"bool joystick_enum(#retval, int index, optional #namestr)","python":"String retval = RPR_joystick_enum(Int index, String namestrOutOptional)","cpp":"const char* joystick_enum(int index, const char** namestrOutOptional)"},"title":"joystick_enum","chapters":["Input/Output Devices","Joystick"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"enumerates installed devices, returns GUID as a string","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"joystick_device dev","description":""},{"identifier":"integer axis","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.joystick_getaxis","return_values":[{"identifier":"joystick_axis_value","type":"number"}],"parameters":[{"identifier":"dev","type":"joystick_device"},{"identifier":"axis","type":"integer"}]},"eel":{"method_name":"joystick_getaxis","return_values":["double"],"parameters":[{"type_name":"joystick_device","identifier":"dev"},{"type_name":"int","identifier":"axis"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number joystick_axis_value","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number joystick_axis_value = reaper.joystick_getaxis(joystick_device dev, integer axis)","eel":"double joystick_getaxis(joystick_device dev, int axis)","python":"Float retval = RPR_joystick_getaxis(joystick_device dev, Int axis)","cpp":"double joystick_getaxis(joystick_device* dev, int axis)"},"title":"joystick_getaxis","chapters":["Input/Output Devices","Joystick"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns axis value (-1..1)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"joystick_device dev","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.joystick_getbuttonmask","return_values":[{"identifier":"joystick_button_mask","type":"integer"}],"parameters":[{"identifier":"dev","type":"joystick_device"}]},"eel":{"method_name":"joystick_getbuttonmask","return_values":["uint"],"parameters":[{"type_name":"joystick_device","identifier":"dev"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer joystick_button_mask","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer joystick_button_mask = reaper.joystick_getbuttonmask(joystick_device dev)","eel":"uint joystick_getbuttonmask(joystick_device dev)","python":"Int retval = RPR_joystick_getbuttonmask(joystick_device dev)","cpp":"unsigned int joystick_getbuttonmask(joystick_device* dev)"},"title":"joystick_getbuttonmask","chapters":["Input/Output Devices","Joystick"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns button pressed mask, 1=first button, 2=second...","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"joystick_device dev","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.joystick_getinfo","return_values":[{"identifier":"retval","type":"integer"},{"isOptional":true,"type":"integer","identifier":"axes"},{"isOptional":true,"type":"integer","identifier":"povs"}],"parameters":[{"identifier":"dev","type":"joystick_device"}]},"eel":{"method_name":"joystick_getinfo","return_values":["int"],"parameters":[{"type_name":"joystick_device","identifier":"dev"},{"identifier":"&axes","modifier":"optional","type_name":"int"},{"identifier":"&povs","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer retval","description":""},{"identifier":"optional integer axes","description":""},{"identifier":"optional integer povs","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, optional integer axes, optional integer povs = reaper.joystick_getinfo(joystick_device dev)","eel":"int joystick_getinfo(joystick_device dev, optional int &axes, optional int &povs)","python":"(Int retval, joystick_device dev, Int axesOutOptional, Int povsOutOptional) = RPR_joystick_getinfo(dev, axesOutOptional, povsOutOptional)","cpp":"int joystick_getinfo(joystick_device* dev, int* axesOutOptional, int* povsOutOptional)"},"title":"joystick_getinfo","chapters":["Input/Output Devices","Joystick"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns button count","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"joystick_device dev","description":""},{"identifier":"integer pov","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.joystick_getpov","return_values":[{"identifier":"joystick_pov","type":"number"}],"parameters":[{"identifier":"dev","type":"joystick_device"},{"identifier":"pov","type":"integer"}]},"eel":{"method_name":"joystick_getpov","return_values":["double"],"parameters":[{"type_name":"joystick_device","identifier":"dev"},{"type_name":"int","identifier":"pov"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number joystick_pov","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number joystick_pov = reaper.joystick_getpov(joystick_device dev, integer pov)","eel":"double joystick_getpov(joystick_device dev, int pov)","python":"Float retval = RPR_joystick_getpov(joystick_device dev, Int pov)","cpp":"double joystick_getpov(joystick_device* dev, int pov)"},"title":"joystick_getpov","chapters":["Input/Output Devices","Joystick"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns POV value (usually 0..655.35, or 655.35 on error)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"joystick_device dev","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.joystick_update","return_values":[{"identifier":"joystick_state","type":"boolean"}],"parameters":[{"identifier":"dev","type":"joystick_device"}]},"eel":{"method_name":"joystick_update","return_values":["bool"],"parameters":[{"type_name":"joystick_device","identifier":"dev"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean joystick_state","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean joystick_state = reaper.joystick_update(joystick_device dev)","eel":"bool joystick_update(joystick_device dev)","python":"Boolean retval = RPR_joystick_update(joystick_device dev)","cpp":"bool joystick_update(joystick_device* dev)"},"title":"joystick_update","chapters":["Input/Output Devices","Joystick"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Updates joystick state from hardware, returns true if successful (joystick_get* will not be valid until joystick_update() is called successfully)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["actions","get","name"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"KbdSectionInfo section","description":"the section, in which the action is located\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"},{"identifier":"integer idx","description":"the command-id of the action, whose description you want to have."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.kbd_enumerateActions","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"name","type":"string"}],"parameters":[{"identifier":"section","type":"KbdSectionInfo"},{"identifier":"idx","type":"integer"}]},"eel":{"method_name":"retval","return_values":["int"],"parameters":[{"type_name":"KbdSectionInfo","identifier":"section"},{"type_name":"int","identifier":"idx"},{"identifier":"#name"}]}},"requires":{"Reaper":"6.71"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":"true, the action exists; false, the action does not exist"},{"identifier":"string name","description":"the name of the action"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, string name = reaper.kbd_enumerateActions(KbdSectionInfo section, integer idx)","eel":"int retval = kbd_enumerateActions(KbdSectionInfo section, int idx, #name)","python":"Int retval = RPR_kbd_enumerateActions(KbdSectionInfo section, Int idx, String nameOut)","cpp":"int retval = kbd_enumerateActions(KbdSectionInfo* section, int idx, const char** nameOut)"},"title":"kbd_enumerateActions","chapters":["Api-Helper-Functions","Action Related Functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the description of an action.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"integer pX1","description":""},{"identifier":"integer pY1","description":""},{"identifier":"integer pX2","description":""},{"identifier":"integer pY2","description":""},{"identifier":"integer xLo","description":""},{"identifier":"integer yLo","description":""},{"identifier":"integer xHi","description":""},{"identifier":"integer yHi","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.LICE_ClipLine","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"pX1","type":"integer"},{"identifier":"pY1","type":"integer"},{"identifier":"pX2","type":"integer"},{"identifier":"pY2","type":"integer"}],"parameters":[{"identifier":"pX1","type":"integer"},{"identifier":"pY1","type":"integer"},{"identifier":"pX2","type":"integer"},{"identifier":"pY2","type":"integer"},{"identifier":"xLo","type":"integer"},{"identifier":"yLo","type":"integer"},{"identifier":"xHi","type":"integer"},{"identifier":"yHi","type":"integer"}]},"eel":{"method_name":"LICE_ClipLine","return_values":["bool"],"parameters":[{"type_name":"int","identifier":"&pX1"},{"type_name":"int","identifier":"&pY1"},{"type_name":"int","identifier":"&pX2"},{"type_name":"int","identifier":"&pY2"},{"type_name":"int","identifier":"xLo"},{"type_name":"int","identifier":"yLo"},{"type_name":"int","identifier":"xHi"},{"type_name":"int","identifier":"yHi"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer pX1","description":""},{"identifier":"integer pY1","description":""},{"identifier":"integer pX2","description":""},{"identifier":"integer pY2","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer pX1, integer pY1, integer pX2, integer pY2 = reaper.LICE_ClipLine(integer pX1, integer pY1, integer pX2, integer pY2, integer xLo, integer yLo, integer xHi, integer yHi)","eel":"bool LICE_ClipLine(int &pX1, int &pY1, int &pX2, int &pY2, int xLo, int yLo, int xHi, int yHi)","python":"(Boolean retval, Int pX1Out, Int pY1Out, Int pX2Out, Int pY2Out, Int xLo, Int yLo, Int xHi, Int yHi) = RPR_LICE_ClipLine(pX1Out, pY1Out, pX2Out, pY2Out, xLo, yLo, xHi, yHi)","cpp":"bool LICE_ClipLine(int* pX1Out, int* pY1Out, int* pX2Out, int* pY2Out, int xLo, int yLo, int xHi, int yHi)"},"title":"LICE_ClipLine","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns false if the line is entirely offscreen.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"string src_string","description":"the string, which you want to be translated"},{"identifier":"string section","description":"the section in the ReaperLangPack-file, in which the string to localize is located"},{"identifier":"integer flags","description":"1, set to only localize if sprintf-style formatting matches the original"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.LocalizeString","return_values":[{"identifier":"retval","type":"string"}],"parameters":[{"identifier":"src_string","type":"string"},{"identifier":"section","type":"string"},{"identifier":"flags","type":"integer"}]},"eel":{"method_name":"LocalizeString","return_values":["bool"],"parameters":[{"identifier":"#retval"},{"identifier":"\"src_string\""},{"identifier":"\"section\""},{"type_name":"int","identifier":"flags"}]}},"requires":{"Reaper":"6.11"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string retval","description":"the localized string or the original string, if no localized string is available"}],"prog_lang":"*"},"functioncall":{"lua":"string retval = reaper.LocalizeString(string src_string, string section, integer flags)","eel":"bool LocalizeString(#retval, \"src_string\", \"section\", int flags)","python":"String retval = RPR_LocalizeString(String src_string, String section, Int flagsOptional)","cpp":"const char* LocalizeString(const char* src_string, const char* section, int flagsOptional)"},"title":"LocalizeString","chapters":["Api-Helper-Functions","Localization"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns a localized version of src_string, in section section. flags can have 1 set to only localize if sprintf-style formatting matches the original.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","loop","on arrow","move","selection","snap"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject project","description":"the project to be checked for. 0 for current project. "},{"identifier":"integer direction","description":"the direction to move; negative values, move towards start of project; positive values, move towards end of project; 0, keep position"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Loop_OnArrow","return_values":[{"identifier":"snap_state","type":"boolean"}],"parameters":[{"identifier":"project","type":"ReaProject"},{"identifier":"direction","type":"integer"}]},"eel":{"method_name":"Loop_OnArrow","return_values":["bool"],"parameters":[{"type_name":"ReaProject","identifier":"project"},{"type_name":"int","identifier":"direction"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean snap_state","description":"true, snap is enabled; false, snap is disabled"}],"prog_lang":"*"},"functioncall":{"lua":"boolean snap_state = reaper.Loop_OnArrow(ReaProject project, integer direction)","eel":"bool Loop_OnArrow(ReaProject project, int direction)","python":"Boolean retval = RPR_Loop_OnArrow(ReaProject project, Int direction)","cpp":"bool Loop_OnArrow(ReaProject* project, int direction)"},"title":"Loop_OnArrow","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Move the loop selection left or right in steps according to snap-settings(when snap is enabled).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","run","command","action","script"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer command","description":"the command-id of the action, you want to run"},{"identifier":"integer flag","description":"set to 0"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Main_OnCommand","return_values":[],"parameters":[{"identifier":"command","type":"integer"},{"identifier":"flag","type":"integer"}]},"eel":{"return_values":["Main_OnCommand"],"parameters":[{"type_name":"int","identifier":"command"},{"type_name":"int","identifier":"flag"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Main_OnCommand(integer command, integer flag)","eel":"Main_OnCommand(int command, int flag)","python":"RPR_Main_OnCommand(Int command, Int flag)","cpp":"void Main_OnCommand(int command, int flag)"},"title":"Main_OnCommand","chapters":["Api-Helper-Functions","Actions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Performs an action belonging to the main action section. \nTo perform non-native actions (ReaScripts, custom or extension plugins' actions) safely, see NamedCommandLookup().\nSee Main_OnCommandEx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","run","command","action","script","project"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer command","description":"the command-id of the action, you want to run"},{"identifier":"integer flag","description":"unknown, use 0"},{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Main_OnCommandEx","return_values":[],"parameters":[{"identifier":"command","type":"integer"},{"identifier":"flag","type":"integer"},{"identifier":"proj","type":"ReaProject"}]},"eel":{"return_values":["Main_OnCommandEx"],"parameters":[{"type_name":"int","identifier":"command"},{"type_name":"int","identifier":"flag"},{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Main_OnCommandEx(integer command, integer flag, ReaProject proj)","eel":"Main_OnCommandEx(int command, int flag, ReaProject proj)","python":"RPR_Main_OnCommandEx(Int command, Int flag, ReaProject proj)","cpp":"void Main_OnCommandEx(int command, int flag, ReaProject* proj)"},"title":"Main_OnCommandEx","chapters":["Api-Helper-Functions","Actions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Performs an action belonging to the main action section. To perform non-native actions (ReaScripts, custom or extension plugins' actions) safely, see NamedCommandLookup().","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["projectmanagement","open","project","template","filename"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string name","description":"the path and filename of the project/template you want to open"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Main_openProject","return_values":[],"parameters":[{"identifier":"name","type":"string"}]},"eel":{"return_values":["Main_openProject"],"parameters":[{"identifier":"\"name\""}]}},"requires":{"Reaper":"5.983"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Main_openProject(string name)","eel":"Main_openProject(\"name\")","python":"RPR_Main_openProject(String name)","cpp":"void Main_openProject(const char* name)"},"title":"Main_openProject","chapters":["Project Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"opens a project. \n\nwill prompt the user to save unless name is prefixed with 'noprompt:'. \n    example: \"noprompt:projectfile.rpp\"\n\nIf name is prefixed with 'template:', project file will be loaded as a template.\n    example: \"template:projectfile.rpp\"\n\nYou can combine both: \"template:noprompt:projectfile.rpp\"\n\nIf passed a .RTrackTemplate file, adds the template to the existing project.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["projectmanagement","save","project","save dialog"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"boolean forceSaveAsIn","description":"false, save the project; true, open save-file-dialog first"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Main_SaveProject","return_values":[],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"forceSaveAsIn","type":"boolean"}]},"eel":{"return_values":["Main_SaveProject"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"bool","identifier":"forceSaveAsIn"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Main_SaveProject(ReaProject proj, boolean forceSaveAsIn)","eel":"Main_SaveProject(ReaProject proj, bool forceSaveAsIn)","python":"RPR_Main_SaveProject(ReaProject proj, Boolean forceSaveAsInOptional)","cpp":"void Main_SaveProject(ReaProject* proj, bool forceSaveAsInOptional)"},"title":"Main_SaveProject","chapters":["Project Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Save the project.\nOptional with a save-dialog.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["projectmanagement","save","project","save dialog","filename"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"string filename","description":"the filename of the project"},{"identifier":"integer options","description":"options to save with:\n&1, save selected tracks as track template\n&2, include media with track templates \n&4, include envelopes with track template"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Main_SaveProjectEx","return_values":[],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"filename","type":"string"},{"identifier":"options","type":"integer"}]},"eel":{"return_values":["Main_SaveProjectEx"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"identifier":"\"filename\""},{"type_name":"int","identifier":"options"}]}},"requires":{"Reaper":"6.53"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Main_SaveProjectEx(ReaProject proj, string filename, integer options)","eel":"Main_SaveProjectEx(ReaProject proj, \"filename\", int options)","python":"RPR_Main_SaveProjectEx(ReaProject proj, String filename, Int options)","cpp":"void Main_SaveProjectEx(ReaProject* proj, const char* filename, int options)"},"title":"Main_SaveProjectEx","chapters":["Project Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Save the project and allows passing a filename.\n\nIf project can not be saved, it will show an errordialog to the user.\n\nIf the projectfilename already exists, it might create an alternative project-file with the extension rpp-TEMP.\n\nWill obey backup-file-settings, so a file using the extension rpp-bak might be created.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer ignoremask","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Main_UpdateLoopInfo","return_values":[],"parameters":[{"identifier":"ignoremask","type":"integer"}]},"eel":{"return_values":["Main_UpdateLoopInfo"],"parameters":[{"type_name":"int","identifier":"ignoremask"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Main_UpdateLoopInfo(integer ignoremask)","eel":"Main_UpdateLoopInfo(int ignoremask)","python":"RPR_Main_UpdateLoopInfo(Int ignoremask)","cpp":"void Main_UpdateLoopInfo(int ignoremask)"},"title":"Main_UpdateLoopInfo","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["projectmanagement","need save","project"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MarkProjectDirty","return_values":[],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"return_values":["MarkProjectDirty"],"parameters":[{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.MarkProjectDirty(ReaProject proj)","eel":"MarkProjectDirty(ReaProject proj)","python":"RPR_MarkProjectDirty(ReaProject proj)","cpp":"void MarkProjectDirty(ReaProject* proj)"},"title":"MarkProjectDirty","chapters":["Project Management","Project States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Marks project as dirty (needing save) if 'undo/prompt to save' is enabled in preferences.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["miscellaneous","track","item","dirty"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":"the MediaTrack that you want to mark as dirty"},{"identifier":"MediaItem item","description":"if no MediaTrack is given, use this MediaItem to mark as dirty"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MarkTrackItemsDirty","return_values":[],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"item","type":"MediaItem"}]},"eel":{"return_values":["MarkTrackItemsDirty"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"MediaItem","identifier":"item"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.MarkTrackItemsDirty(MediaTrack track, MediaItem item)","eel":"MarkTrackItemsDirty(MediaTrack track, MediaItem item)","python":"RPR_MarkTrackItemsDirty(MediaTrack track, MediaItem item)","cpp":"void MarkTrackItemsDirty(MediaTrack* track, MediaItem* item)"},"title":"MarkTrackItemsDirty","chapters":["Mediaitem Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"If track is supplied, item is ignored","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","get","playrate"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject project","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Master_GetPlayRate","return_values":[{"identifier":"mas_playrate","type":"number"}],"parameters":[{"identifier":"project","type":"ReaProject"}]},"eel":{"method_name":"Master_GetPlayRate","return_values":["double"],"parameters":[{"type_name":"ReaProject","identifier":"project"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number mas_playrate","description":"the playrate of the project, between 0.25 and 10.0"}],"prog_lang":"*"},"functioncall":{"lua":"number mas_playrate = reaper.Master_GetPlayRate(ReaProject project)","eel":"double Master_GetPlayRate(ReaProject project)","python":"Float retval = RPR_Master_GetPlayRate(ReaProject project)","cpp":"double Master_GetPlayRate(ReaProject* project)"},"title":"Master_GetPlayRate","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get the playrate of the project.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number time_s","description":""},{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Master_GetPlayRateAtTime","return_values":[{"identifier":"mas_playrate_time","type":"number"}],"parameters":[{"identifier":"time_s","type":"number"},{"identifier":"proj","type":"ReaProject"}]},"eel":{"method_name":"Master_GetPlayRateAtTime","return_values":["double"],"parameters":[{"identifier":"time_s"},{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number mas_playrate_time","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number mas_playrate_time = reaper.Master_GetPlayRateAtTime(number time_s, ReaProject proj)","eel":"double Master_GetPlayRateAtTime(time_s, ReaProject proj)","python":"Float retval = RPR_Master_GetPlayRateAtTime(Float time_s, ReaProject proj)","cpp":"double Master_GetPlayRateAtTime(double time_s, ReaProject* proj)"},"title":"Master_GetPlayRateAtTime","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.Master_GetTempo","return_values":[{"identifier":"mas_tempo","type":"number"}],"parameters":[]},"eel":{"method_name":"Master_GetTempo","return_values":["double"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number mas_tempo","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number mas_tempo = reaper.Master_GetTempo()","eel":"double Master_GetTempo()","python":"Float retval = RPR_Master_GetTempo()","cpp":"double Master_GetTempo()"},"title":"Master_GetTempo","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number playrate","description":""},{"identifier":"boolean isnormalized","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Master_NormalizePlayRate","return_values":[{"identifier":"mas_norm_playrate","type":"number"}],"parameters":[{"identifier":"playrate","type":"number"},{"identifier":"isnormalized","type":"boolean"}]},"eel":{"method_name":"Master_NormalizePlayRate","return_values":["double"],"parameters":[{"identifier":"playrate"},{"type_name":"bool","identifier":"isnormalized"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number mas_norm_playrate","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number mas_norm_playrate = reaper.Master_NormalizePlayRate(number playrate, boolean isnormalized)","eel":"double Master_NormalizePlayRate(playrate, bool isnormalized)","python":"Float retval = RPR_Master_NormalizePlayRate(Float playrate, Boolean isnormalized)","cpp":"double Master_NormalizePlayRate(double playrate, bool isnormalized)"},"title":"Master_NormalizePlayRate","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Convert play rate to/from a value between 0 and 1, representing the position on the project playrate slider.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number bpm","description":""},{"identifier":"boolean isnormalized","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Master_NormalizeTempo","return_values":[{"identifier":"mas_norm_tempo","type":"number"}],"parameters":[{"identifier":"bpm","type":"number"},{"identifier":"isnormalized","type":"boolean"}]},"eel":{"method_name":"Master_NormalizeTempo","return_values":["double"],"parameters":[{"identifier":"bpm"},{"type_name":"bool","identifier":"isnormalized"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number mas_norm_tempo","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number mas_norm_tempo = reaper.Master_NormalizeTempo(number bpm, boolean isnormalized)","eel":"double Master_NormalizeTempo(bpm, bool isnormalized)","python":"Float retval = RPR_Master_NormalizeTempo(Float bpm, Boolean isnormalized)","cpp":"double Master_NormalizeTempo(double bpm, bool isnormalized)"},"title":"Master_NormalizeTempo","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Convert the tempo to/from a value between 0 and 1, representing bpm in the range of 40-296 bpm.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["user","interface","input","dialog","messagebox"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"string msg","description":"the message, that shall be shown in messagebox"},{"identifier":"string title","description":"the title of the messagebox"},{"identifier":"string type","description":"which buttons shall be shown in the messagebox\n0, OK\n1, OK CANCEL\n2, ABORT RETRY IGNORE\n3, YES NO CANCEL\n4, YES NO\n5, RETRY CANCEL"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MB","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"msg","type":"string"},{"identifier":"title","type":"string"},{"identifier":"type","type":"integer"}]},"eel":{"method_name":"MB","return_values":["int"],"parameters":[{"identifier":"\"msg\""},{"identifier":"\"title\""},{"type_name":"int","identifier":"type"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the button pressed by the user\n1, OK\n2, CANCEL\n3, ABORT\n4, RETRY\n5, IGNORE\n6, YES\n7, NO"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.MB(string msg, string title, integer type)","eel":"int MB(\"msg\", \"title\", int type)","python":"Int retval = RPR_MB(String msg, String title, Int type)","cpp":"int MB(const char* msg, const char* title, int type)"},"title":"MB","chapters":["User Interface","Dialogs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Shows Messagebox with user-clickable buttons.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem item","description":""},{"identifier":"MediaTrack track","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MediaItemDescendsFromTrack","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"item","type":"MediaItem"},{"identifier":"track","type":"MediaTrack"}]},"eel":{"method_name":"MediaItemDescendsFromTrack","return_values":["int"],"parameters":[{"type_name":"MediaItem","identifier":"item"},{"type_name":"MediaTrack","identifier":"track"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.MediaItemDescendsFromTrack(MediaItem item, MediaTrack track)","eel":"int MediaItemDescendsFromTrack(MediaItem item, MediaTrack track)","python":"Int retval = RPR_MediaItemDescendsFromTrack(MediaItem item, MediaTrack track)","cpp":"int MediaItemDescendsFromTrack(MediaItem* item, MediaTrack* track)"},"title":"MediaItemDescendsFromTrack","chapters":["Mediaitem Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns 1 if the track holds the item, 2 if the track is a folder containing the track that holds the item, etc.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_CountEvts","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"notecnt","type":"number"},{"identifier":"ccevtcnt","type":"number"},{"identifier":"textsyxevtcnt","type":"number"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"method_name":"MIDI_CountEvts","return_values":["int"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"&notecnt"},{"type_name":"int","identifier":"&ccevtcnt"},{"type_name":"int","identifier":"&textsyxevtcnt"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"integer retval","description":""},{"identifier":"integer notecnt","description":""},{"identifier":"integer ccevtcnt","description":""},{"identifier":"integer textsyxevtcnt","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, number notecnt, number ccevtcnt, number textsyxevtcnt = reaper.MIDI_CountEvts(MediaItem_Take take)","eel":"int MIDI_CountEvts(MediaItem_Take take, int &notecnt, int &ccevtcnt, int &textsyxevtcnt)","python":"(Int retval, MediaItem_Take take, Int notecntOut, Int ccevtcntOut, Int textsyxevtcntOut) = RPR_MIDI_CountEvts(take, notecntOut, ccevtcntOut, textsyxevtcntOut)","cpp":"int MIDI_CountEvts(MediaItem_Take* take, int* notecntOut, int* ccevtcntOut, int* textsyxevtcntOut)"},"title":"MIDI_CountEvts","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Count the number of notes, CC events, and text/sysex events in a given MIDI item.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer ccidx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_DeleteCC","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"ccidx","type":"integer"}]},"eel":{"method_name":"MIDI_DeleteCC","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"ccidx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.MIDI_DeleteCC(MediaItem_Take take, integer ccidx)","eel":"bool MIDI_DeleteCC(MediaItem_Take take, int ccidx)","python":"Boolean retval = RPR_MIDI_DeleteCC(MediaItem_Take take, Int ccidx)","cpp":"bool MIDI_DeleteCC(MediaItem_Take* take, int ccidx)"},"title":"MIDI_DeleteCC","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Delete a MIDI CC event.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer evtidx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_DeleteEvt","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"evtidx","type":"integer"}]},"eel":{"method_name":"MIDI_DeleteEvt","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"evtidx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.MIDI_DeleteEvt(MediaItem_Take take, integer evtidx)","eel":"bool MIDI_DeleteEvt(MediaItem_Take take, int evtidx)","python":"Boolean retval = RPR_MIDI_DeleteEvt(MediaItem_Take take, Int evtidx)","cpp":"bool MIDI_DeleteEvt(MediaItem_Take* take, int evtidx)"},"title":"MIDI_DeleteEvt","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Delete a MIDI event.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer noteidx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_DeleteNote","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"noteidx","type":"integer"}]},"eel":{"method_name":"MIDI_DeleteNote","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"noteidx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.MIDI_DeleteNote(MediaItem_Take take, integer noteidx)","eel":"bool MIDI_DeleteNote(MediaItem_Take take, int noteidx)","python":"Boolean retval = RPR_MIDI_DeleteNote(MediaItem_Take take, Int noteidx)","cpp":"bool MIDI_DeleteNote(MediaItem_Take* take, int noteidx)"},"title":"MIDI_DeleteNote","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Delete a MIDI note.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer textsyxevtidx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_DeleteTextSysexEvt","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"textsyxevtidx","type":"integer"}]},"eel":{"method_name":"MIDI_DeleteTextSysexEvt","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"textsyxevtidx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.MIDI_DeleteTextSysexEvt(MediaItem_Take take, integer textsyxevtidx)","eel":"bool MIDI_DeleteTextSysexEvt(MediaItem_Take take, int textsyxevtidx)","python":"Boolean retval = RPR_MIDI_DeleteTextSysexEvt(MediaItem_Take take, Int textsyxevtidx)","cpp":"bool MIDI_DeleteTextSysexEvt(MediaItem_Take* take, int textsyxevtidx)"},"title":"MIDI_DeleteTextSysexEvt","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Delete a MIDI text or sysex event.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_DisableSort","return_values":[],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"return_values":["MIDI_DisableSort"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"}]}},"requires":{"Reaper":"5.974"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.MIDI_DisableSort(MediaItem_Take take)","eel":"MIDI_DisableSort(MediaItem_Take take)","python":"RPR_MIDI_DisableSort(MediaItem_Take take)","cpp":"void MIDI_DisableSort(MediaItem_Take* take)"},"title":"MIDI_DisableSort","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Disable sorting for all MIDI insert, delete, get and set functions, until MIDI_Sort is called.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer ccidx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_EnumSelCC","return_values":[{"identifier":"sel_midicc_index","type":"integer"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"ccidx","type":"integer"}]},"eel":{"method_name":"MIDI_EnumSelCC","return_values":["int"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"ccidx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer sel_midicc_index","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer sel_midicc_index = reaper.MIDI_EnumSelCC(MediaItem_Take take, integer ccidx)","eel":"int MIDI_EnumSelCC(MediaItem_Take take, int ccidx)","python":"Int retval = RPR_MIDI_EnumSelCC(MediaItem_Take take, Int ccidx)","cpp":"int MIDI_EnumSelCC(MediaItem_Take* take, int ccidx)"},"title":"MIDI_EnumSelCC","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the index of the next selected MIDI CC event after ccidx (-1 if there are no more selected events).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer evtidx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_EnumSelEvts","return_values":[{"identifier":"sel_midi_evt_index","type":"integer"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"evtidx","type":"integer"}]},"eel":{"method_name":"MIDI_EnumSelEvts","return_values":["int"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"evtidx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer sel_midi_evt_index","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer sel_midi_evt_index = reaper.MIDI_EnumSelEvts(MediaItem_Take take, integer evtidx)","eel":"int MIDI_EnumSelEvts(MediaItem_Take take, int evtidx)","python":"Int retval = RPR_MIDI_EnumSelEvts(MediaItem_Take take, Int evtidx)","cpp":"int MIDI_EnumSelEvts(MediaItem_Take* take, int evtidx)"},"title":"MIDI_EnumSelEvts","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the index of the next selected MIDI event after evtidx (-1 if there are no more selected events).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItek_Take take","description":""},{"identifier":"integer noteidx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_EnumSelNotes","return_values":[{"identifier":"sel_midi_note_index","type":"integer"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"noteidx","type":"integer"}]},"eel":{"method_name":"MIDI_EnumSelNotes","return_values":["int"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"noteidx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer sel_midi_note_index","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer sel_midi_note_index = reaper.MIDI_EnumSelNotes(MediaItem_Take take, integer noteidx)","eel":"int MIDI_EnumSelNotes(MediaItem_Take take, int noteidx)","python":"Int retval = RPR_MIDI_EnumSelNotes(MediaItem_Take take, Int noteidx)","cpp":"int MIDI_EnumSelNotes(MediaItem_Take* take, int noteidx)"},"title":"MIDI_EnumSelNotes","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the index of the next selected MIDI note after noteidx (-1 if there are no more selected events).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer textsyxidx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_EnumSelTextSysexEvts","return_values":[{"identifier":"sel_midi_sysex_index","type":"integer"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"textsyxidx","type":"integer"}]},"eel":{"method_name":"MIDI_EnumSelTextSysexEvts","return_values":["int"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"textsyxidx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer sel_midi_sysex_index","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer sel_midi_sysex_index = reaper.MIDI_EnumSelTextSysexEvts(MediaItem_Take take, integer textsyxidx)","eel":"int MIDI_EnumSelTextSysexEvts(MediaItem_Take take, int textsyxidx)","python":"Int retval = RPR_MIDI_EnumSelTextSysexEvts(MediaItem_Take take, Int textsyxidx)","cpp":"int MIDI_EnumSelTextSysexEvts(MediaItem_Take* take, int textsyxidx)"},"title":"MIDI_EnumSelTextSysexEvts","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the index of the next selected MIDI text/sysex event after textsyxidx (-1 if there are no more selected events).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_GetAllEvts","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"method_name":"MIDI_GetAllEvts","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"identifier":"#buf"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string buf = reaper.MIDI_GetAllEvts(MediaItem_Take take)","eel":"bool MIDI_GetAllEvts(MediaItem_Take take, #buf)","python":"(Boolean retval, MediaItem_Take take, String bufOutNeedBig, Int bufOutNeedBig_sz) = RPR_MIDI_GetAllEvts(take, bufOutNeedBig, bufOutNeedBig_sz)","cpp":"bool MIDI_GetAllEvts(MediaItem_Take* take, char* bufOutNeedBig, int* bufOutNeedBig_sz)"},"title":"MIDI_GetAllEvts","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get all MIDI data. MIDI buffer is returned as a list of { int offset, char flag, int msglen, unsigned char msg[] }.\n\n   offset: MIDI ticks from previous event\n   flag: &1=selected &2=muted\n   flag high 4 bits for CC shape: &16=linear, &32=slow start/end, &16|32=fast start, &64=fast end, &64|16=bezier\n   msg: the MIDI message.\n\nA meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents bezier curve data for the previous MIDI event: 1 byte for the bezier type (usually 0) and 4 bytes for the bezier tension as a float.\nFor tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.\n\nSee MIDI_SetAllEvts.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer ccidx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_GetCC","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"selected","type":"boolean"},{"identifier":"muted","type":"boolean"},{"identifier":"ppqpos","type":"number"},{"identifier":"chanmsg","type":"integer"},{"isOptional":true,"type":"integer","identifier":"chan"},{"identifier":"msg2","type":"integer"},{"identifier":"msg3","type":"integer"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"ccidx","type":"integer"}]},"eel":{"method_name":"MIDI_GetCC","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"ccidx"},{"type_name":"bool","identifier":"&selected"},{"type_name":"bool","identifier":"&muted"},{"identifier":"&ppqpos"},{"type_name":"int","identifier":"&chanmsg"},{"type_name":"int","identifier":"&chan"},{"type_name":"int","identifier":"&msg2"},{"type_name":"int","identifier":"&msg3"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"boolean selected","description":""},{"identifier":"boolean muted","description":""},{"identifier":"number ppqpos","description":""},{"identifier":"integer chanmsg","description":""},{"identifier":"integer chan","description":""},{"identifier":"integer msg2","description":""},{"identifier":"integer msg3","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, boolean selected, boolean muted, number ppqpos, integer chanmsg, integer number chan, integer msg2, integer msg3 = reaper.MIDI_GetCC(MediaItem_Take take, integer ccidx)","eel":"bool MIDI_GetCC(MediaItem_Take take, int ccidx, bool &selected, bool &muted, &ppqpos, int &chanmsg, int &chan, int &msg2, int &msg3)","python":"(Boolean retval, MediaItem_Take take, Int ccidx, Boolean selectedOut, Boolean mutedOut, Float ppqposOut, Int chanmsgOut, Int chanOut, Int msg2Out, Int msg3Out) = RPR_MIDI_GetCC(take, ccidx, selectedOut, mutedOut, ppqposOut, chanmsgOut, chanOut, msg2Out, msg3Out)","cpp":"bool MIDI_GetCC(MediaItem_Take* take, int ccidx, bool* selectedOut, bool* mutedOut, double* ppqposOut, int* chanmsgOut, int* chanOut, int* msg2Out, int* msg3Out)"},"title":"MIDI_GetCC","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get MIDI CC event properties.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer ccidx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_GetCCShape","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"shape","type":"integer"},{"identifier":"beztension","type":"number"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"ccidx","type":"integer"}]},"eel":{"method_name":"MIDI_GetCCShape","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"ccidx"},{"type_name":"int","identifier":"&shape"},{"identifier":"&beztension"}]}},"requires":{"Reaper":"6.00"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer shape","description":""},{"identifier":"number beztension","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer shape, number beztension = reaper.MIDI_GetCCShape(MediaItem_Take take, integer ccidx)","eel":"bool MIDI_GetCCShape(MediaItem_Take take, int ccidx, int &shape, &beztension)","python":"(Boolean retval, MediaItem_Take take, Int ccidx, Int shapeOut, Float beztensionOut) = RPR_MIDI_GetCCShape(take, ccidx, shapeOut, beztensionOut)","cpp":"bool MIDI_GetCCShape(MediaItem_Take* take, int ccidx, int* shapeOut, double* beztensionOut)"},"title":"MIDI_GetCCShape","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get CC shape and bezier tension. \n\nSee MIDI_GetCC, MIDI_SetCCShape","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer evtidx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_GetEvt","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"selected","type":"boolean"},{"identifier":"muted","type":"boolean"},{"identifier":"ppqpos","type":"number"},{"identifier":"msg","type":"string"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"evtidx","type":"integer"}]},"eel":{"method_name":"MIDI_GetEvt","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"evtidx"},{"type_name":"bool","identifier":"&selected"},{"type_name":"bool","identifier":"&muted"},{"identifier":"&ppqpos"},{"identifier":"#msg"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"boolean selected","description":""},{"identifier":"boolean muted","description":""},{"identifier":"number ppqpos","description":""},{"identifier":"string msg","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, boolean selected, boolean muted, number ppqpos, string msg = reaper.MIDI_GetEvt(MediaItem_Take take, integer evtidx)","eel":"bool MIDI_GetEvt(MediaItem_Take take, int evtidx, bool &selected, bool &muted, &ppqpos, #msg)","python":"(Boolean retval, MediaItem_Take take, Int evtidx, Boolean selectedOut, Boolean mutedOut, Float ppqposOut, String msgOut, Int msgOut_sz) = RPR_MIDI_GetEvt(take, evtidx, selectedOut, mutedOut, ppqposOut, msgOut, msgOut_sz)","cpp":"bool MIDI_GetEvt(MediaItem_Take* take, int evtidx, bool* selectedOut, bool* mutedOut, double* ppqposOut, char* msgOut, int* msgOut_sz)"},"title":"MIDI_GetEvt","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get MIDI event properties of a take.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_GetGrid","return_values":[{"identifier":"retval","type":"number"},{"isOptional":true,"type":"number","identifier":"swing"},{"isOptional":true,"type":"number","identifier":"noteLen"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"method_name":"MIDI_GetGrid","return_values":["double"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"optional","identifier":"&swing"},{"type_name":"optional","identifier":"&noteLen"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"number retval","description":""},{"identifier":"optional number swing","description":""},{"identifier":"optional number noteLen","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval, optional number swing, optional number noteLen = reaper.MIDI_GetGrid(MediaItem_Take take)","eel":"double MIDI_GetGrid(MediaItem_Take take, optional &swing, optional &noteLen)","python":"(Float retval, MediaItem_Take take, Float swingOutOptional, Float noteLenOutOptional) = RPR_MIDI_GetGrid(take, swingOutOptional, noteLenOutOptional)","cpp":"double MIDI_GetGrid(MediaItem_Take* take, double* swingOutOptional, double* noteLenOutOptional)"},"title":"MIDI_GetGrid","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the most recent MIDI editor grid size for this MIDI take, in QN. Swing is between 0 and 1. Note length is 0 if it follows the grid size.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"boolean notesonly","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_GetHash","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"hash","type":"string"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"notesonly","type":"boolean"}]},"eel":{"method_name":"MIDI_GetHash","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"bool","identifier":"notesonly"},{"identifier":"#hash"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string hash","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string hash = reaper.MIDI_GetHash(MediaItem_Take take, boolean notesonly)","eel":"bool MIDI_GetHash(MediaItem_Take take, bool notesonly, #hash)","python":"(Boolean retval, MediaItem_Take take, Boolean notesonly, String hashOut, Int hashOut_sz) = RPR_MIDI_GetHash(take, notesonly, hashOut, hashOut_sz)","cpp":"bool MIDI_GetHash(MediaItem_Take* take, bool notesonly, char* hashOut, int hashOut_sz)"},"title":"MIDI_GetHash","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get a string that only changes when the MIDI data changes. \n\nIf notesonly==true, then the string changes only when the MIDI notes change. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer noteidx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_GetNote","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"selected","type":"boolean"},{"identifier":"muted","type":"boolean"},{"identifier":"startppqpos","type":"number"},{"identifier":"endppqpos","type":"number"},{"identifier":"chan","type":"integer"},{"identifier":"pitch","type":"integer"},{"identifier":"vel","type":"integer"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"noteidx","type":"integer"}]},"eel":{"method_name":"MIDI_GetNote","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"noteidx"},{"type_name":"bool","identifier":"&selected"},{"type_name":"bool","identifier":"&muted"},{"identifier":"&startppqpos"},{"identifier":"&endppqpos"},{"type_name":"int","identifier":"&chan"},{"type_name":"int","identifier":"&pitch"},{"type_name":"int","identifier":"&vel"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"boolean selected","description":""},{"identifier":"boolean muted","description":""},{"identifier":"number startppqpos","description":""},{"identifier":"number endppqpos","description":""},{"identifier":"integer chan","description":""},{"identifier":"integer pitch","description":""},{"identifier":"integer vel","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, boolean selected, boolean muted, number startppqpos, number endppqpos, integer chan, integer pitch, integer vel = reaper.MIDI_GetNote(MediaItem_Take take, integer noteidx)","eel":"bool MIDI_GetNote(MediaItem_Take take, int noteidx, bool &selected, bool &muted, &startppqpos, &endppqpos, int &chan, int &pitch, int &vel)","python":"(Boolean retval, MediaItem_Take take, Int noteidx, Boolean selectedOut, Boolean mutedOut, Float startppqposOut, Float endppqposOut, Int chanOut, Int pitchOut, Int velOut) = RPR_MIDI_GetNote(take, noteidx, selectedOut, mutedOut, startppqposOut, endppqposOut, chanOut, pitchOut, velOut)","cpp":"bool MIDI_GetNote(MediaItem_Take* take, int noteidx, bool* selectedOut, bool* mutedOut, double* startppqposOut, double* endppqposOut, int* chanOut, int* pitchOut, int* velOut)"},"title":"MIDI_GetNote","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get MIDI note properties.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"number ppqpos","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_GetPPQPos_EndOfMeasure","return_values":[{"identifier":"endposition","type":"number"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"ppqpos","type":"number"}]},"eel":{"method_name":"MIDI_GetPPQPos_EndOfMeasure","return_values":["double"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"identifier":"ppqpos"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number endposition","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number endposition = reaper.MIDI_GetPPQPos_EndOfMeasure(MediaItem_Take take, number ppqpos)","eel":"double MIDI_GetPPQPos_EndOfMeasure(MediaItem_Take take, ppqpos)","python":"Float retval = RPR_MIDI_GetPPQPos_EndOfMeasure(MediaItem_Take take, Float ppqpos)","cpp":"double MIDI_GetPPQPos_EndOfMeasure(MediaItem_Take* take, double ppqpos)"},"title":"MIDI_GetPPQPos_EndOfMeasure","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the MIDI tick (ppq) position corresponding to the end of the measure.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"number ppqpos","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_GetPPQPos_StartOfMeasure","return_values":[{"identifier":"startposition","type":"number"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"ppqpos","type":"number"}]},"eel":{"method_name":"MIDI_GetPPQPos_StartOfMeasure","return_values":["double"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"identifier":"ppqpos"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number startposition","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number startposition = reaper.MIDI_GetPPQPos_StartOfMeasure(MediaItem_Take take, number ppqpos)","eel":"double MIDI_GetPPQPos_StartOfMeasure(MediaItem_Take take, ppqpos)","python":"Float retval = RPR_MIDI_GetPPQPos_StartOfMeasure(MediaItem_Take take, Float ppqpos)","cpp":"double MIDI_GetPPQPos_StartOfMeasure(MediaItem_Take* take, double ppqpos)"},"title":"MIDI_GetPPQPos_StartOfMeasure","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the MIDI tick (ppq) position corresponding to the start of the measure.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"number projqn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_GetPPQPosFromProjQN","return_values":[{"identifier":"ppq_position","type":"number"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"projqn","type":"number"}]},"eel":{"method_name":"MIDI_GetPPQPosFromProjQN","return_values":["double"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"identifier":"projqn"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number ppq_position","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number ppq_position = reaper.MIDI_GetPPQPosFromProjQN(MediaItem_Take take, number projqn)","eel":"double MIDI_GetPPQPosFromProjQN(MediaItem_Take take, projqn)","python":"Float retval = RPR_MIDI_GetPPQPosFromProjQN(MediaItem_Take take, Float projqn)","cpp":"double MIDI_GetPPQPosFromProjQN(MediaItem_Take* take, double projqn)"},"title":"MIDI_GetPPQPosFromProjQN","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the MIDI tick (ppq) position corresponding to a specific project time in quarter notes.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"number projtime","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_GetPPQPosFromProjTime","return_values":[{"identifier":"ppq_position","type":"number"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"projtime","type":"number"}]},"eel":{"method_name":"MIDI_GetPPQPosFromProjTime","return_values":["double"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"identifier":"projtime"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number ppq_position","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number ppq_position = reaper.MIDI_GetPPQPosFromProjTime(MediaItem_Take take, number projtime)","eel":"double MIDI_GetPPQPosFromProjTime(MediaItem_Take take, projtime)","python":"Float retval = RPR_MIDI_GetPPQPosFromProjTime(MediaItem_Take take, Float projtime)","cpp":"double MIDI_GetPPQPosFromProjTime(MediaItem_Take* take, double projtime)"},"title":"MIDI_GetPPQPosFromProjTime","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the MIDI tick (ppq) position corresponding to a specific project time in seconds.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"number ppqpos","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_GetProjQNFromPPQPos","return_values":[{"identifier":"qn_project_time","type":"number"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"ppqpos","type":"number"}]},"eel":{"method_name":"MIDI_GetProjQNFromPPQPos","return_values":["double"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"identifier":"ppqpos"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number qn_project_time","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number qn_project_time = reaper.MIDI_GetProjQNFromPPQPos(MediaItem_Take take, number ppqpos)","eel":"double MIDI_GetProjQNFromPPQPos(MediaItem_Take take, ppqpos)","python":"Float retval = RPR_MIDI_GetProjQNFromPPQPos(MediaItem_Take take, Float ppqpos)","cpp":"double MIDI_GetProjQNFromPPQPos(MediaItem_Take* take, double ppqpos)"},"title":"MIDI_GetProjQNFromPPQPos","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the project time in quarter notes corresponding to a specific MIDI tick (ppq) position.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"number ppqpos","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_GetProjTimeFromPPQPos","return_values":[{"identifier":"seconds_project_time","type":"number"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"ppqpos","type":"number"}]},"eel":{"method_name":"MIDI_GetProjTimeFromPPQPos","return_values":["double"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"identifier":"ppqpos"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number seconds_project_time","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number seconds_project_time = reaper.MIDI_GetProjTimeFromPPQPos(MediaItem_Take take, number ppqpos)","eel":"double MIDI_GetProjTimeFromPPQPos(MediaItem_Take take, ppqpos)","python":"Float retval = RPR_MIDI_GetProjTimeFromPPQPos(MediaItem_Take take, Float ppqpos)","cpp":"double MIDI_GetProjTimeFromPPQPos(MediaItem_Take* take, double ppqpos)"},"title":"MIDI_GetProjTimeFromPPQPos","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the project time in seconds corresponding to a specific MIDI tick (ppq) position.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer idx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_GetRecentInputEvent","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"buf","type":"string"},{"identifier":"ts","type":"integer"},{"identifier":"devIdx","type":"integer"},{"identifier":"projPos","type":"number"},{"identifier":"projLoopCnt","type":"integer"}],"parameters":[{"identifier":"idx","type":"integer"}]},"eel":{"method_name":"MIDI_GetRecentInputEvent","return_values":["int"],"parameters":[{"type_name":"int","identifier":"idx"},{"identifier":"#buf"},{"type_name":"int","identifier":"&ts"},{"type_name":"int","identifier":"&devIdx"},{"identifier":"&projPos"},{"type_name":"int","identifier":"&projLoopCnt"}]}},"requires":{"Reaper":"6.41"},"return_values":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"integer retval","description":""},{"identifier":"string buf","description":""},{"identifier":"integer ts","description":""},{"identifier":"integer devIdx","description":""},{"identifier":"integer projPos","description":""},{"identifier":"number projLoopCnt","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, string buf, integer ts, integer devIdx, number projPos, integer projLoopCnt = reaper.MIDI_GetRecentInputEvent(integer idx)","eel":"int MIDI_GetRecentInputEvent(int idx, #buf, int &ts, int &devIdx, &projPos, int &projLoopCnt)","python":"(Int retval, Int idx, String bufOut, Int bufOut_sz, Int tsOut, Int devIdxOut, Float projPosOut, Int projLoopCntOut) = RPR_MIDI_GetRecentInputEvent(idx, bufOut, bufOut_sz, tsOut, devIdxOut, projPosOut, projLoopCntOut)","cpp":"int MIDI_GetRecentInputEvent(int idx, char* bufOut, int* bufOut_sz, int* tsOut, int* devIdxOut, double* projPosOut, int* projLoopCntOut)"},"title":"MIDI_GetRecentInputEvent","chapters":["Input/Output Devices","Midi"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Gets a recent MIDI input event from the global history. \n\nparameters:\nidx=0 for the most recent event, which also latches to the latest MIDI event state (to get a more recent list, calling with idx=0 is necessary). \nidx=1 next most recent event, returns a non-zero sequence number for the event, or zero if no more events. \n\nretvals:\ntsOut/ts will be set to the timestamp in samples relative to the current position (0 is current, -48000 is one second ago, etc). \n\ndevIdxOut/devIdx will have the low 16 bits set to the input device index, and 0x10000 will be set if device was enabled only for control. \n\nprojPosOut/projPos will be set to project position in seconds if project was playing back at time of event, otherwise -1. Large SysEx events will not be included in this event list.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_GetScale","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"root","type":"number"},{"identifier":"scale","type":"number"},{"identifier":"name","type":"string"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"method_name":"MIDI_GetScale","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"&root"},{"type_name":"int","identifier":"&scale"},{"identifier":"#name"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer root","description":""},{"identifier":"integer scale","description":""},{"identifier":"string name","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number root, number scale, string name = reaper.MIDI_GetScale(MediaItem_Take take)","eel":"bool MIDI_GetScale(MediaItem_Take take, int &root, int &scale, #name)","python":"(Boolean retval, MediaItem_Take take, Int rootOut, Int scaleOut, String nameOut, Int nameOut_sz) = RPR_MIDI_GetScale(take, rootOut, scaleOut, nameOut, nameOut_sz)","cpp":"bool MIDI_GetScale(MediaItem_Take* take, int* rootOut, int* scaleOut, char* nameOut, int nameOut_sz)"},"title":"MIDI_GetScale","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get the active scale in the media source, if any. root 0=C, 1=C#, etc. scale &0x1=root, &0x2=minor 2nd, &0x4=major 2nd, &0x8=minor 3rd, &0xF=fourth, etc.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer textsyxevtidx","description":""},{"identifier":"optional boolean selected","description":""},{"identifier":"optional boolean muted","description":""},{"identifier":"optional number ppqpos","description":""},{"identifier":"optional integer type","description":""},{"identifier":"optional string msg","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_GetTextSysexEvt","return_values":[{"identifier":"retval","type":"boolean"},{"isOptional":true,"type":"boolean","identifier":"selected"},{"isOptional":true,"type":"boolean","identifier":"muted"},{"isOptional":true,"type":"number","identifier":"ppqpos"},{"isOptional":true,"type":"integer","identifier":"type"},{"isOptional":true,"type":"string","identifier":"msg"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"textsyxevtidx","type":"integer"},{"isOptional":true,"type":"boolean","identifier":"selected"},{"isOptional":true,"type":"boolean","identifier":"muted"},{"isOptional":true,"type":"number","identifier":"ppqpos"},{"isOptional":true,"type":"integer","identifier":"type"},{"isOptional":true,"type":"string","identifier":"msg"}]},"eel":{"method_name":"MIDI_GetTextSysexEvt","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"textsyxevtidx"},{"identifier":"&selected","modifier":"optional","type_name":"bool"},{"identifier":"&muted","modifier":"optional","type_name":"bool"},{"type_name":"optional","identifier":"&ppqpos"},{"identifier":"&type","modifier":"optional","type_name":"int"},{"type_name":"optional","identifier":"#msg"}]}},"requires":{"Reaper":"6.00"},"return_values":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"optional boolean selected","description":""},{"identifier":"optional boolean muted","description":""},{"identifier":"optional number ppqpos","description":""},{"identifier":"optional integer type","description":""},{"identifier":"optional string msg","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, optional boolean selected, optional boolean muted, optional number ppqpos, optional integer type, optional string msg = reaper.MIDI_GetTextSysexEvt(MediaItem_Take take, integer textsyxevtidx, optional boolean selected, optional boolean muted, optional number ppqpos, optional integer type, optional string msg)","eel":"bool MIDI_GetTextSysexEvt(MediaItem_Take take, int textsyxevtidx, optional bool &selected, optional bool &muted, optional &ppqpos, optional int &type, optional #msg)","python":"(Boolean retval, MediaItem_Take take, Int textsyxevtidx, Boolean selectedOutOptional, Boolean mutedOutOptional, Float ppqposOutOptional, Int typeOutOptional, String msgOptional, Int msgOptional_sz) = RPR_MIDI_GetTextSysexEvt(take, textsyxevtidx, selectedOutOptional, mutedOutOptional, ppqposOutOptional, typeOutOptional, msgOptional, msgOptional_sz)","cpp":"bool MIDI_GetTextSysexEvt(MediaItem_Take* take, int textsyxevtidx, bool* selectedOutOptional, bool* mutedOutOptional, double* ppqposOutOptional, int* typeOutOptional, char* msgOptional, int* msgOptional_sz)"},"title":"MIDI_GetTextSysexEvt","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get MIDI meta-event properties. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event. For all other meta-messages, type is returned as -2 and msg returned as all zeroes. \n\nSee MIDI_GetEvt.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"boolean notesonly","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_GetTrackHash","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"hash","type":"string"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"notesonly","type":"boolean"}]},"eel":{"method_name":"MIDI_GetTrackHash","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"bool","identifier":"notesonly"},{"identifier":"#hash"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string hash","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string hash = reaper.MIDI_GetTrackHash(MediaTrack track, boolean notesonly)","eel":"bool MIDI_GetTrackHash(MediaTrack track, bool notesonly, #hash)","python":"(Boolean retval, MediaTrack track, Boolean notesonly, String hashOut, Int hashOut_sz) = RPR_MIDI_GetTrackHash(track, notesonly, hashOut, hashOut_sz)","cpp":"bool MIDI_GetTrackHash(MediaTrack* track, bool notesonly, char* hashOut, int hashOut_sz)"},"title":"MIDI_GetTrackHash","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. \n\nSee MIDI_GetHash","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"boolean selected","description":""},{"identifier":"boolean muted","description":""},{"identifier":"number ppqpos","description":""},{"identifier":"integer chanmsg","description":""},{"identifier":"integer chan","description":""},{"identifier":"integer msg2","description":""},{"identifier":"integer msg3","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_InsertCC","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"selected","type":"boolean"},{"identifier":"muted","type":"boolean"},{"identifier":"ppqpos","type":"number"},{"identifier":"chanmsg","type":"integer"},{"identifier":"chan","type":"integer"},{"identifier":"msg2","type":"integer"},{"identifier":"msg3","type":"integer"}]},"eel":{"method_name":"MIDI_InsertCC","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"bool","identifier":"selected"},{"type_name":"bool","identifier":"muted"},{"identifier":"ppqpos"},{"type_name":"int","identifier":"chanmsg"},{"type_name":"int","identifier":"chan"},{"type_name":"int","identifier":"msg2"},{"type_name":"int","identifier":"msg3"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.MIDI_InsertCC(MediaItem_Take take, boolean selected, boolean muted, number ppqpos, integer chanmsg, integer chan, integer msg2, integer msg3)","eel":"bool MIDI_InsertCC(MediaItem_Take take, bool selected, bool muted, ppqpos, int chanmsg, int chan, int msg2, int msg3)","python":"Boolean retval = RPR_MIDI_InsertCC(MediaItem_Take take, Boolean selected, Boolean muted, Float ppqpos, Int chanmsg, Int chan, Int msg2, Int msg3)","cpp":"bool MIDI_InsertCC(MediaItem_Take* take, bool selected, bool muted, double ppqpos, int chanmsg, int chan, int msg2, int msg3)"},"title":"MIDI_InsertCC","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Insert a new MIDI CC event.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer force_reinit_input","description":""},{"identifier":"integer force_reinit_output","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.midi_init","return_values":[],"parameters":[{"identifier":"force_reinit_input","type":"integer"},{"identifier":"force_reinit_output","type":"integer"}]},"eel":{"return_values":["midi_init"],"parameters":[{"type_name":"int","identifier":"force_reinit_input"},{"type_name":"int","identifier":"force_reinit_output"}]}},"requires":{"Reaper":"6.47"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.midi_init(integer force_reinit_input, integer force_reinit_output)","eel":"midi_init(int force_reinit_input, int force_reinit_output)","python":"RPR_midi_init(Int force_reinit_input, Int force_reinit_output)","cpp":"void midi_init(int force_reinit_input, int force_reinit_output)"},"title":"midi_init","chapters":["Input/Output Devices","Midi"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Opens MIDI devices as configured in preferences. \n\nforce_reinit_input and force_reinit_output force a particular device index to close/re-open (pass -1 to not force any devices to reopen).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"boolean selected","description":""},{"identifier":"boolean muted","description":""},{"identifier":"number ppqpos","description":""},{"identifier":"string bytestr","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_InsertEvt","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"selected","type":"boolean"},{"identifier":"muted","type":"boolean"},{"identifier":"ppqpos","type":"number"},{"identifier":"bytestr","type":"string"}]},"eel":{"method_name":"MIDI_InsertEvt","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"bool","identifier":"selected"},{"type_name":"bool","identifier":"muted"},{"identifier":"ppqpos"},{"identifier":"\"bytestr\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.MIDI_InsertEvt(MediaItem_Take take, boolean selected, boolean muted, number ppqpos, string bytestr)","eel":"bool MIDI_InsertEvt(MediaItem_Take take, bool selected, bool muted, ppqpos, \"bytestr\")","python":"Boolean retval = RPR_MIDI_InsertEvt(MediaItem_Take take, Boolean selected, Boolean muted, Float ppqpos, String bytestr, Int bytestr_sz)","cpp":"bool MIDI_InsertEvt(MediaItem_Take* take, bool selected, bool muted, double ppqpos, const char* bytestr, int bytestr_sz)"},"title":"MIDI_InsertEvt","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Insert a new MIDI event.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":9,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"boolean selected","description":""},{"identifier":"boolean muted","description":""},{"identifier":"number startppqpos","description":""},{"identifier":"number endppqpos","description":""},{"identifier":"integer chan","description":""},{"identifier":"integer pitch","description":""},{"identifier":"integer vel","description":""},{"identifier":"optional boolean noSortIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_InsertNote","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"selected","type":"boolean"},{"identifier":"muted","type":"boolean"},{"identifier":"startppqpos","type":"number"},{"identifier":"endppqpos","type":"number"},{"identifier":"chan","type":"integer"},{"identifier":"pitch","type":"integer"},{"identifier":"vel","type":"integer"},{"isOptional":true,"type":"boolean","identifier":"noSortIn"}]},"eel":{"method_name":"MIDI_InsertNote","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"bool","identifier":"selected"},{"type_name":"bool","identifier":"muted"},{"identifier":"startppqpos"},{"identifier":"endppqpos"},{"type_name":"int","identifier":"chan"},{"type_name":"int","identifier":"pitch"},{"type_name":"int","identifier":"vel"},{"identifier":"noSortIn","modifier":"optional","type_name":"bool"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.MIDI_InsertNote(MediaItem_Take take, boolean selected, boolean muted, number startppqpos, number endppqpos, integer chan, integer pitch, integer vel, optional boolean noSortIn)","eel":"bool MIDI_InsertNote(MediaItem_Take take, bool selected, bool muted, startppqpos, endppqpos, int chan, int pitch, int vel, optional bool noSortIn)","python":"Boolean retval = RPR_MIDI_InsertNote(MediaItem_Take take, Boolean selected, Boolean muted, Float startppqpos, Float endppqpos, Int chan, Int pitch, Int vel, const bool noSortInOptional)","cpp":"bool MIDI_InsertNote(MediaItem_Take* take, bool selected, bool muted, double startppqpos, double endppqpos, int chan, int pitch, int vel, const bool* noSortInOptional)"},"title":"MIDI_InsertNote","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Insert a new MIDI note. Set noSort if inserting multiple events, then call MIDI_Sort when done.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"boolean selected","description":""},{"identifier":"boolean muted","description":""},{"identifier":"number ppqpos","description":""},{"identifier":"integer type","description":""},{"identifier":"string bytestr","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_InsertTextSysexEvt","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"selected","type":"boolean"},{"identifier":"muted","type":"boolean"},{"identifier":"ppqpos","type":"number"},{"identifier":"type","type":"integer"},{"identifier":"bytestr","type":"string"}]},"eel":{"method_name":"MIDI_InsertTextSysexEvt","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"bool","identifier":"selected"},{"type_name":"bool","identifier":"muted"},{"identifier":"ppqpos"},{"type_name":"int","identifier":"type"},{"identifier":"\"bytestr\""}]}},"requires":{"Reaper":"6.00"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.MIDI_InsertTextSysexEvt(MediaItem_Take take, boolean selected, boolean muted, number ppqpos, integer type, string bytestr)","eel":"bool MIDI_InsertTextSysexEvt(MediaItem_Take take, bool selected, bool muted, ppqpos, int type, \"bytestr\")","python":"Boolean retval = RPR_MIDI_InsertTextSysexEvt(MediaItem_Take take, Boolean selected, Boolean muted, Float ppqpos, Int type, String bytestr, Int bytestr_sz)","cpp":"bool MIDI_InsertTextSysexEvt(MediaItem_Take* take, bool selected, bool muted, double ppqpos, int type, const char* bytestr, int bytestr_sz)"},"title":"MIDI_InsertTextSysexEvt","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Insert a new MIDI text or sysex event. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.midi_reinit","return_values":[],"parameters":[]},"eel":{"return_values":["midi_reinit"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.midi_reinit()","eel":"midi_reinit()","python":"RPR_midi_reinit()","cpp":"void midi_reinit()"},"title":"midi_reinit","chapters":["Input/Output Devices","Midi"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Reset (close and re-open) all MIDI devices","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"boolean select","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_SelectAll","return_values":[],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"select","type":"boolean"}]},"eel":{"return_values":["MIDI_SelectAll"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"bool","identifier":"select"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.MIDI_SelectAll(MediaItem_Take take, boolean select)","eel":"MIDI_SelectAll(MediaItem_Take take, bool select)","python":"RPR_MIDI_SelectAll(MediaItem_Take take, Boolean select)","cpp":"void MIDI_SelectAll(MediaItem_Take* take, bool select)"},"title":"MIDI_SelectAll","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Select or deselect all MIDI content.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_SetAllEvts","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"buf","type":"string"}]},"eel":{"method_name":"MIDI_SetAllEvts","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"identifier":"\"buf\""}]}},"requires":{"Reaper":"6.00"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.MIDI_SetAllEvts(MediaItem_Take take, string buf)","eel":"bool MIDI_SetAllEvts(MediaItem_Take take, \"buf\")","python":"Boolean retval = RPR_MIDI_SetAllEvts(MediaItem_Take take, String buf, Int buf_sz)","cpp":"bool MIDI_SetAllEvts(MediaItem_Take* take, const char* buf, int buf_sz)"},"title":"MIDI_SetAllEvts","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set all MIDI data. MIDI buffer is passed in as a list of { int offset, char flag, int msglen, unsigned char msg[] }.\n\n   offset: MIDI ticks from previous event\n   flag: &1=selected &2=muted\n   flag high 4 bits for CC shape: &16=linear, &32=slow start/end, &16|32=fast start, &64=fast end, &64|16=bezier\n   msg: the MIDI message.\n\nA meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents bezier curve data for the previous MIDI event: 1 byte for the bezier type (usually 0) and 4 bytes for the bezier tension as a float.\nFor tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.\n\nSee MIDI_GetAllEvts.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":10,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer ccidx","description":""},{"identifier":"optional boolean selectedIn","description":""},{"identifier":"optional boolean mutedIn","description":""},{"identifier":"optional number ppqposIn","description":""},{"identifier":"optional integer chanmsgIn","description":""},{"identifier":"optional integer chanIn","description":""},{"identifier":"optional integer msg2In","description":""},{"identifier":"optional integer msg3In","description":""},{"identifier":"optional boolean noSortIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_SetCC","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"ccidx","type":"integer"},{"isOptional":true,"type":"boolean","identifier":"selectedIn"},{"isOptional":true,"type":"boolean","identifier":"mutedIn"},{"isOptional":true,"type":"number","identifier":"ppqposIn"},{"isOptional":true,"type":"integer","identifier":"chanmsgIn"},{"isOptional":true,"type":"integer","identifier":"chanIn"},{"isOptional":true,"type":"integer","identifier":"msg2In"},{"isOptional":true,"type":"integer","identifier":"msg3In"},{"isOptional":true,"type":"boolean","identifier":"noSortIn"}]},"eel":{"method_name":"MIDI_SetCC","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"ccidx"},{"identifier":"selectedIn","modifier":"optional","type_name":"bool"},{"identifier":"mutedIn","modifier":"optional","type_name":"bool"},{"type_name":"optional","identifier":"ppqposIn"},{"identifier":"chanmsgIn","modifier":"optional","type_name":"int"},{"identifier":"chanIn","modifier":"optional","type_name":"int"},{"identifier":"msg2In","modifier":"optional","type_name":"int"},{"identifier":"msg3In","modifier":"optional","type_name":"int"},{"identifier":"noSortIn","modifier":"optional","type_name":"bool"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.MIDI_SetCC(MediaItem_Take take, integer ccidx, optional boolean selectedIn, optional boolean mutedIn, optional number ppqposIn, optional integer chanmsgIn, optional integer chanIn, optional integer msg2In, optional integer msg3In, optional boolean noSortIn)","eel":"bool MIDI_SetCC(MediaItem_Take take, int ccidx, optional bool selectedIn, optional bool mutedIn, optional ppqposIn, optional int chanmsgIn, optional int chanIn, optional int msg2In, optional int msg3In, optional bool noSortIn)","python":"Boolean retval = RPR_MIDI_SetCC(MediaItem_Take take, Int ccidx, const bool selectedInOptional, const bool mutedInOptional, const double ppqposInOptional, const int chanmsgInOptional, const int chanInOptional, const int msg2InOptional, const int msg3InOptional, const bool noSortInOptional)","cpp":"bool MIDI_SetCC(MediaItem_Take* take, int ccidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const int* chanmsgInOptional, const int* chanInOptional, const int* msg2InOptional, const int* msg3InOptional, const bool* noSortInOptional)"},"title":"MIDI_SetCC","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Set MIDI CC event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer ccidx","description":""},{"identifier":"integer shape","description":""},{"identifier":"number beztension","description":""},{"identifier":"optional boolean noSortIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_SetCCShape","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"ccidx","type":"integer"},{"identifier":"shape","type":"integer"},{"identifier":"beztension","type":"number"},{"isOptional":true,"type":"boolean","identifier":"noSortIn"}]},"eel":{"method_name":"MIDI_SetCCShape","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"ccidx"},{"type_name":"int","identifier":"shape"},{"identifier":"beztension"},{"identifier":"noSortIn","modifier":"optional","type_name":"bool"}]}},"requires":{"Reaper":"6.00"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.MIDI_SetCCShape(MediaItem_Take take, integer ccidx, integer shape, number beztension, optional boolean noSortIn)","eel":"bool MIDI_SetCCShape(MediaItem_Take take, int ccidx, int shape, beztension, optional bool noSortIn)","python":"Boolean retval = RPR_MIDI_SetCCShape(MediaItem_Take take, Int ccidx, Int shape, Float beztension, const bool noSortInOptional)","cpp":"bool MIDI_SetCCShape(MediaItem_Take* take, int ccidx, int shape, double beztension, const bool* noSortInOptional)"},"title":"MIDI_SetCCShape","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set CC shape and bezier tension. set noSort if setting multiple events, then call MIDI_Sort when done. \n\nSee MIDI_SetCC, MIDI_GetCCShape","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer evtidx","description":""},{"identifier":"optional boolean selectedIn","description":""},{"identifier":"optional boolean mutedIn","description":""},{"identifier":"optional number ppqposIn","description":""},{"identifier":"optional string msg","description":""},{"identifier":"optional boolean noSortIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_SetEvt","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"evtidx","type":"integer"},{"isOptional":true,"type":"boolean","identifier":"selectedIn"},{"isOptional":true,"type":"boolean","identifier":"mutedIn"},{"isOptional":true,"type":"number","identifier":"ppqposIn"},{"isOptional":true,"type":"string","identifier":"msg"},{"isOptional":true,"type":"boolean","identifier":"noSortIn"}]},"eel":{"method_name":"MIDI_SetEvt","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"evtidx"},{"identifier":"selectedIn","modifier":"optional","type_name":"bool"},{"identifier":"mutedIn","modifier":"optional","type_name":"bool"},{"type_name":"optional","identifier":"ppqposIn"},{"type_name":"optional","identifier":"\"msg\""},{"identifier":"noSortIn","modifier":"optional","type_name":"bool"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.MIDI_SetEvt(MediaItem_Take take, integer evtidx, optional boolean selectedIn, optional boolean mutedIn, optional number ppqposIn, optional string msg, optional boolean noSortIn)","eel":"bool MIDI_SetEvt(MediaItem_Take take, int evtidx, optional bool selectedIn, optional bool mutedIn, optional ppqposIn, optional \"msg\", optional bool noSortIn)","python":"Boolean retval = RPR_MIDI_SetEvt(MediaItem_Take take, Int evtidx, const bool selectedInOptional, const bool mutedInOptional, const double ppqposInOptional, String msgOptional, Int msgOptional_sz, const bool noSortInOptional)","cpp":"bool MIDI_SetEvt(MediaItem_Take* take, int evtidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const char* msgOptional, int msgOptional_sz, const bool* noSortInOptional)"},"title":"MIDI_SetEvt","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Set MIDI event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem item","description":""},{"identifier":"number startQN","description":""},{"identifier":"number endQN","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_SetItemExtents","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"item","type":"MediaItem"},{"identifier":"startQN","type":"number"},{"identifier":"endQN","type":"number"}]},"eel":{"method_name":"MIDI_SetItemExtents","return_values":["bool"],"parameters":[{"type_name":"MediaItem","identifier":"item"},{"identifier":"startQN"},{"identifier":"endQN"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.MIDI_SetItemExtents(MediaItem item, number startQN, number endQN)","eel":"bool MIDI_SetItemExtents(MediaItem item, startQN, endQN)","python":"Boolean retval = RPR_MIDI_SetItemExtents(MediaItem item, Float startQN, Float endQN)","cpp":"bool MIDI_SetItemExtents(MediaItem* item, double startQN, double endQN)"},"title":"MIDI_SetItemExtents","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Set the start/end positions of a media item that contains a MIDI take.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":10,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer noteidx","description":""},{"identifier":"optional boolean selectedIn","description":""},{"identifier":"optional boolean mutedIn","description":""},{"identifier":"optional number startppqposIn","description":""},{"identifier":"optional number endppqposIn","description":""},{"identifier":"optional integer chanIn","description":""},{"identifier":"optional integer pitchIn","description":""},{"identifier":"optional integer velIn","description":""},{"identifier":"optional boolean noSortIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_SetNote","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"noteidx","type":"integer"},{"isOptional":true,"type":"boolean","identifier":"selectedIn"},{"isOptional":true,"type":"boolean","identifier":"mutedIn"},{"isOptional":true,"type":"number","identifier":"startppqposIn"},{"isOptional":true,"type":"number","identifier":"endppqposIn"},{"isOptional":true,"type":"integer","identifier":"chanIn"},{"isOptional":true,"type":"integer","identifier":"pitchIn"},{"isOptional":true,"type":"integer","identifier":"velIn"},{"isOptional":true,"type":"boolean","identifier":"noSortIn"}]},"eel":{"method_name":"MIDI_SetNote","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"noteidx"},{"identifier":"selectedIn","modifier":"optional","type_name":"bool"},{"identifier":"mutedIn","modifier":"optional","type_name":"bool"},{"type_name":"optional","identifier":"startppqposIn"},{"type_name":"optional","identifier":"endppqposIn"},{"identifier":"chanIn","modifier":"optional","type_name":"int"},{"identifier":"pitchIn","modifier":"optional","type_name":"int"},{"identifier":"velIn","modifier":"optional","type_name":"int"},{"identifier":"noSortIn","modifier":"optional","type_name":"bool"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.MIDI_SetNote(MediaItem_Take take, integer noteidx, optional boolean selectedIn, optional boolean mutedIn, optional number startppqposIn, optional number endppqposIn, optional integer chanIn, optional integer pitchIn, optional integer velIn, optional boolean noSortIn)","eel":"bool MIDI_SetNote(MediaItem_Take take, int noteidx, optional bool selectedIn, optional bool mutedIn, optional startppqposIn, optional endppqposIn, optional int chanIn, optional int pitchIn, optional int velIn, optional bool noSortIn)","python":"Boolean retval = RPR_MIDI_SetNote(MediaItem_Take take, Int noteidx, const bool selectedInOptional, const bool mutedInOptional, const double startppqposInOptional, const double endppqposInOptional, const int chanInOptional, const int pitchInOptional, const int velInOptional, const bool noSortInOptional)","cpp":"bool MIDI_SetNote(MediaItem_Take* take, int noteidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* startppqposInOptional, const double* endppqposInOptional, const int* chanInOptional, const int* pitchInOptional, const int* velInOptional, const bool* noSortInOptional)"},"title":"MIDI_SetNote","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Set MIDI note properties. Properties passed as NULL (or negative values) will not be set. Set noSort if setting multiple events, then call MIDI_Sort when done. Setting multiple note start positions at once is done more safely by deleting and re-inserting the notes.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer textsyxevtidx","description":""},{"identifier":"optional boolean selectedIn","description":""},{"identifier":"optional boolean mutedIn","description":""},{"identifier":"optional number ppqposIn","description":""},{"identifier":"optional integer typeIn","description":""},{"identifier":"optional string msg","description":""},{"identifier":"optional boolean noSortIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_SetTextSysexEvt","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"textsyxevtidx","type":"integer"},{"isOptional":true,"type":"boolean","identifier":"selectedIn"},{"isOptional":true,"type":"boolean","identifier":"mutedIn"},{"isOptional":true,"type":"number","identifier":"ppqposIn"},{"isOptional":true,"type":"integer","identifier":"typeIn"},{"isOptional":true,"type":"string","identifier":"msg"},{"isOptional":true,"type":"boolean","identifier":"noSortIn"}]},"eel":{"method_name":"MIDI_SetTextSysexEvt","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"textsyxevtidx"},{"identifier":"selectedIn","modifier":"optional","type_name":"bool"},{"identifier":"mutedIn","modifier":"optional","type_name":"bool"},{"type_name":"optional","identifier":"ppqposIn"},{"identifier":"typeIn","modifier":"optional","type_name":"int"},{"type_name":"optional","identifier":"\"msg\""},{"identifier":"noSortIn","modifier":"optional","type_name":"bool"}]}},"requires":{"Reaper":"6.00"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.MIDI_SetTextSysexEvt(MediaItem_Take take, integer textsyxevtidx, optional boolean selectedIn, optional boolean mutedIn, optional number ppqposIn, optional integer typeIn, optional string msg, optional boolean noSortIn)","eel":"bool MIDI_SetTextSysexEvt(MediaItem_Take take, int textsyxevtidx, optional bool selectedIn, optional bool mutedIn, optional ppqposIn, optional int typeIn, optional \"msg\", optional bool noSortIn)","python":"Boolean retval = RPR_MIDI_SetTextSysexEvt(MediaItem_Take take, Int textsyxevtidx, const bool selectedInOptional, const bool mutedInOptional, const double ppqposInOptional, const int typeInOptional, String msgOptional, Int msgOptional_sz, const bool noSortInOptional)","cpp":"bool MIDI_SetTextSysexEvt(MediaItem_Take* take, int textsyxevtidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const int* typeInOptional, const char* msgOptional, int msgOptional_sz, const bool* noSortInOptional)"},"title":"MIDI_SetTextSysexEvt","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Set MIDI text or sysex event properties. Properties passed as NULL will not be set. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event. set noSort if setting multiple events, then call MIDI_Sort when done.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDI_Sort","return_values":[],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"return_values":["MIDI_Sort"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.MIDI_Sort(MediaItem_Take take)","eel":"MIDI_Sort(MediaItem_Take take)","python":"RPR_MIDI_Sort(MediaItem_Take take)","cpp":"void MIDI_Sort(MediaItem_Take* take)"},"title":"MIDI_Sort","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sort MIDI events after multiple calls to MIDI_SetNote, MIDI_SetCC, etc.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"HWND midieditor","description":""},{"identifier":"integer takeindex","description":""},{"identifier":"boolean editable_only","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDIEditor_EnumTakes","return_values":[{"identifier":"take","type":"MediaItem_Take"}],"parameters":[{"identifier":"midieditor","type":"HWND"},{"identifier":"takeindex","type":"integer"},{"identifier":"editable_only","type":"boolean"}]},"eel":{"method_name":"MIDIEditor_EnumTakes","return_values":["MediaItem_Take"],"parameters":[{"type_name":"HWND","identifier":"midieditor"},{"type_name":"int","identifier":"takeindex"},{"type_name":"bool","identifier":"editable_only"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"functioncall":{"lua":"MediaItem_Take take = reaper.MIDIEditor_EnumTakes(HWND midieditor, integer takeindex, boolean editable_only)","eel":"MediaItem_Take MIDIEditor_EnumTakes(HWND midieditor, int takeindex, bool editable_only)","python":"MediaItem_Take take = RPR_MIDIEditor_EnumTakes(HWND midieditor, Int takeindex, Boolean editable_only)","cpp":"MediaItem_Take* MIDIEditor_EnumTakes(HWND midieditor, int takeindex, bool editable_only)"},"title":"MIDIEditor_EnumTakes","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"list the takes that are currently being edited in this MIDI editor, starting with the active take. \n\nSee MIDIEditor_GetTake","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.MIDIEditor_GetActive","return_values":[{"identifier":"hwnd","type":"HWND"}],"parameters":[]},"eel":{"method_name":"MIDIEditor_GetActive","return_values":["HWND"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"HWND hwnd","description":""}],"prog_lang":"*"},"functioncall":{"lua":"HWND hwnd = reaper.MIDIEditor_GetActive()","eel":"HWND MIDIEditor_GetActive()","python":"HWND hwnd = RPR_MIDIEditor_GetActive()","cpp":"HWND MIDIEditor_GetActive()"},"title":"MIDIEditor_GetActive","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"get a pointer to the focused MIDI editor window\nsee MIDIEditor_GetMode, MIDIEditor_OnCommand","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"HWND midieditor","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDIEditor_GetMode","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"midieditor","type":"HWND"}]},"eel":{"method_name":"MIDIEditor_GetMode","return_values":["int"],"parameters":[{"type_name":"HWND","identifier":"midieditor"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.MIDIEditor_GetMode(HWND midieditor)","eel":"int MIDIEditor_GetMode(HWND midieditor)","python":"Int retval = RPR_MIDIEditor_GetMode(HWND midieditor)","cpp":"int MIDIEditor_GetMode(HWND midieditor)"},"title":"MIDIEditor_GetMode","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"get the mode of a MIDI editor (0=piano roll, 1=event list, -1=invalid editor)\nsee MIDIEditor_GetActive, MIDIEditor_OnCommand","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"HWND midieditor","description":""},{"identifier":"string setting_desc","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDIEditor_GetSetting_int","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"midieditor","type":"HWND"},{"identifier":"setting_desc","type":"string"}]},"eel":{"method_name":"MIDIEditor_GetSetting_int","return_values":["int"],"parameters":[{"type_name":"HWND","identifier":"midieditor"},{"identifier":"\"setting_desc\""}]}},"requires":{"Reaper":"6.41"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.MIDIEditor_GetSetting_int(HWND midieditor, string setting_desc)","eel":"int MIDIEditor_GetSetting_int(HWND midieditor, \"setting_desc\")","python":"Int retval = RPR_MIDIEditor_GetSetting_int(HWND midieditor, String setting_desc)","cpp":"int MIDIEditor_GetSetting_int(HWND midieditor, const char* setting_desc)"},"title":"MIDIEditor_GetSetting_int","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get settings from a MIDI editor. setting_desc can be:\n    snap_enabled: returns 0 or 1\n    active_note_row: returns 0-127\n    last_clicked_cc_lane: \n        returns 0-127=CC, \n                0x100|(0-31)=14-bit CC, \n                0x200=velocity, \n                0x201=pitch, \n                0x202=program, \n                0x203=channel pressure, \n                0x204=bank/program select, \n                0x205=text, \n                0x206=sysex, \n                0x207=off velocity, \n                0x208=notation events, \n                0x210=media item lane\n    default_note_vel: returns 0-127\n    default_note_chan: returns 0-15\n    default_note_len: returns default length in MIDI ticks\n    scale_enabled: returns 0-1\n    scale_root: returns 0-12 (0=C) \n    list_cnt: if viewing list view, returns event count  \n    if setting_desc is unsupported, the function returns -1.\n    See MIDIEditor_SetSetting_int, MIDIEditor_GetActive, MIDIEditor_GetSetting_str","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"HWND midieditor","description":""},{"identifier":"string setting_desc","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDIEditor_GetSetting_str","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"midieditor","type":"HWND"},{"identifier":"setting_desc","type":"string"}]},"eel":{"method_name":"MIDIEditor_GetSetting_str","return_values":["bool"],"parameters":[{"type_name":"HWND","identifier":"midieditor"},{"identifier":"\"setting_desc\""},{"identifier":"#buf"}]}},"requires":{"Reaper":"6.41"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string buf = reaper.MIDIEditor_GetSetting_str(HWND midieditor, string setting_desc)","eel":"bool MIDIEditor_GetSetting_str(HWND midieditor, \"setting_desc\", #buf)","python":"(Boolean retval, HWND midieditor, String setting_desc, String bufOut, Int bufOut_sz) = RPR_MIDIEditor_GetSetting_str(midieditor, setting_desc, bufOut, bufOut_sz)","cpp":"bool MIDIEditor_GetSetting_str(HWND midieditor, const char* setting_desc, char* bufOut, int bufOut_sz)"},"title":"MIDIEditor_GetSetting_str","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get settings from a MIDI editor. setting_desc can be:\nlast_clicked_cc_lane: returns text description (\"velocity\", \"pitch\", etc)\nscale: returns the scale record, for example \"102034050607\" for a major scale\nlist_X: if viewing list view, returns string describing event at row X (0-based). String will have a list of key=value pairs, e.g. 'pos=4.0 len=4.0 offvel=127 msg=90317F'. pos/len times are in QN, len/offvel may not be present if event is not a note. other keys which may be present include pos_pq/len_pq, sel, mute, ccval14, ccshape, ccbeztension.\n\nif setting_desc is unsupported, the function returns false.\n\nSee MIDIEditor_GetActive, MIDIEditor_GetSetting_int","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"HWND midieditor","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDIEditor_GetTake","return_values":[{"identifier":"take","type":"MediaItem_Take"}],"parameters":[{"identifier":"midieditor","type":"HWND"}]},"eel":{"method_name":"MIDIEditor_GetTake","return_values":["MediaItem_Take"],"parameters":[{"type_name":"HWND","identifier":"midieditor"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"functioncall":{"lua":"MediaItem_Take take = reaper.MIDIEditor_GetTake(HWND midieditor)","eel":"MediaItem_Take MIDIEditor_GetTake(HWND midieditor)","python":"MediaItem_Take take = RPR_MIDIEditor_GetTake(HWND midieditor)","cpp":"MediaItem_Take* MIDIEditor_GetTake(HWND midieditor)"},"title":"MIDIEditor_GetTake","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"get the take that is currently being edited in this MIDI editor\n\nsee MIDIEditor_EnumTakes","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer command_id","description":""},{"identifier":"boolean islistviewcommand","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDIEditor_LastFocused_OnCommand","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"command_id","type":"integer"},{"identifier":"islistviewcommand","type":"boolean"}]},"eel":{"method_name":"MIDIEditor_LastFocused_OnCommand","return_values":["bool"],"parameters":[{"type_name":"int","identifier":"command_id"},{"type_name":"bool","identifier":"islistviewcommand"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.MIDIEditor_LastFocused_OnCommand(integer command_id, boolean islistviewcommand)","eel":"bool MIDIEditor_LastFocused_OnCommand(int command_id, bool islistviewcommand)","python":"Boolean retval = RPR_MIDIEditor_LastFocused_OnCommand(Int command_id, Boolean islistviewcommand)","cpp":"bool MIDIEditor_LastFocused_OnCommand(int command_id, bool islistviewcommand)"},"title":"MIDIEditor_LastFocused_OnCommand","chapters":["Api-Helper-Functions","Actions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Send an action command to the last focused MIDI editor. \n\nReturns false if there is no MIDI editor open, or if the view mode (piano roll or event list) does not match the input.\n\nsee MIDIEditor_OnCommand","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"HWND midieditor","description":""},{"identifier":"integer command_id","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDIEditor_OnCommand","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"midieditor","type":"HWND"},{"identifier":"command_id","type":"integer"}]},"eel":{"method_name":"MIDIEditor_OnCommand","return_values":["bool"],"parameters":[{"type_name":"HWND","identifier":"midieditor"},{"type_name":"int","identifier":"command_id"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.MIDIEditor_OnCommand(HWND midieditor, integer command_id)","eel":"bool MIDIEditor_OnCommand(HWND midieditor, int command_id)","python":"Boolean retval = RPR_MIDIEditor_OnCommand(HWND midieditor, Int command_id)","cpp":"bool MIDIEditor_OnCommand(HWND midieditor, int command_id)"},"title":"MIDIEditor_OnCommand","chapters":["Api-Helper-Functions","Actions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Send an action command to a MIDI editor. \n\nReturns false if the supplied MIDI editor pointer is not valid (not an open MIDI editor).\n\nsee MIDIEditor_GetActive, MIDIEditor_LastFocused_OnCommand","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"HWND midieditor","description":""},{"identifier":"string setting_desc","description":""},{"identifier":"integer setting","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MIDIEditor_SetSetting_int","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"midieditor","type":"HWND"},{"identifier":"setting_desc","type":"string"},{"identifier":"setting","type":"integer"}]},"eel":{"method_name":"MIDIEditor_SetSetting_int","return_values":["bool"],"parameters":[{"type_name":"HWND","identifier":"midieditor"},{"identifier":"\"setting_desc\""},{"type_name":"int","identifier":"setting"}]}},"requires":{"Reaper":"5.975"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.MIDIEditor_SetSetting_int(HWND midieditor, string setting_desc, integer setting)","eel":"bool MIDIEditor_SetSetting_int(HWND midieditor, \"setting_desc\", int setting)","python":"Boolean retval = RPR_MIDIEditor_SetSetting_int(HWND midieditor, String setting_desc, Int setting)","cpp":"bool MIDIEditor_SetSetting_int(HWND midieditor, const char* setting_desc, int setting)"},"title":"MIDIEditor_SetSetting_int","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set settings for a MIDI editor. setting_desc can be:\nactive_note_row: 0-127\nSee MIDIEditor_GetSetting_int","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string strNeed64","description":"just set this to \"\""},{"identifier":"number pan","description":"the pan-number which shall be converted to the panstring; valid numbers are -1.0 to 1.0 even if you can set higher ones"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.mkpanstr","return_values":[{"identifier":"strNeed64","type":"string"}],"parameters":[{"identifier":"strNeed64","type":"string"},{"identifier":"pan","type":"number"}]},"eel":{"return_values":["mkpanstr"],"parameters":[{"identifier":"#strNeed64"},{"identifier":"pan"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string strNeed64","description":"the converted panstring, from -100% over center to 100%"}],"prog_lang":"*"},"functioncall":{"lua":"string strNeed64 = reaper.mkpanstr(string strNeed64, number pan)","eel":"mkpanstr(#strNeed64, pan)","python":"(String strNeed64, Float pan) = RPR_mkpanstr(strNeed64, pan)","cpp":"void mkpanstr(char* strNeed64, double pan)"},"title":"mkpanstr","chapters":["Api-Helper-Functions","Value Conversion"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Converts a double-number to its panstr-equivalent.\n\nSee parsepanstr for its counterpart. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"string strNeed64","description":"just set this to \"\""},{"identifier":"number vol","description":"the volume-value, which you want to convert into db"},{"identifier":"number pan","description":"the pan-value, which you want to convert into its percentage value; valid -1.0 to 1.0"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.mkvolpanstr","return_values":[{"identifier":"strNeed64","type":"string"}],"parameters":[{"identifier":"strNeed64","type":"string"},{"identifier":"vol","type":"number"},{"identifier":"pan","type":"number"}]},"eel":{"return_values":["mkvolpanstr"],"parameters":[{"identifier":"#strNeed64"},{"identifier":"vol"},{"identifier":"pan"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string strNeed64","description":"the converted volpan-string"}],"prog_lang":"*"},"functioncall":{"lua":"string strNeed64 = reaper.mkvolpanstr(string strNeed64, number vol, number pan)","eel":"mkvolpanstr(#strNeed64, vol, pan)","python":"(String strNeed64, Float vol, Float pan) = RPR_mkvolpanstr(strNeed64, vol, pan)","cpp":"void mkvolpanstr(char* strNeed64, double vol, double pan)"},"title":"mkvolpanstr","chapters":["Api-Helper-Functions","Value Conversion"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"creates a vol-pan-string, which holds a readable representation of the vol and pan-values.\n\nThe format is like \"+6.02db center\" or \"+inf +80R\", etc\n\nsee [mkpanstr](#mkpanstr) and [mkvolstr](#mkvolstr) for the individual pan/vol-string functions.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string strNeed64","description":"just set this to \"\""},{"identifier":"number vol","description":"the volume-value, which shall be converted; 0, -inf; 1, 0dB; 1.412, +3dB"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.mkvolstr","return_values":[{"identifier":"strNeed64","type":"string"}],"parameters":[{"identifier":"strNeed64","type":"string"},{"identifier":"vol","type":"number"}]},"eel":{"return_values":["mkvolstr"],"parameters":[{"identifier":"#strNeed64"},{"identifier":"vol"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string strNeed64","description":"the converted vol-string"}],"prog_lang":"*"},"functioncall":{"lua":"string strNeed64 = reaper.mkvolstr(string strNeed64, number vol)","eel":"mkvolstr(#strNeed64, vol)","python":"(String strNeed64, Float vol) = RPR_mkvolstr(strNeed64, vol)","cpp":"void mkvolstr(char* strNeed64, double vol)"},"title":"mkvolstr","chapters":["Api-Helper-Functions","Value Conversion"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Converts a volume-value into a string-representation of it as dB.\n\nNote: Unlike panstr, there is no parsevolstr-string-function available!","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","edit","cursor","move"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number adjamt","description":"move of edit cursor by seconds, relative from the current position. positive-values=forward, negative values=backwards"},{"identifier":"boolean dosel","description":"true, create selection from old edit-cursor-position to the new position; false, just move the edit cursor"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MoveEditCursor","return_values":[],"parameters":[{"identifier":"adjamt","type":"number"},{"identifier":"dosel","type":"boolean"}]},"eel":{"return_values":["MoveEditCursor"],"parameters":[{"identifier":"adjamt"},{"type_name":"bool","identifier":"dosel"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.MoveEditCursor(number adjamt, boolean dosel)","eel":"MoveEditCursor(adjamt, bool dosel)","python":"RPR_MoveEditCursor(Float adjamt, Boolean dosel)","cpp":"void MoveEditCursor(double adjamt, bool dosel)"},"title":"MoveEditCursor","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Moves the Edit Cursor.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["mediaitemmanagement","move","item","track"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem item","description":"the MediaItem, that shall be moved"},{"identifier":"MediaTrack desttr","description":"the MediaTrack, to which the MediaItem shall be moved to"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MoveMediaItemToTrack","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"item","type":"MediaItem"},{"identifier":"desttr","type":"MediaTrack"}]},"eel":{"method_name":"MoveMediaItemToTrack","return_values":["bool"],"parameters":[{"type_name":"MediaItem","identifier":"item"},{"type_name":"MediaTrack","identifier":"desttr"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, if move succeeded; false, if not"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.MoveMediaItemToTrack(MediaItem item, MediaTrack desttr)","eel":"bool MoveMediaItemToTrack(MediaItem item, MediaTrack desttr)","python":"Boolean retval = RPR_MoveMediaItemToTrack(MediaItem item, MediaTrack desttr)","cpp":"bool MoveMediaItemToTrack(MediaItem* item, MediaTrack* desttr)"},"title":"MoveMediaItemToTrack","chapters":["Mediaitem Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Moves a MediaItem-object to a specific MediaTrack.\n\nCall [UpdateArrange](#UpdateArrange) to update the arrangeview after that.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","mute","tracks","set"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean mute","description":"true, mutes all tracks; false, unmutes all tracks"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MuteAllTracks","return_values":[],"parameters":[{"identifier":"mute","type":"boolean"}]},"eel":{"return_values":["MuteAllTracks"],"parameters":[{"type_name":"bool","identifier":"mute"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.MuteAllTracks(boolean mute)","eel":"MuteAllTracks(bool mute)","python":"RPR_MuteAllTracks(Boolean mute)","cpp":"void MuteAllTracks(bool mute)"},"title":"MuteAllTracks","chapters":["Track Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Mutes all tracks","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["userinterface","viewport","multi monitor","get","workarea","full screen resolution"],"params":{"markup_type":"plaintext","param_count":9,"entries":[{"identifier":"integer r.left","description":"left coordinate of the rectangle"},{"identifier":"integer r.top","description":"top coordinate of the rectangle"},{"identifier":"integer r.right","description":"right coordinate of the rectangle"},{"identifier":"integer r.bot","description":"bottom coordinate of the rectangle"},{"identifier":"integer sr.left","description":"left coordinate of the rectangle in multimonitor usecases"},{"identifier":"integer sr.top","description":"top coordinate of the rectangle in multimonitor usecases"},{"identifier":"integer sr.right","description":"right coordinate of the rectangle in multimonitor usecases"},{"identifier":"integer sr.bot","description":"bottom coordinate of the rectangle in mutlimonitor usecases"},{"identifier":"boolean wantWorkArea","description":"true, returns workspace only; false, full monitor coordinates of the returned viewport"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.my_getViewport","return_values":[{"identifier":"left","type":"integer"},{"identifier":"top","type":"integer"},{"identifier":"right","type":"integer"},{"identifier":"bottom","type":"integer"}],"parameters":[{"identifier":"r.left","type":"integer"},{"identifier":"r.top","type":"integer"},{"identifier":"r.right","type":"integer"},{"identifier":"r.bot","type":"integer"},{"identifier":"sr.left","type":"integer"},{"identifier":"sr.top","type":"integer"},{"identifier":"sr.right","type":"integer"},{"identifier":"sr.bot","type":"integer"},{"identifier":"wantWorkArea","type":"boolean"}]},"eel":{"return_values":["my_getViewport"],"parameters":[{"type_name":"int","identifier":"&r.left"},{"type_name":"int","identifier":"&r.top"},{"type_name":"int","identifier":"&r.right"},{"type_name":"int","identifier":"&r.bot"},{"type_name":"int","identifier":"sr.left"},{"type_name":"int","identifier":"sr.top"},{"type_name":"int","identifier":"sr.right"},{"type_name":"int","identifier":"sr.bot"},{"type_name":"bool","identifier":"wantWorkArea"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"integer left","description":"left coordinate of the returned viewport"},{"identifier":"integer top","description":"top coordinate of the returned viewport"},{"identifier":"integer right","description":"right coordinate of the returned viewport"},{"identifier":"integer bottom","description":"bottom coordinate of the returned viewport"}],"prog_lang":"*"},"functioncall":{"lua":"integer left, integer top, integer right, integer bottom = reaper.my_getViewport(integer r.left, integer r.top, integer r.right, integer r.bot, integer sr.left, integer sr.top, integer sr.right, integer sr.bot, boolean wantWorkArea)","eel":"my_getViewport(int &r.left, int &r.top, int &r.right, int &r.bot, int sr.left, int sr.top, int sr.right, int sr.bot, bool wantWorkArea)","python":"RPR_my_getViewport(RECT r, const RECT sr, Boolean wantWorkArea)","cpp":"void my_getViewport(RECT* r, const RECT* sr, bool wantWorkArea)"},"title":"my_getViewport","chapters":["User Interface","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"With r.??? and sr.??? parameters, you can define coordinates of a rectangle. \nThe function will return the left/top/right/bottom coordinates of the viewport that that rectangle is on/closest to.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","command","id","actioncommandid","lookup"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string command_name","description":"the ActionCommandID of the script/action, whose command-id number you want. Must start with _, eg. \"SWS_ABOUT\" -> \"_SWS_ABOUT\""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.NamedCommandLookup","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"command_name","type":"string"}]},"eel":{"method_name":"NamedCommandLookup","return_values":["int"],"parameters":[{"identifier":"\"command_name\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the command-id-number of the script/action, which can be used to e.g. run the action, toggle actions, refresh toolbars, etc."}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.NamedCommandLookup(string command_name)","eel":"int NamedCommandLookup(\"command_name\")","python":"Int retval = RPR_NamedCommandLookup(String command_name)","cpp":"int NamedCommandLookup(const char* command_name)"},"title":"NamedCommandLookup","chapters":["Api-Helper-Functions","Actions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Get the command ID number for named command that was registered by an extension such as \"\\_SWS\\_ABOUT\" or \"\\_113088d11ae641c193a2b7ede3041ad5\" for a ReaScript or a custom action.\n\nsee [Main\\_OnCommand](#Main_OnCommand) for executing actions with command-ID-numbers.\n\nNote: never assume that this command-id is valid across multiple installations. That means, the command-id returned by NamedCommandLookup can be different for the same \\_ActionCommandID between different Reaper-installations.\nSo when you want to run a command, using the command-id, ALWAYS get it using NamedCommandLookup in your script first, and never store it somewhere to be used later on.\nOtherwise, you risk an action not running.\nThis note is important for custom-actions/scripts/actions from extensions.\nThe command-ids from Reaper's own actions will always stay the same.\nSo rule of thumb: if an action has an action\\_command\\_id starting with an underscore \\_, always use NamedCommandLookup with it.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","pause","play","rec","toggle"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.OnPauseButton","return_values":[],"parameters":[]},"eel":{"return_values":["OnPauseButton"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.OnPauseButton()","eel":"OnPauseButton()","python":"RPR_OnPauseButton()","cpp":"void OnPauseButton()"},"title":"OnPauseButton","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Toggles pause/play during play or pause/rec during recording in the current project.\nWhen stopped, it will start paused play.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","pause","play","rec","toggle","project"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.OnPauseButtonEx","return_values":[],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"return_values":["OnPauseButtonEx"],"parameters":[{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.OnPauseButtonEx(ReaProject proj)","eel":"OnPauseButtonEx(ReaProject proj)","python":"RPR_OnPauseButtonEx(ReaProject proj)","cpp":"void OnPauseButtonEx(ReaProject* proj)"},"title":"OnPauseButtonEx","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Toggles pause/play during play or pause/rec during recording in a specific project.\nWhen stopped, it will start paused play.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","play","editcursor","start"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.OnPlayButton","return_values":[],"parameters":[]},"eel":{"return_values":["OnPlayButton"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.OnPlayButton()","eel":"OnPlayButton()","python":"RPR_OnPlayButton()","cpp":"void OnPlayButton()"},"title":"OnPlayButton","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Starts playing at edit-cursor. Will stop recording, when executed during recording.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","play","editcursor","start","project"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.OnPlayButtonEx","return_values":[],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"return_values":["OnPlayButtonEx"],"parameters":[{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.OnPlayButtonEx(ReaProject proj)","eel":"OnPlayButtonEx(ReaProject proj)","python":"RPR_OnPlayButtonEx(ReaProject proj)","cpp":"void OnPlayButtonEx(ReaProject* proj)"},"title":"OnPlayButtonEx","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Starts playing at edit-cursor. Will stop recording, when executed during recording.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","stop","play","recording"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.OnStopButton","return_values":[],"parameters":[]},"eel":{"return_values":["OnStopButton"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.OnStopButton()","eel":"OnStopButton()","python":"RPR_OnStopButton()","cpp":"void OnStopButton()"},"title":"OnStopButton","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Stops playing/recording.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","stop","play","recording"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.OnStopButtonEx","return_values":[],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"return_values":["OnStopButtonEx"],"parameters":[{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.OnStopButtonEx(ReaProject proj)","eel":"OnStopButtonEx(ReaProject proj)","python":"RPR_OnStopButtonEx(ReaProject proj)","cpp":"void OnStopButtonEx(ReaProject* proj)"},"title":"OnStopButtonEx","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Stops playing/recording.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["userinterface","theme","load","open","filename"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string fn","description":"the path+filename of the color-theme-file, usually with the \".ReaperTheme\"-extension"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.OpenColorThemeFile","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"fn","type":"string"}]},"eel":{"method_name":"OpenColorThemeFile","return_values":["bool"],"parameters":[{"identifier":"\"fn\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, changing theme worked; false, changing theme didn't work"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.OpenColorThemeFile(string fn)","eel":"bool OpenColorThemeFile(\"fn\")","python":"Boolean retval = RPR_OpenColorThemeFile(String fn)","cpp":"bool OpenColorThemeFile(const char* fn)"},"title":"OpenColorThemeFile","chapters":["Theme Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Open a different installed theme.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["userinterface","media explorer","open","filename","audio","play"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string mediafn","description":"the filename/folder, to be opened with the Media Explorer"},{"identifier":"boolean play","description":"true, start/toggle playing immediately; false, just select file without playing"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.OpenMediaExplorer","return_values":[{"identifier":"hwnd","type":"HWND"}],"parameters":[{"identifier":"mediafn","type":"string"},{"identifier":"play","type":"boolean"}]},"eel":{"method_name":"OpenMediaExplorer","return_values":["HWND"],"parameters":[{"identifier":"\"mediafn\""},{"type_name":"bool","identifier":"play"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"HWND hwnd","description":"the window of the Media Explorer"}],"prog_lang":"*"},"functioncall":{"lua":"HWND hwnd = reaper.OpenMediaExplorer(string mediafn, boolean play)","eel":"HWND OpenMediaExplorer(\"mediafn\", bool play)","python":"HWND hwnd = RPR_OpenMediaExplorer(String mediafn, Boolean play)","cpp":"HWND OpenMediaExplorer(const char* mediafn, bool play)"},"title":"OpenMediaExplorer","chapters":["User Interface","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Opens mediafn in the Media Explorer.\n\nIf you just want to change folder in MediaExplorer, give it a path instead of a file and set play to false.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string message","description":"the osc-message, which shall be sent to Reaper"},{"identifier":"optional number valueIn","description":"a number, which can be sent to scripts who are started by the osc-message"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.OscLocalMessageToHost","return_values":[],"parameters":[{"identifier":"message","type":"string"},{"isOptional":true,"type":"number","identifier":"valueIn"}]},"eel":{"return_values":["OscLocalMessageToHost"],"parameters":[{"identifier":"\"message\""},{"type_name":"optional","identifier":"valueIn"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.OscLocalMessageToHost(string message, optional number valueIn)","eel":"OscLocalMessageToHost(\"message\", optional valueIn)","python":"RPR_OscLocalMessageToHost(String message, const double valueInOptional)","cpp":"void OscLocalMessageToHost(const char* message, const double* valueInOptional)"},"title":"OscLocalMessageToHost","chapters":["Input/Output Devices","Keyboard"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Send an OSC message directly to REAPER. The value argument may be NULL. The message will be matched against the default OSC patterns.\n\nThis is not broadcast outside of Reaper, so you can't control devices, plugins, etc with it!\n\nMessages sent via this function can be used for parameter-learn/modulation and as shortcuts for scripts.\nThe parameter valueIn can be retrieved with the returnvalue val of the function reaper.get_action_context, so sending values to a script is possible that way.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","timestring","hour","minute","second","millisecond","parse","convert","time"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string buf","description":"the timestring to convert (hh:mm:ss.sss). Each position of the time can be one digit only, means: \"1:2:3.4\" is valid. Milliseconds can be more than 3 digits. Hours, seconds, minutes with more than two digits will be converted correctly \"1:120\" will be converted to 180 seconds."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.parse_timestr","return_values":[{"identifier":"timestr","type":"number"}],"parameters":[{"identifier":"buf","type":"string"}]},"eel":{"method_name":"parse_timestr","return_values":["double"],"parameters":[{"identifier":"\"buf\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number timestr","description":"the converted time in seconds"}],"prog_lang":"*"},"functioncall":{"lua":"number timestr = reaper.parse_timestr(string buf)","eel":"double parse_timestr(\"buf\")","python":"Float retval = RPR_parse_timestr(String buf)","cpp":"double parse_timestr(const char* buf)"},"title":"parse_timestr","chapters":["Api-Helper-Functions","Value Conversion"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Parse hh:mm:ss.sss time string, return time in seconds (or 0.0 on error). See [parse\\_timestr_pos](#parse_timestr_pos), [parse\\_timestr_len](#parse_timestr_len).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"string buf","description":"the time-string, which shall be converted into its time in seconds"},{"identifier":"number offset","description":"??Buggy??"},{"identifier":"integer modeoverride","description":"the format, in which the timestring is"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.parse_timestr_len","return_values":[{"identifier":"converted_time","type":"number"}],"parameters":[{"identifier":"buf","type":"string"},{"identifier":"offset","type":"number"},{"identifier":"modeoverride","type":"integer"}]},"eel":{"method_name":"parse_timestr_len","return_values":["double"],"parameters":[{"identifier":"\"buf\""},{"identifier":"offset"},{"type_name":"int","identifier":"modeoverride"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number converted_time","description":"the time, as interpreted from the buf-parameter "}],"prog_lang":"*"},"functioncall":{"lua":"number converted_time = reaper.parse_timestr_len(string buf, number offset, integer modeoverride)","eel":"double parse_timestr_len(\"buf\", offset, int modeoverride)","python":"Float retval = RPR_parse_timestr_len(String buf, Float offset, Int modeoverride)","cpp":"double parse_timestr_len(const char* buf, double offset, int modeoverride)"},"title":"parse_timestr_len","chapters":["Api-Helper-Functions","Value Conversion"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Converts a time-string in its time-in-seconds-representation\n\ntime formatting mode overrides: -1=proj default.\n0, time\n1, measures.beats + time\n2, measures.beats\n3, seconds\n4, samples\n5, h:m:s:f","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","parse","timestring","measures","beats","samples","seconds","hours","time","minutes","seconds"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string buf","description":"the timestring to be parsed and converted into seconds"},{"identifier":"integer modeoverride","description":"the format of the timestring to parse and convert\n-1, proj default.\n0, time\n1, measures.beats + time\n2, measures.beats\n3, seconds\n4, samples\n5, h:m:s:f"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.parse_timestr_pos","return_values":[{"identifier":"converted_time","type":"number"}],"parameters":[{"identifier":"buf","type":"string"},{"identifier":"modeoverride","type":"integer"}]},"eel":{"method_name":"parse_timestr_pos","return_values":["double"],"parameters":[{"identifier":"\"buf\""},{"type_name":"int","identifier":"modeoverride"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number converted_time","description":"the converted time in seconds"}],"prog_lang":"*"},"functioncall":{"lua":"number converted_time = reaper.parse_timestr_pos(string buf, integer modeoverride)","eel":"double parse_timestr_pos(\"buf\", int modeoverride)","python":"Float retval = RPR_parse_timestr_pos(String buf, Int modeoverride)","cpp":"double parse_timestr_pos(const char* buf, int modeoverride)"},"title":"parse_timestr_pos","chapters":["Api-Helper-Functions","Value Conversion"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Parse time string and convert it into seconds.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string str","description":"a panstring, whose value you want to convert back to its double-equivalent"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.parsepanstr","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"str","type":"string"}]},"eel":{"method_name":"parsepanstr","return_values":["double"],"parameters":[{"identifier":"\"str\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":"the double-value of the panstring"}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.parsepanstr(string str)","eel":"double parsepanstr(\"str\")","python":"Float retval = RPR_parsepanstr(String str)","cpp":"double parsepanstr(const char* str)"},"title":"parsepanstr","chapters":["Api-Helper-Functions","Value Conversion"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Converts a string created by [mkpanstr](#mkpanstr) back to it's double-number.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer idx","description":"the index of the sink-format, beginning with 0"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.PCM_Sink_Enum","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"descstr","type":"string"}],"parameters":[{"identifier":"idx","type":"integer"}]},"eel":{"method_name":"PCM_Sink_Enum","return_values":["uint"],"parameters":[{"type_name":"int","identifier":"idx"},{"identifier":"#descstr"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":"a number, which represents the PCM-sink-format as an integer-representation\n2002876005 - WAV (evaw)\n1634297446 - AIFF (ffia)\n1769172768 - Audio CD Image (CUE/BIN format) ( osi)\n1684303904 - DDP ( pdd)\n1718378851 - FLAC (calf)\n1836069740 - MP3 (encoder by LAME project) (l3pm)\n1869047670 - OGG Vorbis (vggo)\n1332176723 - OGG Opus (SggO)\n1179012432 - Video (ffmpeg/libav encoder) (PMFF)\n1195984416 - Video (GIF) ( FIG)\n1279477280 - Video (LCF) ( FCL)\n2004250731 - WavPack lossless compressor (kpvw)\nmaybe others as well?"},{"identifier":"string descstr","description":"the PCM-sink-format\n0 - WAV\n1 - AIFF\n2 - Audio CD Image (CUE/BIN format)\n3 - DDP\n4 - FLAC\n5 - MP3 (encoder by LAME project)\n6 - OGG Vorbis\n7 - OGG Opus\n8 - Video (ffmpeg/libav encoder)\n9 - Video (GIF)\n10 - Video (LCF)\n11 - WavPack lossless compressor\nmaybe others as well?"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, string descstr = reaper.PCM_Sink_Enum(integer idx)","eel":"uint PCM_Sink_Enum(int idx, #descstr)","python":"Int retval = RPR_PCM_Sink_Enum(Int idx, String descstrOut)","cpp":"unsigned int PCM_Sink_Enum(int idx, const char** descstrOut)"},"title":"PCM_Sink_Enum","chapters":["Audio Management","PCM_Sink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"enumerates the available PCM-sink-formats, which means, the output-formats available in Reaper","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string data","description":"the format, whose extension-format you'd like to get:\nevaw, extension: \"wav\"\nffia, extension: \"aif\"\n osi, extension: \"cue\"\n pdd, extension: \"DAT\"\ncalf, extension: \"flac\"\nl3pm, extension: \"mp3\"\nvggo, extension: \"ogg\"\nSggO, extension: \"opus\"\nPMFF, extension: \"avi\"\n FIG, extension: \"gif\"\n FCL, extension: \"lcf\"\nkpvw, extension: \"wv\"\nmaybe others?"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.PCM_Sink_GetExtension","return_values":[{"identifier":"extension","type":"string"}],"parameters":[{"identifier":"data","type":"string"}]},"eel":{"method_name":"PCM_Sink_GetExtension","return_values":["bool"],"parameters":[{"identifier":"#retval"},{"identifier":"\"data\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string extension","description":"the extension returned by a certain format passed as parameter data"}],"prog_lang":"*"},"functioncall":{"lua":"string extension = reaper.PCM_Sink_GetExtension(string data)","eel":"bool PCM_Sink_GetExtension(#retval, \"data\")","python":"String retval = RPR_PCM_Sink_GetExtension(String data, Int data_sz)","cpp":"const char* PCM_Sink_GetExtension(const char* data, int data_sz)"},"title":"PCM_Sink_GetExtension","chapters":["Audio Management","PCM_Sink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"allows you to retrieve the file-extension of a certain PCM-sink/fileformat available.\n\nSee [PCM\\_Sink\\_Enum](#PCM_Sink_Enum) to enumerate available PCM-sink/fileformats.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string cfg","description":""},{"identifier":"HWND hwndParent","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.PCM_Sink_ShowConfig","return_values":[{"identifier":"hwnd","type":"HWND"}],"parameters":[{"identifier":"cfg","type":"string"},{"identifier":"hwndParent","type":"HWND"}]},"eel":{"method_name":"PCM_Sink_ShowConfig","return_values":["HWND"],"parameters":[{"identifier":"\"cfg\""},{"type_name":"HWND","identifier":"hwndParent"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"HWND hwnd","description":""}],"prog_lang":"*"},"functioncall":{"lua":"HWND hwnd = reaper.PCM_Sink_ShowConfig(string cfg, HWND hwndParent)","eel":"HWND PCM_Sink_ShowConfig(\"cfg\", HWND hwndParent)","python":"HWND hwnd = RPR_PCM_Sink_ShowConfig(String cfg, Int cfg_sz, HWND hwndParent)","cpp":"HWND PCM_Sink_ShowConfig(const char* cfg, int cfg_sz, HWND hwndParent)"},"title":"PCM_Sink_ShowConfig","chapters":["Audio Management","PCM_Sink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"PCM_source src","description":"the PCM_source, whose peaks you want to rebuild"},{"identifier":"integer mode","description":"sets the current \"phase\" of the peak-building\n0, starts the peak-building-process for this PCM_source(must be done once per PCM_Source)\n1, process the peak-building-process a bit further; do repeatedly until retval=0\n2, finish up peak-building for this PCM_source"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.PCM_Source_BuildPeaks","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"src","type":"PCM_source"},{"identifier":"mode","type":"integer"}]},"eel":{"method_name":"PCM_Source_BuildPeaks","return_values":["int"],"parameters":[{"type_name":"PCM_source","identifier":"src"},{"type_name":"int","identifier":"mode"}]}},"requires":{"Reaper":"6.35"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"a value that returns the current state of the peak-building-process, depending on parameter mode\nwhen mode=0\n  0, no peaks need to be built\n  1, peaks are building\nwhen mode=1\n  the percentage, how much of the peaks still need to be built\n  0, peak-building is finished\nwhen mode=2\n  0, peak building is successfully finished for this PCM_source"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.PCM_Source_BuildPeaks(PCM_source src, integer mode)","eel":"int PCM_Source_BuildPeaks(PCM_source src, int mode)","python":"Int retval = RPR_PCM_Source_BuildPeaks(PCM_source src, Int mode)","cpp":"int PCM_Source_BuildPeaks(PCM_source* src, int mode)"},"title":"PCM_Source_BuildPeaks","chapters":["Audio Management","Peaks/Waveforms"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"The process to build a new peak is to use the modes in a certain order:\n\nmode=0 starts the peak-building process(must be done once for this PCM\\_Source)\nreturned values are: 0, no peaks need to be built; 1, peaks are building\n\nmode=1 progresses the peak-building a bit each time you call PCM\\_Source\\_BuildPeaks with mode=1)\ncall it repeatedly until it's finished and returns value 0! \nreturned values are: how many percent the peak-building still needs to do until it is finished\n\nmode=2, this finishes up peak-building(call this, when mode=1 returns 0 and only then!)\nreturned value is 0\nRunning this before mode=1 returns 0 can cause broken peaks shown, until you click into a mediaitem that uses the PCM\\_Source.\n\nAfter all peak-building is done, use reaper.UpdateArrange() to show them.\n\nNote: All peaks of all takes that use a certain PCM\\_Source will be built!\n\nBuilding peaks for multiple PCM\\_Sources simultaneously is allowed.\n\n\nThe following code builds a peak very simply. This is the easiest implementation.\nHowever, if the PCM\\_Source, whose peaks need to be build, is a very long one, this can cause Reaper's UI to hang.\nSo use this on short PCM\\_Sources mainly.\n\n\n        -- Meo-Ada Mespotine - 19th of August 2021 - licensed under MIT-license\n        -- Rebuilt-Peak-Demo without defer, might cause hanging of Reaper's UI\n\n        -- Get Item 1, Take 1 and Source of Take 1\n        Item=reaper.GetMediaItem(0,0)\n        Take=reaper.GetMediaItemTake(Item,0)\n        Source=reaper.GetMediaItemTake_Source(Take)\n\n        -- start peak-building process(mode must be 0)\n        BuildStart=reaper.PCM_Source_BuildPeaks(Source, 0)\n\n        -- build peaks, until PCM_Source_BuildPeaks returns 0(mode must be 1)\n        while BuildProgress~=0 do\n          BuildProgress=reaper.PCM_Source_BuildPeaks(Source, 1)\n        end\n\n        -- when build-process is done, finish build-process(mode must be 2)\n        BuildXit=reaper.PCM_Source_BuildPeaks(Source, 2) \n\n        -- update the arrangeview, so the newly built peaks are shown\n        reaper.UpdateArrange()\n\n\nIf you want to build peaks for longer files and maybe showing a status-bar, you can use the following code.\nIt uses defer-loops instead of a while-loop.\nAs each ReaScript can have up to 1024 defer-loops running at the same time(more or less), I use each of \nthe 1024 defer-loops to build the peak a little further.\nThis will prevent hanging UI but might be a little slower than the while-approach.\n\n\n        -- Meo-Ada Mespotine - 19th of August 2021 - licensed under MIT-license\n        -- Rebuilt-Peak-Demo using defer, might be a little slower but doesn't \n        -- cause hanging of Reaper's UI\n        -- \n        -- set Build_Factor to speed up building process\n        -- allowed values: 0(slow) and 1024(fast)\n        -- Use 1024 only, if you don't have any other defer-loops running.\n        -- If you have other defer-loops that need to be run now, set\n        -- Build_Factor to Build_Factor minus number of running defer-loops.\n\n        -- the number of defer-loops used to go through the peak build-process\n        -- the higher, the faster.\n        -- if you use other defer-loops at the time as well, set this lower than 1024 or the other defer-loop will not run\n        Build_Factor=255\n\n        -- Get Item 1, Take 1 and Source of Take 1\n        Item=reaper.GetMediaItem(0,0)\n        Take=reaper.GetMediaItemTake(Item,0)\n        Source=reaper.GetMediaItemTake_Source(Take)\n\n        -- start build-process of the peak(mode=0)\n        BuildStart=reaper.PCM_Source_BuildPeaks(Source, 0)\n\n        function main()\n          -- build peaks, until PCM_Source_BuildPeaks returns 0(mode must be 1)\n          BuildProgress=reaper.PCM_Source_BuildPeaks(Source, 1)\n          \n          if BuildProgress~=0 then \n            -- if PCM_Source_BuildPeaks returned anything else than 0, defer this function again\n            reaper.defer(main) \n          else \n            -- if PCM_Source_BuildPeaks returned 0, finish building of the peaks(mode must be 2)\n            -- and update the arrangeview for the newly built peaks to show\n            BuildXit=reaper.PCM_Source_BuildPeaks(Source, 2) \n            reaper.UpdateArrange()\n          end\n        end\n\n        -- run multiple defer-instances of the peak-build-function\n        for i=0, Build_Factor do\n          main()\n        end\n\n\nThe following code combines both, defer-loops to cirvumvent possible hanging of Reaper's UI and a loop(for in this case) \nto build as many small peak-bits and pieces as possible within each defer-loop.\nYou can influence the ratio between using defer-loops and for-loops by setting Build\\_Factor(defer) and Build\\_Progression(for).\nExperiment, how high you can go with the number of for-loops, until Reaper's UI becomes laggy.\n\n\n        -- Meo-Ada Mespotine - 19th of August 2021 - licensed under MIT-license\n        -- Rebuilt-Peak-Demo defer and a regular for-loop combined, doesn't \n        -- cause hanging of Reaper's UI\n        -- \n        -- set Build_Factor to speed up building process\n        -- allowed values: 0(slow) and 1024(fast)\n        -- Use 1024 only, if you don't have any other defer-loops running.\n        -- If you have other defer-loops that need to be run now, set\n        -- Build_Factor to Build_Factor minus number of running defer-loops.\n\n        -- build-speed factors\n        Build_Factor=255     -- set to the number of defer-loops used\n        Build_Progression=20 -- set to the number of peak-building-bits built within each defer-loop\n\n        -- Get Item 1, Take 1 and Source of Take 1\n        Item=reaper.GetMediaItem(0,0)\n        Take=reaper.GetMediaItemTake(Item,0)\n        Source=reaper.GetMediaItemTake_Source(Take)\n\n        -- start build-process of the peak(mode=0)\n        BuildStart=reaper.PCM_Source_BuildPeaks(Source,0)\n\n        function main()\n          -- build peaks, until PCM_Source_BuildPeaks returns 0(mode must be 1)\n          -- do it for Build_Progression-times within this defer-loop.\n          for i=0, Build_Progression do\n            BuildProgress=reaper.PCM_Source_BuildPeaks(Source,1)\n          end\n          \n          if BuildProgress~=0 then \n            -- if PCM_Source_BuildPeaks returned anything else than 0, defer this function again\n            reaper.defer(main) \n          else \n            -- if PCM_Source_BuildPeaks returned 0, finish building of the peaks(mode must be 2)\n            -- and update the arrangeview for the newly built peaks to show\n            BuildXit=reaper.PCM_Source_BuildPeaks(Source,2) \n            reaper.UpdateArrange()\n          end\n        end\n\n\n        -- run multiple defer-instances of the peak-build-function\n        for i=0, Build_Factor do\n          main()\n        end","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string filename","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.PCM_Source_CreateFromFile","return_values":[{"identifier":"src","type":"PCM_source"}],"parameters":[{"identifier":"filename","type":"string"}]},"eel":{"method_name":"PCM_Source_CreateFromFile","return_values":["PCM_source"],"parameters":[{"identifier":"\"filename\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PCM_source src","description":""}],"prog_lang":"*"},"functioncall":{"lua":"PCM_source src = reaper.PCM_Source_CreateFromFile(string filename)","eel":"PCM_source PCM_Source_CreateFromFile(\"filename\")","python":"PCM_source src = RPR_PCM_Source_CreateFromFile(String filename)","cpp":"PCM_source* PCM_Source_CreateFromFile(const char* filename)"},"title":"PCM_Source_CreateFromFile","chapters":["Audio Management","Source Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"See [PCM\\_Source\\_CreateFromFileEx](#PCM_Source_CreateFromFileEx).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string filename","description":""},{"identifier":"boolean forcenoMidiImp","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.PCM_Source_CreateFromFileEx","return_values":[{"identifier":"src","type":"PCM_source"}],"parameters":[{"identifier":"filename","type":"string"},{"identifier":"forcenoMidiImp","type":"boolean"}]},"eel":{"method_name":"PCM_Source_CreateFromFileEx","return_values":["PCM_source"],"parameters":[{"identifier":"\"filename\""},{"type_name":"bool","identifier":"forcenoMidiImp"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PCM_source src","description":""}],"prog_lang":"*"},"functioncall":{"lua":"PCM_source src = reaper.PCM_Source_CreateFromFileEx(string filename, boolean forcenoMidiImp)","eel":"PCM_source PCM_Source_CreateFromFileEx(\"filename\", bool forcenoMidiImp)","python":"PCM_source src = RPR_PCM_Source_CreateFromFileEx(String filename, Boolean forcenoMidiImp)","cpp":"PCM_source* PCM_Source_CreateFromFileEx(const char* filename, bool forcenoMidiImp)"},"title":"PCM_Source_CreateFromFileEx","chapters":["Audio Management","Source Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Create a PCM_source from filename, and override pref of MIDI files being imported as in-project MIDI events.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string sourcetype","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.PCM_Source_CreateFromType","return_values":[{"identifier":"src","type":"PCM_source"}],"parameters":[{"identifier":"sourcetype","type":"string"}]},"eel":{"method_name":"PCM_Source_CreateFromType","return_values":["PCM_source"],"parameters":[{"identifier":"\"sourcetype\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PCM_source src","description":""}],"prog_lang":"*"},"functioncall":{"lua":"PCM_source src = reaper.PCM_Source_CreateFromType(string sourcetype)","eel":"PCM_source PCM_Source_CreateFromType(\"sourcetype\")","python":"PCM_source src = RPR_PCM_Source_CreateFromType(String sourcetype)","cpp":"PCM_source* PCM_Source_CreateFromType(const char* sourcetype)"},"title":"PCM_Source_CreateFromType","chapters":["Audio Management","Source Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Create a PCM_source from a \"type\" (use this if you're going to load its state via LoadState/ProjectStateContext).\nValid types include \"WAVE\", \"MIDI\", or whatever plug-ins define as well.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PCM_source src","description":"the source to be deleted"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.PCM_Source_Destroy","return_values":[],"parameters":[{"identifier":"src","type":"PCM_source"}]},"eel":{"return_values":["PCM_Source_Destroy"],"parameters":[{"type_name":"PCM_source","identifier":"src"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.PCM_Source_Destroy(PCM_source src)","eel":"PCM_Source_Destroy(PCM_source src)","python":"RPR_PCM_Source_Destroy(PCM_source src)","cpp":"void PCM_Source_Destroy(PCM_source* src)"},"title":"PCM_Source_Destroy","chapters":["Audio Management","Source Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Deletes a PCM_source -- be sure that you remove any project reference before deleting a source","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"PCM_source src","description":""},{"identifier":"number peakrate","description":""},{"identifier":"number starttime","description":""},{"identifier":"integer numchannels","description":""},{"identifier":"integer numsamplesperchannel","description":""},{"identifier":"integer want_extra_type","description":""},{"identifier":"reaper.array buf","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.PCM_Source_GetPeaks","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"src","type":"PCM_source"},{"identifier":"peakrate","type":"number"},{"identifier":"starttime","type":"number"},{"identifier":"numchannels","type":"integer"},{"identifier":"numsamplesperchannel","type":"integer"},{"identifier":"want_extra_type","type":"integer"},{"identifier":"buf","type":"reaper.array"}]},"eel":{"method_name":"PCM_Source_GetPeaks","return_values":["int"],"parameters":[{"type_name":"PCM_source","identifier":"src"},{"identifier":"peakrate"},{"identifier":"starttime"},{"type_name":"int","identifier":"numchannels"},{"type_name":"int","identifier":"numsamplesperchannel"},{"type_name":"int","identifier":"want_extra_type"},{"type_name":"buffer_ptr","identifier":"buf"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.PCM_Source_GetPeaks(PCM_source src, number peakrate, number starttime, integer numchannels, integer numsamplesperchannel, integer want_extra_type, reaper.array buf)","eel":"int PCM_Source_GetPeaks(PCM_source src, peakrate, starttime, int numchannels, int numsamplesperchannel, int want_extra_type, buffer_ptr buf)","python":"(Int retval, PCM_source src, Float peakrate, Float starttime, Int numchannels, Int numsamplesperchannel, Int want_extra_type, Float buf) = RPR_PCM_Source_GetPeaks(src, peakrate, starttime, numchannels, numsamplesperchannel, want_extra_type, buf)","cpp":"int PCM_Source_GetPeaks(PCM_source* src, double peakrate, double starttime, int numchannels, int numsamplesperchannel, int want_extra_type, double* buf)"},"title":"PCM_Source_GetPeaks","chapters":["Audio Management","Peaks/Waveforms"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). \nReturn value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). \nextra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PCM_Source src","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.PCM_Source_GetSectionInfo","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"offs","type":"number"},{"identifier":"len","type":"number"},{"identifier":"rev","type":"boolean"}],"parameters":[{"identifier":"src","type":"PCM_source"}]},"eel":{"method_name":"PCM_Source_GetSectionInfo","return_values":["bool"],"parameters":[{"type_name":"PCM_source","identifier":"src"},{"identifier":"&offs"},{"identifier":"&len"},{"type_name":"bool","identifier":"&rev"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number offs","description":""},{"identifier":"number len","description":""},{"identifier":"boolean rev","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number offs, number len, boolean rev = reaper.PCM_Source_GetSectionInfo(PCM_source src)","eel":"bool PCM_Source_GetSectionInfo(PCM_source src, &offs, &len, bool &rev)","python":"(Boolean retval, PCM_source src, Float offsOut, Float lenOut, Boolean revOut) = RPR_PCM_Source_GetSectionInfo(src, offsOut, lenOut, revOut)","cpp":"bool PCM_Source_GetSectionInfo(PCM_source* src, double* offsOut, double* lenOut, bool* revOut)"},"title":"PCM_Source_GetSectionInfo","chapters":["Audio Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"If a section/reverse block, retrieves offset/len/reverse. return true if success","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer amt","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.PluginWantsAlwaysRunFx","return_values":[],"parameters":[{"identifier":"amt","type":"integer"}]},"eel":{"return_values":["PluginWantsAlwaysRunFx"],"parameters":[{"type_name":"int","identifier":"amt"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.PluginWantsAlwaysRunFx(integer amt)","eel":"PluginWantsAlwaysRunFx(int amt)","python":"RPR_PluginWantsAlwaysRunFx(Int amt)","cpp":"void PluginWantsAlwaysRunFx(int amt)"},"title":"PluginWantsAlwaysRunFx","chapters":["FX Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer prevent_count","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.PreventUIRefresh","return_values":[],"parameters":[{"identifier":"prevent_count","type":"integer"}]},"eel":{"return_values":["PreventUIRefresh"],"parameters":[{"type_name":"int","identifier":"prevent_count"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.PreventUIRefresh(integer prevent_count)","eel":"PreventUIRefresh(int prevent_count)","python":"RPR_PreventUIRefresh(Int prevent_count)","cpp":"void PreventUIRefresh(int prevent_count)"},"title":"PreventUIRefresh","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"adds prevent_count to the UI refresh prevention state; \n\nImportant: always add then remove the same amount, or major disfunction will occur\nIt's important to add first and remove second, as other functions you use inbetween might\nchange this counter as well.\nIf you remove first and then add later, UI-refresh might be turned on again by another function used\ncausing unwanted flicker!\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer session_mode","description":"1, start a new session; 0, retrieve selected actions; -1, end a session"},{"identifier":"integer init_id","description":"the command-id, which shall be preselected, when the actionlist opens"},{"identifier":"integer section_id","description":"the section in which you want to let the user select\n0 - Main\n100 - Main (alt recording)\n32060 - MIDI Editor\n32061 - MIDI Event List Editor\n32062 - MIDI Inline Editor\n32063 - Media Explorer "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.PromptForAction","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"session_mode","type":"integer"},{"identifier":"init_id","type":"integer"},{"identifier":"section_id","type":"integer"}]},"eel":{"method_name":"PromptForAction","return_values":["int"],"parameters":[{"type_name":"int","identifier":"session_mode"},{"type_name":"int","identifier":"init_id"},{"type_name":"int","identifier":"section_id"}]}},"requires":{"Reaper":"6.12"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the selected actions\n-1, actionlist is not opened\n0, no action has been selected yet/you retrieved all selected actions\nany other number, the selected actions; call repeatedly to get all selected commandids until the function returns 0 again"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.PromptForAction(integer session_mode, integer init_id, integer section_id)","eel":"int PromptForAction(int session_mode, int init_id, int section_id)","python":"Int retval = RPR_PromptForAction(Int session_mode, Int init_id, Int section_id)","cpp":"int PromptForAction(int session_mode, int init_id, int section_id)"},"title":"PromptForAction","chapters":["Api-Helper-Functions","Actions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Opens the actionlist and allows you to get, which action the user selected.\n\nSo the user can select numerous actions, and when they hit the select or select/close-button, you can get the actions selected.\n\nTo start a new session, pass 1 as parameter session_mode.\n\nAfter that, repeatedly call the function with session_mode=0, which will return the selected actions.\n        - -1, the actionlist is closed\n        - 0, no action has been selected\n        - any other number, this action has been selected.\nIn the latter case, call the function until it returns 0 again to get all selected actions.\n\nIf you're finished, call the function with session_mode=-1\n\n\nWhen finished, call with session_mode=-1.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string errmsg","description":"the message to show"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ReaScriptError","return_values":[],"parameters":[{"identifier":"errmsg","type":"string"}]},"eel":{"return_values":["ReaScriptError"],"parameters":[{"identifier":"\"errmsg\""}]}},"requires":{"Reaper":"6.29"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ReaScriptError(string errmsg)","eel":"ReaScriptError(\"errmsg\")","python":"RPR_ReaScriptError(String errmsg)","cpp":"void ReaScriptError(const char* errmsg)"},"title":"ReaScriptError","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Causes REAPER to display the error message after the current ReaScript finishes. If called within a Lua context and errmsg has a ! prefix, script execution will be terminated.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","create","recursive","directory"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string path","description":"the directory-path to be created"},{"identifier":"integer ignored","description":"unknown"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.RecursiveCreateDirectory","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"path","type":"string"},{"identifier":"ignored","type":"integer"}]},"eel":{"method_name":"RecursiveCreateDirectory","return_values":["int"],"parameters":[{"identifier":"\"path\""},{"type_name":"size_t","identifier":"ignored"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"0, failure; 1 and higher, success"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.RecursiveCreateDirectory(string path, integer ignored)","eel":"int RecursiveCreateDirectory(\"path\", size_t ignored)","python":"Int retval = RPR_RecursiveCreateDirectory(String path, Int ignored)","cpp":"int RecursiveCreateDirectory(const char* path, size_t ignored)"},"title":"RecursiveCreateDirectory","chapters":["File Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Creates a new directory. \n\nYou can recursivly create directories, means: if the higher directories don't exist, the will also be automatically created.\n\nreturns positive value on success, 0 on failure.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","reduce","open files"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer flags","description":"influences, how the garbage collection shall be\n&1, incrementally\n&2, aggressively(files need to be reopened after that, if needed)"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.reduce_open_files","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"flags","type":"integer"}]},"eel":{"method_name":"reduce_open_files","return_values":["int"],"parameters":[{"type_name":"int","identifier":"flags"}]}},"requires":{"Reaper":"6.00"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the number of closed files"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.reduce_open_files(integer flags)","eel":"int reduce_open_files(int flags)","python":"Int retval = RPR_reduce_open_files(Int flags)","cpp":"int reduce_open_files(int flags)"},"title":"reduce_open_files","chapters":["File Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"garbage-collects extra open files and closes them. if flags has 1 set, this is done incrementally (call this from a regular timer, if desired). if flags has 2 set, files are aggressively closed (they may need to be re-opened very soon). \n\nreturns number of files closed by this call.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["userinterfacer","toolbar","toggle","command"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer command_id","description":"the command_id-number of the action, whose toolbar button you want to toggle. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.RefreshToolbar","return_values":[],"parameters":[{"identifier":"command_id","type":"integer"}]},"eel":{"return_values":["RefreshToolbar"],"parameters":[{"type_name":"int","identifier":"command_id"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.RefreshToolbar(integer command_id)","eel":"RefreshToolbar(int command_id)","python":"RPR_RefreshToolbar(Int command_id)","cpp":"void RefreshToolbar(int command_id)"},"title":"RefreshToolbar","chapters":["User Interface","Toolbars"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Refreshes the toolbar-buttons, associated with a specific command_id/action\n\nsee [NamedCommandLookup](#NamedCommandLookup) for getting command-ids from scripts and 3rd-party actions\n\nSee [RefreshToolbar2](#RefreshToolbar2).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["userinterfacer","toolbar","toggle","command","section"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer section_id","description":"the section, in which the action lies\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"},{"identifier":"integer command_id","description":"the command_id-number of the action, whose toolbar button you want to toggle. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.RefreshToolbar2","return_values":[],"parameters":[{"identifier":"section_id","type":"integer"},{"identifier":"command_id","type":"integer"}]},"eel":{"return_values":["RefreshToolbar2"],"parameters":[{"type_name":"int","identifier":"section_id"},{"type_name":"int","identifier":"command_id"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.RefreshToolbar2(integer section_id, integer command_id)","eel":"RefreshToolbar2(int section_id, int command_id)","python":"RPR_RefreshToolbar2(Int section_id, Int command_id)","cpp":"void RefreshToolbar2(int section_id, int command_id)"},"title":"RefreshToolbar2","chapters":["User Interface","Toolbars"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Refreshes the toolbar-buttons, associated with a specific command_id/action within a certain section\n\nsee [NamedCommandLookup](#NamedCommandLookup) for getting command-ids from scripts and 3rd-party actions","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string in","description":""},{"identifier":"string out","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.relative_fn","return_values":[{"identifier":"out","type":"string"}],"parameters":[{"identifier":"in","type":"string"},{"identifier":"out","type":"string"}]},"eel":{"return_values":["relative_fn"],"parameters":[{"identifier":"\"in\""},{"identifier":"#out"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string out","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string out = reaper.relative_fn(string in, string out)","eel":"relative_fn(\"in\", #out)","python":"(String in, String out, Int out_sz) = RPR_relative_fn(in, out, out_sz)","cpp":"void relative_fn(const char* in, char* out, int out_sz)"},"title":"relative_fn","chapters":["File Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Makes a filename \"in\" relative to the current project, if any.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack tr","description":"the MediaTrack-object, in which you want to remove send/receive/hwouts"},{"identifier":"integer category","description":"less than 0, receives; 0, sends; greater than 0, hardware outputs"},{"identifier":"integer sendidx","description":"the idx of the send/receive/hwoutput to remove. 0, the first; 1 for the second, etc"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.RemoveTrackSend","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"tr","type":"MediaTrack"},{"identifier":"category","type":"integer"},{"identifier":"sendidx","type":"integer"}]},"eel":{"method_name":"RemoveTrackSend","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"tr"},{"type_name":"int","identifier":"category"},{"type_name":"int","identifier":"sendidx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, removing worked; false, removing didn't work(e.g. does not exist)"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.RemoveTrackSend(MediaTrack tr, integer category, integer sendidx)","eel":"bool RemoveTrackSend(MediaTrack tr, int category, int sendidx)","python":"Boolean retval = RPR_RemoveTrackSend(MediaTrack tr, Int category, Int sendidx)","cpp":"bool RemoveTrackSend(MediaTrack* tr, int category, int sendidx)"},"title":"RemoveTrackSend","chapters":["Track Management","Routing"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Remove a send/receive/hardware output.\n\nFor ReaRoute-users: the outputs are hardware outputs, but with 512 added to the destination channel index (512 is the first rearoute channel, 513 the second, etc).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["file management","render","file","section"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"string source_filename","description":""},{"identifier":"string target_filename","description":""},{"identifier":"number start_percent","description":""},{"identifier":"number end_percent","description":""},{"identifier":"number playrate","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.RenderFileSection","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"source_filename","type":"string"},{"identifier":"target_filename","type":"string"},{"identifier":"start_percent","type":"number"},{"identifier":"end_percent","type":"number"},{"identifier":"playrate","type":"number"}]},"eel":{"method_name":"RenderFileSection","return_values":["bool"],"parameters":[{"identifier":"\"source_filename\""},{"identifier":"\"target_filename\""},{"identifier":"start_percent"},{"identifier":"end_percent"},{"identifier":"playrate"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.RenderFileSection(string source_filename, string target_filename, number start_percent, number end_percent, number playrate)","eel":"bool RenderFileSection(\"source_filename\", \"target_filename\", start_percent, end_percent, playrate)","python":"Boolean retval = RPR_RenderFileSection(String source_filename, String target_filename, Float start_percent, Float end_percent, Float playrate)","cpp":"bool RenderFileSection(const char* source_filename, const char* target_filename, double start_percent, double end_percent, double playrate)"},"title":"RenderFileSection","chapters":["File Management","Render"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Not available while playing back.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","move","selected","tracks","folder","last folder"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer beforeTrackIdx","description":"the number of track, before which you want to move the selected tracks; zero-based(0 for track 1, 1 for track 2, etc)"},{"identifier":"integer makePrevFolder","description":"decides, whether the track before the moved tracks(beforeTrackIdx-1) shall be a folder-track. Does only\napply, when beforeTrackIdx>0(a track above the moved tracks exists).\n0, don't make track beforeTrackIdx-1 a folder track; \n1, make track beforeTrackIdx-1 a folder track\n2, if track beforeTrackIdx-1 is the last track in folder, extend the folder(make the last moved track the last track in folder."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ReorderSelectedTracks","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"beforeTrackIdx","type":"integer"},{"identifier":"makePrevFolder","type":"integer"}]},"eel":{"method_name":"ReorderSelectedTracks","return_values":["bool"],"parameters":[{"type_name":"int","identifier":"beforeTrackIdx"},{"type_name":"int","identifier":"makePrevFolder"}]}},"requires":{"Reaper":"5.90"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, if it was successful; false, if not(e.g. no tracks were selected)"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.ReorderSelectedTracks(integer beforeTrackIdx, integer makePrevFolder)","eel":"bool ReorderSelectedTracks(int beforeTrackIdx, int makePrevFolder)","python":"Boolean retval = RPR_ReorderSelectedTracks(Int beforeTrackIdx, Int makePrevFolder)","cpp":"bool ReorderSelectedTracks(int beforeTrackIdx, int makePrevFolder)"},"title":"ReorderSelectedTracks","chapters":["Track Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Moves all selected tracks to immediately above track specified by index beforeTrackIdx, returns false if no tracks were selected. \nmakePrevFolder=0 for normal, \n   1 = as child of track preceding track specified by beforeTrackIdx, \n   2 = if track preceding track specified by beforeTrackIdx is last track in folder, extend folder","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer mode","description":"0, Medium (64pt Sinc)\n1, Low (Linear Interpolation)\n2, Lowest (Point Sampling)\n3, Good (192pt Sinc)\n4, Better (384pt Sinc)\n5, Fast (IIR + Linear Interpolation)\n6, Fast (IIRx2 + Linear Interpolation)\n7, Fast (16pt Sinc)\n8, HQ (512pt Sinc)\n9, Extreme HQ (768pt HQ Sinc)"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Resample_EnumModes","return_values":[{"identifier":"resample_mode","type":"string"}],"parameters":[{"identifier":"mode","type":"integer"}]},"eel":{"method_name":"Resample_EnumModes","return_values":["bool"],"parameters":[{"identifier":"#retval"},{"type_name":"int","identifier":"mode"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string resample_mode","description":"the resample-mode"}],"prog_lang":"*"},"functioncall":{"lua":"string resample_mode = reaper.Resample_EnumModes(integer mode)","eel":"bool Resample_EnumModes(#retval, int mode)","python":"String retval = RPR_Resample_EnumModes(Int mode)","cpp":"const char* Resample_EnumModes(int mode)"},"title":"Resample_EnumModes","chapters":["Audio Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"enumerates the existing resample-modes","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string in","description":""},{"identifier":"string out","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.resolve_fn","return_values":[{"identifier":"out","type":"string"}],"parameters":[{"identifier":"in","type":"string"},{"identifier":"out","type":"string"}]},"eel":{"return_values":["resolve_fn"],"parameters":[{"identifier":"\"in\""},{"identifier":"#out"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string out","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string out = reaper.resolve_fn(string in, string out)","eel":"resolve_fn(\"in\", #out)","python":"(String in, String out, Int out_sz) = RPR_resolve_fn(in, out, out_sz)","cpp":"void resolve_fn(const char* in, char* out, int out_sz)"},"title":"resolve_fn","chapters":["File Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"See [resolve\\_fn2](#resolve_fn2).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"string in","description":""},{"identifier":"string out","description":""},{"identifier":"string checkSubDir","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.resolve_fn2","return_values":[{"identifier":"out","type":"string"}],"parameters":[{"identifier":"in","type":"string"},{"identifier":"out","type":"string"},{"isOptional":true,"type":"string","identifier":"checkSubDir"}]},"eel":{"return_values":["resolve_fn2"],"parameters":[{"identifier":"\"in\""},{"identifier":"#out"},{"type_name":"optional","identifier":"\"checkSubDir\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string out","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string out = reaper.resolve_fn2(string in, string out, optional string checkSubDir)","eel":"resolve_fn2(\"in\", #out, optional \"checkSubDir\")","python":"(String in, String out, Int out_sz, String checkSubDirOptional) = RPR_resolve_fn2(in, out, out_sz, checkSubDirOptional)","cpp":"void resolve_fn2(const char* in, char* out, int out_sz, const char* checkSubDirOptional)"},"title":"resolve_fn2","chapters":["File Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Resolves a filename \"in\" by using project settings etc. If no file found, out will be a copy of in.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","command","id","actioncommand","id","lookup"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer command_id","description":"the command/script/action, whose ActionCommandID you want to have"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ReverseNamedCommandLookup","return_values":[{"identifier":"action_command_id","type":"string"}],"parameters":[{"identifier":"command_id","type":"integer"}]},"eel":{"method_name":"ReverseNamedCommandLookup","return_values":["bool"],"parameters":[{"identifier":"#retval"},{"type_name":"int","identifier":"command_id"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string action_command_id","description":"the ActionCommandID of the command/script/action"}],"prog_lang":"*"},"functioncall":{"lua":"string action_command_id = reaper.ReverseNamedCommandLookup(integer command_id)","eel":"bool ReverseNamedCommandLookup(#retval, int command_id)","python":"String retval = RPR_ReverseNamedCommandLookup(Int command_id)","cpp":"const char* ReverseNamedCommandLookup(int command_id)"},"title":"ReverseNamedCommandLookup","chapters":["Api-Helper-Functions","Actions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get the named command for the given command ID. The returned string will not start with '_' (e.g. it will return \"SWS_ABOUT\"), it will be NULL if command_id is a native action.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer scaling_mode","description":""},{"identifier":"number val","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ScaleFromEnvelopeMode","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"scaling_mode","type":"integer"},{"identifier":"val","type":"number"}]},"eel":{"method_name":"ScaleFromEnvelopeMode","return_values":["double"],"parameters":[{"type_name":"int","identifier":"scaling_mode"},{"identifier":"val"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.ScaleFromEnvelopeMode(integer scaling_mode, number val)","eel":"double ScaleFromEnvelopeMode(int scaling_mode, val)","python":"Float retval = RPR_ScaleFromEnvelopeMode(Int scaling_mode, Float val)","cpp":"double ScaleFromEnvelopeMode(int scaling_mode, double val)"},"title":"ScaleFromEnvelopeMode","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"See [GetEnvelopeScalingMode](#GetEnvelopeScalingMode).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer scaling_mode","description":""},{"identifier":"number val","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ScaleToEnvelopeMode","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"scaling_mode","type":"integer"},{"identifier":"val","type":"number"}]},"eel":{"method_name":"ScaleToEnvelopeMode","return_values":["double"],"parameters":[{"type_name":"int","identifier":"scaling_mode"},{"identifier":"val"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.ScaleToEnvelopeMode(integer scaling_mode, number val)","eel":"double ScaleToEnvelopeMode(int scaling_mode, val)","python":"Float retval = RPR_ScaleToEnvelopeMode(Int scaling_mode, Float val)","cpp":"double ScaleToEnvelopeMode(int scaling_mode, double val)"},"title":"ScaleToEnvelopeMode","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"See [GetEnvelopeScalingMode](#GetEnvelopeScalingMode).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["shortcuts","count"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer uniqueID","description":"the section, in which the action is located\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"section","return_values":["KbdSectionInfo"],"parameters":[{"type_name":"int","identifier":"uniqueID"}]}},"requires":{"Reaper":"6.71"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"KbdSectionInfo section","description":"the section-object, that can be used for the various shortcut-functions"}],"prog_lang":"*"},"functioncall":{"eel":"KbdSectionInfo section = SectionFromUniqueID(int uniqueID)/functioncall>\n        <functioncall prog_lang=\"lua\">KbdSectionInfo section = reaper.SectionFromUniqueID(integer uniqueID)","python":"KbdSectionInfo section = RPR_SectionFromUniqueID(Int uniqueID)","cpp":"KbdSectionInfo* section = SectionFromUniqueID(int uniqueID)"},"title":"SectionFromUniqueID","chapters":["Api-Helper-Functions","Shortcuts"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Delete the specific shortcut for the given command ID.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["mediaitemmanagement","mediaitem","select","deselect","all"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"boolean selected","description":"true, select; false, deselect"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SelectAllMediaItems","return_values":[],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"selected","type":"boolean"}]},"eel":{"return_values":["SelectAllMediaItems"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"bool","identifier":"selected"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.SelectAllMediaItems(ReaProject proj, boolean selected)","eel":"SelectAllMediaItems(ReaProject proj, bool selected)","python":"RPR_SelectAllMediaItems(ReaProject proj, Boolean selected)","cpp":"void SelectAllMediaItems(ReaProject* proj, bool selected)"},"title":"SelectAllMediaItems","chapters":["Mediaitem Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Selects or deselects all MediaItems in a project.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["projectmanagement","switch","select","project"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SelectProjectInstance","return_values":[],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"return_values":["SelectProjectInstance"],"parameters":[{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.SelectProjectInstance(ReaProject proj)","eel":"SelectProjectInstance(ReaProject proj)","python":"RPR_SelectProjectInstance(ReaProject proj)","cpp":"void SelectProjectInstance(ReaProject* proj)"},"title":"SelectProjectInstance","chapters":["Project Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Switch to another opened project/projecttab.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer output","description":""},{"identifier":"string msg","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SendMIDIMessageToHardware","return_values":[],"parameters":[{"identifier":"output","type":"integer"},{"identifier":"msg","type":"string"}]},"eel":{"return_values":["SendMIDIMessageToHardware"],"parameters":[{"type_name":"int","identifier":"output"},{"identifier":"\"msg\""}]}},"requires":{"Reaper":"6.76"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.SendMIDIMessageToHardware(integer output, string msg)","eel":"SendMIDIMessageToHardware(int output, \"msg\")","python":"RPR_SendMIDIMessageToHardware(Int output, String msg, Int msg_sz)","cpp":"void SendMIDIMessageToHardware(int output, const char* msg, int msg_sz)"},"title":"SendMIDIMessageToHardware","chapters":["Api-Helper-Functions","Midi"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sends a MIDI message to output device specified by output. Message is sent in immediate mode.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":"the MediaItem_Take, you want to set as active-take in the MediaItem it is associated with"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetActiveTake","return_values":[],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"return_values":["SetActiveTake"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.SetActiveTake(MediaItem_Take take)","eel":"SetActiveTake(MediaItem_Take take)","python":"RPR_SetActiveTake(MediaItem_Take take)","cpp":"void SetActiveTake(MediaItem_Take* take)"},"title":"SetActiveTake","chapters":["Mediaitem Take Management","Take States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"set this take active in this media item","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["envelopemanagement","set","mode","trim","read","touch","write","latch","selected","deselected","master"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer mode","description":"the automation-mode\n0, Trim/read\n1, Read\n2, Touch\n3, Write\n4, Latch\n5 and higher no mode selected"},{"identifier":"boolean onlySel","description":"true, only selected tracks; false, all tracks including master-track"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetAutomationMode","return_values":[],"parameters":[{"identifier":"mode","type":"integer"},{"identifier":"onlySel","type":"boolean"}]},"eel":{"return_values":["SetAutomationMode"],"parameters":[{"type_name":"int","identifier":"mode"},{"type_name":"bool","identifier":"onlySel"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.SetAutomationMode(integer mode, boolean onlySel)","eel":"SetAutomationMode(int mode, bool onlySel)","python":"RPR_SetAutomationMode(Int mode, Boolean onlySel)","cpp":"void SetAutomationMode(int mode, bool onlySel)"},"title":"SetAutomationMode","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets all or selected tracks to mode.\n\nIncludes the master-track.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["projectmanagement","set","bpm","undo"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"number bpm","description":"the new beats per minute-value"},{"identifier":"boolean wantUndo","description":"true, add undo point; false, no undo point added"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetCurrentBPM","return_values":[],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"bpm","type":"number"},{"identifier":"wantUndo","type":"boolean"}]},"eel":{"return_values":["SetCurrentBPM"],"parameters":[{"type_name":"ReaProject","identifier":"__proj"},{"identifier":"bpm"},{"type_name":"bool","identifier":"wantUndo"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.SetCurrentBPM(ReaProject proj, number bpm, boolean wantUndo)","eel":"SetCurrentBPM(ReaProject __proj, bpm, bool wantUndo)","python":"RPR_SetCurrentBPM(ReaProject __proj, Float bpm, Boolean wantUndo)","cpp":"void SetCurrentBPM(ReaProject* __proj, double bpm, bool wantUndo)"},"title":"SetCurrentBPM","chapters":["Project Management","Project States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"set current BPM in project, set wantUndo=true to add undo point","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["arrangeviewmanagement","envelope","focus","set","cursor","context"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer mode","description":"the focus to be changed to\n0, track panels\n1, arrange window\n2, arrangewindow and env"},{"identifier":"TrackEnvelope envIn","description":"TrackEnvelope-object of the envelope to select(only when mode=2, else set to nil); nil, clear current track/envelope-selection;"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetCursorContext","return_values":[],"parameters":[{"identifier":"mode","type":"integer"},{"identifier":"envIn","type":"TrackEnvelope"}]},"eel":{"return_values":["SetCursorContext"],"parameters":[{"type_name":"int","identifier":"mode"},{"type_name":"TrackEnvelope","identifier":"envIn"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.SetCursorContext(integer mode, TrackEnvelope envIn)","eel":"SetCursorContext(int mode, TrackEnvelope envIn)","python":"RPR_SetCursorContext(Int mode, TrackEnvelope envInOptional)","cpp":"void SetCursorContext(int mode, TrackEnvelope* envInOptional)"},"title":"SetCursorContext","chapters":["User Interface","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Change the focus for the cursor.\nYou must use this to change the focus for the cursor programmatically. \n\nmode=0 to focus track panels, 1 to focus the arrange window, 2 to focus the arrange window and select env (or envIn==NULL to clear the current track/take envelope selection)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","set","edit","cursor","position","seekplay","move view"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"number time","description":"the new editcursor-position in seconds"},{"identifier":"boolean moveview","description":"true, change the arrange-view so editcursor is visible; false, just set the edit-cursor without moving the view(editcursor might be out of sight)"},{"identifier":"boolean seekplay","description":"true, when playing, restart playing at the new edit-cursor position; false, keep playing at \"old\" playposition"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetEditCurPos","return_values":[],"parameters":[{"identifier":"time","type":"number"},{"identifier":"moveview","type":"boolean"},{"identifier":"seekplay","type":"boolean"}]},"eel":{"return_values":["SetEditCurPos"],"parameters":[{"identifier":"time"},{"type_name":"bool","identifier":"moveview"},{"type_name":"bool","identifier":"seekplay"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.SetEditCurPos(number time, boolean moveview, boolean seekplay)","eel":"SetEditCurPos(time, bool moveview, bool seekplay)","python":"RPR_SetEditCurPos(Float time, Boolean moveview, Boolean seekplay)","cpp":"void SetEditCurPos(double time, bool moveview, bool seekplay)"},"title":"SetEditCurPos","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Change the position of the edit-cursor in the current project.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["transportmanagement","set","edit","cursor","position","seekplay","move view","project"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"number time","description":"the new editcursor-position in seconds"},{"identifier":"boolean moveview","description":"true, change the arrange-view so editcursor is visible; false, just set the edit-cursor without moving the view(editcursor might be out of sight)"},{"identifier":"boolean seekplay","description":"true, when playing, restart playing at the new edit-cursor position; false, keep playing at \"old\" playposition"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetEditCurPos2","return_values":[],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"time","type":"number"},{"identifier":"moveview","type":"boolean"},{"identifier":"seekplay","type":"boolean"}]},"eel":{"return_values":["SetEditCurPos2"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"identifier":"time"},{"type_name":"bool","identifier":"moveview"},{"type_name":"bool","identifier":"seekplay"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.SetEditCurPos2(ReaProject proj, number time, boolean moveview, boolean seekplay)","eel":"SetEditCurPos2(ReaProject proj, time, bool moveview, bool seekplay)","python":"RPR_SetEditCurPos2(ReaProject proj, Float time, Boolean moveview, Boolean seekplay)","cpp":"void SetEditCurPos2(ReaProject* proj, double time, bool moveview, bool seekplay)"},"title":"SetEditCurPos2","chapters":["Project Navigation"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Change the position of the edit-cursor in a specific project.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"TrackEnvelope envelope","description":""},{"identifier":"integer ptidx","description":""},{"identifier":"optional number timeIn","description":""},{"identifier":"optional number valueIn","description":""},{"identifier":"optional integer shapeIn","description":""},{"identifier":"optional number tensionIn","description":""},{"identifier":"optional boolean selectedIn","description":""},{"identifier":"optional boolean noSortIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetEnvelopePoint","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"envelope","type":"TrackEnvelope"},{"identifier":"ptidx","type":"integer"},{"isOptional":true,"type":"number","identifier":"timeIn"},{"isOptional":true,"type":"number","identifier":"valueIn"},{"isOptional":true,"type":"integer","identifier":"shapeIn"},{"isOptional":true,"type":"number","identifier":"tensionIn"},{"isOptional":true,"type":"boolean","identifier":"selectedIn"},{"isOptional":true,"type":"boolean","identifier":"noSortIn"}]},"eel":{"method_name":"SetEnvelopePoint","return_values":["bool"],"parameters":[{"type_name":"TrackEnvelope","identifier":"envelope"},{"type_name":"int","identifier":"ptidx"},{"type_name":"optional","identifier":"timeIn"},{"type_name":"optional","identifier":"valueIn"},{"identifier":"shapeIn","modifier":"optional","type_name":"int"},{"type_name":"optional","identifier":"tensionIn"},{"identifier":"selectedIn","modifier":"optional","type_name":"bool"},{"identifier":"noSortIn","modifier":"optional","type_name":"bool"}]}},"requires":{"Reaper":"5.979"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SetEnvelopePoint(TrackEnvelope envelope, integer ptidx, optional number timeIn, optional number valueIn, optional integer shapeIn, optional number tensionIn, optional boolean selectedIn, optional boolean noSortIn)","eel":"bool SetEnvelopePoint(TrackEnvelope envelope, int ptidx, optional timeIn, optional valueIn, optional int shapeIn, optional tensionIn, optional bool selectedIn, optional bool noSortIn)","python":"(Boolean retval, TrackEnvelope envelope, Int ptidx, Float timeInOptional, Float valueInOptional, Int shapeInOptional, Float tensionInOptional, Boolean selectedInOptional, Boolean noSortInOptional) = RPR_SetEnvelopePoint(envelope, ptidx, timeInOptional, valueInOptional, shapeInOptional, tensionInOptional, selectedInOptional, noSortInOptional)","cpp":"bool SetEnvelopePoint(TrackEnvelope* envelope, int ptidx, double* timeInOptional, double* valueInOptional, int* shapeInOptional, double* tensionInOptional, bool* selectedInOptional, bool* noSortInOptional)"},"title":"SetEnvelopePoint","chapters":["Envelope Management","Envelope Points"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See [SetEnvelopePointEx](#SetEnvelopePointEx).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":9,"entries":[{"identifier":"TrackEnvelope envelope","description":""},{"identifier":"integer autoitem_idx","description":""},{"identifier":"integer ptidx","description":""},{"identifier":"optional number timeIn","description":""},{"identifier":"optional number valueIn","description":""},{"identifier":"optional integer shapeIn","description":""},{"identifier":"optional number tensionIn","description":""},{"identifier":"optional boolean selectedIn","description":""},{"identifier":"optional boolean noSortIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetEnvelopePointEx","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"envelope","type":"TrackEnvelope"},{"identifier":"autoitem_idx","type":"integer"},{"identifier":"ptidx","type":"integer"},{"isOptional":true,"type":"number","identifier":"timeIn"},{"isOptional":true,"type":"number","identifier":"valueIn"},{"isOptional":true,"type":"integer","identifier":"shapeIn"},{"isOptional":true,"type":"number","identifier":"tensionIn"},{"isOptional":true,"type":"boolean","identifier":"selectedIn"},{"isOptional":true,"type":"boolean","identifier":"noSortIn"}]},"eel":{"method_name":"SetEnvelopePointEx","return_values":["bool"],"parameters":[{"type_name":"TrackEnvelope","identifier":"envelope"},{"type_name":"int","identifier":"autoitem_idx"},{"type_name":"int","identifier":"ptidx"},{"type_name":"optional","identifier":"timeIn"},{"type_name":"optional","identifier":"valueIn"},{"identifier":"shapeIn","modifier":"optional","type_name":"int"},{"type_name":"optional","identifier":"tensionIn"},{"identifier":"selectedIn","modifier":"optional","type_name":"bool"},{"identifier":"noSortIn","modifier":"optional","type_name":"bool"}]}},"requires":{"Reaper":"5.979"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SetEnvelopePointEx(TrackEnvelope envelope, integer autoitem_idx, integer ptidx, optional number timeIn, optional number valueIn, optional integer shapeIn, optional number tensionIn, optional boolean selectedIn, optional boolean noSortIn)","eel":"bool SetEnvelopePointEx(TrackEnvelope envelope, int autoitem_idx, int ptidx, optional timeIn, optional valueIn, optional int shapeIn, optional tensionIn, optional bool selectedIn, optional bool noSortIn)","python":"(Boolean retval, TrackEnvelope envelope, Int autoitem_idx, Int ptidx, Float timeInOptional, Float valueInOptional, Int shapeInOptional, Float tensionInOptional, Boolean selectedInOptional, Boolean noSortInOptional) = RPR_SetEnvelopePointEx(envelope, autoitem_idx, ptidx, timeInOptional, valueInOptional, shapeInOptional, tensionInOptional, selectedInOptional, noSortInOptional)","cpp":"bool SetEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, int ptidx, double* timeInOptional, double* valueInOptional, int* shapeInOptional, double* tensionInOptional, bool* selectedInOptional, bool* noSortInOptional)"},"title":"SetEnvelopePointEx","chapters":["Envelope Management","Envelope Points"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.\nautoitem\\_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem\\_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee [CountEnvelopePointsEx](#CountEnvelopePointsEx), [GetEnvelopePointEx](#GetEnvelopePointEx), [InsertEnvelopePointEx](#InsertEnvelopePointEx), [DeleteEnvelopePointEx](#DeleteEnvelopePointEx).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["envelopemanagement","set","statechunk","envelope"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"TrackEnvelope env","description":"the TrackEnvelope, whose statechunk you want to set"},{"identifier":"string str","description":"the new statechunk, that you want to set"},{"identifier":"boolean isundo","description":"undo flag is a performance/caching hint."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetEnvelopeStateChunk","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"env","type":"TrackEnvelope"},{"identifier":"str","type":"string"},{"identifier":"isundo","type":"boolean"}]},"eel":{"method_name":"SetEnvelopeStateChunk","return_values":["bool"],"parameters":[{"type_name":"TrackEnvelope","identifier":"env"},{"identifier":"\"str\""},{"type_name":"bool","identifier":"isundo"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, setting worked; false, setting didn't work"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SetEnvelopeStateChunk(TrackEnvelope env, string str, boolean isundo)","eel":"bool SetEnvelopeStateChunk(TrackEnvelope env, \"str\", bool isundo)","python":"Boolean retval = RPR_SetEnvelopeStateChunk(TrackEnvelope env, String str, Boolean isundoOptional)","cpp":"bool SetEnvelopeStateChunk(TrackEnvelope* env, const char* str, bool isundoOptional)"},"title":"SetEnvelopeStateChunk","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets the RPPXML state of an envelope, returns true if successful. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["extension state","state","value","key","section","set","persist"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"string section","description":"the section, in which the key-value is stored"},{"identifier":"string key","description":"the key, which stores the value"},{"identifier":"string value","description":"the new value to be set"},{"identifier":"boolean persist","description":"true, means the value should be stored and reloaded the next time REAPER is opened"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetExtState","return_values":[],"parameters":[{"identifier":"section","type":"string"},{"identifier":"key","type":"string"},{"identifier":"value","type":"string"},{"identifier":"persist","type":"boolean"}]},"eel":{"return_values":["SetExtState"],"parameters":[{"identifier":"\"section\""},{"identifier":"\"key\""},{"identifier":"\"value\""},{"type_name":"bool","identifier":"persist"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.SetExtState(string section, string key, string value, boolean persist)","eel":"SetExtState(\"section\", \"key\", \"value\", bool persist)","python":"RPR_SetExtState(String section, String key, String value, Boolean persist)","cpp":"void SetExtState(const char* section, const char* key, const char* value, bool persist)"},"title":"SetExtState","chapters":["Api-Helper-Functions","Extension States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set the extended state value for a specific section and key. \n\nPersistant states are stored into the reaper-extstate.ini in the resources-folder.\n\nNote: section and key are not case-sensitive\n\nImportant: always use a section-name, that is unique to you. For instance, add your name into the section-name, \nso it's less likely, that somebody else uses the same section and accidentally overwrites your keys.\nSomething like: \"mespotine_MyCoolScript.lua\"\n\nNote: Do not use newlines in extstates, as they might be cut when rereading them using GetExtState!\n      Find workarounds, like \\n -> \\\\n to store and \\\\n -> \\n to get them again.\n      This is due limitations of the ini-file-format.\n      \n      \nHere are some of the sections used by ReaTeam-scripts and extensions. Don't use to avoid possible name-conflicts.\nIf your section is missing, contact me and I'll add it too:\n\n\"_Slicer_\"\n\"(Un)Collapse envelope lanes\"\n\"+\"\n\"amagalma_Chunk Viewer-Editor\"\n\"amagalma_Grid Settings\"\n\"amagalma_Horizontal zoom presets\"\n\"amagalma_NormalizeTracks\"\n\"amagalma_Take_Vol_in_TS\"\n\"amagalma_Vertical zoom presets\"\n\"amagalma_backup_limit\"\n\"APIhelp\"\n\"babag_copy_paste_item_params\"\n\"BR_SPK_GlueTools\"\n\"brso_articulate\"\n\"BuyOne_Check length of custom action(s).lua\"\n\"BuyOne_Cycle through focused FX presets backwards (guide inside).lua\"\n\"BuyOne_Cycle through focused FX presets forward (guide inside).lua\"\n\"BuyOne_Exclusive dummy toggle\"\n\"BuyOne_Exclusive dummy toggles.lua\"\n\"BuyOne_Link two FX parameters via parameter modulation (guide inside).lua\"\n\"cfillion_copy_paste_markers\"\n\"cfillion_ireascript\"\n\"cfillion_ramp_envelope_points\"\n\"cfillion_show_nudge_settings\"\n\"cfillion_song_switcher\"\n\"cfillion_stepRecordReplace\"\n\"cfillion_underrun_monitor\"\n\"colswatch\"\n\"com.timtam.AccessiChord\"\n\"cool_MK Slicer.lua\"\n\"cool_MK_Shaper/Stutter.lua\"\n\"copy_paste\"\n\"Default_6.0 theme adjuster\"\n\"Dfk Project Map\"\n\"Edgemeal_fx_float\"\n\"Edit Groups\"\n\"GoToTimecode_AZ\"\n\"js_Draw LFO\"\n\"js_Draw ramp\"\n\"js_Insert ramps\"\n\"js_Mouse actions\"\n\"js_Mouse actions\"\n\"js_Multi Tool\"\n\"js_Step pattern\"\n\"js_Thumbnails\"\n\"LFO generator\"\n\"Lokasenna\"\n\"Lokasenna's Script Compiler\"\n\"Lokasenna's Theory Helper\"\n\"Lokasenna_CC Ryder\"\n\"Lokasenna_Copy values from selected MIDI notes\"\n\"Lokasenna_Debug mode\"\n\"Lokasenna_GUI\"\n\"Lokasenna_Pedal Steel\"\n\"Mespotine\"\n\"MFX-list\"\n\"MIDI Inspector\"\n\"MK Slicer (80icio MOD).lua\"\n\"osara\"\n\"Play-Stop with memory\"\n\"Preset Velocity\"\n\"RODILAB_Color_palette\"\n\"RODILAB_Match_criteria\"\n\"RODILAB_Track_name_groups\"\n\"ReaL_Comps\"\n\"ReaNoir\"\n\"savegrid\"\n\"Select CC lanes to show\"\n\"SmartSplit_AZ\"\n\"solger_ReaLauncher\"\n\"Source time position v2\"\n\"spk77_velocity_tool\"\n\"take_envelope_source\"\n\"talagan_Distribute MIDI notes evenly\"\n\"ToggleWet\"\n\"Track-Item Name Manipulation\"\n\"ultraschall_api\"\n\"vo_pomodoro\"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer mode","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetGlobalAutomationOverride","return_values":[],"parameters":[{"identifier":"mode","type":"integer"}]},"eel":{"return_values":["SetGlobalAutomationOverride"],"parameters":[{"type_name":"int","identifier":"mode"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.SetGlobalAutomationOverride(integer mode)","eel":"SetGlobalAutomationOverride(int mode)","python":"RPR_SetGlobalAutomationOverride(Int mode)","cpp":"void SetGlobalAutomationOverride(int mode)"},"title":"SetGlobalAutomationOverride","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"mode: see [GetGlobalAutomationOverride](GetGlobalAutomationOverride)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem item","description":""},{"identifier":"string str","description":""},{"identifier":"boolean isundo","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetItemStateChunk","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"item","type":"MediaItem"},{"identifier":"str","type":"string"},{"identifier":"isundo","type":"boolean"}]},"eel":{"method_name":"SetItemStateChunk","return_values":["bool"],"parameters":[{"type_name":"MediaItem","identifier":"item"},{"identifier":"\"str\""},{"type_name":"bool","identifier":"isundo"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SetItemStateChunk(MediaItem item, string str, boolean isundo)","eel":"bool SetItemStateChunk(MediaItem item, \"str\", bool isundo)","python":"Boolean retval = RPR_SetItemStateChunk(MediaItem item, String str, Boolean isundoOptional)","cpp":"bool SetItemStateChunk(MediaItem* item, const char* str, bool isundoOptional)"},"title":"SetItemStateChunk","chapters":["Mediaitem Management","Item States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer flag","description":"the flag to show the master-track in TCP, MCP or both\nTCP: &1=0, invisible; &1=1, visible\nMCP: &2=0, invisible; &2=1, visible"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetMasterTrackVisibility","return_values":[{"identifier":"mas_prev_vis_state","type":"integer"}],"parameters":[{"identifier":"flag","type":"integer"}]},"eel":{"method_name":"SetMasterTrackVisibility","return_values":["int"],"parameters":[{"type_name":"int","identifier":"flag"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer mas_prev_vis_state","description":"the previous visibility state"}],"prog_lang":"*"},"functioncall":{"lua":"integer mas_prev_vis_state = reaper.SetMasterTrackVisibility(integer flag)","eel":"int SetMasterTrackVisibility(int flag)","python":"Int retval = RPR_SetMasterTrackVisibility(Int flag)","cpp":"int SetMasterTrackVisibility(int flag)"},"title":"SetMasterTrackVisibility","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"set &1=1 to show the master track in the TCP, &2=2 to hide in the mixer. Returns the previous visibility state. See [GetMasterTrackVisibility](#GetMasterTrackVisibility).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem item","description":"the MediaItem, whose attribute you want to set"},{"identifier":"string parmname","description":"the attribute, that you want to set"},{"identifier":"number newvalue","description":"the new value for the attribute"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetMediaItemInfo_Value","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"item","type":"MediaItem"},{"identifier":"parmname","type":"string"},{"identifier":"newvalue","type":"number"}]},"eel":{"method_name":"SetMediaItemInfo_Value","return_values":["bool"],"parameters":[{"type_name":"MediaItem","identifier":"item"},{"identifier":"\"parmname\""},{"identifier":"newvalue"}]}},"requires":{"Reaper":"6.34"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, setting was successful; false, setting was unsuccessful"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SetMediaItemInfo_Value(MediaItem item, string parmname, number newvalue)","eel":"bool SetMediaItemInfo_Value(MediaItem item, \"parmname\", newvalue)","python":"Boolean retval = RPR_SetMediaItemInfo_Value(MediaItem item, String parmname, Float newvalue)","cpp":"bool SetMediaItemInfo_Value(MediaItem* item, const char* parmname, double newvalue)"},"title":"SetMediaItemInfo_Value","chapters":["Mediaitem Management","Item States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Set media item numerical-value attributes.\nB_MUTE : bool * : muted\nB_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.\nC_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.\nB_LOOPSRC : bool * : loop source\nB_ALLTAKESPLAY : bool * : all takes play\nB_UISEL : bool * : selected in arrange view\nC_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1\nC_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1\nC_LOCK : char * : locked, &1=locked, &2=lock to active take\nD_VOL : double * : item volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_POSITION : double * : item position in seconds\nD_LENGTH : double * : item length in seconds\nD_SNAPOFFSET : double * : item snap offset in seconds\nD_FADEINLEN : double * : item manual fadein length in seconds\nD_FADEOUTLEN : double * : item manual fadeout length in seconds\nD_FADEINDIR : double * : item fadein curvature, -1..1\nD_FADEOUTDIR : double * : item fadeout curvature, -1..1\nD_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein\nD_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout\nC_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear\nC_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear\nI_GROUPID : int * : group ID, 0=no group\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color.\nI_CURTAKE : int * : active take number\nIP_ITEMNUMBER : int : item number on this track (read-only, returns the item number directly)\nF_FREEMODE_Y : float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1)\nF_FREEMODE_H : float * : free item positioning height, 0=no height, 1=full height of track (will never be 0)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem item","description":"the MediaItem, whose length you want to change"},{"identifier":"number length","description":"the new length of MediaItem"},{"identifier":"boolean refreshUI","description":"true, refresh UI; false, don't refresh UI"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetMediaItemLength","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"item","type":"MediaItem"},{"identifier":"length","type":"number"},{"identifier":"refreshUI","type":"boolean"}]},"eel":{"method_name":"SetMediaItemLength","return_values":["bool"],"parameters":[{"type_name":"MediaItem","identifier":"item"},{"identifier":"length"},{"type_name":"bool","identifier":"refreshUI"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, setting was successful, false, setting was unsuccessful(e.g. length=negative)"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SetMediaItemLength(MediaItem item, number length, boolean refreshUI)","eel":"bool SetMediaItemLength(MediaItem item, length, bool refreshUI)","python":"Boolean retval = RPR_SetMediaItemLength(MediaItem item, Float length, Boolean refreshUI)","cpp":"bool SetMediaItemLength(MediaItem* item, double length, bool refreshUI)"},"title":"SetMediaItemLength","chapters":["Mediaitem Management","Item States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Redraws the screen only if refreshUI == true, otherwise see [UpdateArrange](#UpdateArrange)().","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem item","description":"the MediaItem, whose position you want to change"},{"identifier":"number position","description":"the new position of MediaItem"},{"identifier":"boolean refreshUI","description":"true, refresh UI; false, don't refresh UI"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetMediaItemPosition","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"item","type":"MediaItem"},{"identifier":"position","type":"number"},{"identifier":"refreshUI","type":"boolean"}]},"eel":{"method_name":"SetMediaItemPosition","return_values":["bool"],"parameters":[{"type_name":"MediaItem","identifier":"item"},{"identifier":"position"},{"type_name":"bool","identifier":"refreshUI"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, setting was successful, false, setting was unsuccessful(e.g. position=negative)"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SetMediaItemPosition(MediaItem item, number position, boolean refreshUI)","eel":"bool SetMediaItemPosition(MediaItem item, position, bool refreshUI)","python":"Boolean retval = RPR_SetMediaItemPosition(MediaItem item, Float position, Boolean refreshUI)","cpp":"bool SetMediaItemPosition(MediaItem* item, double position, bool refreshUI)"},"title":"SetMediaItemPosition","chapters":["Mediaitem Management","Item States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Redraws the screen only if refreshUI == true.\nSee [UpdateArrange](#UpdateArrange)().","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem item","description":"the MediaItem, that you want to set (un-)selected"},{"identifier":"boolean selected","description":"true, set the item selected; false, set it unselected"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetMediaItemSelected","return_values":[],"parameters":[{"identifier":"item","type":"MediaItem"},{"identifier":"selected","type":"boolean"}]},"eel":{"return_values":["SetMediaItemSelected"],"parameters":[{"type_name":"MediaItem","identifier":"item"},{"type_name":"bool","identifier":"selected"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.SetMediaItemSelected(MediaItem item, boolean selected)","eel":"SetMediaItemSelected(MediaItem item, bool selected)","python":"RPR_SetMediaItemSelected(MediaItem item, Boolean selected)","cpp":"void SetMediaItemSelected(MediaItem* item, bool selected)"},"title":"SetMediaItemSelected","chapters":["Mediaitem Management","Item States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Sets a mediaitem selected or unselected.\n\nUse [UpdateArrange](#UpdateArrange)() to make changes visible.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":"the take, whose source you want to set to a new one"},{"identifier":"PCM_source source","description":"the new source to be set to take"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetMediaItemTake_Source","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"source","type":"PCM_source"}]},"eel":{"method_name":"SetMediaItemTake_Source","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"PCM_source","identifier":"source"}]}},"requires":{"Reaper":"5.961"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, setting was successful; false, setting was unsuccessful"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SetMediaItemTake_Source(MediaItem_Take take, PCM_source source)","eel":"bool SetMediaItemTake_Source(MediaItem_Take take, PCM_source source)","python":"Boolean retval = RPR_SetMediaItemTake_Source(MediaItem_Take take, PCM_source source)","cpp":"bool SetMediaItemTake_Source(MediaItem_Take* take, PCM_source* source)"},"title":"SetMediaItemTake_Source","chapters":["Mediaitem Take Management","Take States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Set media source of media item take. The old source will not be destroyed, it is the caller's responsibility to retrieve it and destroy it after. If source already exists in any project, it will be duplicated before being set. C/C++ code should not use this and instead use GetSetMediaItemTakeInfo() with P_SOURCE to manage ownership directly.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem_Take take","description":"the take, whose attribute you want to set"},{"identifier":"string parmname","description":"the attribute, whose value you want to set"},{"identifier":"number newvalue","description":"the new value of the attribute"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetMediaItemTakeInfo_Value","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"parmname","type":"string"},{"identifier":"newvalue","type":"number"}]},"eel":{"method_name":"SetMediaItemTakeInfo_Value","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"identifier":"\"parmname\""},{"identifier":"newvalue"}]}},"requires":{"Reaper":"6.34"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, setting was successful; false, setting was unsuccessful"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SetMediaItemTakeInfo_Value(MediaItem_Take take, string parmname, number newvalue)","eel":"bool SetMediaItemTakeInfo_Value(MediaItem_Take take, \"parmname\", newvalue)","python":"Boolean retval = RPR_SetMediaItemTakeInfo_Value(MediaItem_Take take, String parmname, Float newvalue)","cpp":"bool SetMediaItemTakeInfo_Value(MediaItem_Take* take, const char* parmname, double newvalue)"},"title":"SetMediaItemTakeInfo_Value","chapters":["Mediaitem Take Management","Take States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Set media item take numerical-value attributes.\nD_STARTOFFS : double * : start offset in source media, in seconds\nD_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped\nD_PAN : double * : take pan, -1..1\nD_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc\nD_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc\nD_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc\nB_PPITCH : bool * : preserve pitch when changing playback rate\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right\nI_PITCHMODE : int * : pitch shifter mode, -1=projext default, otherwise high 2 bytes=shifter, low 2 bytes=parameter\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color.\nIP_TAKENUMBER : int : take number (read-only, returns the take number directly)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack tr","description":"the track, whose attribute you want to set"},{"identifier":"string parmname","description":"the attribute, that you want to set; refer description for possible attributes"},{"identifier":"number newvalue","description":"the new value, that you want to set to the attribute"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetMediaTrackInfo_Value","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"tr","type":"MediaTrack"},{"identifier":"parmname","type":"string"},{"identifier":"newvalue","type":"number"}]},"eel":{"method_name":"SetMediaTrackInfo_Value","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"tr"},{"identifier":"\"parmname\""},{"identifier":"newvalue"}]}},"requires":{"Reaper":"6.60"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, setting was successful; false, setting was unsuccessful"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SetMediaTrackInfo_Value(MediaTrack tr, string parmname, number newvalue)","eel":"bool SetMediaTrackInfo_Value(MediaTrack tr, \"parmname\", newvalue)","python":"Boolean retval = RPR_SetMediaTrackInfo_Value(MediaTrack tr, String parmname, Float newvalue)","cpp":"bool SetMediaTrackInfo_Value(MediaTrack* tr, const char* parmname, double newvalue)"},"title":"SetMediaTrackInfo_Value","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set track numerical-value attributes.\nB_MUTE : bool * : muted\nB_PHASE : bool * : track phase inverted\nB_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread playback state, read-only)\nIP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)\nI_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place\nB_SOLO_DEFEAT : bool * : when set, if anything else is soloed and this track is not muted, this track acts soloed\nI_FXEN : int * : fx enabled, 0=bypassed, !0=fx active\nI_RECARM : int * : record armed, 0=not record armed, 1=record armed\nI_RECINPUT : int * : record input, <0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.\nI_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace\nI_RECMODE_FLAGS : int * : record mode flags, &3=output recording mode (0=post fader, 1=pre-fx, 2=post-fx/pre-fader)\nI_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)\nI_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on\nB_AUTO_RECARM : bool * : automatically set record arm when selected (does not immediately affect recarm state, script should set directly if desired)\nI_VUMODE : int * : track vu mode, &1:disabled, &30==0:stereo peaks, &30==2:multichannel peaks, &30==4:stereo RMS, &30==8:combined RMS, &30==12:LUFS-M, &30==16:LUFS-S (readout=max), &30==20:LUFS-S (readout=current), &32:LUFS calculation on channels 1+2 only\nI_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch\nI_NCHAN : int * : number of track channels, 2-64, even numbers only\nI_SELECTED : int * : track selected, 0=unselected, 1=selected\nI_WNDH : int * : current TCP window height in pixels including envelopes (read-only)\nI_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)\nI_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)\nI_MCPX : int * : current MCP X-position in pixels relative to mixer container (read-only)\nI_MCPY : int * : current MCP Y-position in pixels relative to mixer container (read-only)\nI_MCPW : int * : current MCP width in pixels (read-only)\nI_MCPH : int * : current MCP height in pixels (read-only)\nI_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\nI_FOLDERCOMPACT : int * : folder compacted state (only valid on folders), 0=normal, 1=small, 2=tiny children\nI_MIDIHWOUT : int * : track midi hardware output index, <0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)\nI_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). 0, default color. If you do not |0x1000000, then it will not be used, but will store the color\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels\nB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)\nD_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_PAN : double * : trim pan of track, -1..1\nD_WIDTH : double * : width of track, -1..1\nD_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6\nD_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6\nI_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan\nD_PANLAW : double * : pan law of track, <0=project default, 0.5=-6dB, 0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain compensation, etc\nI_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with deprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid taper\nP_ENV:<envchunkname or P_ENV:{GUID... : TrackEnvelope* : read only. Chunkname can be <VOLENV, <PANENV, etc; GUID is the stringified envelope GUID.\nB_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)\nB_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)\nB_MAINSEND : bool * : track sends audio to parent\nC_MAINSEND_OFFS : char * : channel offset of track send to parent\nC_MAINSEND_NCH : char * : channel count of track send to parent (0=use all child track channels, 1=use one channel only)\nI_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes enabled (call UpdateTimeline() after changing)\nC_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)\nF_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)\nI_PLAY_OFFSET_FLAG : int * : track media playback offset state, &1=bypassed, &2=offset value is measured in samples (otherwise measured in seconds)\nD_PLAY_OFFSET : double * : track media playback offset, units depend on I_PLAY_OFFSET_FLAG","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject project","description":"the project-number. 0 for the current project. "},{"identifier":"number division","description":"the division-factor for the MIDI-editor's grid"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetMIDIEditorGrid","return_values":[],"parameters":[{"identifier":"project","type":"ReaProject"},{"identifier":"division","type":"number"}]},"eel":{"return_values":["SetMIDIEditorGrid"],"parameters":[{"type_name":"ReaProject","identifier":"project"},{"identifier":"division"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.SetMIDIEditorGrid(ReaProject project, number division)","eel":"SetMIDIEditorGrid(ReaProject project, division)","python":"RPR_SetMIDIEditorGrid(ReaProject project, Float division)","cpp":"void SetMIDIEditorGrid(ReaProject* project, double division)"},"title":"SetMIDIEditorGrid","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Set the MIDI editor grid division. 0.25=quarter note, 1.0/3.0=half note tripet, etc.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["userinterface","set","mixer","scroll","leftmost"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack leftmosttrack","description":"the requested leftmost-MediaTrack"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetMixerScroll","return_values":[{"identifier":"tr","type":"MediaTrack"}],"parameters":[{"identifier":"leftmosttrack","type":"MediaTrack"}]},"eel":{"method_name":"SetMixerScroll","return_values":["MediaTrack"],"parameters":[{"type_name":"MediaTrack","identifier":"leftmosttrack"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack tr","description":"the new leftmost-track as MediaTrack-object"}],"prog_lang":"*"},"functioncall":{"lua":"MediaTrack tr = reaper.SetMixerScroll(MediaTrack leftmosttrack)","eel":"MediaTrack SetMixerScroll(MediaTrack leftmosttrack)","python":"MediaTrack tr = RPR_SetMixerScroll(MediaTrack leftmosttrack)","cpp":"MediaTrack* SetMixerScroll(MediaTrack* leftmosttrack)"},"title":"SetMixerScroll","chapters":["User Interface","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Scroll the mixer so that leftmosttrack is the leftmost visible track. Returns the leftmost track after scrolling, which may be different from the passed-in track if there are not enough tracks to its right.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"string context","description":"the context of the mouse-modifier"},{"identifier":"integer modifier_flag","description":"the flag for the mouse-modifiers + keyboard-modifiers(see description)"},{"identifier":"string action","description":"the action to bind this modifier to"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetMouseModifier","return_values":[],"parameters":[{"identifier":"context","type":"string"},{"identifier":"modifier_flag","type":"integer"},{"identifier":"action","type":"string"}]},"eel":{"return_values":["SetMouseModifier"],"parameters":[{"identifier":"\"context\""},{"type_name":"int","identifier":"modifier_flag"},{"identifier":"\"action\""}]}},"requires":{"Reaper":"6.74"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.SetMouseModifier(string context, integer modifier_flag, string action)","eel":"SetMouseModifier(\"context\", int modifier_flag, \"action\")","python":"RPR_SetMouseModifier(String context, Int modifier_flag, String action)","cpp":"void SetMouseModifier(const char* context, int modifier_flag, const char* action)"},"title":"SetMouseModifier","chapters":["Input/Output Devices","Mouse"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Set the mouse modifier assignment for a specific modifier key assignment, in a specific context.\n\nContext is a string like \"MM\\_CTX\\_ITEM\". Find these strings by modifying an assignment in \nPreferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.\n\nModifier flag is a number from 0 to 15: add 1 for shift, 2 for control, 4 for alt, 8 for win.\n(macOS: add 1 for shift, 2 for command, 4 for opt, 8 for control.)\n\nFor left-click and double-click contexts, the action can be any built-in command ID number\nor any custom action ID string. Find built-in command IDs in the REAPER actions window\n(enable \"show action IDs\" in the context menu), and find custom action ID strings in reaper-kb.ini.\n\nFor built-in mouse modifier behaviors, find action IDs (which will be low numbers)\nby modifying an assignment in Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.\nAssigning an action of -1 will reset that mouse modifier behavior to factory default.\nSee [GetMouseModifier](#GetMouseModifier).\n\nNote: the action string may have a space and 'c' or 'm' appended to it to specify command ID vs mouse modifier ID.\nSpecial case: SetMouseModifier(context, -1, -1) will reset the entire context to default.\nSpecial case: SetMouseModifier(-1, -1, -1) will reset all contexts to default.\n\nSee [Docs for reaper-mouse.ini](Reaper-Filetype-Descriptions.html#Reaper-mouse.ini) for more details","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","set","selected","track"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack track","description":"the MediaTrack to be selected"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetOnlyTrackSelected","return_values":[],"parameters":[{"identifier":"track","type":"MediaTrack"}]},"eel":{"return_values":["SetOnlyTrackSelected"],"parameters":[{"type_name":"MediaTrack","identifier":"track"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.SetOnlyTrackSelected(MediaTrack track)","eel":"SetOnlyTrackSelected(MediaTrack track)","python":"RPR_SetOnlyTrackSelected(MediaTrack track)","cpp":"void SetOnlyTrackSelected(MediaTrack* track)"},"title":"SetOnlyTrackSelected","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Set exactly one track selected, deselect all others.\n\nThis sets the track as Last-Touched-Track as well.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject project","description":"the project-number. 0 for the current project. "},{"identifier":"number division","description":"the division-factor for the arange-view's grid"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetProjectGrid","return_values":[],"parameters":[{"identifier":"project","type":"ReaProject"},{"identifier":"division","type":"number"}]},"eel":{"return_values":["SetProjectGrid"],"parameters":[{"type_name":"ReaProject","identifier":"project"},{"identifier":"division"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.SetProjectGrid(ReaProject project, number division)","eel":"SetProjectGrid(ReaProject project, division)","python":"RPR_SetProjectGrid(ReaProject project, Float division)","cpp":"void SetProjectGrid(ReaProject* project, double division)"},"title":"SetProjectGrid","chapters":["Project Management","Project States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["markermanagement","set","marker","region","position","name"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"integer markrgnindexnumber","description":"the shown number of the marker to be altered"},{"identifier":"boolean isrgn","description":"true, marker is a region; false, marker is a normal marker"},{"identifier":"number pos","description":"the position of the new marker in seconds"},{"identifier":"number rgnend","description":"the end of a region, if isrgn is true"},{"identifier":"string name","description":"shown name of the marker"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetProjectMarker","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"markrgnindexnumber","type":"integer"},{"identifier":"isrgn","type":"boolean"},{"identifier":"pos","type":"number"},{"identifier":"rgnend","type":"number"},{"identifier":"name","type":"string"}]},"eel":{"method_name":"SetProjectMarker","return_values":["bool"],"parameters":[{"type_name":"int","identifier":"markrgnindexnumber"},{"type_name":"bool","identifier":"isrgn"},{"identifier":"pos"},{"identifier":"rgnend"},{"identifier":"\"name\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, setting the marker worked; false, setting the marker didn't work"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SetProjectMarker(integer markrgnindexnumber, boolean isrgn, number pos, number rgnend, string name)","eel":"bool SetProjectMarker(int markrgnindexnumber, bool isrgn, pos, rgnend, \"name\")","python":"Boolean retval = RPR_SetProjectMarker(Int markrgnindexnumber, Boolean isrgn, Float pos, Float rgnend, String name)","cpp":"bool SetProjectMarker(int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name)"},"title":"SetProjectMarker","chapters":["Marker Management","Project Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets/alters an existing project-marker\n\nNote: this function can't clear a marker's name (an empty string will leave the name unchanged), see SetProjectMarker4.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["markermanagement","set","marker","region","position","name","project"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"integer markrgnindexnumber","description":"the shown number of the marker to be altered"},{"identifier":"boolean isrgn","description":"true, marker is a region; false, marker is a normal marker"},{"identifier":"number pos","description":"the position of the new marker in seconds"},{"identifier":"number rgnend","description":"the end of a region, if isrgn is true"},{"identifier":"string name","description":"shown name of the marker"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetProjectMarker2","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"markrgnindexnumber","type":"integer"},{"identifier":"isrgn","type":"boolean"},{"identifier":"pos","type":"number"},{"identifier":"rgnend","type":"number"},{"identifier":"name","type":"string"}]},"eel":{"method_name":"SetProjectMarker2","return_values":["bool"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"int","identifier":"markrgnindexnumber"},{"type_name":"bool","identifier":"isrgn"},{"identifier":"pos"},{"identifier":"rgnend"},{"identifier":"\"name\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, setting the marker worked; false, setting the marker didn't work"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SetProjectMarker2(ReaProject proj, integer markrgnindexnumber, boolean isrgn, number pos, number rgnend, string name)","eel":"bool SetProjectMarker2(ReaProject proj, int markrgnindexnumber, bool isrgn, pos, rgnend, \"name\")","python":"Boolean retval = RPR_SetProjectMarker2(ReaProject proj, Int markrgnindexnumber, Boolean isrgn, Float pos, Float rgnend, String name)","cpp":"bool SetProjectMarker2(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name)"},"title":"SetProjectMarker2","chapters":["Marker Management","Project Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets/alters an existing project-marker in a given project.\n\nNote: this function can't clear a marker's name (an empty string will leave the name unchanged), see SetProjectMarker4.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["markermanagement","set","marker","region","position","name","project","color"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"integer markrgnindexnumber","description":"the shown number of the marker to be altered"},{"identifier":"boolean isrgn","description":"true, marker is a region; false, marker is a normal marker"},{"identifier":"number pos","description":"the position of the new marker in seconds"},{"identifier":"number rgnend","description":"the end of a region, if isrgn is true"},{"identifier":"string name","description":"shown name of the marker"},{"identifier":"integer color","description":"the new color-value as native color-value"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetProjectMarker3","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"markrgnindexnumber","type":"integer"},{"identifier":"isrgn","type":"boolean"},{"identifier":"pos","type":"number"},{"identifier":"rgnend","type":"number"},{"identifier":"name","type":"string"},{"identifier":"color","type":"integer"}]},"eel":{"method_name":"SetProjectMarker3","return_values":["bool"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"int","identifier":"markrgnindexnumber"},{"type_name":"bool","identifier":"isrgn"},{"identifier":"pos"},{"identifier":"rgnend"},{"identifier":"\"name\""},{"type_name":"int","identifier":"color"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, setting the marker worked; false, setting the marker didn't work"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SetProjectMarker3(ReaProject proj, integer markrgnindexnumber, boolean isrgn, number pos, number rgnend, string name, integer color)","eel":"bool SetProjectMarker3(ReaProject proj, int markrgnindexnumber, bool isrgn, pos, rgnend, \"name\", int color)","python":"Boolean retval = RPR_SetProjectMarker3(ReaProject proj, Int markrgnindexnumber, Boolean isrgn, Float pos, Float rgnend, String name, Int color)","cpp":"bool SetProjectMarker3(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name, int color)"},"title":"SetProjectMarker3","chapters":["Marker Management","Project Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets/alters an existing project-marker in a given project. Differs from SetProjectMarker2 and SetProjectMarker, that you can set color as well.\nColor should be 0 to not change, or ColorToNative(r,g,b)|0x1000000\n\nset color=1&~0x10000000 to reset to default color for markers/regions\n\nNote: this function can't clear a marker's name (an empty string will leave the name unchanged), see SetProjectMarker4.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["markermanagement","set","marker","region","position","name","project","color","clear name"],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"integer markrgnindexnumber","description":"the shown number of the marker to be altered"},{"identifier":"boolean isrgn","description":"true, marker is a region; false, marker is a normal marker"},{"identifier":"number pos","description":"the position of the new marker in seconds"},{"identifier":"number rgnend","description":"the end of a region, if isrgn is true"},{"identifier":"string name","description":"shown name of the marker"},{"identifier":"integer color","description":"the new color-value as native color-value"},{"identifier":"integer flags","description":"&1 to clear name"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetProjectMarker4","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"markrgnindexnumber","type":"integer"},{"identifier":"isrgn","type":"boolean"},{"identifier":"pos","type":"number"},{"identifier":"rgnend","type":"number"},{"identifier":"name","type":"string"},{"identifier":"color","type":"integer"},{"identifier":"flags","type":"integer"}]},"eel":{"method_name":"SetProjectMarker4","return_values":["bool"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"int","identifier":"markrgnindexnumber"},{"type_name":"bool","identifier":"isrgn"},{"identifier":"pos"},{"identifier":"rgnend"},{"identifier":"\"name\""},{"type_name":"int","identifier":"color"},{"type_name":"int","identifier":"flags"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, setting the marker worked; false, setting the marker didn't work"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SetProjectMarker4(ReaProject proj, integer markrgnindexnumber, boolean isrgn, number pos, number rgnend, string name, integer color, integer flags)","eel":"bool SetProjectMarker4(ReaProject proj, int markrgnindexnumber, bool isrgn, pos, rgnend, \"name\", int color, int flags)","python":"Boolean retval = RPR_SetProjectMarker4(ReaProject proj, Int markrgnindexnumber, Boolean isrgn, Float pos, Float rgnend, String name, Int color, Int flags)","cpp":"bool SetProjectMarker4(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name, int color, int flags)"},"title":"SetProjectMarker4","chapters":["Marker Management","Project Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets/alters an existing project-marker in a given project.\ncolor should be 0 to not change, or ColorToNative(r,g,b)|0x1000000, flags&1 to clear name\n\nset color=1&~0x10000000 to reset to default color for markers/regions","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"integer markrgnidx","description":"the index within all markers(NOT the shown number!)"},{"identifier":"boolean isrgn","description":"true, set it as a region; false, set it as a regular marker"},{"identifier":"number pos","description":"the position of the marker"},{"identifier":"number rgnend","description":"the posiiton of the end of the region(if isrgn=false, simply set this to 0)"},{"identifier":"integer IDnumber","description":"the shown marker/region-number"},{"identifier":"string name","description":"the name of the marker"},{"identifier":"integer color","description":"the color of the marker"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetProjectMarkerByIndex","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"markrgnidx","type":"integer"},{"identifier":"isrgn","type":"boolean"},{"identifier":"pos","type":"number"},{"identifier":"rgnend","type":"number"},{"identifier":"IDnumber","type":"integer"},{"identifier":"name","type":"string"},{"identifier":"color","type":"integer"}]},"eel":{"method_name":"SetProjectMarkerByIndex","return_values":["bool"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"int","identifier":"markrgnidx"},{"type_name":"bool","identifier":"isrgn"},{"identifier":"pos"},{"identifier":"rgnend"},{"type_name":"int","identifier":"IDnumber"},{"identifier":"\"name\""},{"type_name":"int","identifier":"color"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, setting marker/region was successful; false, setting marker/region was unsuccessful"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SetProjectMarkerByIndex(ReaProject proj, integer markrgnidx, boolean isrgn, number pos, number rgnend, integer IDnumber, string name, integer color)","eel":"bool SetProjectMarkerByIndex(ReaProject proj, int markrgnidx, bool isrgn, pos, rgnend, int IDnumber, \"name\", int color)","python":"Boolean retval = RPR_SetProjectMarkerByIndex(ReaProject proj, Int markrgnidx, Boolean isrgn, Float pos, Float rgnend, Int IDnumber, String name, Int color)","cpp":"bool SetProjectMarkerByIndex(ReaProject* proj, int markrgnidx, bool isrgn, double pos, double rgnend, int IDnumber, const char* name, int color)"},"title":"SetProjectMarkerByIndex","chapters":["Marker Management","Project Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"set color=1&~0x10000000 to reset to default color for markers/regions","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["marker management","set","marker"],"params":{"markup_type":"plaintext","param_count":9,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"integer markrgnidx","description":"the index within all markers(NOT the shown number!)"},{"identifier":"boolean isrgn","description":"true, set it as a region; false, set it as a regular marker"},{"identifier":"number pos","description":"the position of the marker"},{"identifier":"number rgnend","description":"the posiiton of the end of the region(if isrgn=false, simply set this to 0)"},{"identifier":"integer IDnumber","description":"the shown marker/region-number"},{"identifier":"string name","description":"the name of the marker"},{"identifier":"integer color","description":"the color of the marker"},{"identifier":"integer flags","description":"&1 to clear name"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetProjectMarkerByIndex2","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"markrgnidx","type":"integer"},{"identifier":"isrgn","type":"boolean"},{"identifier":"pos","type":"number"},{"identifier":"rgnend","type":"number"},{"identifier":"IDnumber","type":"integer"},{"identifier":"name","type":"string"},{"identifier":"color","type":"integer"},{"identifier":"flags","type":"integer"}]},"eel":{"method_name":"SetProjectMarkerByIndex2","return_values":["bool"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"int","identifier":"markrgnidx"},{"type_name":"bool","identifier":"isrgn"},{"identifier":"pos"},{"identifier":"rgnend"},{"type_name":"int","identifier":"IDnumber"},{"identifier":"\"name\""},{"type_name":"int","identifier":"color"},{"type_name":"int","identifier":"flags"}]}},"requires":{"Reaper":"6.71"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, setting was successful; false, setting was unsuccessful"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SetProjectMarkerByIndex2(ReaProject proj, integer markrgnidx, boolean isrgn, number pos, number rgnend, integer IDnumber, string name, integer color, integer flags)","eel":"bool SetProjectMarkerByIndex2(ReaProject proj, int markrgnidx, bool isrgn, pos, rgnend, int IDnumber, \"name\", int color, int flags)","python":"Boolean retval = RPR_SetProjectMarkerByIndex2(ReaProject proj, Int markrgnidx, Boolean isrgn, Float pos, Float rgnend, Int IDnumber, String name, Int color, Int flags)","cpp":"bool SetProjectMarkerByIndex2(ReaProject* proj, int markrgnidx, bool isrgn, double pos, double rgnend, int IDnumber, const char* name, int color, int flags)"},"title":"SetProjectMarkerByIndex2","chapters":["Marker Management","Project Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Differs from SetProjectMarker4 in that markrgnidx is 0 for the first marker/region, 1 for the next, etc, rather than representing the displayed marker/region ID number (see [SetProjectMarker3](#SetProjectMarker3)). Function will fail if attempting to set a duplicate ID number for a region (duplicate ID numbers for markers are OK).\n\nflags&1 to clear name\nflags&2, markers will not be re-sorted, and after making updates, you MUST call SetProjectMarkerByIndex2 with markrgnidx=-1 and flags&2 to force re-sort/UI updates.\n\nset color=1&~0x10000000 to reset to default color for markers/regions","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["projectmanagement","extended","state","value","section","key","extname","set"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"string extname","description":"the section, in which the key/value is stored"},{"identifier":"string key","description":"the key, that stores the value"},{"identifier":"string value","description":"the value, that's stored in the key"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetProjExtState","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"extname","type":"string"},{"identifier":"key","type":"string"},{"identifier":"value","type":"string"}]},"eel":{"method_name":"SetProjExtState","return_values":["int"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"identifier":"\"extname\""},{"identifier":"\"key\""},{"identifier":"\"value\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the number of key/value-pairs in the extname"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.SetProjExtState(ReaProject proj, string extname, string key, string value)","eel":"int SetProjExtState(ReaProject proj, \"extname\", \"key\", \"value\")","python":"Int retval = RPR_SetProjExtState(ReaProject proj, String extname, String key, String value)","cpp":"int SetProjExtState(ReaProject* proj, const char* extname, const char* key, const char* value)"},"title":"SetProjExtState","chapters":["Project Management","Project Extension States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Save a key/value pair for a specific extension, to be restored the next time this specific project is loaded. Typically extname will be the name of a reascript or extension section. If key is NULL or \"\", all extended data for that extname will be deleted. If val is NULL or \"\", the data previously associated with that key will be deleted. Returns the size of the state for this extname. \n\nImportant: if you want to store binary data, \\0-bytes (Null-bytes) cause trouble. Everything after the first \\0-byte will be cut off when reading the extstate via GetProjExtState.\nIf you want to store data including \\0-bytes, convert them first into a Hex-string or Base64 and decode them after reading it back.\nThat way, you can be sure, the data stays intact.\n\nAlso Important: always use a section-name, that is unique to you. For instance, add your name into the section-name, \nso it's less likely, that somebody else uses the same section and accidentally overwrites your keys.\nSomething like: \"mespotine_MyCoolScript.lua\"\n\nHere are some of the sections used by ReaTeam-scripts and extensions. Don't use to avoid possible name-conflicts.\nIf your section is missing, contact me and I'll add it too:\n    \"ABLM2 Toggle\"\n    \"AB_LM Toggle\"\n    \"ak5k\"\n    \"ak5k_Drums to MIDI\"\n    \"com.pandabot.ChordGun\"\n    \"com.pandabot.CopyAndPasteRhythm\"\"\n    \"com.pandabot.selectEveryNItemsWithinSelection\"\n    \"com.pandabot.selectEveryNNotesWithinSelection\"\n    \"com.pandabot.selectEveryNTracksWithinSelection\"\n    \"com.timtam.AccessiChord\"\n    \"Edit Groups\"\n    \"FindReplaceStorage\"\n    \"js_Thumbnails\"\n    \"LFO Generator\"\n    \"Live_Inst_\"\n    \"practice_coach\"\n    \"RODILAB_Hide_tracks_with_no_items_in_time_selection\"\n    \"RODILAB_Track_name_groups\"\n    \"ReaL_Comps\"\n    \"RegionRenderMatrixState\"\n    \"Smart Zoom\"\n    \"spk77 Track Tags\"\n    \"TrackBasedItems\"\n    \"time\"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"integer regionindex","description":"the shown region-number"},{"identifier":"MediaTrack track","description":"the MediaTrack to add to the render-matrix for this region"},{"identifier":"integer addorremove","description":"greater than 0, add; lower than 0, remove from the render-matrix"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetRegionRenderMatrix","return_values":[],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"regionindex","type":"integer"},{"identifier":"track","type":"MediaTrack"},{"identifier":"addorremove","type":"integer"}]},"eel":{"return_values":["SetRegionRenderMatrix"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"int","identifier":"regionindex"},{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"addorremove"}]}},"requires":{"Reaper":"6.68"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.SetRegionRenderMatrix(ReaProject proj, integer regionindex, MediaTrack track, integer addorremove)","eel":"SetRegionRenderMatrix(ReaProject proj, int regionindex, MediaTrack track, int addorremove)","python":"RPR_SetRegionRenderMatrix(ReaProject proj, Int regionindex, MediaTrack track, Int addorremove)","cpp":"void SetRegionRenderMatrix(ReaProject* proj, int regionindex, MediaTrack* track, int addorremove)"},"title":"SetRegionRenderMatrix","chapters":["Marker Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Add (flag > 0) or remove (flag < 0) a track from this region when using the region render matrix. \n\nIf adding, flag==2 means force mono, flag==4 means force stereo, flag==N means force N/2 channels.\n\nsee TrackList_AdjustWindows to refresh the region-render-matrix","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["markermanagement","set","takemarker"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"MediaItem_Take take","description":"the take, whose take-marker you want to delete"},{"identifier":"integer idx","description":"the id of the marker within the take, 0 for the first, 1 for the second, etc."},{"identifier":"string nameIn","description":"the name of the takemarker"},{"identifier":"optional number srcposIn","description":"the position of the takemarker; omit if you want to keep the old position; must be given, when inserting a new takemarker"},{"identifier":"optional integer colorIn","description":"the color of the takemarker"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetTakeMarker","return_values":[{"identifier":"index","type":"integer"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"idx","type":"integer"},{"identifier":"nameIn","type":"string"},{"isOptional":true,"type":"number","identifier":"srcposIn"},{"isOptional":true,"type":"integer","identifier":"colorIn"}]},"eel":{"method_name":"index","return_values":["int"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"idx"},{"identifier":"\"nameIn\""},{"type_name":"optional","identifier":"srcposIn"},{"identifier":"colorIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.09"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer index","description":"index of the new or update take-marker"}],"prog_lang":"*"},"functioncall":{"lua":"integer index = reaper.SetTakeMarker(MediaItem_Take take, integer idx, string nameIn, optional number srcposIn, optional integer colorIn)","eel":"int index = SetTakeMarker(MediaItem_Take take, int idx, \"nameIn\", optional srcposIn, optional int colorIn)","python":"(Int index, MediaItem_Take take, Int idx, String nameIn, Float srcposInOptional, Int colorInOptional) = RPR_SetTakeMarker(take, idx, nameIn, srcposInOptional, colorInOptional)","cpp":"int index = SetTakeMarker(MediaItem_Take* take, int idx, const char* nameIn, double* srcposInOptional, int* colorInOptional)"},"title":"SetTakeMarker","chapters":["Marker Management","Take Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Inserts or updates a take marker. If idx<0, a take marker will be added, otherwise an existing take marker will be updated. Returns the index of the new or updated take marker (which may change if srcPos is updated).\n\nWhen inserting a new takemarker, parameter srcposIn must be given!","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer idx","description":""},{"identifier":"number pos","description":""},{"identifier":"optional number srcposIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetTakeStretchMarker","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"idx","type":"integer"},{"identifier":"pos","type":"number"},{"isOptional":true,"type":"number","identifier":"srcposIn"}]},"eel":{"method_name":"SetTakeStretchMarker","return_values":["int"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"idx"},{"identifier":"pos"},{"type_name":"optional","identifier":"srcposIn"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.SetTakeStretchMarker(MediaItem_Take take, integer idx, number pos, optional number srcposIn)","eel":"int SetTakeStretchMarker(MediaItem_Take take, int idx, pos, optional srcposIn)","python":"Int retval = RPR_SetTakeStretchMarker(MediaItem_Take take, Int idx, Float pos, const double srcposInOptional)","cpp":"int SetTakeStretchMarker(MediaItem_Take* take, int idx, double pos, const double* srcposInOptional)"},"title":"SetTakeStretchMarker","chapters":["Marker Management","Stretch Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Adds or updates a stretch marker. If idx>0, stretch marker will be added. If idx>=0, stretch marker will be updated. When adding, if srcposInOptional is omitted, source position will be auto-calculated. When updating a stretch marker, if srcposInOptional is omitted, srcpos will not be modified. Position/srcposition values will be constrained to nearby stretch markers. Returns index of stretch marker, or -1 if did not insert (or marker already existed at time).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer idx","description":""},{"identifier":"number slope","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetTakeStretchMarkerSlope","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"idx","type":"integer"},{"identifier":"slope","type":"number"}]},"eel":{"method_name":"SetTakeStretchMarkerSlope","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"idx"},{"identifier":"slope"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SetTakeStretchMarkerSlope(MediaItem_Take take, integer idx, number slope)","eel":"bool SetTakeStretchMarkerSlope(MediaItem_Take take, int idx, slope)","python":"Boolean retval = RPR_SetTakeStretchMarkerSlope(MediaItem_Take take, Int idx, Float slope)","cpp":"bool SetTakeStretchMarkerSlope(MediaItem_Take* take, int idx, double slope)"},"title":"SetTakeStretchMarkerSlope","chapters":["Marker Management","Stretch Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set take stretch marker slope","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":9,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"integer ptidx","description":""},{"identifier":"number timepos","description":""},{"identifier":"integer measurepos","description":""},{"identifier":"number beatpos","description":""},{"identifier":"number bpm","description":""},{"identifier":"integer timesig_num","description":""},{"identifier":"integer timesig_denom","description":""},{"identifier":"boolean lineartempo","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetTempoTimeSigMarker","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"ptidx","type":"integer"},{"identifier":"timepos","type":"number"},{"identifier":"measurepos","type":"integer"},{"identifier":"beatpos","type":"number"},{"identifier":"bpm","type":"number"},{"identifier":"timesig_num","type":"integer"},{"identifier":"timesig_denom","type":"integer"},{"identifier":"lineartempo","type":"boolean"}]},"eel":{"method_name":"SetTempoTimeSigMarker","return_values":["bool"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"int","identifier":"ptidx"},{"identifier":"timepos"},{"type_name":"int","identifier":"measurepos"},{"identifier":"beatpos"},{"identifier":"bpm"},{"type_name":"int","identifier":"timesig_num"},{"type_name":"int","identifier":"timesig_denom"},{"type_name":"bool","identifier":"lineartempo"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SetTempoTimeSigMarker(ReaProject proj, integer ptidx, number timepos, integer measurepos, number beatpos, number bpm, integer timesig_num, integer timesig_denom, boolean lineartempo)","eel":"bool SetTempoTimeSigMarker(ReaProject proj, int ptidx, timepos, int measurepos, beatpos, bpm, int timesig_num, int timesig_denom, bool lineartempo)","python":"Boolean retval = RPR_SetTempoTimeSigMarker(ReaProject proj, Int ptidx, Float timepos, Int measurepos, Float beatpos, Float bpm, Int timesig_num, Int timesig_denom, Boolean lineartempo)","cpp":"bool SetTempoTimeSigMarker(ReaProject* proj, int ptidx, double timepos, int measurepos, double beatpos, double bpm, int timesig_num, int timesig_denom, bool lineartempo)"},"title":"SetTempoTimeSigMarker","chapters":["Marker Management","Time Signature Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set parameters of a tempo/time signature marker. Provide either timepos (with measurepos=-1, beatpos=-1), or measurepos and beatpos (with timepos=-1). If timesig_num and timesig_denom are zero, the previous time signature will be used. \n\nptidx=-1 will insert a new tempo/time signature marker. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"string ini_key","description":""},{"identifier":"integer color","description":""},{"identifier":"integer flags","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetThemeColor","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"ini_key","type":"string"},{"identifier":"color","type":"integer"},{"identifier":"flags","type":"integer"}]},"eel":{"method_name":"SetThemeColor","return_values":["int"],"parameters":[{"identifier":"\"ini_key\""},{"type_name":"int","identifier":"color"},{"type_name":"int","identifier":"flags"}]}},"requires":{"Reaper":"6.74"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.SetThemeColor(string ini_key, integer color, integer flags)","eel":"int SetThemeColor(\"ini_key\", int color, int flags)","python":"Int retval = RPR_SetThemeColor(String ini_key, Int color, Int flagsOptional)","cpp":"int SetThemeColor(const char* ini_key, int color, int flagsOptional)"},"title":"SetThemeColor","chapters":["Theme Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Temporarily updates the theme color to the color specified (or the theme default color if -1 is specified). \nReturns -1 on failure, otherwise returns the color (or transformed-color). \n\nNote that the UI is not updated by this, the caller should call UpdateArrange etc as necessary. \n\nIf the low bit of flags is set, any color transformations are bypassed. \nTo read a value see GetThemeColor\n\n * col_main_bg2 : Main window/transport background \n * col_main_text2 : Main window/transport text \n * col_main_textshadow : Main window text shadow (ignored if too close to text color) \n * col_main_3dhl : Main window 3D highlight \n * col_main_3dsh : Main window 3D shadow \n * col_main_resize2 : Main window pane resize mouseover \n * col_main_text : Themed Window text \n * col_main_bg : Themed Window background \n * col_main_editbk : Themed Window edit background \n * col_nodarkmodemiscwnd : Do not use window theming on macOS dark mode\n * col_transport_editbk : Transport edit background \n * col_toolbar_text : Toolbar button text \n * col_toolbar_text_on : Toolbar button enabled text \n * col_toolbar_frame : Toolbar frame when floating or docked \n * toolbararmed_color : Toolbar button armed color \n * toolbararmed_drawmode : Toolbar button armed fill mode \n * io_text : I/O window text \n * io_3dhl : I/O window 3D highlight \n * io_3dsh : I/O window 3D shadow \n * genlist_bg : Window list background \n * genlist_fg : Window list text \n * genlist_grid : Window list grid lines \n * genlist_selbg : Window list selected row \n * genlist_selfg : Window list selected text \n * genlist_seliabg : Window list selected row (inactive) \n * genlist_seliafg : Window list selected text (inactive) \n * genlist_hilite : Window list highlighted text \n * genlist_hilite_sel : Window list highlighted selected text \n * col_buttonbg : Button background \n * col_tcp_text : Track panel text \n * col_tcp_textsel : Track panel (selected) text \n * col_seltrack : Selected track control panel background \n * col_seltrack2 : Unselected track control panel background (enabled with a checkbox above) \n * tcplocked_color : Locked track control panel overlay color \n * tcplocked_drawmode : Locked track control panel fill mode \n * col_tracklistbg : Empty track list area \n * col_mixerbg : Empty mixer list area \n * col_arrangebg : Empty arrange view area \n * arrange_vgrid : Empty arrange view area vertical grid shading \n * col_fadearm : Fader background when automation recording \n * col_fadearm2 : Fader background when automation playing \n * col_fadearm3 : Fader background when in inactive touch/latch \n * col_tl_fg : Timeline foreground \n * col_tl_fg2 : Timeline foreground (secondary markings) \n * col_tl_bg : Timeline background \n * col_tl_bgsel : Time selection color \n * timesel_drawmode : Time selection fill mode \n * col_tl_bgsel2 : Timeline background (in loop points) \n * col_trans_bg : Transport status background \n * col_trans_fg : Transport status text \n * playrate_edited : Project play rate control when not 1.0 \n * col_mi_label : Media item label \n * col_mi_label_sel : Media item label (selected) \n * col_mi_label_float : Floating media item label \n * col_mi_label_float_sel : Floating media item label (selected) \n * col_mi_bg : Media item background (odd tracks) \n * col_mi_bg2 : Media item background (even tracks) \n * col_tr1_itembgsel : Media item background selected (odd tracks) \n * col_tr2_itembgsel : Media item background selected (even tracks) \n * itembg_drawmode : Media item background fill mode \n * col_tr1_peaks : Media item peaks (odd tracks) \n * col_tr2_peaks : Media item peaks (even tracks) \n * col_tr1_ps2 : Media item peaks when selected (odd tracks) \n * col_tr2_ps2 : Media item peaks when selected (even tracks) \n * col_peaksedge : Media item peaks edge highlight (odd tracks) \n * col_peaksedge2 : Media item peaks edge highlight (even tracks) \n * col_peaksedgesel : Media item peaks edge highlight when selected (odd tracks) \n * col_peaksedgesel2 : Media item peaks edge highlight when selected (even tracks) \n * cc_chase_drawmode : Media item MIDI CC peaks fill mode \n * col_peaksfade : Media item peaks when active in crossfade editor (fade-out) \n * col_peaksfade2 : Media item peaks when active in crossfade editor (fade-in) \n * col_mi_fades : Media item fade/volume controls \n * fadezone_color : Media item fade quiet zone fill color \n * fadezone_drawmode : Media item fade quiet zone fill mode \n * fadearea_color : Media item fade full area fill color \n * fadearea_drawmode : Media item fade full area fill mode \n * col_mi_fade2 : Media item edges of controls \n * col_mi_fade2_drawmode : Media item edges of controls blend mode \n * item_grouphl : Media item edge when selected via grouping \n * col_offlinetext : Media item \"offline\" text \n * col_stretchmarker : Media item stretch marker line \n * col_stretchmarker_h0 : Media item stretch marker handle (1x) \n * col_stretchmarker_h1 : Media item stretch marker handle (>1x) \n * col_stretchmarker_h2 : Media item stretch marker handle (<1x) \n * col_stretchmarker_b : Media item stretch marker handle edge \n * col_stretchmarkerm : Media item stretch marker blend mode \n * col_stretchmarker_text : Media item stretch marker text \n * col_stretchmarker_tm : Media item transient guide handle \n * take_marker : Media item take marker \n * selitem_tag : Selected media item bar color \n * activetake_tag : Active media item take bar color \n * col_tr1_bg : Track background (odd tracks) \n * col_tr2_bg : Track background (even tracks) \n * selcol_tr1_bg : Selected track background (odd tracks) \n * selcol_tr2_bg : Selected track background (even tracks) \n * col_tr1_divline : Track divider line (odd tracks) \n * col_tr2_divline : Track divider line (even tracks) \n * col_envlane1_divline : Envelope lane divider line (odd tracks) \n * col_envlane2_divline : Envelope lane divider line (even tracks) \n * mute_overlay_col : Muted/unsoloed track/item overlay color \n * mute_overlay_mode : Muted/unsoloed track/item overlay mode\n * inactive_take_overlay_col : Inactive take overlay color\n * inactive_take_overlay_mode : Inactive take overlay mode\n * locked_overlay_col : Locked track/item overlay color\n * locked_overlay_mode : Locked track/item overlay mode\n * marquee_fill : Marquee fill \n * marquee_drawmode : Marquee fill mode \n * marquee_outline : Marquee outline \n * marqueezoom_fill : Marquee zoom fill \n * marqueezoom_drawmode : Marquee zoom fill mode \n * marqueezoom_outline : Marquee zoom outline \n * areasel_fill : Razor edit area fill \n * areasel_drawmode : Razor edit area fill mode \n * areasel_outline : Razor edit area outline \n * areasel_outlinemode : Razor edit area outline mode \n * col_cursor : Edit cursor \n * col_cursor2 : Edit cursor (alternate) \n * playcursor_color : Play cursor \n * playcursor_drawmode : Play cursor fill mode \n * col_gridlines2 : Grid lines (start of measure) \n * col_gridlines2dm : Grid lines (start of measure) - draw mode \n * col_gridlines3 : Grid lines (start of beats) \n * col_gridlines3dm : Grid lines (start of beats) - draw mode \n * col_gridlines : Grid lines (in between beats) \n * col_gridlines1dm : Grid lines (in between beats) - draw mode \n * guideline_color : Editing guide line color \n * guideline_drawmode : Editing guide fill mode \n * region : Regions \n * region_lane_bg : Region lane background \n * region_lane_text : Region lane text \n * marker : Markers \n * marker_lane_bg : Marker lane background \n * marker_lane_text : Marker lane text \n * col_tsigmark : Time signature change marker \n * ts_lane_bg : Time signature lane background \n * ts_lane_text : Time signature lane text \n * timesig_sel_bg : Time signature marker selected background \n * col_routinghl1 : Routing matrix row highlight \n * col_routinghl2 : Routing matrix column highlight \n * col_routingact : Routing matrix input activity highlight\n * col_vudoint : Theme has interlaced VU meters \n * col_vuclip : VU meter clip indicator \n * col_vutop : VU meter top \n * col_vumid : VU meter middle \n * col_vubot : VU meter bottom \n * col_vuintcol : VU meter interlace/edge color \n * col_vumidi : VU meter midi activity \n * col_vuind1 : VU (indicator) - no signal \n * col_vuind2 : VU (indicator) - low signal \n * col_vuind3 : VU (indicator) - med signal \n * col_vuind4 : VU (indicator) - hot signal \n * mcp_sends_normal : Sends text: normal \n * mcp_sends_muted : Sends text: muted \n * mcp_send_midihw : Sends text: MIDI hardware \n * mcp_sends_levels : Sends level \n * mcp_fx_normal : FX insert text: normal \n * mcp_fx_bypassed : FX insert text: bypassed \n * mcp_fx_offlined : FX insert text: offline \n * mcp_fxparm_normal : FX parameter text: normal \n * mcp_fxparm_bypassed : FX parameter text: bypassed \n * mcp_fxparm_offlined : FX parameter text: offline \n * tcp_list_scrollbar : List scrollbar (track panel) \n * tcp_list_scrollbar_mode : List scrollbar (track panel) - draw mode \n * tcp_list_scrollbar_mouseover : List scrollbar mouseover (track panel) \n * tcp_list_scrollbar_mouseover_mode : List scrollbar mouseover (track panel) - draw mode \n * mcp_list_scrollbar : List scrollbar (mixer panel) \n * mcp_list_scrollbar_mode : List scrollbar (mixer panel) - draw mode \n * mcp_list_scrollbar_mouseover : List scrollbar mouseover (mixer panel) \n * mcp_list_scrollbar_mouseover_mode : List scrollbar mouseover (mixer panel) - draw mode \n * midi_rulerbg : MIDI editor ruler background \n * midi_rulerfg : MIDI editor ruler text \n * midi_grid2 : MIDI editor grid line (start of measure) \n * midi_griddm2 : MIDI editor grid line (start of measure) - draw mode \n * midi_grid3 : MIDI editor grid line (start of beats) \n * midi_griddm3 : MIDI editor grid line (start of beats) - draw mode \n * midi_grid1 : MIDI editor grid line (between beats) \n * midi_griddm1 : MIDI editor grid line (between beats) - draw mode \n * midi_trackbg1 : MIDI editor background color (naturals) \n * midi_trackbg2 : MIDI editor background color (sharps/flats) \n * midi_trackbg_outer1 : MIDI editor background color, out of bounds (naturals) \n * midi_trackbg_outer2 : MIDI editor background color, out of bounds (sharps/flats) \n * midi_selpitch1 : MIDI editor background color, selected pitch (naturals) \n * midi_selpitch2 : MIDI editor background color, selected pitch (sharps/flats) \n * midi_selbg : MIDI editor time selection color \n * midi_selbg_drawmode : MIDI editor time selection fill mode \n * midi_gridhc : MIDI editor CC horizontal center line \n * midi_gridhcdm : MIDI editor CC horizontal center line - draw mode \n * midi_gridh : MIDI editor CC horizontal line \n * midi_gridhdm : MIDI editor CC horizontal line - draw mode \n * midi_ccbut : MIDI editor CC lane add/remove buttons \n * midi_ccbut_text : MIDI editor CC lane button text \n * midi_ccbut_arrow : MIDI editor CC lane button arrow \n * midioct : MIDI editor octave line color \n * midi_inline_trackbg1 : MIDI inline background color (naturals) \n * midi_inline_trackbg2 : MIDI inline background color (sharps/flats) \n * midioct_inline : MIDI inline octave line color \n * midi_endpt : MIDI editor end marker \n * midi_notebg : MIDI editor note, unselected (midi_note_colormap overrides) \n * midi_notefg : MIDI editor note, selected (midi_note_colormap overrides) \n * midi_notemute : MIDI editor note, muted, unselected (midi_note_colormap overrides) \n * midi_notemute_sel : MIDI editor note, muted, selected (midi_note_colormap overrides) \n * midi_itemctl : MIDI editor note controls \n * midi_ofsn : MIDI editor note (offscreen) \n * midi_ofsnsel : MIDI editor note (offscreen, selected) \n * midi_editcurs : MIDI editor cursor \n * midi_pkey1 : MIDI piano key color (naturals background, sharps/flats text) \n * midi_pkey2 : MIDI piano key color (sharps/flats background, naturals text) \n * midi_pkey3 : MIDI piano key color (selected) \n * midi_noteon_flash : MIDI piano key note-on flash \n * midi_leftbg : MIDI piano pane background \n * midifont_col_light_unsel : MIDI editor note text and control color, unselected (light) \n * midifont_col_dark_unsel : MIDI editor note text and control color, unselected (dark) \n * midifont_mode_unsel : MIDI editor note text and control mode, unselected \n * midifont_col_light : MIDI editor note text and control color (light) \n * midifont_col_dark : MIDI editor note text and control color (dark) \n * midifont_mode : MIDI editor note text and control mode \n * score_bg : MIDI notation editor background \n * score_fg : MIDI notation editor staff/notation/text \n * score_sel : MIDI notation editor selected staff/notation/text \n * score_timesel : MIDI notation editor time selection \n * score_loop : MIDI notation editor loop points, selected pitch \n * midieditorlist_bg : MIDI list editor background \n * midieditorlist_fg : MIDI list editor text \n * midieditorlist_grid : MIDI list editor grid lines \n * midieditorlist_selbg : MIDI list editor selected row \n * midieditorlist_selfg : MIDI list editor selected text \n * midieditorlist_seliabg : MIDI list editor selected row (inactive) \n * midieditorlist_seliafg : MIDI list editor selected text (inactive) \n * midieditorlist_bg2 : MIDI list editor background (secondary) \n * midieditorlist_fg2 : MIDI list editor text (secondary) \n * midieditorlist_selbg2 : MIDI list editor selected row (secondary) \n * midieditorlist_selfg2 : MIDI list editor selected text (secondary) \n * col_explorer_sel : Media explorer selection \n * col_explorer_seldm : Media explorer selection mode \n * col_explorer_seledge : Media explorer selection edge \n * explorer_grid : Media explorer grid, markers\n * explorer_pitchtext : Media explorer pitch detection text\n * docker_shadow : Tab control shadow \n * docker_selface : Tab control selected tab \n * docker_unselface : Tab control unselected tab \n * docker_text : Tab control text \n * docker_text_sel : Tab control text selected tab \n * docker_bg : Tab control background \n * windowtab_bg : Tab control background in windows \n * auto_item_unsel : Envelope: Unselected automation item \n * col_env1 : Envelope: Volume (pre-FX) \n * col_env2 : Envelope: Volume \n * env_trim_vol : Envelope: Trim Volume \n * col_env3 : Envelope: Pan (pre-FX) \n * col_env4 : Envelope: Pan \n * env_track_mute : Envelope: Mute \n * col_env5 : Envelope: Master playrate \n * col_env6 : Envelope: Master tempo \n * col_env7 : Envelope: Width/Send volume \n * col_env8 : Envelope: Send pan \n * col_env9 : Envelope: Send volume 2 \n * col_env10 : Envelope: Send pan 2 \n * env_sends_mute : Envelope: Send mute \n * col_env11 : Envelope: Audio hardware output volume \n * col_env12 : Envelope: Audio hardware output pan \n * col_env13 : Envelope: FX parameter 1 \n * col_env14 : Envelope: FX parameter 2 \n * col_env15 : Envelope: FX parameter 3 \n * col_env16 : Envelope: FX parameter 4 \n * env_item_vol : Envelope: Item take volume \n * env_item_pan : Envelope: Item take pan \n * env_item_mute : Envelope: Item take mute \n * env_item_pitch : Envelope: Item take pitch \n * wiring_grid2 : Wiring: Background \n * wiring_grid : Wiring: Background grid lines \n * wiring_border : Wiring: Box border \n * wiring_tbg : Wiring: Box background \n * wiring_ticon : Wiring: Box foreground \n * wiring_recbg : Wiring: Record section background \n * wiring_recitem : Wiring: Record section foreground \n * wiring_activity : Wiring: Activity lights\n * wiring_media : Wiring: Media \n * wiring_recv : Wiring: Receives \n * wiring_send : Wiring: Sends \n * wiring_fader : Wiring: Fader \n * wiring_parent : Wiring: Master/Parent \n * wiring_parentwire_border : Wiring: Master/Parent wire border \n * wiring_parentwire_master : Wiring: Master/Parent to master wire \n * wiring_parentwire_folder : Wiring: Master/Parent to parent folder wire \n * wiring_pin_normal : Wiring: Pins normal \n * wiring_pin_connected : Wiring: Pins connected \n * wiring_pin_disconnected : Wiring: Pins disconnected \n * wiring_horz_col : Wiring: Horizontal pin connections \n * wiring_sendwire : Wiring: Send hanging wire \n * wiring_hwoutwire : Wiring: Hardware output wire \n * wiring_recinputwire : Wiring: Record input wire \n * wiring_hwout : Wiring: System hardware outputs \n * wiring_recinput : Wiring: System record inputs \n * autogroup : Automatic track group\n * group_0 : Group #1 \n * group_1 : Group #2 \n * group_2 : Group #3 \n * group_3 : Group #4 \n * group_4 : Group #5 \n * group_5 : Group #6 \n * group_6 : Group #7 \n * group_7 : Group #8 \n * group_8 : Group #9 \n * group_9 : Group #10 \n * group_10 : Group #11 \n * group_11 : Group #12 \n * group_12 : Group #13 \n * group_13 : Group #14 \n * group_14 : Group #15 \n * group_15 : Group #16 \n * group_16 : Group #17 \n * group_17 : Group #18 \n * group_18 : Group #19 \n * group_19 : Group #20 \n * group_20 : Group #21 \n * group_21 : Group #22 \n * group_22 : Group #23 \n * group_23 : Group #24 \n * group_24 : Group #25 \n * group_25 : Group #26 \n * group_26 : Group #27 \n * group_27 : Group #28 \n * group_28 : Group #29 \n * group_29 : Group #30 \n * group_30 : Group #31 \n * group_31 : Group #32 \n * group_32 : Group #33 \n * group_33 : Group #34 \n * group_34 : Group #35 \n * group_35 : Group #36 \n * group_36 : Group #37 \n * group_37 : Group #38 \n * group_38 : Group #39 \n * group_39 : Group #40 \n * group_40 : Group #41 \n * group_41 : Group #42 \n * group_42 : Group #43 \n * group_43 : Group #44 \n * group_44 : Group #45 \n * group_45 : Group #46 \n * group_46 : Group #47 \n * group_47 : Group #48 \n * group_48 : Group #49 \n * group_49 : Group #50 \n * group_50 : Group #51 \n * group_51 : Group #52 \n * group_52 : Group #53 \n * group_53 : Group #54 \n * group_54 : Group #55 \n * group_55 : Group #56 \n * group_56 : Group #57 \n * group_57 : Group #58 \n * group_58 : Group #59 \n * group_59 : Group #60 \n * group_60 : Group #61 \n * group_61 : Group #62 \n * group_62 : Group #63 \n * group_63 : Group #64 ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer section_id","description":"the section of the action\n       0, Main  \n       100, Main (alt recording)  \n       32060, MIDI Editor  \n       32061, MIDI Event List Editor  \n       32062, MIDI Inline Editor  \n       32063, Media Explorer  "},{"identifier":"integer command_id","description":"the command-id of the action whose toggle command state you want to query"},{"identifier":"integer state","description":"toggle-state \n0, off\n&1, on/checked in menus\n&2, on/grayed out in menus\n&16, on/bullet in front of the entry in menus\n-1, NA because the action does not have on/off states."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetToggleCommandState","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"section_id","type":"integer"},{"identifier":"command_id","type":"integer"},{"identifier":"state","type":"integer"}]},"eel":{"method_name":"SetToggleCommandState","return_values":["bool"],"parameters":[{"type_name":"int","identifier":"section_id"},{"type_name":"int","identifier":"command_id"},{"type_name":"int","identifier":"state"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, setting was successful; false, setting was unsuccessful"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SetToggleCommandState(integer section_id, integer command_id, integer state)","eel":"bool SetToggleCommandState(int section_id, int command_id, int state)","python":"Boolean retval = RPR_SetToggleCommandState(Int section_id, Int command_id, Int state)","cpp":"bool SetToggleCommandState(int section_id, int command_id, int state)"},"title":"SetToggleCommandState","chapters":["Api-Helper-Functions","Actions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Updates the toggle state of an action, returns true if succeeded. Only ReaScripts can have their toggle states changed programmatically.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["envelopemanagement","set","mode","trim","read","touch","write","latch","master"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack tr","description":"the MediaTrack, whose automation-mode you want to set"},{"identifier":"integer mode","description":"the automation-mode\n0, Trim/read\n1, Read\n2, Touch\n3, Write\n4, Latch\n5 and higher no mode selected"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetTrackAutomationMode","return_values":[],"parameters":[{"identifier":"tr","type":"MediaTrack"},{"identifier":"mode","type":"integer"}]},"eel":{"return_values":["SetTrackAutomationMode"],"parameters":[{"type_name":"MediaTrack","identifier":"tr"},{"type_name":"int","identifier":"mode"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.SetTrackAutomationMode(MediaTrack tr, integer mode)","eel":"SetTrackAutomationMode(MediaTrack tr, int mode)","python":"RPR_SetTrackAutomationMode(MediaTrack tr, Int mode)","cpp":"void SetTrackAutomationMode(MediaTrack* tr, int mode)"},"title":"SetTrackAutomationMode","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Set automation-mode for a specific MediaTrack.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","set","color","track"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":"the MediaTrack, whose color you want to change"},{"identifier":"integer color","description":"the new color-value"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetTrackColor","return_values":[],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"color","type":"integer"}]},"eel":{"return_values":["SetTrackColor"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"color"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.SetTrackColor(MediaTrack track, integer color)","eel":"SetTrackColor(MediaTrack track, int color)","python":"RPR_SetTrackColor(MediaTrack track, Int color)","cpp":"void SetTrackColor(MediaTrack* track, int color)"},"title":"SetTrackColor","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set the custom track color, color is OS dependent (i.e. ColorToNative(r,g,b).\n\nYou cannot set default color with this function, use SetMediaTrackInfo_Value instead.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer flag","description":""},{"identifier":"string str","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetTrackMIDILyrics","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"flag","type":"integer"},{"identifier":"str","type":"string"}]},"eel":{"method_name":"SetTrackMIDILyrics","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"flag"},{"identifier":"\"str\""}]}},"requires":{"Reaper":"6.58"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SetTrackMIDILyrics(MediaTrack track, integer flag, string str)","eel":"bool SetTrackMIDILyrics(MediaTrack track, int flag, \"str\")","python":"Boolean retval = RPR_SetTrackMIDILyrics(MediaTrack track, Int flag, String str)","cpp":"bool SetTrackMIDILyrics(MediaTrack* track, int flag, const char* str)"},"title":"SetTrackMIDILyrics","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set all MIDI lyrics on the track. Lyrics will be stuffed into any MIDI items found in range. \n\nFlag is unused at present. \n\nstr is passed in as beat position, tab, text, tab \n\nexample with flag=2: \"1.1.2\\tLyric for measure 1 beat 2\\t2.1.1\\tLyric for measure 2 beat 1 \"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer pitch","description":""},{"identifier":"integer chan","description":""},{"identifier":"string name","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetTrackMIDINoteName","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"track","type":"integer"},{"identifier":"pitch","type":"integer"},{"identifier":"chan","type":"integer"},{"identifier":"name","type":"string"}]},"eel":{"method_name":"SetTrackMIDINoteName","return_values":["bool"],"parameters":[{"type_name":"int","identifier":"track"},{"type_name":"int","identifier":"pitch"},{"type_name":"int","identifier":"chan"},{"identifier":"\"name\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SetTrackMIDINoteName(integer track, integer pitch, integer chan, string name)","eel":"bool SetTrackMIDINoteName(int track, int pitch, int chan, \"name\")","python":"Boolean retval = RPR_SetTrackMIDINoteName(Int track, Int pitch, Int chan, String name)","cpp":"bool SetTrackMIDINoteName(int track, int pitch, int chan, const char* name)"},"title":"SetTrackMIDINoteName","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"channel > 0 assigns these note names to all channels.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"MediaTrack track","description":""},{"identifier":"integer pitch","description":""},{"identifier":"integer chan","description":""},{"identifier":"string name","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetTrackMIDINoteNameEx","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"track","type":"MediaTrack"},{"identifier":"pitch","type":"integer"},{"identifier":"chan","type":"integer"},{"identifier":"name","type":"string"}]},"eel":{"method_name":"SetTrackMIDINoteNameEx","return_values":["bool"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"pitch"},{"type_name":"int","identifier":"chan"},{"identifier":"\"name\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, integer pitch, integer chan, string name)","eel":"bool SetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, int pitch, int chan, \"name\")","python":"Boolean retval = RPR_SetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, Int pitch, Int chan, String name)","cpp":"bool SetTrackMIDINoteNameEx(ReaProject* proj, MediaTrack* track, int pitch, int chan, const char* name)"},"title":"SetTrackMIDINoteNameEx","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"channel > 0 assigns note name to all channels. pitch 128 assigns name for CC0, pitch 129 for CC1, etc.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","select","deselect","unselect","track","set"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":"the MediaTrack, whose selection state you want to set"},{"identifier":"boolean selected","description":"true, set MediaTrack to selected; false, set MediaTrack to deselected"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetTrackSelected","return_values":[],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"selected","type":"boolean"}]},"eel":{"return_values":["SetTrackSelected"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"bool","identifier":"selected"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.SetTrackSelected(MediaTrack track, boolean selected)","eel":"SetTrackSelected(MediaTrack track, bool selected)","python":"RPR_SetTrackSelected(MediaTrack track, Boolean selected)","cpp":"void SetTrackSelected(MediaTrack* track, bool selected)"},"title":"SetTrackSelected","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Set a MediaTrack selected/deselected. Will retain already existing selection, so you can set multiple tracks selected that way.\n\nWill not affect Last-Touched-Track.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"MediaTrack tr","description":"the track, whose routing-attribute you want to set"},{"identifier":"integer category","description":"the category of the routing to set; <0 for receives, 0=sends, >0 for hardware outputs"},{"identifier":"integer sendidx","description":"the index of the routing-entry that you want to set"},{"identifier":"string parmname","description":"the name of the parameter, that you want to set"},{"identifier":"number newvalue","description":"the new value to set"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetTrackSendInfo_Value","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"tr","type":"MediaTrack"},{"identifier":"category","type":"integer"},{"identifier":"sendidx","type":"integer"},{"identifier":"parmname","type":"string"},{"identifier":"newvalue","type":"number"}]},"eel":{"method_name":"SetTrackSendInfo_Value","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"tr"},{"type_name":"int","identifier":"category"},{"type_name":"int","identifier":"sendidx"},{"identifier":"\"parmname\""},{"identifier":"newvalue"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, setting value was successful; false, setting value was unsuccessful"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SetTrackSendInfo_Value(MediaTrack tr, integer category, integer sendidx, string parmname, number newvalue)","eel":"bool SetTrackSendInfo_Value(MediaTrack tr, int category, int sendidx, \"parmname\", newvalue)","python":"Boolean retval = RPR_SetTrackSendInfo_Value(MediaTrack tr, Int category, Int sendidx, String parmname, Float newvalue)","cpp":"bool SetTrackSendInfo_Value(MediaTrack* tr, int category, int sendidx, const char* parmname, double newvalue)"},"title":"SetTrackSendInfo_Value","chapters":["Track Management","Routing"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set send/receive/hardware output numerical-value attributes, return true on success.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nparameter names:\n\n   B_MUTE : bool *\n   B_PHASE : bool * : true to flip phase\n   B_MONO : bool *\n   D_VOL : double * : 1.0 = +0dB etc\n   D_PAN : double * : -1..+1\n   D_PANLAW : double * : 1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\n   I_SENDMODE : int * : 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\n   I_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n   I_SRCCHAN : int * : -1 for no audio send. Low 10 bits specify channel offset, and higher bits specify channel count. (srcchan>>10) == 0 for stereo, 1 for mono, 2 for 4 channel, 3 for 6 channel, etc.\n   I_DSTCHAN : int * : low 10 bits are destination index, &1024 set to mix to mono.\n   I_MIDIFLAGS : int * : low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chan \n\nFor ReaRoute-users: the outputs are hardware outputs, but with 512 added to the destination channel index (512 is the first rearoute channel, 513 the second, etc).\n\nNote: convert a dB_volume-value to the value expected by D_VOL in Lua, using: math.exp(db_value/8.68588963806)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer send_idx","description":""},{"identifier":"number pan","description":""},{"identifier":"integer isend","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetTrackSendUIPan","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"send_idx","type":"integer"},{"identifier":"pan","type":"number"},{"identifier":"isend","type":"integer"}]},"eel":{"method_name":"SetTrackSendUIPan","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"send_idx"},{"identifier":"pan"},{"type_name":"int","identifier":"isend"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SetTrackSendUIPan(MediaTrack track, integer send_idx, number pan, integer isend)","eel":"bool SetTrackSendUIPan(MediaTrack track, int send_idx, pan, int isend)","python":"Boolean retval = RPR_SetTrackSendUIPan(MediaTrack track, Int send_idx, Float pan, Int isend)","cpp":"bool SetTrackSendUIPan(MediaTrack* track, int send_idx, double pan, int isend)"},"title":"SetTrackSendUIPan","chapters":["Track Management","Routing"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer send_idx","description":""},{"identifier":"number vol","description":""},{"identifier":"integer isend","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetTrackSendUIVol","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"send_idx","type":"integer"},{"identifier":"vol","type":"number"},{"identifier":"isend","type":"integer"}]},"eel":{"method_name":"SetTrackSendUIVol","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"send_idx"},{"identifier":"vol"},{"type_name":"int","identifier":"isend"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SetTrackSendUIVol(MediaTrack track, integer send_idx, number vol, integer isend)","eel":"bool SetTrackSendUIVol(MediaTrack track, int send_idx, vol, int isend)","python":"Boolean retval = RPR_SetTrackSendUIVol(MediaTrack track, Int send_idx, Float vol, Int isend)","cpp":"bool SetTrackSendUIVol(MediaTrack* track, int send_idx, double vol, int isend)"},"title":"SetTrackSendUIVol","chapters":["Track Management","Routing"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.\n\nNote: convert a dB_volume-value to the value expected by parameter vol in Lua, using: math.exp(db_value/8.68588963806)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","set","track","statechunk"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":"the MediaTrack, whose statechunk you want to set"},{"identifier":"string str","description":"the new trackstatechunk, you want to set this MediaTrack to"},{"identifier":"boolean isundo","description":"undo flag is a performance/caching hint"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetTrackStateChunk","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"str","type":"string"},{"identifier":"isundo","type":"boolean"}]},"eel":{"method_name":"SetTrackStateChunk","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"identifier":"\"str\""},{"type_name":"bool","identifier":"isundo"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, setting worked; false, setting didn't work"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SetTrackStateChunk(MediaTrack track, string str, boolean isundo)","eel":"bool SetTrackStateChunk(MediaTrack track, \"str\", bool isundo)","python":"Boolean retval = RPR_SetTrackStateChunk(MediaTrack track, String str, Boolean isundoOptional)","cpp":"bool SetTrackStateChunk(MediaTrack* track, const char* str, bool isundoOptional)"},"title":"SetTrackStateChunk","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Sets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["track management","set","monitoring"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":"the track, whose monitoring you want to set"},{"identifier":"integer monitor","description":"the monitoring mode\n0, no monitoring\n1, monitoring\n2, auto-monitoring"},{"identifier":"integer igngroupflags","description":"&1 to prevent track grouping\n&2 to prevent selection ganging"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetTrackUIInputMonitor","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"monitor","type":"integer"},{"identifier":"igngroupflags","type":"integer"}]},"eel":{"method_name":"retval","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"monitor"},{"type_name":"int","identifier":"igngroupflags"}]}},"requires":{"Reaper":"6.71"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"-1, in case of an error; else the monitoring state"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.SetTrackUIInputMonitor(MediaTrack track, integer monitor, integer igngroupflags)","eel":"int retval = SetTrackUIInputMonitor(MediaTrack track, int monitor, int igngroupflags)","python":"Int retval = RPR_SetTrackUIInputMonitor(MediaTrack track, Int monitor, Int igngroupflags)","cpp":"int retval = SetTrackUIInputMonitor(MediaTrack* track, int monitor, int igngroupflags)"},"title":"SetTrackUIInputMonitor","chapters":["Track Management","Set Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"monitor: 0=no monitoring, 1=monitoring, 2=auto-monitoring. \n\nreturns new value or -1 if error. \n\nigngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","set","mute"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":"the track, whose mute-state you want to set"},{"identifier":"integer monitor","description":"the mute-mode\n<0, toggles\n>0 sets mute\n0, unsets mute"},{"identifier":"integer igngroupflags","description":"&1 to prevent track grouping\n&2 to prevent selection ganging"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetTrackUIMute","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"mute","type":"integer"},{"identifier":"igngroupflags","type":"integer"}]},"eel":{"method_name":"retval","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"mute"},{"type_name":"int","identifier":"igngroupflags"}]}},"requires":{"Reaper":"6.71"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the new mute-state; -1, in case of an error"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.SetTrackUIMute(MediaTrack track, integer mute, integer igngroupflags)","eel":"int retval = SetTrackUIMute(MediaTrack track, int mute, int igngroupflags)","python":"Int retval = RPR_SetTrackUIMute(MediaTrack track, Int mute, Int igngroupflags)","cpp":"int retval = SetTrackUIMute(MediaTrack* track, int mute, int igngroupflags)"},"title":"SetTrackUIMute","chapters":["Track Management","Set Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"mute: <0 toggles, >0 sets mute, 0=unsets mute. \n\nreturns new value or -1 if error. \n\nigngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","set","pan"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"MediaTrack track","description":"the track, whose panning you want to set"},{"identifier":"number pan","description":"the pan-value; -1=-100%, -0.01=-1%, 0=center, 0.01=1%, 1=100%"},{"identifier":"boolean relative","description":"true, change relative to the current value; false, set to absolute value"},{"identifier":"boolean done","description":"false, allow touch controls; true, finish touch controls"},{"identifier":"integer igngroupflags","description":"&1 to prevent track grouping\n&2 to prevent selection ganging"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetTrackUIPan","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"pan","type":"number"},{"identifier":"relative","type":"boolean"},{"identifier":"done","type":"boolean"},{"identifier":"igngroupflags","type":"integer"}]},"eel":{"method_name":"retval","return_values":["double"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"identifier":"pan"},{"type_name":"bool","identifier":"relative"},{"type_name":"bool","identifier":"done"},{"type_name":"int","identifier":"igngroupflags"}]}},"requires":{"Reaper":"6.71"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.SetTrackUIPan(MediaTrack track, number pan, boolean relative, boolean done, integer igngroupflags)","eel":"double retval = SetTrackUIPan(MediaTrack track, pan, bool relative, bool done, int igngroupflags)","python":"Float retval = RPR_SetTrackUIPan(MediaTrack track, Float pan, Boolean relative, Boolean done, Int igngroupflags)","cpp":"double retval = SetTrackUIPan(MediaTrack* track, double pan, bool relative, bool done, int igngroupflags)"},"title":"SetTrackUIPan","chapters":["Track Management","Set Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"sets pan of a certain track\n\nigngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","set","polarity"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":"the track, whose polarity-state you want to set"},{"identifier":"integer polarity","description":"the polarity-mode\n<0, toggles\n>0 sets polarity\n0, unsets polarity"},{"identifier":"integer igngroupflags","description":"&1 to prevent track grouping\n&2 to prevent selection ganging"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetTrackUIPolarity","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"polarity","type":"integer"},{"identifier":"igngroupflags","type":"integer"}]},"eel":{"method_name":"retval","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"polarity"},{"type_name":"int","identifier":"igngroupflags"}]}},"requires":{"Reaper":"6.71"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the new polarity state; -1, in case of an error"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.SetTrackUIPolarity(MediaTrack track, integer polarity, integer igngroupflags)","eel":"int retval = SetTrackUIPolarity(MediaTrack track, int polarity, int igngroupflags)","python":"Int retval = RPR_SetTrackUIPolarity(MediaTrack track, Int polarity, Int igngroupflags)","cpp":"int retval = SetTrackUIPolarity(MediaTrack* track, int polarity, int igngroupflags)"},"title":"SetTrackUIPolarity","chapters":["Track Management","Set Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"polarity (AKA phase): <0 toggles, 0=normal, >0=inverted. \n\nreturns new value or -1 if error. \n\nigngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","set","recarm"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":"the track, whose recarm-state you want to set"},{"identifier":"integer recarm","description":"the recarm-mode\n<0, toggles\n>0 sets recarm\n0, unsets recarm"},{"identifier":"integer igngroupflags","description":"&1 to prevent track grouping\n&2 to prevent selection ganging"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetTrackUIRecArm","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"recarm","type":"integer"},{"identifier":"igngroupflags","type":"integer"}]},"eel":{"method_name":"retval","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"recarm"},{"type_name":"int","identifier":"igngroupflags"}]}},"requires":{"Reaper":"6.71"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the new recarm-state"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.SetTrackUIRecArm(MediaTrack track, integer recarm, integer igngroupflags)","eel":"int retval = SetTrackUIRecArm(MediaTrack track, int recarm, int igngroupflags)","python":"Int retval = RPR_SetTrackUIRecArm(MediaTrack track, Int recarm, Int igngroupflags)","cpp":"int retval = SetTrackUIRecArm(MediaTrack* track, int recarm, int igngroupflags)"},"title":"SetTrackUIRecArm","chapters":["Track Management","Set Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"recarm: <0 toggles, >0 sets recarm, 0=unsets recarm.\n\nreturns new value or -1 if error. \n\nigngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","set","solo"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":"the track, whose solo-state you want to set"},{"identifier":"integer solo","description":"the solo-mode\n<0, toggles\n0, unsets mute\n1, sets mute\n2, sets solo(non-SIP)\n4, sets solo (SIP)"},{"identifier":"integer igngroupflags","description":"&1 to prevent track grouping\n&2 to prevent selection ganging"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetTrackUISolo","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"solo","type":"integer"},{"identifier":"igngroupflags","type":"integer"}]},"eel":{"method_name":"retval","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"solo"},{"type_name":"int","identifier":"igngroupflags"}]}},"requires":{"Reaper":"6.71"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the new solo-state"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.SetTrackUISolo(MediaTrack track, integer solo, integer igngroupflags)","eel":"int retval = SetTrackUISolo(MediaTrack track, int solo, int igngroupflags)","python":"Int retval = RPR_SetTrackUISolo(MediaTrack track, Int solo, Int igngroupflags)","cpp":"int retval = SetTrackUISolo(MediaTrack* track, int solo, int igngroupflags)"},"title":"SetTrackUISolo","chapters":["Track Management","Set Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"solo: <0 toggles, 1 sets solo (default mode), 0=unsets solo, 2 sets solo (non-SIP), 4 sets solo (SIP).\n\nreturns new value or -1 if error. \n\nigngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","set","volume"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"MediaTrack track","description":"the track, whose volume you want to set"},{"identifier":"number volume","description":"the volume in dB"},{"identifier":"boolean relative","description":"true, change relative to the current value; false, set to absolute value"},{"identifier":"boolean done","description":"false, allow touch controls; true, finish touch controls"},{"identifier":"integer igngroupflags","description":"&1 to prevent track grouping\n&2 to prevent selection ganging"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetTrackUIVolume","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"volume","type":"number"},{"identifier":"relative","type":"boolean"},{"identifier":"done","type":"boolean"},{"identifier":"igngroupflags","type":"integer"}]},"eel":{"method_name":"retval","return_values":["double"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"identifier":"volume"},{"type_name":"bool","identifier":"relative"},{"type_name":"bool","identifier":"done"},{"type_name":"int","identifier":"igngroupflags"}]}},"requires":{"Reaper":"6.71"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":"the new volume"}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.SetTrackUIVolume(MediaTrack track, number volume, boolean relative, boolean done, integer igngroupflags)","eel":"double retval = SetTrackUIVolume(MediaTrack track, volume, bool relative, bool done, int igngroupflags)","python":"Float retval = RPR_SetTrackUIVolume(MediaTrack track, Float volume, Boolean relative, Boolean done, Int igngroupflags)","cpp":"double retval = SetTrackUIVolume(MediaTrack* track, double volume, bool relative, bool done, int igngroupflags)"},"title":"SetTrackUIVolume","chapters":["Track Management","Set Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"sets the volume of a track\n\nigngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","set","width"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"MediaTrack track","description":"the track, whose width you want to set"},{"identifier":"integer width","description":"the width-mode; -1=-100%, 0=mono; 1=100%"},{"identifier":"boolean relative","description":"true, change relative to the current value; false, set to absolute value"},{"identifier":"boolean done","description":"false, allow touch controls; true, finish touch controls"},{"identifier":"integer igngroupflags","description":"&1 to prevent track grouping\n&2 to prevent selection ganging"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SetTrackUIWidth","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"width","type":"number"},{"identifier":"relative","type":"boolean"},{"identifier":"done","type":"boolean"},{"identifier":"igngroupflags","type":"integer"}]},"eel":{"method_name":"retval","return_values":["double"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"identifier":"width"},{"type_name":"bool","identifier":"relative"},{"type_name":"bool","identifier":"done"},{"type_name":"int","identifier":"igngroupflags"}]}},"requires":{"Reaper":"6.71"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":"the new width of the track"}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.SetTrackUIWidth(MediaTrack track, number width, boolean relative, boolean done, integer igngroupflags)","eel":"double retval = SetTrackUIWidth(MediaTrack track, width, bool relative, bool done, int igngroupflags)","python":"Float retval = RPR_SetTrackUIWidth(MediaTrack track, Float width, Boolean relative, Boolean done, Int igngroupflags)","cpp":"double retval = SetTrackUIWidth(MediaTrack* track, double width, bool relative, bool done, int igngroupflags)"},"title":"SetTrackUIWidth","chapters":["Track Management","Set Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"sets the width of a track \n\nreturns new value or -1 if error. \n\nigngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["userinterface","context","menu","track","envelope","item","automation item","envelope point","position","hwnd"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"string name","description":"the name of the context-menu to show\ncan be track_input, track_panel, track_area, track_routing, item, ruler, envelope, envelope_point, envelope_item"},{"identifier":"integer x","description":"x-position of the contextmenu-display-position in pixels"},{"identifier":"integer y","description":"y-position of the contextmenu-display-position in pixels"},{"identifier":"optional HWND hwndParent","description":"the HWND-window in which to display the context-menu. \nnil, Reaper's main window will be used as HWND"},{"identifier":"optional identifier ctx","description":"the object for which to apply the contextmenu. Options selected in the context-menu will be applied to this track/item; \nnil, use the selected track(s)/item(s)/envelope, depending on the chosen context-menu-name in parameter name; \n     shows no context-menu, when no track/item/envelope is selected;\n\npossible objects and their corresponding name-parameter:\n  - MediaTrack(track_input, track_panel, track_routing)\n  - MediaItem(item)\n  - TrackEnvelope(also Take-Envelopes!) (envelope, envelope_point)\nwhen using any other context-menu-name, this parameter will be ignored by Reaper."},{"identifier":"optional ctxOptional","description":"when ctx is a TrackEnvelope(or nil) and menu=\"envelope_point\", \n     this is the idx of the envelope-point to which to apply the context-menu\nwhen ctx is a TrackEnvelope(or nil) and menu=\"envelope_item\", \n     this reflects the automation-item in chosen envelope, to which to apply the context-menu(1 or higher for automation-item 1 or higher)"},{"identifier":"optional ctx2Optional","description":"when ctx is a TrackEnvelope(or nil) and menu=\"envelope_point\", this reflects, \n0, whether to apply the context-menu to the point in the envelope-lane or\n1 or higher, whether to apply the context-menu to the point in automation-item 1 or higher; \nnil, assumes 0(envelope-lane)"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ShowPopupMenu","return_values":[],"parameters":[{"identifier":"name","type":"string"},{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"},{"isOptional":true,"type":"HWND","identifier":"hwndParent"},{"identifier":"ctx","type":"identifier"},{"identifier":"ctx2","type":"integer"},{"identifier":"ctx3","type":"integer"}]},"eel":{"return_values":["ShowPopupMenu"],"parameters":[{"identifier":"\"name\""},{"type_name":"int","identifier":"x"},{"type_name":"int","identifier":"y"},{"type_name":"HWND","identifier":"hwndParent"},{"type_name":"void*","identifier":"ctx"},{"type_name":"int","identifier":"ctx2"},{"type_name":"int","identifier":"ctx3"}]}},"requires":{"Reaper":"5.92"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ShowPopupMenu(string name, integer x, integer y, optional HWND hwndParent, identifier ctx, integer ctx2, integer ctx3)","eel":"ShowPopupMenu(\"name\", int x, int y, HWND hwndParent, void* ctx, int ctx2, int ctx3)","python":"RPR_ShowPopupMenu(String name, Int x, Int y, HWND hwndParentOptional, void ctxOptional, Int ctx2Optional, Int ctx3Optional)","cpp":"void ShowPopupMenu(const char* name, int x, int y, HWND hwndParentOptional, void* ctxOptional, int ctx2Optional, int ctx3Optional)"},"title":"ShowPopupMenu","chapters":["User Interface","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"shows a Reaper-context menu.\nYou can decide, which menu to show and to which track/item/envelope/envelope-point/automation-item you want this context-menu to be applied to.\ne.g. you can decide, whether settings in the context-menu \"track_panel\" shall be applied to track 1, track 2, etc\n\nYou can also apply this to the selected track/mediaitem/envelope.\nThe parameters name and ctx influence each other, means: name=\"item\" and ctx=reaper.GetMediaItem(0,1) apply the mediaitem-contextmenu to the Mediaitem-object, given to parameter ctx.\nThe choice of the parameter name also influences, whether ctxOptional and ctx2Optional can be set or not and what they mean.\n\nBlocks further execution of a script, until the context-menu is closed.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"KbdSectionInfo section","description":"0, Main  \n100, Main (alt recording)  \n32060, MIDI Editor  \n32061, MIDI Event List Editor  \n32062, MIDI Inline Editor  \n32063, Media Explorer  "},{"identifier":"optional HWND callerWnd","description":"the HWND that shall call the ActionList; can be nil"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ShowActionList","return_values":[],"parameters":[{"identifier":"section","type":"KbdSectionInfo"},{"isOptional":true,"type":"HWND","identifier":"callerWnd"}]},"eel":{"return_values":["ShowActionList"],"parameters":[{"type_name":"KbdSectionInfo","identifier":"section"},{"type_name":"HWND","identifier":"callerWnd"}]}},"requires":{"Reaper":"6.72"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ShowActionList(KbdSectionInfo section, optional HWND callerWnd)","eel":"ShowActionList(KbdSectionInfo section, HWND callerWnd)","python":"RPR_ShowActionList(KbdSectionInfo section, HWND callerWnd)","cpp":"void ShowActionList(KbdSectionInfo* section, HWND callerWnd)"},"title":"ShowActionList","chapters":["User Interface","Dialogs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"shows the action-list","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","message","console"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string msg","description":"a message to be shown in ReaConsole"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ShowConsoleMsg","return_values":[],"parameters":[{"identifier":"msg","type":"string"}]},"eel":{"return_values":["ShowConsoleMsg"],"parameters":[{"identifier":"\"msg\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ShowConsoleMsg(string msg)","eel":"ShowConsoleMsg(\"msg\")","python":"RPR_ShowConsoleMsg(String msg)","cpp":"void ShowConsoleMsg(const char* msg)"},"title":"ShowConsoleMsg","chapters":["Api-Helper-Functions","ReaScript Console"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Show a message to the user (also useful for debugging). Send \"\\n\" for newline, \"\" to clear the console.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["user","interface","input","dialog","messagebox"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"string msg","description":"the message, that shall be shown in messagebox"},{"identifier":"string title","description":"the title of the messagebox"},{"identifier":"integer type","description":"which buttons shall be shown in the messagebox\n0, OK\n1, OK CANCEL\n2, ABORT RETRY IGNORE\n3, YES NO CANCEL\n4, YES NO\n5, RETRY CANCEL"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ShowMessageBox","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"msg","type":"string"},{"identifier":"title","type":"string"},{"identifier":"type","type":"integer"}]},"eel":{"method_name":"ShowMessageBox","return_values":["int"],"parameters":[{"identifier":"\"msg\""},{"identifier":"\"title\""},{"type_name":"int","identifier":"type"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the button pressed by the user\n1, OK\n2, CANCEL\n3, ABORT\n4, RETRY\n5, IGNORE\n6, YES\n7, NO"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.ShowMessageBox(string msg, string title, integer type)","eel":"int ShowMessageBox(\"msg\", \"title\", int type)","python":"Int retval = RPR_ShowMessageBox(String msg, String title, Int type)","cpp":"int ShowMessageBox(const char* msg, const char* title, int type)"},"title":"ShowMessageBox","chapters":["User Interface","Dialogs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Shows Messagebox with user-clickable buttons.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","slider","db","convert"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number y","description":"the dB-value"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SLIDER2DB","return_values":[{"identifier":"db_value","type":"number"}],"parameters":[{"identifier":"y","type":"number"}]},"eel":{"method_name":"SLIDER2DB","return_values":["double"],"parameters":[{"identifier":"y"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number db_value","description":"the slider-value, you want to convert to dB"}],"prog_lang":"*"},"functioncall":{"lua":"number db_value = reaper.SLIDER2DB(number y)","eel":"double SLIDER2DB(y)","python":"Float retval = RPR_SLIDER2DB(Float y)","cpp":"double SLIDER2DB(double y)"},"title":"SLIDER2DB","chapters":["Api-Helper-Functions","Value Conversion"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Convert slider-value to it's dB-value-equivalent.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject project","description":"the project-number. 0 for the current project. "},{"identifier":"number time_pos","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SnapToGrid","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"project","type":"ReaProject"},{"identifier":"time_pos","type":"number"}]},"eel":{"method_name":"SnapToGrid","return_values":["double"],"parameters":[{"type_name":"ReaProject","identifier":"project"},{"identifier":"time_pos"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.SnapToGrid(ReaProject project, number time_pos)","eel":"double SnapToGrid(ReaProject project, time_pos)","python":"Float retval = RPR_SnapToGrid(ReaProject project, Float time_pos)","cpp":"double SnapToGrid(ReaProject* project, double time_pos)"},"title":"SnapToGrid","chapters":["Project Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","solo","state","set","on","off","solo in place","solo ignore routing"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer solo","description":"the new solo state for all tracks\n0, solo off\n1, solo, ignore routing\n2, solo in place"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SoloAllTracks","return_values":[],"parameters":[{"identifier":"solo","type":"integer"}]},"eel":{"return_values":["SoloAllTracks"],"parameters":[{"type_name":"int","identifier":"solo"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.SoloAllTracks(integer solo)","eel":"SoloAllTracks(int solo)","python":"RPR_SoloAllTracks(Int solo)","cpp":"void SoloAllTracks(int solo)"},"title":"SoloAllTracks","chapters":["Track Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Set solo-state for all tracks.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.Splash_GetWnd","return_values":[{"identifier":"hwnd","type":"HWND"}],"parameters":[]},"eel":{"method_name":"Splash_GetWnd","return_values":["HWND"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"HWND hwnd","description":"the window-handler of the splash-window"}],"prog_lang":"*"},"functioncall":{"lua":"HWND hwnd = reaper.Splash_GetWnd()","eel":"HWND Splash_GetWnd()","python":"HWND hwnd = RPR_Splash_GetWnd()","cpp":"HWND Splash_GetWnd()"},"title":"Splash_GetWnd","chapters":["User Interface","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"gets the splash window, in case you want to display a message over it. Returns NULL when the splash window is not displayed.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["mediaitemmanagement","split","item"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem item","description":"the MediaItem so be split"},{"identifier":"number position","description":"the split-position in seconds"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SplitMediaItem","return_values":[{"identifier":"item","type":"MediaItem"}],"parameters":[{"identifier":"item","type":"MediaItem"},{"identifier":"position","type":"number"}]},"eel":{"method_name":"SplitMediaItem","return_values":["MediaItem"],"parameters":[{"type_name":"MediaItem","identifier":"item"},{"identifier":"position"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem item","description":"the new MediaItem on the right side of the split"}],"prog_lang":"*"},"functioncall":{"lua":"MediaItem item = reaper.SplitMediaItem(MediaItem item, number position)","eel":"MediaItem SplitMediaItem(MediaItem item, position)","python":"MediaItem item = RPR_SplitMediaItem(MediaItem item, Float position)","cpp":"MediaItem* SplitMediaItem(MediaItem* item, double position)"},"title":"SplitMediaItem","chapters":["Mediaitem Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"The original item becomes the left-hand split, the function returns the right-hand split (or NULL if the split failed)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string str","description":""},{"identifier":"string gGUID","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.stringToGuid","return_values":[{"identifier":"gGUID","type":"string"}],"parameters":[{"identifier":"str","type":"string"},{"identifier":"gGUID","type":"string"}]},"eel":{"return_values":["stringToGuid"],"parameters":[{"identifier":"\"str\""},{"identifier":"#gGUID"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string gGUID","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string gGUID = reaper.stringToGuid(string str, string gGUID)","eel":"stringToGuid(\"str\", #gGUID)","python":"RPR_stringToGuid(String str, GUID g)","cpp":"void stringToGuid(const char* str, GUID* g)"},"title":"stringToGuid","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"integer mode","description":"the mode for sending the midi-message\n0, for VKB; \n1, for control (actions map etc), \n2, for VKB-on-current-channel; \n16 for external MIDI device 0\n17 for external MIDI device 1, etc"},{"identifier":"integer msg1","description":"modifier"},{"identifier":"integer msg2","description":"note/keyname"},{"identifier":"integer msg3","description":"velocity"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.StuffMIDIMessage","return_values":[],"parameters":[{"identifier":"mode","type":"integer"},{"identifier":"msg1","type":"integer"},{"identifier":"msg2","type":"integer"},{"identifier":"msg3","type":"integer"}]},"eel":{"return_values":["StuffMIDIMessage"],"parameters":[{"type_name":"int","identifier":"mode"},{"type_name":"int","identifier":"msg1"},{"type_name":"int","identifier":"msg2"},{"type_name":"int","identifier":"msg3"}]}},"requires":{"Reaper":"5.92"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.StuffMIDIMessage(integer mode, integer msg1, integer msg2, integer msg3)","eel":"StuffMIDIMessage(int mode, int msg1, int msg2, int msg3)","python":"RPR_StuffMIDIMessage(Int mode, Int msg1, Int msg2, Int msg3)","cpp":"void StuffMIDIMessage(int mode, int msg1, int msg2, int msg3)"},"title":"StuffMIDIMessage","chapters":["Api-Helper-Functions","Midi"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Stuffs a 3 byte MIDI message into either the Virtual MIDI Keyboard queue, or the MIDI-as-control input queue, or sends to a MIDI hardware output. mode=0 for VKB, 1 for control (actions map etc), 2 for VKB-on-current-channel; 16 for external MIDI device 0, 17 for external MIDI device 1, etc; see [GetNumMIDIOutputs](#GetNumMIDIOutputs), [GetMIDIOutputName](#GetMIDIOutputName).\n\nif mode is set to 1, you can send messages as control-message for Parameter Learn/Modulation and as shortcut for scripts.\nThe parameter msg3 can be retrieved with the returnvalue val of the function reaper.get\\_action\\_context, so sending values to a script is possible that way.\n\nFor more detailed information about the possible midi-messages you can send via StuffMIDIMessage, see: [StuffMIDIMessage-docs](misc_docs/API_How_StuffMidiMessage_works.txt)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"string fxname","description":""},{"identifier":"integer instantiate","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_AddByName","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fxname","type":"string"},{"identifier":"instantiate","type":"integer"}]},"eel":{"method_name":"TakeFX_AddByName","return_values":["int"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"identifier":"\"fxname\""},{"type_name":"int","identifier":"instantiate"}]}},"requires":{"Reaper":"6.12"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.TakeFX_AddByName(MediaItem_Take take, string fxname, integer instantiate)","eel":"int TakeFX_AddByName(MediaItem_Take take, \"fxname\", int instantiate)","python":"Int retval = RPR_TakeFX_AddByName(MediaItem_Take take, String fxname, Int instantiate)","cpp":"int TakeFX_AddByName(MediaItem_Take* take, const char* fxname, int instantiate)"},"title":"TakeFX_AddByName","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Adds or queries the position of a named FX in a take. See [TrackFX\\_AddByName()](#TrackFX_AddByName) for information on fxname and instantiate. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer param","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_EndParamEdit","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"},{"identifier":"param","type":"integer"}]},"eel":{"method_name":"TakeFX_EndParamEdit","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"param"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TakeFX_EndParamEdit(MediaItem_Take take, integer fx, integer param)","eel":"bool TakeFX_EndParamEdit(MediaItem_Take take, int fx, int param)","python":"Boolean retval = RPR_TakeFX_EndParamEdit(MediaItem_Take take, Int fx, Int param)","cpp":"bool TakeFX_EndParamEdit(MediaItem_Take* take, int fx, int param)"},"title":"TakeFX_EndParamEdit","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer param","description":""},{"identifier":"number val","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_FormatParamValue","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"},{"identifier":"param","type":"integer"},{"identifier":"val","type":"number"}]},"eel":{"method_name":"TakeFX_FormatParamValue","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"param"},{"identifier":"val"},{"identifier":"#buf"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string buf = reaper.TakeFX_FormatParamValue(MediaItem_Take take, integer fx, integer param, number val)","eel":"bool TakeFX_FormatParamValue(MediaItem_Take take, int fx, int param, val, #buf)","python":"(Boolean retval, MediaItem_Take take, Int fx, Int param, Float val, String bufOut, Int bufOut_sz) = RPR_TakeFX_FormatParamValue(take, fx, param, val, bufOut, bufOut_sz)","cpp":"bool TakeFX_FormatParamValue(MediaItem_Take* take, int fx, int param, double val, char* bufOut, int bufOut_sz)"},"title":"TakeFX_FormatParamValue","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Note: only works with FX that support Cockos VST extensions.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer param","description":""},{"identifier":"number value","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_FormatParamValueNormalized","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"},{"identifier":"param","type":"integer"},{"identifier":"value","type":"number"},{"identifier":"buf","type":"string"}]},"eel":{"method_name":"TakeFX_FormatParamValueNormalized","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"param"},{"identifier":"value"},{"identifier":"#buf"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string buf = reaper.TakeFX_FormatParamValueNormalized(MediaItem_Take take, integer fx, integer param, number value, string buf)","eel":"bool TakeFX_FormatParamValueNormalized(MediaItem_Take take, int fx, int param, value, #buf)","python":"(Boolean retval, MediaItem_Take take, Int fx, Int param, Float value, String buf, Int buf_sz) = RPR_TakeFX_FormatParamValueNormalized(take, fx, param, value, buf, buf_sz)","cpp":"bool TakeFX_FormatParamValueNormalized(MediaItem_Take* take, int fx, int param, double value, char* buf, int buf_sz)"},"title":"TakeFX_FormatParamValueNormalized","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Note: only works with FX that support Cockos VST extensions.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_GetChainVisible","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"method_name":"TakeFX_GetChainVisible","return_values":["int"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.TakeFX_GetChainVisible(MediaItem_Take take)","eel":"int TakeFX_GetChainVisible(MediaItem_Take take)","python":"Int retval = RPR_TakeFX_GetChainVisible(MediaItem_Take take)","cpp":"int TakeFX_GetChainVisible(MediaItem_Take* take)"},"title":"TakeFX_GetChainVisible","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_GetCount","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"method_name":"TakeFX_GetCount","return_values":["int"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.TakeFX_GetCount(MediaItem_Take take)","eel":"int TakeFX_GetCount(MediaItem_Take take)","python":"Int retval = RPR_TakeFX_GetCount(MediaItem_Take take)","cpp":"int TakeFX_GetCount(MediaItem_Take* take)"},"title":"TakeFX_GetCount","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_GetEnabled","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"}]},"eel":{"method_name":"TakeFX_GetEnabled","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TakeFX_GetEnabled(MediaItem_Take take, integer fx)","eel":"bool TakeFX_GetEnabled(MediaItem_Take take, int fx)","python":"Boolean retval = RPR_TakeFX_GetEnabled(MediaItem_Take take, Int fx)","cpp":"bool TakeFX_GetEnabled(MediaItem_Take* take, int fx)"},"title":"TakeFX_GetEnabled","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"See [TakeFX\\_SetEnabled](#TakeFX_SetEnabled)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fxindex","description":""},{"identifier":"integer parameterindex","description":""},{"identifier":"boolean create","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_GetEnvelope","return_values":[{"identifier":"env","type":"TrackEnvelope"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fxindex","type":"integer"},{"identifier":"parameterindex","type":"integer"},{"identifier":"create","type":"boolean"}]},"eel":{"method_name":"TakeFX_GetEnvelope","return_values":["TrackEnvelope"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fxindex"},{"type_name":"int","identifier":"parameterindex"},{"type_name":"bool","identifier":"create"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"TrackEnvelope env","description":""}],"prog_lang":"*"},"functioncall":{"lua":"TrackEnvelope env = reaper.TakeFX_GetEnvelope(MediaItem_Take take, integer fxindex, integer parameterindex, boolean create)","eel":"TrackEnvelope TakeFX_GetEnvelope(MediaItem_Take take, int fxindex, int parameterindex, bool create)","python":"TrackEnvelope env = RPR_TakeFX_GetEnvelope(MediaItem_Take take, Int fxindex, Int parameterindex, Boolean create)","cpp":"TrackEnvelope* TakeFX_GetEnvelope(MediaItem_Take* take, int fxindex, int parameterindex, bool create)"},"title":"TakeFX_GetEnvelope","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer index","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_GetFloatingWindow","return_values":[{"identifier":"hwnd","type":"HWND"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"index","type":"integer"}]},"eel":{"method_name":"TakeFX_GetFloatingWindow","return_values":["HWND"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"index"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"HWND hwd","description":""}],"prog_lang":"*"},"functioncall":{"lua":"HWND hwnd = reaper.TakeFX_GetFloatingWindow(MediaItem_Take take, integer index)","eel":"HWND TakeFX_GetFloatingWindow(MediaItem_Take take, int index)","python":"HWND hwnd = RPR_TakeFX_GetFloatingWindow(MediaItem_Take take, Int index)","cpp":"HWND TakeFX_GetFloatingWindow(MediaItem_Take* take, int index)"},"title":"TakeFX_GetFloatingWindow","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns HWND of floating window for effect index, if any","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer param","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_GetFormattedParamValue","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"},{"identifier":"param","type":"integer"},{"identifier":"buf","type":"string"}]},"eel":{"method_name":"TakeFX_GetFormattedParamValue","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"param"},{"identifier":"#buf"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string buf = reaper.TakeFX_GetFormattedParamValue(MediaItem_Take take, integer fx, integer param, string buf)","eel":"bool TakeFX_GetFormattedParamValue(MediaItem_Take take, int fx, int param, #buf)","python":"(Boolean retval, MediaItem_Take take, Int fx, Int param, String buf, Int buf_sz) = RPR_TakeFX_GetFormattedParamValue(take, fx, param, buf, buf_sz)","cpp":"bool TakeFX_GetFormattedParamValue(MediaItem_Take* take, int fx, int param, char* buf, int buf_sz)"},"title":"TakeFX_GetFormattedParamValue","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_GetFXGUID","return_values":[{"identifier":"GUID","type":"string"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"}]},"eel":{"method_name":"TakeFX_GetFXGUID","return_values":["bool"],"parameters":[{"identifier":"#retguid"},{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string GUID","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string GUID = reaper.TakeFX_GetFXGUID(MediaItem_Take take, integer fx)","eel":"bool TakeFX_GetFXGUID(#retguid, MediaItem_Take take, int fx)","python":"String GUID = RPR_TakeFX_GetFXGUID(MediaItem_Take take, Int fx)","cpp":"GUID* TakeFX_GetFXGUID(MediaItem_Take* take, int fx)"},"title":"TakeFX_GetFXGUID","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_GetFXName","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"}]},"eel":{"method_name":"TakeFX_GetFXName","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"identifier":"#buf"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string buf = reaper.TakeFX_GetFXName(MediaItem_Take take, integer fx)","eel":"bool TakeFX_GetFXName(MediaItem_Take take, int fx, #buf)","python":"(Boolean retval, MediaItem_Take take, Int fx, String bufOut, Int bufOut_sz) = RPR_TakeFX_GetFXName(take, fx, bufOut, bufOut_sz)","cpp":"bool TakeFX_GetFXName(MediaItem_Take* take, int fx, char* bufOut, int bufOut_sz)"},"title":"TakeFX_GetFXName","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_GetIOSize","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"inputPins","type":"integer"},{"identifier":"outputPins","type":"integer"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"}]},"eel":{"method_name":"TakeFX_GetIOSize","return_values":["int"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"&inputPins"},{"type_name":"int","identifier":"&outputPins"}]}},"requires":{"Reaper":"6.43"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer retval","description":""},{"identifier":"integer inputPins","description":""},{"identifier":"integer outputPins","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, integer inputPins, integer outputPins = reaper.TakeFX_GetIOSize(MediaItem_Take take, integer fx)","eel":"int TakeFX_GetIOSize(MediaItem_Take take, int fx, int &inputPins, int &outputPins)","python":"(Int retval, MediaItem_Take take, Int fx, Int inputPinsOut, Int outputPinsOut) = RPR_TakeFX_GetIOSize(take, fx, inputPinsOut, outputPinsOut)","cpp":"int TakeFX_GetIOSize(MediaItem_Take* take, int fx, int* inputPinsOut, int* outputPinsOut)"},"title":"TakeFX_GetIOSize","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"gets the number of input/output pins for FX if available, returns plug-in type or -1 on error\n\n0, \"DX\"\n1, \"LV2\"\n2, \"JSFX\"\n3, \"VST\"\n5, \"AU\"\n6, \"Video Processor\"\n7, \"CLAP\"\n8, \"Container\"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""},{"identifier":"string parmname","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_GetNamedConfigParm","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"},{"identifier":"parmname","type":"string"}]},"eel":{"method_name":"retval","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"identifier":"\"parmname\""},{"identifier":"#buf"}]}},"requires":{"Reaper":"6.74"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string buf = reaper.TakeFX_GetNamedConfigParm(MediaItem_Take take, integer fx, string parmname)","eel":"bool retval = TakeFX_GetNamedConfigParm(MediaItem_Take take, int fx, \"parmname\", #buf)","python":"(Boolean retval, MediaItem_Take take, Int fx, String parmname, String bufOutNeedBig, Int bufOutNeedBig_sz) = RPR_TakeFX_GetNamedConfigParm(take, fx, parmname, bufOutNeedBig, bufOutNeedBig_sz)","cpp":"bool retval = TakeFX_GetNamedConfigParm(MediaItem_Take* take, int fx, const char* parmname, char* bufOutNeedBig, int bufOutNeedBig_sz)"},"title":"TakeFX_GetNamedConfigParm","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"gets plug-in specific named configuration value (returns true on success)\n\nSupported values for read:\n  pdc : PDC latency\n  in_pin_X : name of input pin X\n  out_pin_X : name of output pin X\n  fx_type : type string\n  fx_ident : type-specific identifier\n  fx_name : pre-aliased name\n  GainReduction_dB : [ReaComp + other supported compressors]\n  vst_chunk[_program] : base64-encoded VST-specific chunk.\n  clap_chunk : base64-encoded CLAP-specific chunk.\n  param.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter moduation LFO state\n  param.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo,x2,y2] : parameter modulation ACS state\n  param.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2] : parameter link/MIDI link: set effect=-100 to support midi_*\n  param.X.mod.[active,baseline,visible] : parameter module global settings\n  param.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string if set\n  param.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1, 2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)\n  param.X.learn.flags : &1=selected track only, &2=soft takeover, &4=focused FX only, &8=LFO retrigger, &16=visible FX only\n  \n  BANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]\n  THRESHOLD, CEILING, TRUEPEAK : [ReaLlmit]\n  NUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]\n  ITEMx : [ReaVerb] state configuration line, when writing should be followed by a write of DONE\n  FILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are write-only, when writing any, should be followed by a write of DONE\n  MODE, RSMODE : [RS5k] general mode, resample mode\n  VIDEO_CODE : [video processor] code\n  \n  force_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence\n  instance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\n  chain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\n  chain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC, 3=hwcomp-master)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_GetNumParams","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"}]},"eel":{"method_name":"TakeFX_GetNumParams","return_values":["int"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.TakeFX_GetNumParams(MediaItem_Take take, integer fx)","eel":"int TakeFX_GetNumParams(MediaItem_Take take, int fx)","python":"Int retval = RPR_TakeFX_GetNumParams(MediaItem_Take take, Int fx)","cpp":"int TakeFX_GetNumParams(MediaItem_Take* take, int fx)"},"title":"TakeFX_GetNumParams","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_GetOpen","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"}]},"eel":{"method_name":"TakeFX_GetOpen","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TakeFX_GetOpen(MediaItem_Take take, integer fx)","eel":"bool TakeFX_GetOpen(MediaItem_Take take, int fx)","python":"Boolean retval = RPR_TakeFX_GetOpen(MediaItem_Take take, Int fx)","cpp":"bool TakeFX_GetOpen(MediaItem_Take* take, int fx)"},"title":"TakeFX_GetOpen","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Returns true if this FX UI is open in the FX chain window or a floating window. See [TakeFX\\_SetOpen](#TakeFX_SetOpen)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer param","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_GetParam","return_values":[{"identifier":"retval","type":"number"},{"identifier":"minval","type":"number"},{"identifier":"maxval","type":"number"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"},{"identifier":"param","type":"integer"}]},"eel":{"method_name":"TakeFX_GetParam","return_values":["double"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"param"},{"identifier":"&minval"},{"identifier":"&maxval"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"number retval","description":""},{"identifier":"number minval","description":""},{"identifier":"number maxval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval, number minval, number maxval = reaper.TakeFX_GetParam(MediaItem_Take take, integer fx, integer param)","eel":"double TakeFX_GetParam(MediaItem_Take take, int fx, int param, &minval, &maxval)","python":"(Float retval, MediaItem_Take take, Int fx, Int param, Float minvalOut, Float maxvalOut) = RPR_TakeFX_GetParam(take, fx, param, minvalOut, maxvalOut)","cpp":"double TakeFX_GetParam(MediaItem_Take* take, int fx, int param, double* minvalOut, double* maxvalOut)"},"title":"TakeFX_GetParam","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer param","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_GetParameterStepSizes","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"step","type":"number"},{"identifier":"smallstep","type":"number"},{"identifier":"largestep","type":"number"},{"identifier":"istoggle","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"},{"identifier":"param","type":"integer"}]},"eel":{"method_name":"TakeFX_GetParameterStepSizes","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"param"},{"identifier":"&step"},{"identifier":"&smallstep"},{"identifier":"&largestep"},{"type_name":"bool","identifier":"&istoggle"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number step","description":""},{"identifier":"number smallstep","description":""},{"identifier":"number largestep","description":""},{"identifier":"boolean istoggle","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number step, number smallstep, number largestep, boolean istoggle = reaper.TakeFX_GetParameterStepSizes(MediaItem_Take take, integer fx, integer param)","eel":"bool TakeFX_GetParameterStepSizes(MediaItem_Take take, int fx, int param, &step, &smallstep, &largestep, bool &istoggle)","python":"(Boolean retval, MediaItem_Take take, Int fx, Int param, Float stepOut, Float smallstepOut, Float largestepOut, Boolean istoggleOut) = RPR_TakeFX_GetParameterStepSizes(take, fx, param, stepOut, smallstepOut, largestepOut, istoggleOut)","cpp":"bool TakeFX_GetParameterStepSizes(MediaItem_Take* take, int fx, int param, double* stepOut, double* smallstepOut, double* largestepOut, bool* istoggleOut)"},"title":"TakeFX_GetParameterStepSizes","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer param","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_GetParamEx","return_values":[{"identifier":"retval","type":"number"},{"identifier":"minval","type":"number"},{"identifier":"maxval","type":"number"},{"identifier":"midval","type":"number"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"},{"identifier":"param","type":"integer"}]},"eel":{"method_name":"TakeFX_GetParamEx","return_values":["double"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"param"},{"identifier":"&minval"},{"identifier":"&maxval"},{"identifier":"&midval"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"number retval","description":""},{"identifier":"number minval","description":""},{"identifier":"number maxval","description":""},{"identifier":"number midval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval, number minval, number maxval, number midval = reaper.TakeFX_GetParamEx(MediaItem_Take take, integer fx, integer param)","eel":"double TakeFX_GetParamEx(MediaItem_Take take, int fx, int param, &minval, &maxval, &midval)","python":"(Float retval, MediaItem_Take take, Int fx, Int param, Float minvalOut, Float maxvalOut, Float midvalOut) = RPR_TakeFX_GetParamEx(take, fx, param, minvalOut, maxvalOut, midvalOut)","cpp":"double TakeFX_GetParamEx(MediaItem_Take* take, int fx, int param, double* minvalOut, double* maxvalOut, double* midvalOut)"},"title":"TakeFX_GetParamEx","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""},{"identifier":"string ident_str","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_GetParamFromIdent","return_values":[{"identifier":"param","type":"integer"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"},{"identifier":"ident_str","type":"string"}]},"eel":{"method_name":"TakeFX_GetParamFromIdent","return_values":["int"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"identifier":"\"ident_str\""}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer param","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer param = reaper.TakeFX_GetParamFromIdent(MediaItem_Take take, integer fx, string ident_str)","eel":"int TakeFX_GetParamFromIdent(MediaItem_Take take, int fx, \"ident_str\")","python":"Int retval = RPR_TakeFX_GetParamFromIdent(MediaItem_Take take, Int fx, String ident_str)","cpp":"int TakeFX_GetParamFromIdent(MediaItem_Take* take, int fx, const char* ident_str)"},"title":"TakeFX_GetParamFromIdent","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"gets the parameter index from an identifying string (:wet, :bypass, or a string returned from GetParamIdent), or -1 if unknown.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer param","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_GetParamIdent","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"},{"identifier":"param","type":"integer"}]},"eel":{"method_name":"TakeFX_GetParamIdent","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"param"},{"identifier":"#buf"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string buf = reaper.TakeFX_GetParamIdent(MediaItem_Take take, integer fx, integer param)","eel":"bool TakeFX_GetParamIdent(MediaItem_Take take, int fx, int param, #buf)","python":"(Boolean retval, MediaItem_Take take, Int fx, Int param, String bufOut, Int bufOut_sz) = RPR_TakeFX_GetParamIdent(take, fx, param, bufOut, bufOut_sz)","cpp":"bool TakeFX_GetParamIdent(MediaItem_Take* take, int fx, int param, char* bufOut, int bufOut_sz)"},"title":"TakeFX_GetParamIdent","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"gets an identifying string for the parameter","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer param","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_GetParamName","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"},{"identifier":"param","type":"integer"}]},"eel":{"method_name":"TakeFX_GetParamName","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"param"},{"identifier":"#buf"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string buf = reaper.TakeFX_GetParamName(MediaItem_Take take, integer fx, integer param)","eel":"bool TakeFX_GetParamName(MediaItem_Take take, int fx, int param, #buf)","python":"(Boolean retval, MediaItem_Take take, Int fx, Int param, String bufOut, Int bufOut_sz) = RPR_TakeFX_GetParamName(take, fx, param, bufOut, bufOut_sz)","cpp":"bool TakeFX_GetParamName(MediaItem_Take* take, int fx, int param, char* bufOut, int bufOut_sz)"},"title":"TakeFX_GetParamName","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer param","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_GetParamNormalized","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"},{"identifier":"param","type":"integer"}]},"eel":{"method_name":"TakeFX_GetParamNormalized","return_values":["double"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"param"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.TakeFX_GetParamNormalized(MediaItem_Take take, integer fx, integer param)","eel":"double TakeFX_GetParamNormalized(MediaItem_Take take, int fx, int param)","python":"Float retval = RPR_TakeFX_GetParamNormalized(MediaItem_Take take, Int fx, Int param)","cpp":"double TakeFX_GetParamNormalized(MediaItem_Take* take, int fx, int param)"},"title":"TakeFX_GetParamNormalized","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer is","description":""},{"identifier":"integer pin","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_GetPinMappings","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"high32","type":"integer"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"},{"identifier":"isoutput","type":"integer"},{"identifier":"pin","type":"integer"}]},"eel":{"method_name":"TakeFX_GetPinMappings","return_values":["int"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"isoutput"},{"type_name":"int","identifier":"pin"},{"type_name":"int","identifier":"&high32"}]}},"requires":{"Reaper":"6.43"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":""},{"identifier":"integer high32","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, integer high32 = reaper.TakeFX_GetPinMappings(MediaItem_Take take, integer fx, integer isoutput, integer pin)","eel":"int TakeFX_GetPinMappings(MediaItem_Take take, int fx, int isoutput, int pin, int &high32)","python":"(Int retval, MediaItem_Take take, Int fx, Int isoutput, Int pin, Int high32Out) = RPR_TakeFX_GetPinMappings(take, fx, isoutput, pin, high32Out)","cpp":"int TakeFX_GetPinMappings(MediaItem_Take* take, int fx, int isoutput, int pin, int* high32Out)"},"title":"TakeFX_GetPinMappings","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"gets the effective channel mapping bitmask for a particular pin. high32Out will be set to the high 32 bits","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":"the take, of whose fx you want to get the presetname"},{"identifier":"integer fx","description":"the index of the fx, whose indexname you want to get; 0-based"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_GetPreset","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"presetname","type":"string"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"}]},"eel":{"method_name":"TakeFX_GetPreset","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"identifier":"#presetname"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, the fx-parameters match preset; false, the fx-parameters do not match preset(see description for more details)"},{"identifier":"string presetname","description":"the name of the preset"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string presetname = reaper.TakeFX_GetPreset(MediaItem_Take take, integer fx)","eel":"bool TakeFX_GetPreset(MediaItem_Take take, int fx, #presetname)","python":"(Boolean retval, MediaItem_Take take, Int fx, String presetnameOut, Int presetnameOut_sz) = RPR_TakeFX_GetPreset(take, fx, presetnameOut, presetnameOut_sz)","cpp":"bool TakeFX_GetPreset(MediaItem_Take* take, int fx, char* presetnameOut, int presetnameOut_sz)"},"title":"TakeFX_GetPreset","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). \n\nReturns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). \n\nSee TakeFX_SetPreset","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem take","description":""},{"identifier":"integer fx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_GetPresetIndex","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"numberOfPresets","type":"integer"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"}]},"eel":{"method_name":"TakeFX_GetPresetIndex","return_values":["int"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"&numberOfPresets"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":""},{"identifier":"integer numberOfPresets","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, integer numberOfPresets = reaper.TakeFX_GetPresetIndex(MediaItem_Take take, integer fx)","eel":"int TakeFX_GetPresetIndex(MediaItem_Take take, int fx, int &numberOfPresets)","python":"(Int retval, MediaItem_Take take, Int fx, Int numberOfPresetsOut) = RPR_TakeFX_GetPresetIndex(take, fx, numberOfPresetsOut)","cpp":"int TakeFX_GetPresetIndex(MediaItem_Take* take, int fx, int* numberOfPresetsOut)"},"title":"TakeFX_GetPresetIndex","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See [TakeFX\\_SetPresetByIndex](#TakeFX_SetPresetByIndex)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_GetUserPresetFilename","return_values":[{"identifier":"fn","type":"string"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"}]},"eel":{"return_values":["TakeFX_GetUserPresetFilename"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"identifier":"#fn"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string fn","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string fn = reaper.TakeFX_GetUserPresetFilename(MediaItem_Take take, integer fx)","eel":"TakeFX_GetUserPresetFilename(MediaItem_Take take, int fx, #fn)","python":"(MediaItem_Take take, Int fx, String fnOut, Int fnOut_sz) = RPR_TakeFX_GetUserPresetFilename(take, fx, fnOut, fnOut_sz)","cpp":"void TakeFX_GetUserPresetFilename(MediaItem_Take* take, int fx, char* fnOut, int fnOut_sz)"},"title":"TakeFX_GetUserPresetFilename","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer presetmove","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_NavigatePresets","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"},{"identifier":"presetmove","type":"integer"}]},"eel":{"method_name":"TakeFX_NavigatePresets","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"presetmove"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TakeFX_NavigatePresets(MediaItem_Take take, integer fx, integer presetmove)","eel":"bool TakeFX_NavigatePresets(MediaItem_Take take, int fx, int presetmove)","python":"Boolean retval = RPR_TakeFX_NavigatePresets(MediaItem_Take take, Int fx, Int presetmove)","cpp":"bool TakeFX_NavigatePresets(MediaItem_Take* take, int fx, int presetmove)"},"title":"TakeFX_NavigatePresets","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""},{"identifier":"boolean enabled","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_SetEnabled","return_values":[],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"},{"identifier":"enabled","type":"boolean"}]},"eel":{"return_values":["TakeFX_SetEnabled"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"type_name":"bool","identifier":"enabled"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.TakeFX_SetEnabled(MediaItem_Take take, integer fx, boolean enabled)","eel":"TakeFX_SetEnabled(MediaItem_Take take, int fx, bool enabled)","python":"RPR_TakeFX_SetEnabled(MediaItem_Take take, Int fx, Boolean enabled)","cpp":"void TakeFX_SetEnabled(MediaItem_Take* take, int fx, bool enabled)"},"title":"TakeFX_SetEnabled","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"See [TakeFX\\_GetEnabled](#TakeFX_GetEnabled)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""},{"identifier":"string parmname","description":""},{"identifier":"string value","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_SetNamedConfigParm","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"},{"identifier":"parmname","type":"string"},{"identifier":"value","type":"string"}]},"eel":{"method_name":"TakeFX_SetNamedConfigParm","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"identifier":"\"parmname\""},{"identifier":"\"value\""}]}},"requires":{"Reaper":"6.74"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TakeFX_SetNamedConfigParm(MediaItem_Take take, integer fx, string parmname, string value)","eel":"bool TakeFX_SetNamedConfigParm(MediaItem_Take take, int fx, \"parmname\", \"value\")","python":"Boolean retval = RPR_TakeFX_SetNamedConfigParm(MediaItem_Take take, Int fx, String parmname, String value)","cpp":"bool TakeFX_SetNamedConfigParm(MediaItem_Take* take, int fx, const char* parmname, const char* value)"},"title":"TakeFX_SetNamedConfigParm","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"sets plug-in specific named configuration value (returns true on success).\n\nSupport values for write:\n\nvst_chunk[_program] : base64-encoded VST-specific chunk.\nclap_chunk : base64-encoded CLAP-specific chunk.\nparam.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter moduation LFO state\nparam.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo,x2,y2] : parameter modulation ACS state\nparam.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2] : parameter link/MIDI link: set effect=-100 to support midi_*\nparam.X.mod.[active,baseline,visible] : parameter module global settings\nparam.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string if set\nparam.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1, 2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)\nparam.X.learn.flags : &1=selected track only, &2=soft takeover, &4=focused FX only, &8=LFO retrigger, &16=visible FX only\n\nBANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]\nTHRESHOLD, CEILING, TRUEPEAK : [ReaLlmit]\nNUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]\nITEMx : [ReaVerb] state configuration line, when writing should be followed by a write of DONE\nFILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are write-only, when writing any, should be followed by a write of DONE\nMODE, RSMODE : [RS5k] general mode, resample mode\nVIDEO_CODE : [video processor] code\n\nforce_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence\ninstance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC, 3=hwcomp-master)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""},{"identifier":"boolean open","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_SetOpen","return_values":[],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"},{"identifier":"open","type":"boolean"}]},"eel":{"return_values":["TakeFX_SetOpen"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"type_name":"bool","identifier":"open"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.TakeFX_SetOpen(MediaItem_Take take, integer fx, boolean open)","eel":"TakeFX_SetOpen(MediaItem_Take take, int fx, bool open)","python":"RPR_TakeFX_SetOpen(MediaItem_Take take, Int fx, Boolean open)","cpp":"void TakeFX_SetOpen(MediaItem_Take* take, int fx, bool open)"},"title":"TakeFX_SetOpen","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Open this FX UI. See [TakeFX\\_GetOpen](#TakeFX_GetOpen)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer param","description":""},{"identifier":"number val","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_SetParam","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"},{"identifier":"param","type":"integer"},{"identifier":"val","type":"number"}]},"eel":{"method_name":"TakeFX_SetParam","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"param"},{"identifier":"val"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TakeFX_SetParam(MediaItem_Take take, integer fx, integer param, number val)","eel":"bool TakeFX_SetParam(MediaItem_Take take, int fx, int param, val)","python":"Boolean retval = RPR_TakeFX_SetParam(MediaItem_Take take, Int fx, Int param, Float val)","cpp":"bool TakeFX_SetParam(MediaItem_Take* take, int fx, int param, double val)"},"title":"TakeFX_SetParam","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer param","description":""},{"identifier":"number value","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_SetParamNormalized","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"},{"identifier":"param","type":"integer"},{"identifier":"value","type":"number"}]},"eel":{"method_name":"TakeFX_SetParamNormalized","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"param"},{"identifier":"value"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TakeFX_SetParamNormalized(MediaItem_Take take, integer fx, integer param, number value)","eel":"bool TakeFX_SetParamNormalized(MediaItem_Take take, int fx, int param, value)","python":"Boolean retval = RPR_TakeFX_SetParamNormalized(MediaItem_Take take, Int fx, Int param, Float value)","cpp":"bool TakeFX_SetParamNormalized(MediaItem_Take* take, int fx, int param, double value)"},"title":"TakeFX_SetParamNormalized","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"MediaItem_Take tk","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer is","description":""},{"identifier":"integer pin","description":""},{"identifier":"integer low32bits","description":""},{"identifier":"integer hi32bits","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_SetPinMappings","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"tk","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"},{"identifier":"is","type":"integer"},{"identifier":"pin","type":"integer"},{"identifier":"low32bits","type":"integer"},{"identifier":"hi32bits","type":"integer"}]},"eel":{"method_name":"TakeFX_SetPinMappings","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"tk"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"is"},{"type_name":"int","identifier":"pin"},{"type_name":"int","identifier":"low32bits"},{"type_name":"int","identifier":"hi32bits"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TakeFX_SetPinMappings(MediaItem_Take tk, integer fx, integer is, integer pin, integer low32bits, integer hi32bits)","eel":"bool TakeFX_SetPinMappings(MediaItem_Take tk, int fx, int is, int pin, int low32bits, int hi32bits)","python":"Boolean retval = RPR_TakeFX_SetPinMappings(MediaItem_Take tk, Int fx, Int isOutput, Int pin, Int low32bits, Int hi32bits)","cpp":"bool TakeFX_SetPinMappings(MediaItem_Take* tk, int fx, int isOutput, int pin, int low32bits, int hi32bits)"},"title":"TakeFX_SetPinMappings","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""},{"identifier":"string presetname","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_SetPreset","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"},{"identifier":"presetname","type":"string"}]},"eel":{"method_name":"TakeFX_SetPreset","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"identifier":"\"presetname\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TakeFX_SetPreset(MediaItem_Take take, integer fx, string presetname)","eel":"bool TakeFX_SetPreset(MediaItem_Take take, int fx, \"presetname\")","python":"Boolean retval = RPR_TakeFX_SetPreset(MediaItem_Take take, Int fx, String presetname)","cpp":"bool TakeFX_SetPreset(MediaItem_Take* take, int fx, const char* presetname)"},"title":"TakeFX_SetPreset","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See [TakeFX\\_GetPreset](#TakeFX_GetPreset).\n\npresetname is case-sensitive.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer idx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_SetPresetByIndex","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"},{"identifier":"idx","type":"integer"}]},"eel":{"method_name":"TakeFX_SetPresetByIndex","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"idx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TakeFX_SetPresetByIndex(MediaItem_Take take, integer fx, integer idx)","eel":"bool TakeFX_SetPresetByIndex(MediaItem_Take take, int fx, int idx)","python":"Boolean retval = RPR_TakeFX_SetPresetByIndex(MediaItem_Take take, Int fx, Int idx)","cpp":"bool TakeFX_SetPresetByIndex(MediaItem_Take* take, int fx, int idx)"},"title":"TakeFX_SetPresetByIndex","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See [TakeFX\\_GetPresetIndex](#TakeFX_GetPresetIndex).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer index","description":""},{"identifier":"integer showFlag","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_Show","return_values":[],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"index","type":"integer"},{"identifier":"showFlag","type":"integer"}]},"eel":{"return_values":["TakeFX_Show"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"index"},{"type_name":"int","identifier":"showFlag"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.TakeFX_Show(MediaItem_Take take, integer index, integer showFlag)","eel":"TakeFX_Show(MediaItem_Take take, int index, int showFlag)","python":"RPR_TakeFX_Show(MediaItem_Take take, Int index, Int showFlag)","cpp":"void TakeFX_Show(MediaItem_Take* take, int index, int showFlag)"},"title":"TakeFX_Show","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["midimanagement","take","item","check"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":"the MediaItem_Take, that you want to check for MIDI-elements"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeIsMIDI","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"method_name":"TakeIsMIDI","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, MediaItem_Take contains MIDI; false, MediaItem_Take doesn't contain MIDI"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TakeIsMIDI(MediaItem_Take take)","eel":"bool TakeIsMIDI(MediaItem_Take take)","python":"Boolean retval = RPR_TakeIsMIDI(MediaItem_Take take)","cpp":"bool TakeIsMIDI(MediaItem_Take* take)"},"title":"TakeIsMIDI","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns true if the active take contains MIDI.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["Theme Management","get","layout","theme"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string section","description":""},{"identifier":"integer idx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ThemeLayout_GetLayout","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"name","type":"string"}],"parameters":[{"identifier":"section","type":"string"},{"identifier":"idx","type":"integer"}]},"eel":{"method_name":"ThemeLayout_GetLayout","return_values":["bool"],"parameters":[{"identifier":"\"section\""},{"type_name":"int","identifier":"idx"},{"identifier":"#name"}]}},"requires":{"Reaper":"6.00"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string name","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string name = reaper.ThemeLayout_GetLayout(string section, integer idx)","eel":"bool ThemeLayout_GetLayout(\"section\", int idx, #name)","python":"(Boolean retval, String section, Int idx, String nameOut, Int nameOut_sz) = RPR_ThemeLayout_GetLayout(section, idx, nameOut, nameOut_sz)","cpp":"bool ThemeLayout_GetLayout(const char* section, int idx, char* nameOut, int nameOut_sz)"},"title":"ThemeLayout_GetLayout","chapters":["Theme Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Gets theme layout information. \n\n    section can be 'global' for global layout override, 'seclist' to enumerate a list of layout sections, otherwise a layout section such as 'mcp', 'tcp', 'trans', etc. \n    idx can be \n        -1 to query the current value, \n        -2 to get the description of the section (if not global), \n        -3 will return the current context DPI-scaling (256=normal, 512=retina, etc), or 0..x. \n\n returns false if failed.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["Theme Management","get","layout","theme","parameter"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer wp","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ThemeLayout_GetParameter","return_values":[{"identifier":"retval","type":"string"},{"isOptional":true,"type":"string","identifier":"desc"},{"isOptional":true,"type":"integer","identifier":"value"},{"isOptional":true,"type":"integer","identifier":"defValue"},{"isOptional":true,"type":"integer","identifier":"minValue"},{"isOptional":true,"type":"integer","identifier":"maxValue"}],"parameters":[{"identifier":"wp","type":"integer"}]},"eel":{"method_name":"ThemeLayout_GetParameter","return_values":["bool"],"parameters":[{"identifier":"#retval"},{"type_name":"int","identifier":"wp"},{"type_name":"optional","identifier":"#desc"},{"identifier":"&value","modifier":"optional","type_name":"int"},{"identifier":"&defValue","modifier":"optional","type_name":"int"},{"identifier":"&minValue","modifier":"optional","type_name":"int"},{"identifier":"&maxValue","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"5.972"},"return_values":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"string retval","description":""},{"identifier":"optional string desc","description":""},{"identifier":"optional integer value","description":""},{"identifier":"optional integer defValue","description":""},{"identifier":"optional integer minValue","description":""},{"identifier":"optional integer maxValue","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string retval, optional string desc, optional integer value, optional integer defValue, optional integer minValue, optional integer maxValue = reaper.ThemeLayout_GetParameter(integer wp)","eel":"bool ThemeLayout_GetParameter(#retval, int wp, optional #desc, optional int &value, optional int &defValue, optional int &minValue, optional int &maxValue)","python":"(String retval, Int wp, String descOutOptional, Int valueOutOptional, Int defValueOutOptional, Int minValueOutOptional, Int maxValueOutOptional) = RPR_ThemeLayout_GetParameter(wp, descOutOptional, valueOutOptional, defValueOutOptional, minValueOutOptional, maxValueOutOptional)","cpp":"const char* ThemeLayout_GetParameter(int wp, const char** descOutOptional, int* valueOutOptional, int* defValueOutOptional, int* minValueOutOptional, int* maxValueOutOptional)"},"title":"ThemeLayout_GetParameter","chapters":["Theme Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"returns theme layout parameter. return value is cfg-name, or nil/empty if out of range.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["Theme Management","refresh","layout","theme"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ThemeLayout_RefreshAll","return_values":[],"parameters":[]},"eel":{"return_values":["ThemeLayout_RefreshAll"],"parameters":[]}},"requires":{"Reaper":"5.972"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ThemeLayout_RefreshAll()","eel":"ThemeLayout_RefreshAll()","python":"RPR_ThemeLayout_RefreshAll()","cpp":"void ThemeLayout_RefreshAll()"},"title":"ThemeLayout_RefreshAll","chapters":["Theme Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Refreshes all layouts","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["Theme Management","set","layout","theme"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string section","description":""},{"identifier":"string layout","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ThemeLayout_SetLayout","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"section","type":"string"},{"identifier":"layout","type":"string"}]},"eel":{"method_name":"ThemeLayout_SetLayout","return_values":["bool"],"parameters":[{"identifier":"\"section\""},{"type_name":"\"","identifier":"layout\""}]}},"requires":{"Reaper":"5.974"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.ThemeLayout_SetLayout(string section, string layout)","eel":"bool ThemeLayout_SetLayout(\"section\", \" layout\")","python":"Boolean retval = RPR_ThemeLayout_SetLayout(String section, String layout)","cpp":"bool ThemeLayout_SetLayout(const char* section, const char* layout)"},"title":"ThemeLayout_SetLayout","chapters":["Theme Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sets theme layout override for a particular section \n\nsection can be 'global' or 'mcp' etc. \n\nIf setting global layout, prefix a ! to the layout string to clear any per-layout overrides. \n\nReturns false if failed.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["Theme Management","set","layout","theme","parameter"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer wp","description":""},{"identifier":"integer value","description":""},{"identifier":"boolean persist","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ThemeLayout_SetParameter","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"wp","type":"integer"},{"identifier":"value","type":"integer"},{"identifier":"persist","type":"boolean"}]},"eel":{"method_name":"ThemeLayout_SetParameter","return_values":["bool"],"parameters":[{"type_name":"int","identifier":"wp"},{"type_name":"int","identifier":"value"},{"type_name":"bool","identifier":"persist"}]}},"requires":{"Reaper":"5.972"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.ThemeLayout_SetParameter(integer wp, integer value, boolean persist)","eel":"bool ThemeLayout_SetParameter(int wp, int value, bool persist)","python":"Boolean retval = RPR_ThemeLayout_SetParameter(Int wp, Int value, Boolean persist)","cpp":"bool ThemeLayout_SetParameter(int wp, int value, bool persist)"},"title":"ThemeLayout_SetParameter","chapters":["Theme Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"sets theme layout parameter to value. persist=true in order to have change loaded on next theme load. \n\nnote that the caller should update layouts via ??? to make changes visible.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","time","precise"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.time_precise","return_values":[{"identifier":"time_stamp","type":"number"}],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number time_stamp","description":"the system-timestamp in seconds with a precision of 7 digits"}],"prog_lang":"*"},"functioncall":{"lua":"number time_stamp = reaper.time_precise()","python":"Float retval = RPR_time_precise()","cpp":"double time_precise()"},"title":"time_precise","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Gets a precise system timestamp in seconds.\n\nFor EEL-programming, see [eel\\_time\\_precise](#eel_time_precise).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"number tpos","description":""},{"identifier":"optional integer measuresIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TimeMap2_beatsToTime","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"tpos","type":"number"},{"isOptional":true,"type":"integer","identifier":"measuresIn"}]},"eel":{"method_name":"TimeMap2_beatsToTime","return_values":["double"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"identifier":"tpos"},{"identifier":"measuresIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.TimeMap2_beatsToTime(ReaProject proj, number tpos, optional integer measuresIn)","eel":"double TimeMap2_beatsToTime(ReaProject proj, tpos, optional int measuresIn)","python":"Float retval = RPR_TimeMap2_beatsToTime(ReaProject proj, Float tpos, const int measuresInOptional)","cpp":"double TimeMap2_beatsToTime(ReaProject* proj, double tpos, const int* measuresInOptional)"},"title":"TimeMap2_beatsToTime","chapters":["Api-Helper-Functions","Time/Grid Conversion/Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"convert a beat position (or optionally a beats+measures if measures is non-NULL) to time.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"number time","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TimeMap2_GetDividedBpmAtTime","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"time","type":"number"}]},"eel":{"method_name":"TimeMap2_GetDividedBpmAtTime","return_values":["double"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"identifier":"time"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.TimeMap2_GetDividedBpmAtTime(ReaProject proj, number time)","eel":"double TimeMap2_GetDividedBpmAtTime(ReaProject proj, time)","python":"Float retval = RPR_TimeMap2_GetDividedBpmAtTime(ReaProject proj, Float time)","cpp":"double TimeMap2_GetDividedBpmAtTime(ReaProject* proj, double time)"},"title":"TimeMap2_GetDividedBpmAtTime","chapters":["Api-Helper-Functions","Time/Grid Conversion/Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"number time","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TimeMap2_GetNextChangeTime","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"time","type":"number"}]},"eel":{"method_name":"TimeMap2_GetNextChangeTime","return_values":["double"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"identifier":"time"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.TimeMap2_GetNextChangeTime(ReaProject proj, number time)","eel":"double TimeMap2_GetNextChangeTime(ReaProject proj, time)","python":"Float retval = RPR_TimeMap2_GetNextChangeTime(ReaProject proj, Float time)","cpp":"double TimeMap2_GetNextChangeTime(ReaProject* proj, double time)"},"title":"TimeMap2_GetNextChangeTime","chapters":["Api-Helper-Functions","Time/Grid Conversion/Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"when does the next time map (tempo or time sig) change occur","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"number qn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TimeMap2_QNToTime","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"qn","type":"number"}]},"eel":{"method_name":"TimeMap2_QNToTime","return_values":["double"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"identifier":"qn"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.TimeMap2_QNToTime(ReaProject proj, number qn)","eel":"double TimeMap2_QNToTime(ReaProject proj, qn)","python":"Float retval = RPR_TimeMap2_QNToTime(ReaProject proj, Float qn)","cpp":"double TimeMap2_QNToTime(ReaProject* proj, double qn)"},"title":"TimeMap2_QNToTime","chapters":["Api-Helper-Functions","Time/Grid Conversion/Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"converts project QN position to time.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"number tpos","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TimeMap2_timeToBeats","return_values":[{"identifier":"retval","type":"number"},{"isOptional":true,"type":"integer","identifier":"measures"},{"isOptional":true,"type":"integer","identifier":"cml"},{"isOptional":true,"type":"number","identifier":"fullbeats"},{"isOptional":true,"type":"integer","identifier":"cdenom"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"tpos","type":"number"}]},"eel":{"method_name":"TimeMap2_timeToBeats","return_values":["double"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"identifier":"tpos"},{"identifier":"&measures","modifier":"optional","type_name":"int"},{"identifier":"&cml","modifier":"optional","type_name":"int"},{"type_name":"optional","identifier":"&fullbeats"},{"identifier":"&cdenom","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"number retval","description":""},{"identifier":"optional integer measures","description":""},{"identifier":"optional integer cml","description":""},{"identifier":"optional number fullbeats","description":""},{"identifier":"optional integer cdenom","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval, optional integer measures, optional integer cml, optional number fullbeats, optional integer cdenom = reaper.TimeMap2_timeToBeats(ReaProject proj, number tpos)","eel":"double TimeMap2_timeToBeats(ReaProject proj, tpos, optional int &measures, optional int &cml, optional &fullbeats, optional int &cdenom)","python":"(Float retval, ReaProject proj, Float tpos, Int measuresOutOptional, Int cmlOutOptional, Float fullbeatsOutOptional, Int cdenomOutOptional) = RPR_TimeMap2_timeToBeats(proj, tpos, measuresOutOptional, cmlOutOptional, fullbeatsOutOptional, cdenomOutOptional)","cpp":"double TimeMap2_timeToBeats(ReaProject* proj, double tpos, int* measuresOutOptional, int* cmlOutOptional, double* fullbeatsOutOptional, int* cdenomOutOptional)"},"title":"TimeMap2_timeToBeats","chapters":["Api-Helper-Functions","Time/Grid Conversion/Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"convert a time into beats.\nif measures is non-NULL, measures will be set to the measure count, return value will be beats since measure.\nif cml is non-NULL, will be set to current measure length in beats (i.e. time signature numerator)\nif fullbeats is non-NULL, and measures is non-NULL, fullbeats will get the full beat count (same value returned if measures is NULL).\nif cdenom is non-NULL, will be set to the current time signature denominator.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"number tpos","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TimeMap2_timeToQN","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"tpos","type":"number"}]},"eel":{"method_name":"TimeMap2_timeToQN","return_values":["double"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"identifier":"tpos"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.TimeMap2_timeToQN(ReaProject proj, number tpos)","eel":"double TimeMap2_timeToQN(ReaProject proj, tpos)","python":"Float retval = RPR_TimeMap2_timeToQN(ReaProject proj, Float tpos)","cpp":"double TimeMap2_timeToQN(ReaProject* proj, double tpos)"},"title":"TimeMap2_timeToQN","chapters":["Api-Helper-Functions","Time/Grid Conversion/Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"converts project time position to QN position.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TimeMap_curFrameRate","return_values":[{"identifier":"retval","type":"number"},{"identifier":"dropFrame","type":"boolean"}],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"method_name":"TimeMap_curFrameRate","return_values":["double"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"bool","identifier":"&dropFrame"}]}},"requires":{"Reaper":"6.43"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number retval","description":""},{"identifier":"boolean dropFrame","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval, boolean dropFrame = reaper.TimeMap_curFrameRate(ReaProject proj)","eel":"double TimeMap_curFrameRate(ReaProject proj, bool &dropFrame)","python":"(Float retval, ReaProject proj, Boolean dropFrameOut) = RPR_TimeMap_curFrameRate(proj, dropFrameOut)","cpp":"double TimeMap_curFrameRate(ReaProject* proj, bool* dropFrameOut)"},"title":"TimeMap_curFrameRate","chapters":["Api-Helper-Functions","Time/Grid Conversion/Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Gets project framerate, and optionally whether it is drop-frame timecode","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number time","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TimeMap_GetDividedBpmAtTime","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"time","type":"number"}]},"eel":{"method_name":"TimeMap_GetDividedBpmAtTime","return_values":["double"],"parameters":[{"identifier":"time"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.TimeMap_GetDividedBpmAtTime(number time)","eel":"double TimeMap_GetDividedBpmAtTime(time)","python":"Float retval = RPR_TimeMap_GetDividedBpmAtTime(Float time)","cpp":"double TimeMap_GetDividedBpmAtTime(double time)"},"title":"TimeMap_GetDividedBpmAtTime","chapters":["Api-Helper-Functions","Time/Grid Conversion/Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"integer measure","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TimeMap_GetMeasureInfo","return_values":[{"identifier":"retval","type":"number"},{"identifier":"qn_start","type":"number"},{"identifier":"qn_end","type":"number"},{"identifier":"timesig_num","type":"integer"},{"identifier":"timesig_denom","type":"integer"},{"identifier":"tempo","type":"number"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"measure","type":"integer"}]},"eel":{"method_name":"TimeMap_GetMeasureInfo","return_values":["double"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"int","identifier":"measure"},{"identifier":"&qn_start"},{"identifier":"&qn_end"},{"type_name":"int","identifier":"&timesig_num"},{"type_name":"int","identifier":"&timesig_denom"},{"identifier":"&tempo"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"number retval","description":""},{"identifier":"number qn_start","description":""},{"identifier":"number qn_end","description":""},{"identifier":"integer timesig_num","description":""},{"identifier":"integer timesig_denom","description":""},{"identifier":"number tempo","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval, number qn_start, number qn_end, integer timesig_num, integer timesig_denom, number tempo = reaper.TimeMap_GetMeasureInfo(ReaProject proj, integer measure)","eel":"double TimeMap_GetMeasureInfo(ReaProject proj, int measure, &qn_start, &qn_end, int &timesig_num, int &timesig_denom, &tempo)","python":"(Float retval, ReaProject proj, Int measure, Float qn_startOut, Float qn_endOut, Int timesig_numOut, Int timesig_denomOut, Float tempoOut) = RPR_TimeMap_GetMeasureInfo(proj, measure, qn_startOut, qn_endOut, timesig_numOut, timesig_denomOut, tempoOut)","cpp":"double TimeMap_GetMeasureInfo(ReaProject* proj, int measure, double* qn_startOut, double* qn_endOut, int* timesig_numOut, int* timesig_denomOut, double* tempoOut)"},"title":"TimeMap_GetMeasureInfo","chapters":["Api-Helper-Functions","Time/Grid Conversion/Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get the QN position and time signature information for the start of a measure. Return the time in seconds of the measure start.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"number time","description":""},{"identifier":"string pattern","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TimeMap_GetMetronomePattern","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"pattern","type":"string"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"time","type":"number"},{"identifier":"pattern","type":"string"}]},"eel":{"method_name":"TimeMap_GetMetronomePattern","return_values":["int"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"identifier":"time"},{"identifier":"#pattern"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string pattern","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, string pattern = reaper.TimeMap_GetMetronomePattern(ReaProject proj, number time, string pattern)","eel":"int TimeMap_GetMetronomePattern(ReaProject proj, time, #pattern)","python":"(Int retval, ReaProject proj, Float time, String pattern, Int pattern_sz) = RPR_TimeMap_GetMetronomePattern(proj, time, pattern, pattern_sz)","cpp":"int TimeMap_GetMetronomePattern(ReaProject* proj, double time, char* pattern, int pattern_sz)"},"title":"TimeMap_GetMetronomePattern","chapters":["Api-Helper-Functions","Time/Grid Conversion/Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Fills in a string representing the active metronome pattern. For example, in a 7/8 measure divided 3+4, the pattern might be \"1221222\". The length of the string is the time signature numerator, and the function returns the time signature denominator.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"number time","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TimeMap_GetTimeSigAtTime","return_values":[{"identifier":"timesig_num","type":"integer"},{"identifier":"timesig_denom","type":"integer"},{"identifier":"tempo","type":"number"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"time","type":"number"}]},"eel":{"return_values":["TimeMap_GetTimeSigAtTime"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"identifier":"time"},{"type_name":"int","identifier":"&timesig_num"},{"type_name":"int","identifier":"&timesig_denom"},{"identifier":"&tempo"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer timesig_num","description":""},{"identifier":"integer timesig_denom","description":""},{"identifier":"number tempo","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer timesig_num, integer timesig_denom, number tempo = reaper.TimeMap_GetTimeSigAtTime(ReaProject proj, number time)","eel":"TimeMap_GetTimeSigAtTime(ReaProject proj, time, int &timesig_num, int &timesig_denom, &tempo)","python":"(ReaProject proj, Float time, Int timesig_numOut, Int timesig_denomOut, Float tempoOut) = RPR_TimeMap_GetTimeSigAtTime(proj, time, timesig_numOut, timesig_denomOut, tempoOut)","cpp":"void TimeMap_GetTimeSigAtTime(ReaProject* proj, double time, int* timesig_numOut, int* timesig_denomOut, double* tempoOut)"},"title":"TimeMap_GetTimeSigAtTime","chapters":["Api-Helper-Functions","Time/Grid Conversion/Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"get the effective time signature and tempo","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"number qn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TimeMap_QNToMeasures","return_values":[{"identifier":"retval","type":"integer"},{"isOptional":true,"type":"number","identifier":"qnMeasureStart"},{"isOptional":true,"type":"number","identifier":"qnMeasureEnd"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"qn","type":"number"}]},"eel":{"method_name":"TimeMap_QNToMeasures","return_values":["int"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"identifier":"qn"},{"type_name":"optional","identifier":"&qnMeasureStart"},{"type_name":"optional","identifier":"&qnMeasureEnd"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer retval","description":""},{"identifier":"optional number qnMeasureStart","description":""},{"identifier":"optional number qnMeasureEnd","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, optional number qnMeasureStart, optional number qnMeasureEnd = reaper.TimeMap_QNToMeasures(ReaProject proj, number qn)","eel":"int TimeMap_QNToMeasures(ReaProject proj, qn, optional &qnMeasureStart, optional &qnMeasureEnd)","python":"(Int retval, ReaProject proj, Float qn, Float qnMeasureStartOutOptional, Float qnMeasureEndOutOptional) = RPR_TimeMap_QNToMeasures(proj, qn, qnMeasureStartOutOptional, qnMeasureEndOutOptional)","cpp":"int TimeMap_QNToMeasures(ReaProject* proj, double qn, double* qnMeasureStartOutOptional, double* qnMeasureEndOutOptional)"},"title":"TimeMap_QNToMeasures","chapters":["Api-Helper-Functions","Time/Grid Conversion/Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Find which measure the given QN position falls in.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number qn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TimeMap_QNToTime","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"qn","type":"number"}]},"eel":{"method_name":"TimeMap_QNToTime","return_values":["double"],"parameters":[{"identifier":"qn"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.TimeMap_QNToTime(number qn)","eel":"double TimeMap_QNToTime(qn)","python":"Float retval = RPR_TimeMap_QNToTime(Float qn)","cpp":"double TimeMap_QNToTime(double qn)"},"title":"TimeMap_QNToTime","chapters":["Api-Helper-Functions","Time/Grid Conversion/Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"converts project QN position to time.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"number qn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TimeMap_QNToTime_abs","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"qn","type":"number"}]},"eel":{"method_name":"TimeMap_QNToTime_abs","return_values":["double"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"identifier":"qn"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.TimeMap_QNToTime_abs(ReaProject proj, number qn)","eel":"double TimeMap_QNToTime_abs(ReaProject proj, qn)","python":"Float retval = RPR_TimeMap_QNToTime_abs(ReaProject proj, Float qn)","cpp":"double TimeMap_QNToTime_abs(ReaProject* proj, double qn)"},"title":"TimeMap_QNToTime_abs","chapters":["Api-Helper-Functions","Time/Grid Conversion/Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Converts project quarter note count (QN) to time. QN is counted from the start of the project, regardless of any partial measures. See [TimeMap2\\_QNToTime](#TimeMap2_QNToTime)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number tpos","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TimeMap_timeToQN","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"tpos","type":"number"}]},"eel":{"method_name":"TimeMap_timeToQN","return_values":["double"],"parameters":[{"identifier":"tpos"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.TimeMap_timeToQN(number tpos)","eel":"double TimeMap_timeToQN(tpos)","python":"Float retval = RPR_TimeMap_timeToQN(Float tpos)","cpp":"double TimeMap_timeToQN(double tpos)"},"title":"TimeMap_timeToQN","chapters":["Api-Helper-Functions","Time/Grid Conversion/Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"converts project QN position to time.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"number tpos","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TimeMap_timeToQN_abs","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"tpos","type":"number"}]},"eel":{"method_name":"TimeMap_timeToQN_abs","return_values":["double"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"identifier":"tpos"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.TimeMap_timeToQN_abs(ReaProject proj, number tpos)","eel":"double TimeMap_timeToQN_abs(ReaProject proj, tpos)","python":"Float retval = RPR_TimeMap_timeToQN_abs(ReaProject proj, Float tpos)","cpp":"double TimeMap_timeToQN_abs(ReaProject* proj, double tpos)"},"title":"TimeMap_timeToQN_abs","chapters":["Api-Helper-Functions","Time/Grid Conversion/Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Converts project time position to quarter note count (QN). QN is counted from the start of the project, regardless of any partial measures. See [TimeMap2\\_timeToQN](#TimeMap2_timeToQN)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer send_idx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ToggleTrackSendUIMute","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"send_idx","type":"integer"}]},"eel":{"method_name":"ToggleTrackSendUIMute","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"send_idx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.ToggleTrackSendUIMute(MediaTrack track, integer send_idx)","eel":"bool ToggleTrackSendUIMute(MediaTrack track, int send_idx)","python":"Boolean retval = RPR_ToggleTrackSendUIMute(MediaTrack track, Int send_idx)","cpp":"bool ToggleTrackSendUIMute(MediaTrack* track, int send_idx)"},"title":"ToggleTrackSendUIMute","chapters":["Track Management","Routing"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer channel","description":""},{"identifier":"boolean clear","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Track_GetPeakHoldDB","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"channel","type":"integer"},{"identifier":"clear","type":"boolean"}]},"eel":{"method_name":"Track_GetPeakHoldDB","return_values":["double"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"channel"},{"type_name":"bool","identifier":"clear"}]}},"requires":{"Reaper":"6.35"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.Track_GetPeakHoldDB(MediaTrack track, integer channel, boolean clear)","eel":"double Track_GetPeakHoldDB(MediaTrack track, int channel, bool clear)","python":"Float retval = RPR_Track_GetPeakHoldDB(MediaTrack track, Int channel, Boolean clear)","cpp":"double Track_GetPeakHoldDB(MediaTrack* track, int channel, bool clear)"},"title":"Track_GetPeakHoldDB","chapters":["Track Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns meter hold state, in dB*0.01 (0 = +0dB, -0.01 = -1dB, 0.02 = +2dB, etc). If clear is set, clears the meter hold. If channel==1024 or channel==1025, returns loudness values if this is the master track or this track's VU meters are set to display loudness.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer channel","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Track_GetPeakInfo","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"channel","type":"integer"}]},"eel":{"method_name":"Track_GetPeakInfo","return_values":["double"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"channel"}]}},"requires":{"Reaper":"6.35"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.Track_GetPeakInfo(MediaTrack track, integer channel)","eel":"double Track_GetPeakInfo(MediaTrack track, int channel)","python":"Float retval = RPR_Track_GetPeakInfo(MediaTrack track, Int channel)","cpp":"double Track_GetPeakInfo(MediaTrack* track, int channel)"},"title":"Track_GetPeakInfo","chapters":["Track Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns peak meter value (1.0=+0dB, 0.0=-inf) for channel. If channel==1024 or channel==1025, returns loudness values if this is the master track or this track's VU meters are set to display loudness.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["userinterface","tooltip","message","set"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"string fmt","description":"the message, to be shown as tooltip; empty string removes tooltip"},{"identifier":"integer xpos","description":"horizontal position in pixels"},{"identifier":"integer ypos","description":"vertical position in pixels"},{"identifier":"boolean topmost","description":"true, puts tooltip on top of all windows of the operating system; \nfalse, tooltip will only be shown within Reaper's windows"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackCtl_SetToolTip","return_values":[],"parameters":[{"identifier":"fmt","type":"string"},{"identifier":"xpos","type":"integer"},{"identifier":"ypos","type":"integer"},{"identifier":"topmost","type":"boolean"}]},"eel":{"return_values":["TrackCtl_SetToolTip"],"parameters":[{"identifier":"\"fmt\""},{"type_name":"int","identifier":"xpos"},{"type_name":"int","identifier":"ypos"},{"type_name":"bool","identifier":"topmost"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.TrackCtl_SetToolTip(string fmt, integer xpos, integer ypos, boolean topmost)","eel":"TrackCtl_SetToolTip(\"fmt\", int xpos, int ypos, bool topmost)","python":"RPR_TrackCtl_SetToolTip(String fmt, Int xpos, Int ypos, Boolean topmost)","cpp":"void TrackCtl_SetToolTip(const char* fmt, int xpos, int ypos, bool topmost)"},"title":"TrackCtl_SetToolTip","chapters":["User Interface","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Displays tooltip at location, or removes if empty string.\n\nOnly one tooltip can be shown, means, a new tooltip removes the previous one.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["fxmanagement","add","track fx","input fx"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaTrack track","description":"the track, into whose FXChain you want to add a new FX; for inputFX(monitoring FX), this must be the master track + recFX==true"},{"identifier":"string fxname","description":"the name of the fx/instrument-plugin"},{"identifier":"boolean recFX","description":"true, add the fx to the inputFX(only when track=master track); false, add it to track"},{"identifier":"integer instantiate","description":"negative, always create this new fx; positive, create the fx, if it does not yet exist; 0, query position of the first fx with that name"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_AddByName","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fxname","type":"string"},{"identifier":"recFX","type":"boolean"},{"identifier":"instantiate","type":"integer"}]},"eel":{"method_name":"TrackFX_AddByName","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"identifier":"\"fxname\""},{"type_name":"bool","identifier":"recFX"},{"type_name":"int","identifier":"instantiate"}]}},"requires":{"Reaper":"6.72"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the index of the position of the new fx; -1, in case of an error"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.TrackFX_AddByName(MediaTrack track, string fxname, boolean recFX, integer instantiate)","eel":"int TrackFX_AddByName(MediaTrack track, \"fxname\", bool recFX, int instantiate)","python":"Int retval = RPR_TrackFX_AddByName(MediaTrack track, String fxname, Boolean recFX, Int instantiate)","cpp":"int TrackFX_AddByName(MediaTrack* track, const char* fxname, bool recFX, int instantiate)"},"title":"TrackFX_AddByName","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Adds or queries the position of a named FX from the track FX chain (recFX=false) or record input FX/monitoring FX (recFX=true, monitoring FX are on master track). \n\nSpecify a negative value for instantiate to always create a new effect, \n0 to only query the first instance of an effect, or a positive value to add an instance if one is not found.\n\nReturns -1 on failure or the new position in chain on success.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"MediaTrack src_track","description":"the source-track, whose fx you want to copy; use master-track to address inputfx"},{"identifier":"Int src_fx","description":"the index of the fx(0-based); add 0x1000000 to use it for inputfx"},{"identifier":"MediaTrack dest_track","description":"the destination-track, into which you want to paste/insert the fx; use master-track to address inputfx"},{"identifier":"Int dest_fx","description":"the index of the fx(0-based); add 0x1000000 to use it for inputfx"},{"identifier":"Boolean is_move","description":"true, move the fx; false, just copy the fx as new fx to the new position"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_CopyToTrack","return_values":[],"parameters":[{"identifier":"src_track","type":"MediaTrack"},{"identifier":"src_fx","type":"integer"},{"identifier":"dest_track","type":"MediaTrack"},{"identifier":"dest_fx","type":"integer"},{"identifier":"is_move","type":"boolean"}]},"eel":{"return_values":["TrackFX_CopyToTrack"],"parameters":[{"type_name":"MediaTrack","identifier":"src_track"},{"type_name":"int","identifier":"src_fx"},{"type_name":"MediaTrack","identifier":"dest_track"},{"type_name":"int","identifier":"dest_fx"},{"type_name":"bool","identifier":"is_move"}]}},"requires":{"Reaper":"5.95"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.TrackFX_CopyToTrack(MediaTrack src_track, integer src_fx, MediaTrack dest_track, integer dest_fx, boolean is_move)","eel":"TrackFX_CopyToTrack(MediaTrack src_track, int src_fx, MediaTrack dest_track, int dest_fx, bool is_move)","python":"RPR_TrackFX_CopyToTrack(MediaTrack src_track, Int src_fx, MediaTrack dest_track, Int dest_fx, Boolean is_move)","cpp":"void TrackFX_CopyToTrack(MediaTrack* src_track, int src_fx, MediaTrack* dest_track, int dest_fx, bool is_move)"},"title":"TrackFX_CopyToTrack","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Copies (or moves) FX from src_track to dest_track. Can be used with src_track=dest_track to reorder, FX indices have 0x1000000 set to reference input FX. \n\nNote:\nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.\nAdd 0x1000000 to the fx-indices to address monitoringFX/rec-inputFX.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"MediaTrack src_track","description":"the source-track, whose fx you want to copy; use master-track to address inputfx"},{"identifier":"Int src_fx","description":"the index of the fx(0-based); add 0x1000000 to use it for inputfx"},{"identifier":"MediaItem_Take dest_take","description":"the destination-take, into which you want to paste/insert the fx"},{"identifier":"Int dest_fx","description":"the index of the fx(0-based)"},{"identifier":"Boolean is_move","description":"true, move the fx; false, just copy the fx as new fx to the new position"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_CopyToTake","return_values":[],"parameters":[{"identifier":"src_track","type":"MediaTrack"},{"identifier":"src_fx","type":"integer"},{"identifier":"dest_take","type":"MediaItem_Take"},{"identifier":"dest_fx","type":"integer"},{"identifier":"is_move","type":"boolean"}]},"eel":{"return_values":["TrackFX_CopyToTake"],"parameters":[{"type_name":"MediaTrack","identifier":"src_track"},{"type_name":"int","identifier":"src_fx"},{"type_name":"MediaItem_Take","identifier":"dest_take"},{"type_name":"int","identifier":"dest_fx"},{"type_name":"bool","identifier":"is_move"}]}},"requires":{"Reaper":"5.95"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.TrackFX_CopyToTake(MediaTrack src_track, integer src_fx, MediaItem_Take dest_take, integer dest_fx, boolean is_move)","eel":"TrackFX_CopyToTake(MediaTrack src_track, int src_fx, MediaItem_Take dest_take, int dest_fx, bool is_move)","python":"RPR_TrackFX_CopyToTake(MediaTrack src_track, Int src_fx, MediaItem_Take dest_take, Int dest_fx, Boolean is_move)","cpp":"void TrackFX_CopyToTake(MediaTrack* src_track, int src_fx, MediaItem_Take* dest_take, int dest_fx, bool is_move)"},"title":"TrackFX_CopyToTake","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Copies (or moves) FX from src_track to dest_take. src_fx can have 0x1000000 set to reference input FX. \n\nNote:\nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.\nAdd 0x1000000 to the fx-indices to address monitoringFX/rec-inputFX.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":"the track, of which you want to set an fx's parameter editing ended"},{"identifier":"integer fx","description":"the index of the fx; ass 0x1000000 to address rec-input-fx/monitoringfx"},{"identifier":"integer param","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_EndParamEdit","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"param","type":"integer"}]},"eel":{"method_name":"TrackFX_EndParamEdit","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"param"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, setting value was successful; false, setting value was unsuccessful"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TrackFX_EndParamEdit(MediaTrack track, integer fx, integer param)","eel":"bool TrackFX_EndParamEdit(MediaTrack track, int fx, int param)","python":"Boolean retval = RPR_TrackFX_EndParamEdit(MediaTrack track, Int fx, Int param)","cpp":"bool TrackFX_EndParamEdit(MediaTrack* track, int fx, int param)"},"title":"TrackFX_EndParamEdit","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"By setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaTrack track","description":"the track, which contains the fx; use master-track if you want to address input-fx(see fx)"},{"identifier":"integer fx","description":"the index of the fx(0-based); add 0x1000000 to use inputFX(only with track=mastertrack)"},{"identifier":"integer param","description":"the parameter, whose format you want to apply to the value"},{"identifier":"number val","description":"a value, which shall be formatted accordingly"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_FormatParamValue","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"param","type":"integer"},{"identifier":"val","type":"number"}]},"eel":{"method_name":"TrackFX_FormatParamValue","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"param"},{"identifier":"val"},{"identifier":"#buf"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, parameter can be retrieved; false, an error occured(e.g. no such fx)"},{"identifier":"string buf","description":"the formatted parameter value"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string buf = reaper.TrackFX_FormatParamValue(MediaTrack track, integer fx, integer param, number val)","eel":"bool TrackFX_FormatParamValue(MediaTrack track, int fx, int param, val, #buf)","python":"(Boolean retval, MediaTrack track, Int fx, Int param, Float val, String bufOut, Int bufOut_sz) = RPR_TrackFX_FormatParamValue(track, fx, param, val, bufOut, bufOut_sz)","cpp":"bool TrackFX_FormatParamValue(MediaTrack* track, int fx, int param, double val, char* bufOut, int bufOut_sz)"},"title":"TrackFX_FormatParamValue","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns a formatted version of the currently set parameter-value.\n\nNote: only works with FX that support Cockos VST extensions.\n\nBy setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.\n\nreturns false in case of an error","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"MediaTrack track","description":"the track, which contains the fx; use master-track if you want to address input-fx(see fx)"},{"identifier":"integer fx","description":"the index of the fx(0-based); add 0x1000000 to use inputFX(only with track=mastertrack)"},{"identifier":"integer param","description":"the parameter, whose format you want to apply to the value"},{"identifier":"number val","description":"a value, which shall be formatted accordingly"},{"identifier":"string buf","description":"simply set this to \"\""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_FormatParamValueNormalized","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"param","type":"integer"},{"identifier":"value","type":"number"},{"identifier":"buf","type":"string"}]},"eel":{"method_name":"TrackFX_FormatParamValueNormalized","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"param"},{"identifier":"value"},{"identifier":"#buf"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, parameter can be retrieved; false, an error occured(e.g. no such fx)"},{"identifier":"string buf","description":"the formatted parameter value"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string buf = reaper.TrackFX_FormatParamValueNormalized(MediaTrack track, integer fx, integer param, number value, string buf)","eel":"bool TrackFX_FormatParamValueNormalized(MediaTrack track, int fx, int param, value, #buf)","python":"(Boolean retval, MediaTrack track, Int fx, Int param, Float value, String buf, Int buf_sz) = RPR_TrackFX_FormatParamValueNormalized(track, fx, param, value, buf, buf_sz)","cpp":"bool TrackFX_FormatParamValueNormalized(MediaTrack* track, int fx, int param, double value, char* buf, int buf_sz)"},"title":"TrackFX_FormatParamValueNormalized","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns a formatted version of the currently set parameter-value and normalizes it.\n\nNote: only works with FX that support Cockos VST extensions.\n\nBy setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.\n\nreturns false in case of an error","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":"the MediaTrack, which may hold the fx"},{"identifier":"string fxname","description":"the name of the fx, whose first index-position you want to query"},{"identifier":"boolean instantiate","description":"true, add the fx, is it's not existing; false, just query"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetByName","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fxname","type":"string"},{"identifier":"instantiate","type":"boolean"}]},"eel":{"method_name":"TrackFX_GetByName","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"identifier":"\"fxname\""},{"type_name":"bool","identifier":"instantiate"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the index of the first track FX with fxname"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.TrackFX_GetByName(MediaTrack track, string fxname, boolean instantiate)","eel":"int TrackFX_GetByName(MediaTrack track, \"fxname\", bool instantiate)","python":"Int retval = RPR_TrackFX_GetByName(MediaTrack track, String fxname, Boolean instantiate)","cpp":"int TrackFX_GetByName(MediaTrack* track, const char* fxname, bool instantiate)"},"title":"TrackFX_GetByName","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Get the index of the first track FX insert that matches fxname. If the FX is not in the chain and instantiate is true, it will be inserted. See [TrackFX\\_GetInstrument](#TrackFX_GetInstrument), [TrackFX\\_GetEQ](#TrackFX_GetEQ). Deprecated in favor of TrackFX_AddByName.\n\nreturns -1 in case of an error","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack track","description":"the track, whose FXChain-visibility you want to query"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetChainVisible","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"track","type":"MediaTrack"}]},"eel":{"method_name":"TrackFX_GetChainVisible","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"track"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the current visibility/selected state of the FXChain:\npositive, the index of the selected fx(0-based)\n-1, hidden\n-2, visible but no effect inserted"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.TrackFX_GetChainVisible(MediaTrack track)","eel":"int TrackFX_GetChainVisible(MediaTrack track)","python":"Int retval = RPR_TrackFX_GetChainVisible(MediaTrack track)","cpp":"int TrackFX_GetChainVisible(MediaTrack* track)"},"title":"TrackFX_GetChainVisible","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack track","description":"the track, whose number of fx in the FXChain you want to count"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetCount","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"track","type":"MediaTrack"}]},"eel":{"method_name":"TrackFX_GetCount","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"track"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the number of fx in the FXChain of track"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.TrackFX_GetCount(MediaTrack track)","eel":"int TrackFX_GetCount(MediaTrack track)","python":"Int retval = RPR_TrackFX_GetCount(MediaTrack track)","cpp":"int TrackFX_GetCount(MediaTrack* track)"},"title":"TrackFX_GetCount","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns the number of trackfx in the FXChain of track","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":"the track, whose fx-enabled-state you want to query; use master-track to query inputFX(see fx)"},{"identifier":"integer fx","description":"the index of the fx, whose enabled-state you want to query(0-based); add 0x1000000 to query inputFX"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetEnabled","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"}]},"eel":{"method_name":"TrackFX_GetEnabled","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, fx is enabled; false, fx is disabled or not existing"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TrackFX_GetEnabled(MediaTrack track, integer fx)","eel":"bool TrackFX_GetEnabled(MediaTrack track, int fx)","python":"Boolean retval = RPR_TrackFX_GetEnabled(MediaTrack track, Int fx)","cpp":"bool TrackFX_GetEnabled(MediaTrack* track, int fx)"},"title":"TrackFX_GetEnabled","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"returns, if a certain FX in track is enabled\n\nSee [TrackFX\\_SetEnabled](#TrackFX_SetEnabled)\n\nBy setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.\n\nreturns false in case of an error","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":"the track, whose first ReaEQ-instance-index you want to query"},{"identifier":"boolean instantiate","description":"true, add ReaEQ if not existing yet; false, just query its position"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetEQ","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"instantiate","type":"boolean"}]},"eel":{"method_name":"TrackFX_GetEQ","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"bool","identifier":"instantiate"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the index of first ReaEQ in the FXChain; -1, if no ReaEQ is available"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.TrackFX_GetEQ(MediaTrack track, boolean instantiate)","eel":"int TrackFX_GetEQ(MediaTrack track, bool instantiate)","python":"Int retval = RPR_TrackFX_GetEQ(MediaTrack track, Boolean instantiate)","cpp":"int TrackFX_GetEQ(MediaTrack* track, bool instantiate)"},"title":"TrackFX_GetEQ","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Get the index of ReaEQ in the track FX chain. If ReaEQ is not in the chain and instantiate is true, it will be inserted. See [TrackFX\\_GetInstrument](#TrackFX_GetInstrument), [TrackFX\\_GetByName](#TrackFX_GetByName).\n\nreturns -1 if no ReaEQ is available.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaTrack track","description":"the track, whose ReaEQ-instance-enabledstate you want to query"},{"identifier":"integer fx","description":"the index of the fx in the FXChain, that is the ReaEQ-instance in question"},{"identifier":"integer bandtype","description":"-1, master gain;\n0, hipass\n1, loshelf\n2, band\n3, notch, \n4, hishelf\n5, lopass\n6, bandpass\n7, parallel bandpass"},{"identifier":"integer bandidx","description":"(ignored for master gain): 0=first band matching bandtype, 1=2nd band matching bandtype, etc."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetEQBandEnabled","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"bandtype","type":"integer"},{"identifier":"bandidx","type":"integer"}]},"eel":{"method_name":"TrackFX_GetEQBandEnabled","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"bandtype"},{"type_name":"int","identifier":"bandidx"}]}},"requires":{"Reaper":"6.44"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, if the EQ band is enabled; false, if the EQ band is disabled"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TrackFX_GetEQBandEnabled(MediaTrack track, integer fx, integer bandtype, integer bandidx)","eel":"bool TrackFX_GetEQBandEnabled(MediaTrack track, int fx, int bandtype, int bandidx)","python":"Boolean retval = RPR_TrackFX_GetEQBandEnabled(MediaTrack track, Int fx, Int bandtype, Int bandidx)","cpp":"bool TrackFX_GetEQBandEnabled(MediaTrack* track, int fx, int bandtype, int bandidx)"},"title":"TrackFX_GetEQBandEnabled","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Returns true if the EQ band is enabled.\nReturns false if the band is disabled, or if track/fxidx is not ReaEQ.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx:(ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\n\nBy setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.\n\nSee [TrackFX\\_GetEQ](#TrackFX_GetEQ), [TrackFX\\_GetEQParam](#TrackFX_GetEQParam), [TrackFX\\_SetEQParam](#TrackFX_SetEQParam), [TrackFX\\_SetEQBandEnabled](#TrackFX_SetEQBandEnabled).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":"the track, whose ReaEQ-instance-attributes you want to get"},{"identifier":"integer fx","description":"the index of the fx; add 0x1000000 to address rec-input-fx/monitoringfx; 0-based"},{"identifier":"integer paramidx","description":"the parameter whose eq-states you want to retrieve; 0-based"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetEQParam","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"bandtype","type":"integer"},{"identifier":"bandidx","type":"integer"},{"identifier":"paramtype","type":"integer"},{"identifier":"normval","type":"number"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"paramidx","type":"integer"}]},"eel":{"method_name":"TrackFX_GetEQParam","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"paramidx"},{"type_name":"int","identifier":"&bandtype"},{"type_name":"int","identifier":"&bandidx"},{"type_name":"int","identifier":"&paramtype"},{"identifier":"&normval"}]}},"requires":{"Reaper":"6.44"},"return_values":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"boolean retval","description":"true, if it's a ReaEQ-instance; false, is not a ReaEQ-instance or in case of an error"},{"identifier":"integer bandtype","description":"-1, master gain;\n0, hipass\n1, loshelf\n2, band\n3, notch, \n4, hishelf\n5, lopass\n6, bandpass\n7, parallel bandpass"},{"identifier":"integer bandidx","description":"0, target first band matching bandtype; 1, target 2nd band matching bandtype, etc. "},{"identifier":"integer paramtype","description":"0, freq; 1, gain; 2, Q "},{"identifier":"number normval","description":"the normalized value"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer bandtype, integer bandidx, integer paramtype, number normval = reaper.TrackFX_GetEQParam(MediaTrack track, integer fx, integer paramidx)","eel":"bool TrackFX_GetEQParam(MediaTrack track, int fx, int paramidx, int &bandtype, int &bandidx, int &paramtype, &normval)","python":"(Boolean retval, MediaTrack track, Int fx, Int paramidx, Int bandtypeOut, Int bandidxOut, Int paramtypeOut, Float normvalOut) = RPR_TrackFX_GetEQParam(track, fxidx, paramidx, bandtypeOut, bandidxOut, paramtypeOut, normvalOut)","cpp":"bool TrackFX_GetEQParam(MediaTrack* track, int fx, int paramidx, int* bandtypeOut, int* bandidxOut, int* paramtypeOut, double* normvalOut)"},"title":"TrackFX_GetEQParam","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Returns false if track/fxidx is not ReaEQ.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=first band matching bandtype, 1=2nd band matching bandtype, etc.\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\n\nBy setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.\n\nSee [TrackFX\\_GetEQ](#TrackFX_GetEQ), [TrackFX\\_SetEQParam](#TrackFX_SetEQParam), [TrackFX\\_GetEQBandEnabled](#TrackFX_GetEQBandEnabled), [TrackFX\\_SetEQBandEnabled](#TrackFX_SetEQBandEnabled).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer fx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetFloatingWindow","return_values":[{"identifier":"hwnd","type":"HWND"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"}]},"eel":{"method_name":"TrackFX_GetFloatingWindow","return_values":["HWND"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"HWND hwnd","description":""}],"prog_lang":"*"},"functioncall":{"lua":"HWND hwnd = reaper.TrackFX_GetFloatingWindow(MediaTrack track, integer fx)","eel":"HWND TrackFX_GetFloatingWindow(MediaTrack track, int fx)","python":"HWND hwnd = RPR_TrackFX_GetFloatingWindow(MediaTrack track, Int fx)","cpp":"HWND TrackFX_GetFloatingWindow(MediaTrack* track, int fx)"},"title":"TrackFX_GetFloatingWindow","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns HWND of floating window for effect index, if any\n\nBy setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem track","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer param","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetFormattedParamValue","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"param","type":"integer"}]},"eel":{"method_name":"TrackFX_GetFormattedParamValue","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"param"},{"identifier":"#buf"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string buf = reaper.TrackFX_GetFormattedParamValue(MediaTrack track, integer fx, integer param)","eel":"bool TrackFX_GetFormattedParamValue(MediaTrack track, int fx, int param, #buf)","python":"(Boolean retval, MediaTrack track, Int fx, Int param, String bufOut, Int bufOut_sz) = RPR_TrackFX_GetFormattedParamValue(track, fx, param, bufOut, bufOut_sz)","cpp":"bool TrackFX_GetFormattedParamValue(MediaTrack* track, int fx, int param, char* bufOut, int bufOut_sz)"},"title":"TrackFX_GetFormattedParamValue","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"By setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer fx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetFXGUID","return_values":[{"identifier":"GUID","type":"string"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"}]},"eel":{"method_name":"TrackFX_GetFXGUID","return_values":["bool"],"parameters":[{"identifier":"#retguid"},{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string GUID","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string GUID = reaper.TrackFX_GetFXGUID(MediaTrack track, integer fx)","eel":"bool TrackFX_GetFXGUID(#retguid, MediaTrack track, int fx)","python":"String GUID = RPR_TrackFX_GetFXGUID(MediaTrack track, Int fx)","cpp":"GUID* TrackFX_GetFXGUID(MediaTrack* track, int fx)"},"title":"TrackFX_GetFXGUID","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"By setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer fx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetFXName","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"}]},"eel":{"method_name":"TrackFX_GetFXName","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"identifier":"#buf"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string buf = reaper.TrackFX_GetFXName(MediaTrack track, integer fx)","eel":"bool TrackFX_GetFXName(MediaTrack track, int fx, #buf)","python":"(Boolean retval, MediaTrack track, Int fx, String bufOut, Int bufOut_sz) = RPR_TrackFX_GetFXName(track, fx, bufOut, bufOut_sz)","cpp":"bool TrackFX_GetFXName(MediaTrack* track, int fx, char* bufOut, int bufOut_sz)"},"title":"TrackFX_GetFXName","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"By setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack track","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetInstrument","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"track","type":"MediaTrack"}]},"eel":{"method_name":"TrackFX_GetInstrument","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"track"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.TrackFX_GetInstrument(MediaTrack track)","eel":"int TrackFX_GetInstrument(MediaTrack track)","python":"Int retval = RPR_TrackFX_GetInstrument(MediaTrack track)","cpp":"int TrackFX_GetInstrument(MediaTrack* track)"},"title":"TrackFX_GetInstrument","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Get the index of the first track FX insert that is a virtual instrument, or -1 if none. See [TrackFX\\_GetEQ](#TrackFX_GetEQ), [TrackFX\\_GetByName](#TrackFX_GetByName).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer fx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetIOSize","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"inputPins","type":"integer"},{"identifier":"outputPins","type":"integer"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"}]},"eel":{"method_name":"TrackFX_GetIOSize","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"&inputPins"},{"type_name":"int","identifier":"&outputPins"}]}},"requires":{"Reaper":"6.43"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer retval","description":""},{"identifier":"integer inputPins","description":""},{"identifier":"integer outputPins","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, integer inputPins, integer outputPins = reaper.TrackFX_GetIOSize(MediaTrack track, integer fx)","eel":"int TrackFX_GetIOSize(MediaTrack track, int fx, int &inputPins, int &outputPins)","python":"(Int retval, MediaTrack track, Int fx, Int inputPinsOut, Int outputPinsOut) = RPR_TrackFX_GetIOSize(track, fx, inputPinsOut, outputPinsOut)","cpp":"int TrackFX_GetIOSize(MediaTrack* track, int fx, int* inputPinsOut, int* outputPinsOut)"},"title":"TrackFX_GetIOSize","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"gets the number of input/output pins for FX if available, returns plug-in type or -1 on error\n\nBy setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.\n\n0, \"DX\"\n1, \"LV2\"\n2, \"JSFX\"\n3, \"VST\"\n5, \"AU\"\n6, \"Video Processor\"\n7, \"CLAP\"\n8, \"Container\"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer fx","description":""},{"identifier":"string parmname","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetNamedConfigParm","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"parmname","type":"string"}]},"eel":{"method_name":"retval","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"identifier":"\"parmname\""},{"identifier":"#buf"}]}},"requires":{"Reaper":"6.79"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string buf = reaper.TrackFX_GetNamedConfigParm(MediaTrack track, integer fx, string parmname)","eel":"bool retval = TrackFX_GetNamedConfigParm(MediaTrack track, int fx, \"parmname\", #buf)","python":"(Boolean retval, MediaTrack track, Int fx, String parmname, String bufOutNeedBig, Int bufOutNeedBig_sz) = RPR_TrackFX_GetNamedConfigParm(track, fx, parmname, bufOutNeedBig, bufOutNeedBig_sz)","cpp":"bool retval = TrackFX_GetNamedConfigParm(MediaTrack* track, int fx, const char* parmname, char* bufOutNeedBig, int bufOutNeedBig_sz)"},"title":"TrackFX_GetNamedConfigParm","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"gets plug-in specific named configuration value (returns true on success). \n\nBy setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.            \n\nSupported values for read:\n  pdc : PDC latency\n  in_pin_X : name of input pin X\n  out_pin_X : name of output pin X\n  fx_type : type string\n  fx_ident : type-specific identifier\n  fx_name : pre-aliased name\n  GainReduction_dB : [ReaComp + other supported compressors]\n  \n  original_name : pre-renamed FX instance name\n  renamed_name : renamed FX instance name (empty string = not renamed)\n  \n  vst_chunk[_program] : base64-encoded VST-specific chunk.\n  clap_chunk : base64-encoded CLAP-specific chunk.\n  \n  param.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter moduation LFO state\n  param.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo] : parameter modulation ACS state\n  param.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2] : parameter link/MIDI link: set effect=-100 to support midi_*\n  param.X.mod.[active,baseline,visible] : parameter module global settings\n  param.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string if set\n  param.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1, 2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)\n  param.X.learn.flags : &1=selected track only, &2=soft takeover, &4=focused FX only, &8=LFO retrigger, &16=visible FX only\n  BANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]\n  THRESHOLD, CEILING, TRUEPEAK : [ReaLlmit]\n  NUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]\n  \n  ITEMx : [ReaVerb] state configuration line, when writing should be followed by a write of DONE\n  FILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are write-only, when writing any, should be followed by a write of DONE\n  MODE, RSMODE : [RS5k] general mode, resample mode\n  VIDEO_CODE : [video processor] code\n  \n  force_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence\n  instance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\n  chain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\n  chain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC, 3=hwcomp-master)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer fx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetNumParams","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"}]},"eel":{"method_name":"TrackFX_GetNumParams","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.TrackFX_GetNumParams(MediaTrack track, integer fx)","eel":"int TrackFX_GetNumParams(MediaTrack track, int fx)","python":"Int retval = RPR_TrackFX_GetNumParams(MediaTrack track, Int fx)","cpp":"int TrackFX_GetNumParams(MediaTrack* track, int fx)"},"title":"TrackFX_GetNumParams","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"By setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","check","open","get","ui","fx"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":"the MediaTrack, in which the fx to check is located"},{"identifier":"integer fx","description":"the id of the fx in the fx-chain"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetOpen","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"}]},"eel":{"method_name":"TrackFX_GetOpen","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, TrackFX is open; false, TrackFX is closed"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TrackFX_GetOpen(MediaTrack track, integer fx)","eel":"bool TrackFX_GetOpen(MediaTrack track, int fx)","python":"Boolean retval = RPR_TrackFX_GetOpen(MediaTrack track, Int fx)","cpp":"bool TrackFX_GetOpen(MediaTrack* track, int fx)"},"title":"TrackFX_GetOpen","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Returns true if this FX UI is open in the FX chain window or a floating window. See [TrackFX\\_SetOpen](#TrackFX_SetOpen)\n\nBy setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer param","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetParam","return_values":[{"identifier":"retval","type":"number"},{"identifier":"minval","type":"number"},{"identifier":"maxval","type":"number"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"param","type":"integer"}]},"eel":{"method_name":"TrackFX_GetParam","return_values":["double"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"param"},{"identifier":"&minval"},{"identifier":"&maxval"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"number retval","description":""},{"identifier":"number minval","description":""},{"identifier":"number maxval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval, number minval, number maxval = reaper.TrackFX_GetParam(MediaTrack track, integer fx, integer param)","eel":"double TrackFX_GetParam(MediaTrack track, int fx, int param, &minval, &maxval)","python":"(Float retval, MediaTrack track, Int fx, Int param, Float minvalOut, Float maxvalOut) = RPR_TrackFX_GetParam(track, fx, param, minvalOut, maxvalOut)","cpp":"double TrackFX_GetParam(MediaTrack* track, int fx, int param, double* minvalOut, double* maxvalOut)"},"title":"TrackFX_GetParam","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"By setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer param","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetParameterStepSizes","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"step","type":"number"},{"identifier":"smallstep","type":"number"},{"identifier":"largestep","type":"number"},{"identifier":"istoggle","type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"param","type":"integer"}]},"eel":{"method_name":"TrackFX_GetParameterStepSizes","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"param"},{"identifier":"&step"},{"identifier":"&smallstep"},{"identifier":"&largestep"},{"type_name":"bool","identifier":"&istoggle"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number step","description":""},{"identifier":"number smallstep","description":""},{"identifier":"number largestep","description":""},{"identifier":"boolean istoggle","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number step, number smallstep, number largestep, boolean istoggle = reaper.TrackFX_GetParameterStepSizes(MediaTrack track, integer fx, integer param)","eel":"bool TrackFX_GetParameterStepSizes(MediaTrack track, int fx, int param, &step, &smallstep, &largestep, bool &istoggle)","python":"(Boolean retval, MediaTrack track, Int fx, Int param, Float stepOut, Float smallstepOut, Float largestepOut, Boolean istoggleOut) = RPR_TrackFX_GetParameterStepSizes(track, fx, param, stepOut, smallstepOut, largestepOut, istoggleOut)","cpp":"bool TrackFX_GetParameterStepSizes(MediaTrack* track, int fx, int param, double* stepOut, double* smallstepOut, double* largestepOut, bool* istoggleOut)"},"title":"TrackFX_GetParameterStepSizes","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"By setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer param","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetParamEx","return_values":[{"identifier":"retval","type":"number"},{"identifier":"minval","type":"number"},{"identifier":"maxval","type":"number"},{"identifier":"midval","type":"number"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"param","type":"integer"}]},"eel":{"method_name":"TrackFX_GetParamEx","return_values":["double"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"param"},{"identifier":"&minval"},{"identifier":"&maxval"},{"identifier":"&midval"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"number retval","description":""},{"identifier":"number minval","description":""},{"identifier":"number maxval","description":""},{"identifier":"number midval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval, number minval, number maxval, number midval = reaper.TrackFX_GetParamEx(MediaTrack track, integer fx, integer param)","eel":"double TrackFX_GetParamEx(MediaTrack track, int fx, int param, &minval, &maxval, &midval)","python":"(Float retval, MediaTrack track, Int fx, Int param, Float minvalOut, Float maxvalOut, Float midvalOut) = RPR_TrackFX_GetParamEx(track, fx, param, minvalOut, maxvalOut, midvalOut)","cpp":"double TrackFX_GetParamEx(MediaTrack* track, int fx, int param, double* minvalOut, double* maxvalOut, double* midvalOut)"},"title":"TrackFX_GetParamEx","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"By setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer fx","description":""},{"identifier":"string ident_str","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetParamFromIdent","return_values":[{"identifier":"param","type":"integer"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"ident_str","type":"string"}]},"eel":{"method_name":"TrackFX_GetParamFromIdent","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"identifier":"\"ident_str\""}]}},"requires":{"Reaper":"6.38"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer param","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer param = reaper.TrackFX_GetParamFromIdent(MediaTrack track, integer fx, string ident_str)","eel":"int TrackFX_GetParamFromIdent(MediaTrack track, int fx, \"ident_str\")","python":"Int retval = RPR_TrackFX_GetParamFromIdent(MediaTrack track, Int fx, String ident_str)","cpp":"int TrackFX_GetParamFromIdent(MediaTrack* track, int fx, const char* ident_str)"},"title":"TrackFX_GetParamFromIdent","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"gets the parameter index from an identifying string (:wet, :bypass, :delta, or a string returned from GetParamIdent), or -1 if unknown.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer param","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetParamIdent","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"param","type":"integer"}]},"eel":{"method_name":"TrackFX_GetParamIdent","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"param"},{"identifier":"#buf"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string buf = reaper.TrackFX_GetParamIdent(MediaTrack track, integer fx, integer param)","eel":"bool TrackFX_GetParamIdent(MediaTrack track, int fx, int param, #buf)","python":"(Boolean retval, MediaTrack track, Int fx, Int param, String bufOut, Int bufOut_sz) = RPR_TrackFX_GetParamIdent(track, fx, param, bufOut, bufOut_sz)","cpp":"bool TrackFX_GetParamIdent(MediaTrack* track, int fx, int param, char* bufOut, int bufOut_sz)"},"title":"TrackFX_GetParamIdent","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"gets an identifying string for the parameter","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer param","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetParamName","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"param","type":"integer"}]},"eel":{"method_name":"TrackFX_GetParamName","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"param"},{"identifier":"#buf"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string buf = reaper.TrackFX_GetParamName(MediaTrack track, integer fx, integer param)","eel":"bool TrackFX_GetParamName(MediaTrack track, int fx, int param, #buf)","python":"(Boolean retval, MediaTrack track, Int fx, Int param, String bufOut, Int bufOut_sz) = RPR_TrackFX_GetParamName(track, fx, param, bufOut, bufOut_sz)","cpp":"bool TrackFX_GetParamName(MediaTrack* track, int fx, int param, char* bufOut, int bufOut_sz)"},"title":"TrackFX_GetParamName","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"By setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer param","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetParamNormalized","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"param","type":"integer"}]},"eel":{"method_name":"TrackFX_GetParamNormalized","return_values":["double"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"param"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.TrackFX_GetParamNormalized(MediaTrack track, integer fx, integer param)","eel":"double TrackFX_GetParamNormalized(MediaTrack track, int fx, int param)","python":"Float retval = RPR_TrackFX_GetParamNormalized(MediaTrack track, Int fx, Int param)","cpp":"double TrackFX_GetParamNormalized(MediaTrack* track, int fx, int param)"},"title":"TrackFX_GetParamNormalized","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"By setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaTrack tr","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer is","description":""},{"identifier":"integer pin","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetPinMappings","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"high32","type":"integer"}],"parameters":[{"identifier":"tr","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"isoutput","type":"integer"},{"identifier":"pin","type":"integer"}]},"eel":{"method_name":"TrackFX_GetPinMappings","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"tr"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"isoutput"},{"type_name":"int","identifier":"pin"},{"type_name":"int","identifier":"&high32"}]}},"requires":{"Reaper":"6.43"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":""},{"identifier":"integer high32","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, integer high32 = reaper.TrackFX_GetPinMappings(MediaTrack tr, integer fx, integer isoutput, integer pin)","eel":"int TrackFX_GetPinMappings(MediaTrack tr, int fx, int isoutput, int pin, int &high32)","python":"(Int retval, MediaTrack tr, Int fx, Int isoutput, Int pin, Int high32Out) = RPR_TrackFX_GetPinMappings(tr, fx, isoutput, pin, high32Out)","cpp":"int TrackFX_GetPinMappings(MediaTrack* tr, int fx, int isoutput, int pin, int* high32Out)"},"title":"TrackFX_GetPinMappings","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"gets the effective channel mapping bitmask for a particular pin. high32Out will be set to the high 32 bits\n\nBy setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":"the track, from whose fx you want to get the preset-name"},{"identifier":"integer fx","description":"the index of the fx, whose presetname you want to have; 0-based"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetPreset","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"presetname","type":"string"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"}]},"eel":{"method_name":"TrackFX_GetPreset","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"identifier":"#presetname"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, the fx-parameters match preset; false, the fx-parameters do not match preset(see description)"},{"identifier":"string presetname","description":"the name of the preset"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string presetname = reaper.TrackFX_GetPreset(MediaTrack track, integer fx)","eel":"bool TrackFX_GetPreset(MediaTrack track, int fx, #presetname)","python":"(Boolean retval, MediaTrack track, Int fx, String presetnameOut, Int presetnameOut_sz) = RPR_TrackFX_GetPreset(track, fx, presetnameOut, presetnameOut_sz)","cpp":"bool TrackFX_GetPreset(MediaTrack* track, int fx, char* presetnameOut, int presetnameOut_sz)"},"title":"TrackFX_GetPreset","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). \n\nReturns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). \n\nsee TrackFX_SetPreset\n\nBy setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer fx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetPresetIndex","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"numberOfPresets","type":"integer"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"}]},"eel":{"method_name":"TrackFX_GetPresetIndex","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"&numberOfPresets"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":""},{"identifier":"integer numberOfPresets","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, integer numberOfPresets = reaper.TrackFX_GetPresetIndex(MediaTrack track, integer fx)","eel":"int TrackFX_GetPresetIndex(MediaTrack track, int fx, int &numberOfPresets)","python":"(Int retval, MediaTrack track, Int fx, Int numberOfPresetsOut) = RPR_TrackFX_GetPresetIndex(track, fx, numberOfPresetsOut)","cpp":"int TrackFX_GetPresetIndex(MediaTrack* track, int fx, int* numberOfPresetsOut)"},"title":"TrackFX_GetPresetIndex","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See [TrackFX\\_SetPresetByIndex](#TrackFX_SetPresetByIndex)\n\nBy setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack track","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetRecChainVisible","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"track","type":"MediaTrack"}]},"eel":{"method_name":"TrackFX_GetRecChainVisible","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"track"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.TrackFX_GetRecChainVisible(MediaTrack track)","eel":"int TrackFX_GetRecChainVisible(MediaTrack track)","python":"Int retval = RPR_TrackFX_GetRecChainVisible(MediaTrack track)","cpp":"int TrackFX_GetRecChainVisible(MediaTrack* track)"},"title":"TrackFX_GetRecChainVisible","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns index of effect visible in record input chain, or -1 for chain hidden, or -2 for chain visible but no effect selected\n\nTo get the monitoring FX rather than record input FX, use Master-Track.\n\nNote:\nTo access record input FX in other TrackFX-functions, use FX indices [0x1000000..0x1000000+n) for the individual fxs in the FXChain and pass over the track, whose rec-input-fxchain you want to access.\nAlso pass over the track, whose rec-input-fx you want to access. Pass over MasterTrack to get the monitoring FX-chain.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack track","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetRecCount","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"track","type":"MediaTrack"}]},"eel":{"method_name":"TrackFX_GetRecCount","return_values":["int"],"parameters":[{"type_name":"MediaTrack","identifier":"track"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.TrackFX_GetRecCount(MediaTrack track)","eel":"int TrackFX_GetRecCount(MediaTrack track)","python":"Int retval = RPR_TrackFX_GetRecCount(MediaTrack track)","cpp":"int TrackFX_GetRecCount(MediaTrack* track)"},"title":"TrackFX_GetRecCount","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns count of record input FX of a track. \n\nTo get the monitoring FX rather than record input FX, use Master-Track.\n\nNote:\nTo access record input FX in other TrackFX-functions, use FX indices [0x1000000..0x1000000+n) for the individual fxs in the FXChain and pass over the track, whose rec-input-fxchain you want to access.\nAlso pass over the track, whose rec-input-fx you want to access. Pass over MasterTrack to get the monitoring FX-chain.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer fx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetUserPresetFilename","return_values":[{"identifier":"fn","type":"string"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"}]},"eel":{"return_values":["TrackFX_GetUserPresetFilename"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"identifier":"#fn"}]}},"requires":{"Reaper":"6.37"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string fn","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string fn = reaper.TrackFX_GetUserPresetFilename(MediaTrack track, integer fx)","eel":"TrackFX_GetUserPresetFilename(MediaTrack track, int fx, #fn)","python":"(MediaTrack track, Int fx, String fnOut, Int fnOut_sz) = RPR_TrackFX_GetUserPresetFilename(track, fx, fnOut, fnOut_sz)","cpp":"void TrackFX_GetUserPresetFilename(MediaTrack* track, int fx, char* fnOut, int fnOut_sz)"},"title":"TrackFX_GetUserPresetFilename","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"By setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer presetmove","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_NavigatePresets","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"presetmove","type":"integer"}]},"eel":{"method_name":"TrackFX_NavigatePresets","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"presetmove"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TrackFX_NavigatePresets(MediaTrack track, integer fx, integer presetmove)","eel":"bool TrackFX_NavigatePresets(MediaTrack track, int fx, int presetmove)","python":"Boolean retval = RPR_TrackFX_NavigatePresets(MediaTrack track, Int fx, Int presetmove)","cpp":"bool TrackFX_NavigatePresets(MediaTrack* track, int fx, int presetmove)"},"title":"TrackFX_NavigatePresets","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.\n\nBy setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer fx","description":""},{"identifier":"boolean enabled","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_SetEnabled","return_values":[],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"enabled","type":"boolean"}]},"eel":{"return_values":["TrackFX_SetEnabled"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"type_name":"bool","identifier":"enabled"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.TrackFX_SetEnabled(MediaTrack track, integer fx, boolean enabled)","eel":"TrackFX_SetEnabled(MediaTrack track, int fx, bool enabled)","python":"RPR_TrackFX_SetEnabled(MediaTrack track, Int fx, Boolean enabled)","cpp":"void TrackFX_SetEnabled(MediaTrack* track, int fx, bool enabled)"},"title":"TrackFX_SetEnabled","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Set a TrackFX enabled/disabled.\n\nBy setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.\n\nSee [TrackFX\\_GetEnabled](#TrackFX_GetEnabled)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"MediaTrack track","description":"the track, on which the eq is located"},{"identifier":"integer fx","description":"the index of the eq to set bands enabled"},{"identifier":"integer bandtype","description":"-1, master gain;\n0, hipass\n1, loshelf\n2, band\n3, notch, \n4, hishelf\n5, lopass\n6, bandpass\n7, parallel bandpass"},{"identifier":"integer bandidx","description":"(ignored for master gain): 0=first band matching bandtype, 1=2nd band matching bandtype, etc."},{"identifier":"boolean enable","description":"true, enable the band; false, disble the band"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_SetEQBandEnabled","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fxidx","type":"integer"},{"identifier":"bandtype","type":"integer"},{"identifier":"bandidx","type":"integer"},{"identifier":"enable","type":"boolean"}]},"eel":{"method_name":"TrackFX_SetEQBandEnabled","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fxidx"},{"type_name":"int","identifier":"bandtype"},{"type_name":"int","identifier":"bandidx"},{"type_name":"bool","identifier":"enable"}]}},"requires":{"Reaper":"6.44"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.TrackFX_SetEQBandEnabled(MediaTrack track, integer fxidx, integer bandtype, integer bandidx, boolean enable)","eel":"bool TrackFX_SetEQBandEnabled(MediaTrack track, int fxidx, int bandtype, int bandidx, bool enable)","python":"Boolean retval = RPR_TrackFX_SetEQBandEnabled(MediaTrack track, Int fxidx, Int bandtype, Int bandidx, Boolean enable)","cpp":"bool TrackFX_SetEQBandEnabled(MediaTrack* track, int fxidx, int bandtype, int bandidx, bool enable)"},"title":"TrackFX_SetEQBandEnabled","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Enable or disable a ReaEQ band.\nReturns false if track/fxidx is not ReaEQ.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass\nBandidx: (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\nSee [TrackFX\\_GetEQ](#TrackFX_GetEQ), [TrackFX\\_GetEQParam](#TrackFX_GetEQParam), [TrackFX\\_SetEQParam](#TrackFX_SetEQParam), [TrackFX\\_GetEQBandEnabled](#TrackFX_GetEQBandEnabled).\n\nBy setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"MediaTrack track","description":"the track, on which the eq is located"},{"identifier":"integer fx","description":"the index of the eq to set bands enabled"},{"identifier":"integer bandtype","description":"-1, master gain;\n0, hipass\n1, loshelf\n2, band\n3, notch, \n4, hishelf\n5, lopass\n6, bandpass\n7, parallel bandpass"},{"identifier":"integer bandidx","description":"(ignored for master gain): 0=first band matching bandtype, 1=2nd band matching bandtype, etc."},{"identifier":"integer paramtype","description":"0, freq\n1, gain\n2, Q"},{"identifier":"number val","description":"the value to set the paremeter with"},{"identifier":"boolean isnorm","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_SetEQParam","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"bandtype","type":"integer"},{"identifier":"bandidx","type":"integer"},{"identifier":"paramtype","type":"integer"},{"identifier":"val","type":"number"},{"identifier":"isnorm","type":"boolean"}]},"eel":{"method_name":"TrackFX_SetEQParam","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"bandtype"},{"type_name":"int","identifier":"bandidx"},{"type_name":"int","identifier":"paramtype"},{"identifier":"val"},{"type_name":"bool","identifier":"isnorm"}]}},"requires":{"Reaper":"6.44"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, setting was successful; false, setting was unsuccesful"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TrackFX_SetEQParam(MediaTrack track, integer fx, integer bandtype, integer bandidx, integer paramtype, number val, boolean isnorm)","eel":"bool TrackFX_SetEQParam(MediaTrack track, int fx, int bandtype, int bandidx, int paramtype, val, bool isnorm)","python":"Boolean retval = RPR_TrackFX_SetEQParam(MediaTrack track, Int fx, Int bandtype, Int bandidx, Int paramtype, Float val, Boolean isnorm)","cpp":"bool TrackFX_SetEQParam(MediaTrack* track, int fx, int bandtype, int bandidx, int paramtype, double val, bool isnorm)"},"title":"TrackFX_SetEQParam","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Returns false if track/fxidx is not ReaEQ. Targets a band matching bandtype.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\nSee [TrackFX\\_GetEQ](#TrackFX_GetEQ), [TrackFX\\_GetEQParam](#TrackFX_GetEQParam), [TrackFX\\_GetEQBandEnabled](#TrackFX_GetEQBandEnabled), [TrackFX\\_SetEQBandEnabled](#TrackFX_SetEQBandEnabled).\n\nBy setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer fx","description":""},{"identifier":"string parmname","description":""},{"identifier":"string value","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_SetNamedConfigParm","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"parmname","type":"string"},{"identifier":"value","type":"string"}]},"eel":{"method_name":"retval","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"identifier":"\"parmname\""},{"identifier":"\"value\""}]}},"requires":{"Reaper":"6.79"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TrackFX_SetNamedConfigParm(MediaTrack track, integer fx, string parmname, string value)","eel":"bool retval = TrackFX_SetNamedConfigParm(MediaTrack track, int fx, \"parmname\", \"value\")","python":"Boolean retval = RPR_TrackFX_SetNamedConfigParm(MediaTrack track, Int fx, String parmname, String value)","cpp":"bool retval = TrackFX_SetNamedConfigParm(MediaTrack* track, int fx, const char* parmname, const char* value)"},"title":"TrackFX_SetNamedConfigParm","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"sets plug-in specific named configuration value (returns true on success)\n\nBy setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.\n\nSupport values for write:\n\nvst_chunk[_program] : base64-encoded VST-specific chunk.\nclap_chunk : base64-encoded CLAP-specific chunk.\nparam.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter moduation LFO state\nparam.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo] : parameter modulation ACS state\nparam.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2] : parameter link/MIDI link: set effect=-100 to support midi_*\nparam.X.mod.[active,baseline,visible] : parameter module global settings\nparam.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string if set\nparam.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1, 2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)\nparam.X.learn.flags : &1=selected track only, &2=soft takeover, &4=focused FX only, &8=LFO retrigger, &16=visible FX only\n\nBANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]\nTHRESHOLD, CEILING, TRUEPEAK : [ReaLlmit]\nNUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]\nITEMx : [ReaVerb] state configuration line, when writing should be followed by a write of DONE\nFILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are write-only, when writing any, should be followed by a write of DONE\nMODE, RSMODE : [RS5k] general mode, resample mode\nVIDEO_CODE : [video processor] code\n\nforce_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence\ninstance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC, 3=hwcomp-master)\n\nrenamed_name : renamed FX instance name (empty string = not renamed)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer fx","description":""},{"identifier":"boolean offline","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_SetOffline","return_values":[],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"offline","type":"boolean"}]},"eel":{"return_values":["TrackFX_SetOffline"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"type_name":"bool","identifier":"offline"}]}},"requires":{"Reaper":"5.95"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.TrackFX_SetOffline(MediaTrack track, integer fx, boolean offline)","eel":"TrackFX_SetOffline(MediaTrack track, int fx, bool offline)","python":"RPR_TrackFX_SetOffline(MediaTrack track, Int fx, Boolean offline)","cpp":"void TrackFX_SetOffline(MediaTrack* track, int fx, bool offline)"},"title":"TrackFX_SetOffline","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"See [TrackFX\\_GetOffline](#TrackFX_GetOffline)\n\nBy setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""},{"identifier":"boolean offline","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_SetOffline","return_values":[],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"},{"identifier":"offline","type":"boolean"}]},"eel":{"return_values":["TakeFX_SetOffline"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"},{"type_name":"bool","identifier":"offline"}]}},"requires":{"Reaper":"5.95"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.TakeFX_SetOffline(MediaItem_Take take, integer fx, boolean offline)","eel":"TakeFX_SetOffline(MediaItem_Take take, int fx, bool offline)","python":"RPR_TakeFX_SetOffline(MediaItem_Take take, Int fx, Boolean offline)","cpp":"void TakeFX_SetOffline(MediaItem_Take* take, int fx, bool offline)"},"title":"TakeFX_SetOffline","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"See [TakeFX\\_GetOffline](#TakeFX_GetOffline)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_GetOffline","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"}]},"eel":{"method_name":"TakeFX_GetOffline","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"}]}},"requires":{"Reaper":"5.95"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TakeFX_GetOffline(MediaItem_Take take, integer fx)","eel":"bool TakeFX_GetOffline(MediaItem_Take take, int fx)","python":"Boolean retval = RPR_TakeFX_GetOffline(MediaItem_Take take, Int fx)","cpp":"bool TakeFX_GetOffline(MediaItem_Take* take, int fx)"},"title":"TakeFX_GetOffline","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"See [TakeFX\\_SetOffline](#TakeFX_SetOffline)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"integer fx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_Delete","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"fx","type":"integer"}]},"eel":{"method_name":"TakeFX_Delete","return_values":["bool"],"parameters":[{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"int","identifier":"fx"}]}},"requires":{"Reaper":"5.95"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TakeFX_Delete(MediaItem_Take take, integer fx)","eel":"bool TakeFX_Delete(MediaItem_Take take, int fx)","python":"Boolean retval = RPR_TakeFX_Delete(MediaItem_Take take, Int fx)","cpp":"bool TakeFX_Delete(MediaItem_Take* take, int fx)"},"title":"TakeFX_Delete","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Remove a FX from take chain (returns true on success)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"MediaItem_Take src_take","description":"the source-take, from which you want to copy an fx"},{"identifier":"integer src_fx","description":"the index of the source-fx"},{"identifier":"MediaItem_Take dest_take","description":"the destination-take, to which you want to copy an fx "},{"identifier":"integer dest_fx","description":"the index of the target-fx"},{"identifier":"boolean is_move","description":"true, move fx from source to destination-take; false, just copy fx from source to destination-take"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_CopyToTake","return_values":[],"parameters":[{"identifier":"src_take","type":"MediaItem_Take"},{"identifier":"src_fx","type":"integer"},{"identifier":"dest_take","type":"MediaItem_Take"},{"identifier":"dest_fx","type":"integer"},{"identifier":"is_move","type":"boolean"}]},"eel":{"return_values":["TakeFX_CopyToTake"],"parameters":[{"type_name":"MediaItem_Take","identifier":"src_take"},{"type_name":"int","identifier":"src_fx"},{"type_name":"MediaItem_Take","identifier":"dest_take"},{"type_name":"int","identifier":"dest_fx"},{"type_name":"bool","identifier":"is_move"}]}},"requires":{"Reaper":"5.95"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.TakeFX_CopyToTake(MediaItem_Take src_take, integer src_fx, MediaItem_Take dest_take, integer dest_fx, boolean is_move)","eel":"TakeFX_CopyToTake(MediaItem_Take src_take, int src_fx, MediaItem_Take dest_take, int dest_fx, bool is_move)","python":"RPR_TakeFX_CopyToTake(MediaItem_Take src_take, Int src_fx, MediaItem_Take dest_take, Int dest_fx, Boolean is_move)","cpp":"void TakeFX_CopyToTake(MediaItem_Take* src_take, int src_fx, MediaItem_Take* dest_take, int dest_fx, bool is_move)"},"title":"TakeFX_CopyToTake","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Copies (or moves) FX from src_take to dest_take. Can be used with src_take=dest_take to reorder. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"MediaItem_Take src_take","description":""},{"identifier":"integer src_fx","description":""},{"identifier":"MediaTrack dest_track","description":""},{"identifier":"integer dest_fx","description":""},{"identifier":"boolean is_move","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TakeFX_CopyToTrack","return_values":[],"parameters":[{"identifier":"src_take","type":"MediaItem_Take"},{"identifier":"src_fx","type":"integer"},{"identifier":"dest_track","type":"MediaTrack"},{"identifier":"dest_fx","type":"integer"},{"identifier":"is_move","type":"boolean"}]},"eel":{"return_values":["TakeFX_CopyToTrack"],"parameters":[{"type_name":"MediaItem_Take","identifier":"src_take"},{"type_name":"int","identifier":"src_fx"},{"type_name":"MediaTrack","identifier":"dest_track"},{"type_name":"int","identifier":"dest_fx"},{"type_name":"bool","identifier":"is_move"}]}},"requires":{"Reaper":"5.95"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.TakeFX_CopyToTrack(MediaItem_Take src_take, integer src_fx, MediaTrack dest_track, integer dest_fx, boolean is_move)","eel":"TakeFX_CopyToTrack(MediaItem_Take src_take, int src_fx, MediaTrack dest_track, int dest_fx, bool is_move)","python":"RPR_TakeFX_CopyToTrack(MediaItem_Take src_take, Int src_fx, MediaTrack dest_track, Int dest_fx, Boolean is_move)","cpp":"void TakeFX_CopyToTrack(MediaItem_Take* src_take, int src_fx, MediaTrack* dest_track, int dest_fx, bool is_move)"},"title":"TakeFX_CopyToTrack","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Copies (or moves) FX from src_take to dest_track. \n\nNote:\nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.\nAdd 0x1000000 to the fx-indices to address monitoringFX/rec-inputFX.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer fx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_GetOffline","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"}]},"eel":{"method_name":"TrackFX_GetOffline","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"}]}},"requires":{"Reaper":"5.95"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TrackFX_GetOffline(MediaTrack track, integer fx)","eel":"bool TrackFX_GetOffline(MediaTrack track, int fx)","python":"Boolean retval = RPR_TrackFX_GetOffline(MediaTrack track, Int fx)","cpp":"bool TrackFX_GetOffline(MediaTrack* track, int fx)"},"title":"TrackFX_GetOffline","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"See [TrackFX\\_SetOffline](#TrackFX_SetOffline)\n\nBy setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer fx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_Delete","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"}]},"eel":{"method_name":"TrackFX_Delete","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"}]}},"requires":{"Reaper":"5.95"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TrackFX_Delete(MediaTrack track, integer fx)","eel":"bool TrackFX_Delete(MediaTrack track, int fx)","python":"Boolean retval = RPR_TrackFX_Delete(MediaTrack track, Int fx)","cpp":"bool TrackFX_Delete(MediaTrack* track, int fx)"},"title":"TrackFX_Delete","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Remove a FX from track chain (returns true on success).\n\nBy setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","set","open","ui","fx"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":"the track, in which the FX to be opened is located"},{"identifier":"integer fx","description":"the fx-id within the fxchain"},{"identifier":"boolean open","description":"true, open FX-UI; false, close FX-UI"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_SetOpen","return_values":[],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"open","type":"boolean"}]},"eel":{"return_values":["TrackFX_SetOpen"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"type_name":"bool","identifier":"open"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.TrackFX_SetOpen(MediaTrack track, integer fx, boolean open)","eel":"TrackFX_SetOpen(MediaTrack track, int fx, bool open)","python":"RPR_TrackFX_SetOpen(MediaTrack track, Int fx, Boolean open)","cpp":"void TrackFX_SetOpen(MediaTrack* track, int fx, bool open)"},"title":"TrackFX_SetOpen","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Open this FX UI. See [TrackFX\\_GetOpen](#TrackFX_GetOpen)\n\nBy setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer param","description":""},{"identifier":"number val","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_SetParam","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"param","type":"integer"},{"identifier":"val","type":"number"}]},"eel":{"method_name":"TrackFX_SetParam","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"param"},{"identifier":"val"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TrackFX_SetParam(MediaTrack track, integer fx, integer param, number val)","eel":"bool TrackFX_SetParam(MediaTrack track, int fx, int param, val)","python":"Boolean retval = RPR_TrackFX_SetParam(MediaTrack track, Int fx, Int param, Float val)","cpp":"bool TrackFX_SetParam(MediaTrack* track, int fx, int param, double val)"},"title":"TrackFX_SetParam","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"By setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer param","description":""},{"identifier":"number value","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_SetParamNormalized","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"param","type":"integer"},{"identifier":"value","type":"number"}]},"eel":{"method_name":"TrackFX_SetParamNormalized","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"param"},{"identifier":"value"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TrackFX_SetParamNormalized(MediaTrack track, integer fx, integer param, number value)","eel":"bool TrackFX_SetParamNormalized(MediaTrack track, int fx, int param, value)","python":"Boolean retval = RPR_TrackFX_SetParamNormalized(MediaTrack track, Int fx, Int param, Float value)","cpp":"bool TrackFX_SetParamNormalized(MediaTrack* track, int fx, int param, double value)"},"title":"TrackFX_SetParamNormalized","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"By setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"MediaTrack tr","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer is","description":""},{"identifier":"integer pin","description":""},{"identifier":"integer low32bits","description":""},{"identifier":"integer hi32bits","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_SetPinMappings","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"tr","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"is","type":"integer"},{"identifier":"pin","type":"integer"},{"identifier":"low32bits","type":"integer"},{"identifier":"hi32bits","type":"integer"}]},"eel":{"method_name":"TrackFX_SetPinMappings","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"tr"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"is"},{"type_name":"int","identifier":"pin"},{"type_name":"int","identifier":"low32bits"},{"type_name":"int","identifier":"hi32bits"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TrackFX_SetPinMappings(MediaTrack tr, integer fx, integer is, integer pin, integer low32bits, integer hi32bits)","eel":"bool TrackFX_SetPinMappings(MediaTrack tr, int fx, int is, int pin, int low32bits, int hi32bits)","python":"Boolean retval = RPR_TrackFX_SetPinMappings(MediaTrack tr, Int fx, Int isOutput, Int pin, Int low32bits, Int hi32bits)","cpp":"bool TrackFX_SetPinMappings(MediaTrack* tr, int fx, int isOutput, int pin, int low32bits, int hi32bits)"},"title":"TrackFX_SetPinMappings","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)\n\nBy setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer fx","description":""},{"identifier":"string presetname","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_SetPreset","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"presetname","type":"string"}]},"eel":{"method_name":"TrackFX_SetPreset","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"identifier":"\"presetname\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TrackFX_SetPreset(MediaTrack track, integer fx, string presetname)","eel":"bool TrackFX_SetPreset(MediaTrack track, int fx, \"presetname\")","python":"Boolean retval = RPR_TrackFX_SetPreset(MediaTrack track, Int fx, String presetname)","cpp":"bool TrackFX_SetPreset(MediaTrack* track, int fx, const char* presetname)"},"title":"TrackFX_SetPreset","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See [TrackFX\\_GetPreset](#TrackFX_GetPreset).\n\nBy setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.\n\npresetname is case-sensitive.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer idx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_SetPresetByIndex","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"idx","type":"integer"}]},"eel":{"method_name":"TrackFX_SetPresetByIndex","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"idx"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.TrackFX_SetPresetByIndex(MediaTrack track, integer fx, integer idx)","eel":"bool TrackFX_SetPresetByIndex(MediaTrack track, int fx, int idx)","python":"Boolean retval = RPR_TrackFX_SetPresetByIndex(MediaTrack track, Int fx, Int idx)","cpp":"bool TrackFX_SetPresetByIndex(MediaTrack* track, int fx, int idx)"},"title":"TrackFX_SetPresetByIndex","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See [TrackFX\\_GetPresetIndex](#TrackFX_GetPresetIndex).\n\nBy setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["trackmanagement","show","fx","window"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":"the MediaTrack, whose TrackFX you want to show"},{"identifier":"integer fx","description":"the id of the track within the fxchain"},{"identifier":"integer showFlag","description":"how to show the FX-window\n0, for hidechain\n1, for show chain(index valid)\n2, for hide floating window(index valid)\n3, for show floating window(index valid)"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackFX_Show","return_values":[],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"},{"identifier":"showFlag","type":"integer"}]},"eel":{"return_values":["TrackFX_Show"],"parameters":[{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"type_name":"int","identifier":"showFlag"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.TrackFX_Show(MediaTrack track, integer fx, integer showFlag)","eel":"TrackFX_Show(MediaTrack track, int fx, int showFlag)","python":"RPR_TrackFX_Show(MediaTrack track, Int fx, Int showFlag)","cpp":"void TrackFX_Show(MediaTrack* track, int fx, int showFlag)"},"title":"TrackFX_Show","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Shows a track-FX-window.\n\nBy setting fx you can add 0x1000000 set to reference input FX. \nTo use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean isMinor","description":"false, updates only TCP; true, updates TCP and MCP"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.TrackList_AdjustWindows","return_values":[],"parameters":[{"identifier":"isMinor","type":"boolean"}]},"eel":{"return_values":["TrackList_AdjustWindows"],"parameters":[{"type_name":"bool","identifier":"isMinor"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.TrackList_AdjustWindows(boolean isMinor)","eel":"TrackList_AdjustWindows(bool isMinor)","python":"RPR_TrackList_AdjustWindows(Boolean isMinor)","cpp":"void TrackList_AdjustWindows(bool isMinor)"},"title":"TrackList_AdjustWindows","chapters":["User Interface","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Updates the TCP and optionally the MCP. Helpful, when setting a new trackheight using I\\_HEIGHTOVERRIDE in [SetMediaTrackInfo\\_Value](#SetMediaTrackInfo_Value).\n\nThis also updates the Region Render Matrix.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.TrackList_UpdateAllExternalSurfaces","return_values":[],"parameters":[]},"eel":{"return_values":["TrackList_UpdateAllExternalSurfaces"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.TrackList_UpdateAllExternalSurfaces()","eel":"TrackList_UpdateAllExternalSurfaces()","python":"RPR_TrackList_UpdateAllExternalSurfaces()","cpp":"void TrackList_UpdateAllExternalSurfaces()"},"title":"TrackList_UpdateAllExternalSurfaces","chapters":["Input/Output Devices","Surfaces"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.Undo_BeginBlock","return_values":[],"parameters":[]},"eel":{"return_values":["Undo_BeginBlock"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Undo_BeginBlock()","eel":"Undo_BeginBlock()","python":"RPR_Undo_BeginBlock()","cpp":"void Undo_BeginBlock()"},"title":"Undo_BeginBlock","chapters":["Project Management","Undo"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"call to start a new block","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["projectmanagement","start","undo","block"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Undo_BeginBlock2","return_values":[],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"return_values":["Undo_BeginBlock2"],"parameters":[{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Undo_BeginBlock2(ReaProject proj)","eel":"Undo_BeginBlock2(ReaProject proj)","python":"RPR_Undo_BeginBlock2(ReaProject proj)","cpp":"void Undo_BeginBlock2(ReaProject* proj)"},"title":"Undo_BeginBlock2","chapters":["Project Management","Undo"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"call to start a new undo block. Code after that and before Undo_EndBlock can be undone.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Undo_CanRedo2","return_values":[{"identifier":"undo_string","type":"string"}],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"method_name":"Undo_CanRedo2","return_values":["bool"],"parameters":[{"identifier":"#retval"},{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string undo_string","description":"next redo-able action"}],"prog_lang":"*"},"functioncall":{"lua":"string undo_string = reaper.Undo_CanRedo2(ReaProject proj)","eel":"bool Undo_CanRedo2(#retval, ReaProject proj)","python":"String retval = RPR_Undo_CanRedo2(ReaProject proj)","cpp":"const char* Undo_CanRedo2(ReaProject* proj)"},"title":"Undo_CanRedo2","chapters":["Project Management","Undo"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns string of next action,if able,NULL if not\n\nbasically, if you undid an action, this will return the description of the action you undid.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Undo_CanUndo2","return_values":[{"identifier":"undo_text","type":"string"}],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"method_name":"Undo_CanUndo2","return_values":["bool"],"parameters":[{"identifier":"#retval"},{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string undo_text","description":"the next undoable action"}],"prog_lang":"*"},"functioncall":{"lua":"string undo_text = reaper.Undo_CanUndo2(ReaProject proj)","eel":"bool Undo_CanUndo2(#retval, ReaProject proj)","python":"String retval = RPR_Undo_CanUndo2(ReaProject proj)","cpp":"const char* Undo_CanUndo2(ReaProject* proj)"},"title":"Undo_CanUndo2","chapters":["Project Management","Undo"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"returns string of last action,if able,NULL if not\n\nbasically returns the description of the next undoable action","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Undo_DoRedo2","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"method_name":"Undo_DoRedo2","return_values":["int"],"parameters":[{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"0, not successful; everything else, successful"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.Undo_DoRedo2(ReaProject proj)","eel":"int Undo_DoRedo2(ReaProject proj)","python":"Int retval = RPR_Undo_DoRedo2(ReaProject proj)","cpp":"int Undo_DoRedo2(ReaProject* proj)"},"title":"Undo_DoRedo2","chapters":["Project Management","Undo"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"redo an undone action\n\nnonzero if success","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Undo_DoUndo2","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"method_name":"Undo_DoUndo2","return_values":["int"],"parameters":[{"type_name":"ReaProject","identifier":"proj"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"0, not successful; everything else, successful"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.Undo_DoUndo2(ReaProject proj)","eel":"int Undo_DoUndo2(ReaProject proj)","python":"Int retval = RPR_Undo_DoUndo2(ReaProject proj)","cpp":"int Undo_DoUndo2(ReaProject* proj)"},"title":"Undo_DoUndo2","chapters":["Project Management","Undo"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"undo an undoable action\n\nnonzero if success","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string descchange","description":"a string that describes the changes of the undo-block"},{"identifier":"integer extraflags","description":"set to -1, include all undo states\n1, track/master vol/pan/routing, routing/hwout envelopes too\n2, track/master fx\n4, track items\n8, loop selection, markers, regions, extensions\n16, freeze state\n32, non-FX envelopes only\n64, FX envelopes, implied by UNDO_STATE_FX too\n128, contents of automation items -- not position, length, rate etc of automation items, which is part of envelope state\n256, ARA state"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Undo_EndBlock","return_values":[],"parameters":[{"identifier":"descchange","type":"string"},{"identifier":"extraflags","type":"integer"}]},"eel":{"return_values":["Undo_EndBlock"],"parameters":[{"identifier":"\"descchange\""},{"type_name":"int","identifier":"extraflags"}]}},"requires":{"Reaper":"5.979"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Undo_EndBlock(string descchange, integer extraflags)","eel":"Undo_EndBlock(\"descchange\", int extraflags)","python":"RPR_Undo_EndBlock(String descchange, Int extraflags)","cpp":"void Undo_EndBlock(const char* descchange, int extraflags)"},"title":"Undo_EndBlock","chapters":["Project Management","Undo"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"call to end the block,with extra flags if any,and a description","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"string descchange","description":"a string that describes the changes of the undo-block"},{"identifier":"integer extraflags","description":"set to -1, include all undo states\n1, track/master vol/pan/routing, routing/hwout envelopes too\n2, track/master fx\n4, track items\n8, loop selection, markers, regions, extensions\n16, freeze state\n32, non-FX envelopes only\n64, FX envelopes, implied by UNDO_STATE_FX too\n128, contents of automation items -- not position, length, rate etc of automation items, which is part of envelope state\n256, ARA state"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Undo_EndBlock2","return_values":[],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"descchange","type":"string"},{"identifier":"extraflags","type":"integer"}]},"eel":{"return_values":["Undo_EndBlock2"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"identifier":"\"descchange\""},{"type_name":"int","identifier":"extraflags"}]}},"requires":{"Reaper":"5.979"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Undo_EndBlock2(ReaProject proj, string descchange, integer extraflags)","eel":"Undo_EndBlock2(ReaProject proj, \"descchange\", int extraflags)","python":"RPR_Undo_EndBlock2(ReaProject proj, String descchange, Int extraflags)","cpp":"void Undo_EndBlock2(ReaProject* proj, const char* descchange, int extraflags)"},"title":"Undo_EndBlock2","chapters":["Project Management","Undo"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"call to end the block,with extra flags if any,and a description","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string descchange","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Undo_OnStateChange","return_values":[],"parameters":[{"identifier":"descchange","type":"string"}]},"eel":{"return_values":["Undo_OnStateChange"],"parameters":[{"identifier":"\"descchange\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Undo_OnStateChange(string descchange)","eel":"Undo_OnStateChange(\"descchange\")","python":"RPR_Undo_OnStateChange(String descchange)","cpp":"void Undo_OnStateChange(const char* descchange)"},"title":"Undo_OnStateChange","chapters":["Project Management","Undo"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"limited state change to items","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"string descchange","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Undo_OnStateChange2","return_values":[],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"descchange","type":"string"}]},"eel":{"return_values":["Undo_OnStateChange2"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"identifier":"\"descchange\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Undo_OnStateChange2(ReaProject proj, string descchange)","eel":"Undo_OnStateChange2(ReaProject proj, \"descchange\")","python":"RPR_Undo_OnStateChange2(ReaProject proj, String descchange)","cpp":"void Undo_OnStateChange2(ReaProject* proj, const char* descchange)"},"title":"Undo_OnStateChange2","chapters":["Project Management","Undo"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"limited state change to items","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"string name","description":""},{"identifier":"MediaItem item","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Undo_OnStateChange_Item","return_values":[],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"name","type":"string"},{"identifier":"item","type":"MediaItem"}]},"eel":{"return_values":["Undo_OnStateChange_Item"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"identifier":"\"name\""},{"type_name":"MediaItem","identifier":"item"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Undo_OnStateChange_Item(ReaProject proj, string name, MediaItem item)","eel":"Undo_OnStateChange_Item(ReaProject proj, \"name\", MediaItem item)","python":"RPR_Undo_OnStateChange_Item(ReaProject proj, String name, MediaItem item)","cpp":"void Undo_OnStateChange_Item(ReaProject* proj, const char* name, MediaItem* item)"},"title":"Undo_OnStateChange_Item","chapters":["Project Management","Undo"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"string descchange","description":""},{"identifier":"integer whichStates","description":""},{"identifier":"integer trackparm","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Undo_OnStateChangeEx","return_values":[],"parameters":[{"identifier":"descchange","type":"string"},{"identifier":"whichStates","type":"integer"},{"identifier":"trackparm","type":"integer"}]},"eel":{"return_values":["Undo_OnStateChangeEx"],"parameters":[{"identifier":"\"descchange\""},{"type_name":"int","identifier":"whichStates"},{"type_name":"int","identifier":"trackparm"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Undo_OnStateChangeEx(string descchange, integer whichStates, integer trackparm)","eel":"Undo_OnStateChangeEx(\"descchange\", int whichStates, int trackparm)","python":"RPR_Undo_OnStateChangeEx(String descchange, Int whichStates, Int trackparm)","cpp":"void Undo_OnStateChangeEx(const char* descchange, int whichStates, int trackparm)"},"title":"Undo_OnStateChangeEx","chapters":["Project Management","Undo"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"trackparm=-1 by default,or if updating one fx chain,you can specify track index","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"string descchange","description":""},{"identifier":"integer whichStates","description":""},{"identifier":"integer trackparm","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Undo_OnStateChangeEx2","return_values":[],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"descchange","type":"string"},{"identifier":"whichStates","type":"integer"},{"identifier":"trackparm","type":"integer"}]},"eel":{"return_values":["Undo_OnStateChangeEx2"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"identifier":"\"descchange\""},{"type_name":"int","identifier":"whichStates"},{"type_name":"int","identifier":"trackparm"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Undo_OnStateChangeEx2(ReaProject proj, string descchange, integer whichStates, integer trackparm)","eel":"Undo_OnStateChangeEx2(ReaProject proj, \"descchange\", int whichStates, int trackparm)","python":"RPR_Undo_OnStateChangeEx2(ReaProject proj, String descchange, Int whichStates, Int trackparm)","cpp":"void Undo_OnStateChangeEx2(ReaProject* proj, const char* descchange, int whichStates, int trackparm)"},"title":"Undo_OnStateChangeEx2","chapters":["Project Management","Undo"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"trackparm=-1 by default,or if updating one fx chain,you can specify track index","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["arrangeviewmanagement","update","arrangeview"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.UpdateArrange","return_values":[],"parameters":[]},"eel":{"return_values":["UpdateArrange"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.UpdateArrange()","eel":"UpdateArrange()","python":"RPR_UpdateArrange()","cpp":"void UpdateArrange()"},"title":"UpdateArrange","chapters":["User Interface","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Redraw the arrange view","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem item","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.UpdateItemInProject","return_values":[],"parameters":[{"identifier":"item","type":"MediaItem"}]},"eel":{"return_values":["UpdateItemInProject"],"parameters":[{"type_name":"MediaItem","identifier":"item"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.UpdateItemInProject(MediaItem item)","eel":"UpdateItemInProject(MediaItem item)","python":"RPR_UpdateItemInProject(MediaItem item)","cpp":"void UpdateItemInProject(MediaItem* item)"},"title":"UpdateItemInProject","chapters":["Mediaitem Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["arrangeviewmanagement","update","timeline"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.UpdateTimeline","return_values":[],"parameters":[]},"eel":{"return_values":["UpdateTimeline"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.UpdateTimeline()","eel":"UpdateTimeline()","python":"RPR_UpdateTimeline()","cpp":"void UpdateTimeline()"},"title":"UpdateTimeline","chapters":["User Interface","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Redraw the arrange view and ruler","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","validate","objects","project","track","item","take","envelope","pcmsource"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier pointer","description":"a pointer to the object to check for. In Lua or Python, you just give the object to check as this parameter."},{"identifier":"string ctypename","description":"the type of project to check for(given as a pointer)"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ValidatePtr","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"pointer","type":"identifier"},{"identifier":"ctypename","type":"string"}]},"eel":{"method_name":"ValidatePtr","return_values":["bool"],"parameters":[{"type_name":"void*","identifier":"pointer"},{"identifier":"\"ctypename\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, the object/pointer is of ctypename; false, it is not"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.ValidatePtr(identifier pointer, string ctypename)","eel":"bool ValidatePtr(void* pointer, \"ctypename\")","python":"Boolean retval = RPR_ValidatePtr(void pointer, String ctypename)","cpp":"bool ValidatePtr(void* pointer, const char* ctypename)"},"title":"ValidatePtr","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Return true if the pointer is a valid object of the right type in proj (proj is ignored if pointer is itself a project). \nSupported types are: ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope* and PCM_source*.\n\nsee ValidatePtr2","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["helperfunctions","validate","objects","project","track","item","take","envelope","pcmsource"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"identifier pointer","description":"a pointer to the object to check for. In Lua or Python, you just give the object to check as this parameter."},{"identifier":"string ctypename","description":"the type of project to check for(given as a pointer)"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ValidatePtr2","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"pointer","type":"identifier"},{"identifier":"ctypename","type":"string"}]},"eel":{"method_name":"ValidatePtr2","return_values":["bool"],"parameters":[{"type_name":"ReaProject","identifier":"proj"},{"type_name":"void*","identifier":"pointer"},{"identifier":"\"ctypename\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, the object/pointer is of ctypename; false, it is not"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.ValidatePtr2(ReaProject proj, identifier pointer, string ctypename)","eel":"bool ValidatePtr2(ReaProject proj, void* pointer, \"ctypename\")","python":"Boolean retval = RPR_ValidatePtr2(ReaProject proj, void pointer, String ctypename)","cpp":"bool ValidatePtr2(ReaProject* proj, void* pointer, const char* ctypename)"},"title":"ValidatePtr2","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Return true if the pointer is a valid object of the right type in proj (proj is ignored if pointer is itself a project). Supported types are: ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope* and PCM_source*.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer page","description":"the idx of the preferences-page. The following are valid:\n139, General \n474, Paths \n219, Keyboard/Multitouch \n212, Project \n178, Track/Send Defaults \n477, Media Item Defaults \n156, Audio \n118, Device \n153, MIDI Devices \n203, Buffering \n584, Mute/Solo \n136, Playback \n517, Seeking \n137, Recording \n518, Loop Recording \n478, Rendering \n213, Appearance \n236, Media(Appearance) \n459, Peaks/Waveforms \n524, Fades/Crossfades \n458, Track Control Panels \n172, Editing Behavior \n447, Envelope Display \n519, Automation \n215, Mouse \n466, Mouse Modifiers \n490, MIDI Editor \n138, Media \n257, MIDI \n449, Video/REX/Misc \n154, Plug-ins\n505, Compatibility \n210, VST \n209, ReWire/DX \n515, ReaScript \n227, ReaMote \n257, Control/OSC/web \n160, External Editors "},{"identifier":"string pageByName","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ViewPrefs","return_values":[],"parameters":[{"identifier":"page","type":"integer"},{"identifier":"pageByName","type":"string"}]},"eel":{"return_values":["ViewPrefs"],"parameters":[{"type_name":"int","identifier":"page"},{"identifier":"\"pageByName\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ViewPrefs(integer page, string pageByName)","eel":"ViewPrefs(int page, \"pageByName\")","python":"RPR_ViewPrefs(Int page, String pageByName)","cpp":"void ViewPrefs(int page, const char* pageByName)"},"title":"ViewPrefs","chapters":["User Interface","Dialogs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Opens the prefs to a page, use pageByName if page is 0.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaTrack tr","description":""},{"identifier":"string groupname","description":""},{"identifier":"integer setmask","description":""},{"identifier":"integer setvalue","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSetTrackGroupMembershipHigh","return_values":[{"identifier":"groupstate","type":"integer"}],"parameters":[{"identifier":"tr","type":"MediaTrack"},{"identifier":"groupname","type":"string"},{"identifier":"setmask","type":"integer"},{"identifier":"setvalue","type":"integer"}]},"eel":{"method_name":"GetSetTrackGroupMembershipHigh","return_values":["uint"],"parameters":[{"type_name":"MediaTrack","identifier":"tr"},{"identifier":"\"groupname\""},{"type_name":"uint","identifier":"setmask"},{"type_name":"uint","identifier":"setvalue"}]}},"requires":{"Reaper":"6.72"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer groupstate","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer groupstate = reaper.GetSetTrackGroupMembershipHigh(MediaTrack tr, string groupname, integer setmask, integer setvalue)","eel":"uint GetSetTrackGroupMembershipHigh(MediaTrack tr, \"groupname\", uint setmask, uint setvalue)","python":"Int retval = RPR_GetSetTrackGroupMembershipHigh(MediaTrack tr, String groupname, Int setmask, Int setvalue)","cpp":"unsigned int GetSetTrackGroupMembershipHigh(MediaTrack* tr, const char* groupname, unsigned int setmask, unsigned int setvalue)"},"title":"GetSetTrackGroupMembershipHigh","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the high 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\nVOLUME_LEAD\nVOLUME_FOLLOW\nVOLUME_VCA_LEAD\nVOLUME_VCA_FOLLOW\nPAN_LEAD\nPAN_FOLLOW\nWIDTH_LEAD\nWIDTH_FOLLOW\nMUTE_LEAD\nMUTE_FOLLOW\nSOLO_LEAD\nSOLO_FOLLOW\nRECARM_LEAD\nRECARM_FOLLOW\nPOLARITY_LEAD\nPOLARITY_FOLLOW\nAUTOMODE_LEAD\nAUTOMODE_FOLLOW\nVOLUME_REVERSE\nPAN_REVERSE\nWIDTH_REVERSE\nNO_LEAD_WHEN_FOLLOW\nVOLUME_VCA_FOLLOW_ISPREFX\nMEDIA_EDIT_LEAD\nMEDIA_EDIT_FOLLOW\n\nNote: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"MediaTrack tr","description":"the MediaTrack, whose routings you want to give additional attributes"},{"identifier":"integer category","description":"category is <0 for receives, 0=sends, >0 for hardware outputs"},{"identifier":"integer sendidx","description":"the index of the send/receive/hwout"},{"identifier":"string parmname","description":"the parametername\n\"P_EXT:attribute_name\", where attribute_name can be any name. You can have multiple ones, just give them different attribute-names."},{"identifier":"string stringNeedBig","description":"the value of the attribute"},{"identifier":"boolean setNewValue","description":"true, set a new value; false, get the currently saved value"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.GetSetTrackSendInfo_String","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"stringNeedBig","type":"string"}],"parameters":[{"identifier":"tr","type":"MediaTrack"},{"identifier":"category","type":"integer"},{"identifier":"sendidx","type":"integer"},{"identifier":"parmname","type":"string"},{"identifier":"stringNeedBig","type":"string"},{"identifier":"setNewValue","type":"boolean"}]},"eel":{"method_name":"GetSetTrackSendInfo_String","return_values":["bool"],"parameters":[{"type_name":"MediaTrack","identifier":"tr"},{"type_name":"int","identifier":"category"},{"type_name":"int","identifier":"sendidx"},{"identifier":"\"parmname\""},{"identifier":"#stringNeedBig"},{"type_name":"bool","identifier":"setNewValue"}]}},"requires":{"Reaper":"5.975"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, getting/setting was successful; false, getting/setting was unsuccessful"},{"identifier":"string stringNeedBig","description":"the currently stored value"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string stringNeedBig = reaper.GetSetTrackSendInfo_String(MediaTrack tr, integer category, integer sendidx, string parmname, string stringNeedBig, boolean setNewValue)","eel":"bool GetSetTrackSendInfo_String(MediaTrack tr, int category, int sendidx, \"parmname\", #stringNeedBig, bool setNewValue)","python":"(Boolean retval, MediaTrack tr, Int category, Int sendidx, String parmname, String stringNeedBig, Boolean setNewValue) = RPR_GetSetTrackSendInfo_String(tr, category, sendidx, parmname, stringNeedBig, setNewValue)","cpp":"bool GetSetTrackSendInfo_String(MediaTrack* tr, int category, int sendidx, const char* parmname, char* stringNeedBig, bool setNewValue)"},"title":"GetSetTrackSendInfo_String","chapters":["Track Management","Routing"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Gets/sets a send attribute string:\n    P_EXT:xyz : char * : extension-specific persistent data\n\nThis is a little like extstates for routings, with xyz being the key and stringNeedBig being the value.\n\nFor ReaRoute-users: the outputs are hardware outputs, but with 512 added to the destination channel index (512 is the first rearoute channel, 513 the second, etc).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","envelopemanagement","br","br_envelope","create","get","envelope","allocate","sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"TrackEnvelope envelope","description":"a TrackEnvelope-object of the envelope, that you want to have as a BR_Envelope"},{"identifier":"boolean takeEnvelopesUseProjectTime","description":"false, take envelope points' positions are counted from take position, not project start time; true, work with project time instead"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_EnvAlloc","return_values":[{"identifier":"env","type":"BR_Envelope"}],"parameters":[{"identifier":"envelope","type":"TrackEnvelope"},{"identifier":"takeEnvelopesUseProjectTime","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["BR_Envelope"],"parameters":[{"identifier":"\"BR_EnvAlloc\""},{"type_name":"TrackEnvelope","identifier":"envelope"},{"type_name":"bool","identifier":"takeEnvelopesUseProjectTime"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"BR_Envelope env","description":"the requested Envelope as a BR_Envelope-object"}],"prog_lang":"*"},"functioncall":{"lua":"BR_Envelope env = reaper.BR_EnvAlloc(TrackEnvelope envelope, boolean takeEnvelopesUseProjectTime)","eel":"BR_Envelope extension_api(\"BR_EnvAlloc\", TrackEnvelope envelope, bool takeEnvelopesUseProjectTime)","python":"BR_Envelope env = BR_EnvAlloc(TrackEnvelope envelope, Boolean takeEnvelopesUseProjectTime)","cpp":"BR_Envelope* BR_EnvAlloc(TrackEnvelope* envelope, bool takeEnvelopesUseProjectTime)"},"title":"BR_EnvAlloc","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[BR] Create a BR_Envelope-object from a track-envelope pointer or take-envelope pointer. \nTo apply changes to a BR_Envelope-object, always call BR_EnvFree to release the object and commit changes if needed.\nA BR_Envelope is not a TrackEnvelope-object and therefore can't be used as TrackEnvelope-object!\n\nDelete a BR_Envelope with BR_EnvFree.\n\nFor manipulation see BR_EnvCountPoints, BR_EnvDeletePoint, BR_EnvFind, BR_EnvFindNext, BR_EnvFindPrevious, BR_EnvGetParentTake, BR_EnvGetParentTrack, BR_EnvGetPoint, BR_EnvGetProperties, BR_EnvSetPoint, BR_EnvSetProperties, BR_EnvValueAtPos.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","envelopemanagement","br","br_envelope","sws","envelope","count","point"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"BR_Envelope envelope","description":"the BR_Envelope-object, whose points you want to count"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_EnvCountPoints","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"envelope","type":"BR_Envelope"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_EnvCountPoints\""},{"type_name":"BR_Envelope","identifier":"envelope"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the number of envelope-points in the BR_Envelope-object"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.BR_EnvCountPoints(BR_Envelope envelope)","eel":"int extension_api(\"BR_EnvCountPoints\", BR_Envelope envelope)","python":"Int retval = BR_EnvCountPoints(BR_Envelope envelope)","cpp":"int BR_EnvCountPoints(BR_Envelope* envelope)"},"title":"BR_EnvCountPoints","chapters":["Envelope Management","Envelope Points"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[BR] Count envelope points in the envelope object allocated with BR_EnvAlloc.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","envelopemanagement","br","br_envelope","sws","envelope","delete","point"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"BR_Envelope envelope","description":"the BR_Envelope-object, where you want to delete an envelope-point"},{"identifier":"integer id","description":"the envelope-point-idx, that you want to delete. 0, first envelope-point; 1, second envelope-point, etc"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_EnvDeletePoint","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"envelope","type":"BR_Envelope"},{"identifier":"id","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"BR_EnvDeletePoint\""},{"type_name":"BR_Envelope","identifier":"envelope"},{"type_name":"int","identifier":"id"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, deleting was successful; false, deleting was unsuccessful"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.BR_EnvDeletePoint(BR_Envelope envelope, integer id)","eel":"bool extension_api(\"BR_EnvDeletePoint\", BR_Envelope envelope, int id)","python":"Boolean retval = BR_EnvDeletePoint(BR_Envelope envelope, Int id)","cpp":"bool BR_EnvDeletePoint(BR_Envelope* envelope, int id)"},"title":"BR_EnvDeletePoint","chapters":["Envelope Management","Envelope Points"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[BR] Delete envelope point by index (zero-based) in the envelope object allocated with BR_EnvAlloc.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","envelopemanagement","br","br_envelope","sws","envelope","find","point","delta"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"BR_Envelope envelope","description":"the BR_Envelope-object, in which you want to find an envelope-point"},{"identifier":"number position","description":"the position in seconds, where you want to find from"},{"identifier":"number delta","description":"delta > 0 to search surrounding range"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_EnvFind","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"envelope","type":"BR_Envelope"},{"identifier":"position","type":"number"},{"identifier":"delta","type":"number"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_EnvFind\""},{"type_name":"BR_Envelope","identifier":"envelope"},{"identifier":"position"},{"identifier":"delta"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"envelope-point-id or -1 on failure"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.BR_EnvFind(BR_Envelope envelope, number position, number delta)","eel":"int extension_api(\"BR_EnvFind\", BR_Envelope envelope, position, delta)","python":"Int retval = BR_EnvFind(BR_Envelope envelope, Float position, Float delta)","cpp":"int BR_EnvFind(BR_Envelope* envelope, double position, double delta)"},"title":"BR_EnvFind","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[BR] Find envelope point at time position in the envelope object allocated with BR_EnvAlloc. \n\nPass delta > 0 to search surrounding range - in that case the closest point to position within delta will be searched for. \n\nReturns envelope point id (zero-based) on success or -1 on failure.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","envelopemanagement","br","br_envelope","sws","envelope","find","point","next"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"BR_Envelope envelope","description":"the BR_Envelope-object, in which you want to find the next envelope-point"},{"identifier":"number position","description":"the position in seconds, where you want to find the next envelope-point from"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_EnvFindNext","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"envelope","type":"BR_Envelope"},{"identifier":"position","type":"number"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_EnvFindNext\""},{"type_name":"BR_Envelope","identifier":"envelope"},{"identifier":"position"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"envelope-point-id or -1 on failure"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.BR_EnvFindNext(BR_Envelope envelope, number position)","eel":"int extension_api(\"BR_EnvFindNext\", BR_Envelope envelope, position)","python":"Int retval = BR_EnvFindNext(BR_Envelope envelope, Float position)","cpp":"int BR_EnvFindNext(BR_Envelope* envelope, double position)"},"title":"BR_EnvFindNext","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[BR] Find next envelope point after time position in the envelope object allocated with BR_EnvAlloc. \n\nReturns envelope point id (zero-based) on success or -1 on failure.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","envelopemanagement","br","br_envelope","sws","envelope","find","point","previous"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"BR_Envelope envelope","description":"the BR_Envelope-object, in which you want to find the previous envelope-point"},{"identifier":"number position","description":"the position in seconds, where you want to find the previous envelope-point from"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_EnvFindPrevious","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"envelope","type":"BR_Envelope"},{"identifier":"position","type":"number"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_EnvFindPrevious\""},{"type_name":"BR_Envelope","identifier":"envelope"},{"identifier":"position"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"envelope-point-id or -1 on failure"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.BR_EnvFindPrevious(BR_Envelope envelope, number position)","eel":"int extension_api(\"BR_EnvFindPrevious\", BR_Envelope envelope, position)","python":"Int retval = BR_EnvFindPrevious(BR_Envelope envelope, Float position)","cpp":"int BR_EnvFindPrevious(BR_Envelope* envelope, double position)"},"title":"BR_EnvFindPrevious","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[BR] Find previous envelope point before time position in the envelope object allocated with BR_EnvAlloc. \n\nReturns envelope point id (zero-based) on success or -1 on failure.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","envelopemanagement","br","br_envelope","sws","envelope","free"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"BR_Envelope envelope","description":"the BR_Envelope-object that you want to commit and be freed"},{"identifier":"boolean commit","description":"true, commit changes when freeing the BR_Envelope-object; false, don't commit changes when freeing the BR_Envelope-object"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_EnvFree","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"envelope","type":"BR_Envelope"},{"identifier":"commit","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"BR_EnvFree\""},{"type_name":"BR_Envelope","identifier":"envelope"},{"type_name":"bool","identifier":"commit"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, committing was successful; false, committing was unsuccessful or no committing was necessary"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.BR_EnvFree(BR_Envelope envelope, boolean commit)","eel":"bool extension_api(\"BR_EnvFree\", BR_Envelope envelope, bool commit)","python":"Boolean retval = BR_EnvFree(BR_Envelope envelope, Boolean commit)","cpp":"bool BR_EnvFree(BR_Envelope* envelope, bool commit)"},"title":"BR_EnvFree","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[BR] Free envelope object allocated with BR_EnvAlloc and commit changes if needed. \n\nReturns true if changes were committed successfully. \n\nNote that when envelope object wasn't modified nothing will get committed even if commit = true - in that case function returns false.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"BR_Envelope envelope","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_EnvGetParentTake","return_values":[{"identifier":"take","type":"MediaItem_Take"}],"parameters":[{"identifier":"envelope","type":"BR_Envelope"}]},"eel":{"method_name":"extension_api","return_values":["MediaItem_Take"],"parameters":[{"identifier":"\"BR_EnvGetParentTake\""},{"type_name":"BR_Envelope","identifier":"envelope"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"functioncall":{"lua":"MediaItem_Take take = reaper.BR_EnvGetParentTake(BR_Envelope envelope)","eel":"MediaItem_Take extension_api(\"BR_EnvGetParentTake\", BR_Envelope envelope)","python":"MediaItem_Take take = BR_EnvGetParentTake(BR_Envelope envelope)","cpp":"MediaItem_Take* BR_EnvGetParentTake(BR_Envelope* envelope)"},"title":"BR_EnvGetParentTake","chapters":["Envelope Management","Take Envelopes"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[BR] If envelope object allocated with BR_EnvAlloc is take envelope, returns parent media item take, otherwise NULL.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"BR_Envelope envelope","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_EnvGetParentTrack","return_values":[{"identifier":"tr","type":"MediaTrack"}],"parameters":[{"identifier":"envelope","type":"BR_Envelope"}]},"eel":{"method_name":"extension_api","return_values":["MediaTrack"],"parameters":[{"identifier":"\"BR_EnvGetParentTrack\""},{"type_name":"BR_Envelope","identifier":"envelope"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack tr","description":""}],"prog_lang":"*"},"functioncall":{"lua":"MediaTrack tr = reaper.BR_EnvGetParentTrack(BR_Envelope envelope)","eel":"MediaTrack extension_api(\"BR_EnvGetParentTrack\", BR_Envelope envelope)","python":"MediaTrack tr = BR_EnvGetParentTrack(BR_Envelope envelope)","cpp":"MediaTrack* BR_EnvGetParentTrack(BR_Envelope* envelope)"},"title":"BR_EnvGetParentTrack","chapters":["Envelope Management","Track Envelopes"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[BR] Get parent track of envelope object allocated with BR_EnvAlloc. If take envelope, returns NULL.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"BR_Envelope envelope","description":""},{"identifier":"integer id","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_EnvGetPoint","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"position","type":"number"},{"identifier":"value","type":"number"},{"identifier":"shape","type":"integer"},{"identifier":"selected","type":"boolean"},{"identifier":"bezier","type":"number"}],"parameters":[{"identifier":"envelope","type":"BR_Envelope"},{"identifier":"id","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"BR_EnvGetPoint\""},{"type_name":"BR_Envelope","identifier":"envelope"},{"type_name":"int","identifier":"id"},{"identifier":"&position"},{"identifier":"&value"},{"type_name":"int","identifier":"&shape"},{"type_name":"bool","identifier":"&selected"},{"identifier":"&bezier"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number position","description":""},{"identifier":"number value","description":""},{"identifier":"integer shape","description":""},{"identifier":"boolean selected","description":""},{"identifier":"number bezier","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number position, number value, integer shape, boolean selected, number bezier = reaper.BR_EnvGetPoint(BR_Envelope envelope, integer id)","eel":"bool extension_api(\"BR_EnvGetPoint\", BR_Envelope envelope, int id, &position, &value, int &shape, bool &selected, &bezier)","python":"(Boolean retval, BR_Envelope envelope, Int id, Float positionOut, Float valueOut, Int shapeOut, Boolean selectedOut, Float bezierOut) = BR_EnvGetPoint(envelope, id, positionOut, valueOut, shapeOut, selectedOut, bezierOut)","cpp":"bool BR_EnvGetPoint(BR_Envelope* envelope, int id, double* positionOut, double* valueOut, int* shapeOut, bool* selectedOut, double* bezierOut)"},"title":"BR_EnvGetPoint","chapters":["Envelope Management","Envelope Points"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[BR] Get envelope point by id (zero-based) from the envelope object allocated with BR_EnvAlloc. \n\nReturns true on success.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"BR_Envelope envelope","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_EnvGetProperties","return_values":[{"identifier":"active","type":"boolean"},{"identifier":"visible","type":"boolean"},{"identifier":"armed","type":"boolean"},{"identifier":"inLane","type":"boolean"},{"identifier":"laneHeight","type":"integer"},{"identifier":"defaultShape","type":"integer"},{"identifier":"minValue","type":"number"},{"identifier":"maxValue","type":"number"},{"identifier":"centerValue","type":"number"},{"identifier":"type","type":"integer"},{"identifier":"faderScaling","type":"boolean"},{"isOptional":true,"type":"integer","identifier":"automationItemsOptions"}],"parameters":[{"identifier":"envelope","type":"BR_Envelope"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"BR_EnvGetProperties\""},{"type_name":"BR_Envelope","identifier":"envelope"},{"type_name":"bool","identifier":"&active"},{"type_name":"bool","identifier":"&visible"},{"type_name":"bool","identifier":"&armed"},{"type_name":"bool","identifier":"&inLane"},{"type_name":"int","identifier":"&laneHeight"},{"type_name":"int","identifier":"&defaultShape"},{"identifier":"&minValue"},{"identifier":"&maxValue"},{"identifier":"&centerValue"},{"type_name":"int","identifier":"&type"},{"type_name":"bool","identifier":"&faderScaling"},{"identifier":"&automationItemsOptions","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"5.62","SWS":"2.11.0"},"return_values":{"markup_type":"plaintext","param_count":12,"entries":[{"identifier":"boolean active","description":""},{"identifier":"boolean visible","description":""},{"identifier":"boolean armed","description":""},{"identifier":"boolean inLane","description":""},{"identifier":"integer laneHeight","description":""},{"identifier":"integer defaultShape","description":""},{"identifier":"number minValue","description":""},{"identifier":"number maxValue","description":""},{"identifier":"number centerValue","description":""},{"identifier":"integer type","description":""},{"identifier":"boolean faderScaling","description":""},{"identifier":"optional integer automationItemsOptions","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean active, boolean visible, boolean armed, boolean inLane, integer laneHeight, integer defaultShape, number minValue, number maxValue, number centerValue, integer type, boolean faderScaling, optional integer automationItemsOptions = reaper.BR_EnvGetProperties(BR_Envelope envelope)","eel":"extension_api(\"BR_EnvGetProperties\", BR_Envelope envelope, bool &active, bool &visible, bool &armed, bool &inLane, int &laneHeight, int &defaultShape, &minValue, &maxValue, &centerValue, int &type, bool &faderScaling, optional int &automationItemsOptions)","python":"(BR_Envelope envelope, Boolean activeOut, Boolean visibleOut, Boolean armedOut, Boolean inLaneOut, Int laneHeightOut, Int defaultShapeOut, Float minValueOut, Float maxValueOut, Float centerValueOut, Int typeOut, Boolean faderScalingOut, Int automationItemsOptionsOutOptional) = BR_EnvGetProperties(envelope, activeOut, visibleOut, armedOut, inLaneOut, laneHeightOut, defaultShapeOut, minValueOut, maxValueOut, centerValueOut, typeOut, faderScalingOut, automationItemsOptionsOutOptional)","cpp":"void BR_EnvGetProperties(BR_Envelope* envelope, bool* activeOut, bool* visibleOut, bool* armedOut, bool* inLaneOut, int* laneHeightOut, int* defaultShapeOut, double* minValueOut, double* maxValueOut, double* centerValueOut, int* typeOut, bool* faderScalingOut, int* automationItemsOptionsOutOptional)"},"title":"BR_EnvGetProperties","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[BR] Get envelope properties for the envelope object allocated with BR_EnvAlloc.\n\nactive: true if envelope is active\nvisible: true if envelope is visible\narmed: true if envelope is armed\ninLane: true if envelope has it's own envelope lane\nlaneHeight: envelope lane override height. 0 for none, otherwise size in pixels\ndefaultShape: default point shape: 0->Linear, 1->Square, 2->Slow start/end, 3->Fast start, 4->Fast end, 5->Bezier\nminValue: minimum envelope value\nmaxValue: maximum envelope value\ntype: envelope type: 0->Volume, 1->Volume (Pre-FX), 2->Pan, 3->Pan (Pre-FX), 4->Width, 5->Width (Pre-FX), 6->Mute, 7->Pitch, 8->Playrate, 9->Tempo map, 10->Parameter\nfaderScaling: true if envelope uses fader scaling\nautomationItemsOptions: -1->project default, &1=0->don't attach to underl. env., &1->attach to underl. env. on right side, &2->attach to underl. env. on both sides, &4: bypass underl. env.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"BR_Envelope envelope","description":""},{"identifier":"integer id","description":""},{"identifier":"number position","description":""},{"identifier":"number value","description":""},{"identifier":"integer shape","description":""},{"identifier":"boolean selected","description":""},{"identifier":"number bezier","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_EnvSetPoint","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"envelope","type":"BR_Envelope"},{"identifier":"id","type":"integer"},{"identifier":"position","type":"number"},{"identifier":"value","type":"number"},{"identifier":"shape","type":"integer"},{"identifier":"selected","type":"boolean"},{"identifier":"bezier","type":"number"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"BR_EnvSetPoint\""},{"type_name":"BR_Envelope","identifier":"envelope"},{"type_name":"int","identifier":"id"},{"identifier":"position"},{"identifier":"value"},{"type_name":"int","identifier":"shape"},{"type_name":"bool","identifier":"selected"},{"identifier":"bezier"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.BR_EnvSetPoint(BR_Envelope envelope, integer id, number position, number value, integer shape, boolean selected, number bezier)","eel":"bool extension_api(\"BR_EnvSetPoint\", BR_Envelope envelope, int id, position, value, int shape, bool selected, bezier)","python":"Boolean retval = BR_EnvSetPoint(BR_Envelope envelope, Int id, Float position, Float value, Int shape, Boolean selected, Float bezier)","cpp":"bool BR_EnvSetPoint(BR_Envelope* envelope, int id, double position, double value, int shape, bool selected, double bezier)"},"title":"BR_EnvSetPoint","chapters":["Envelope Management","Envelope Points"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[BR] Set envelope point by id (zero-based) in the envelope object allocated with BR_EnvAlloc. \n\nTo create point instead, pass id = -1. \n\nNote that if new point is inserted or existing point's time position is changed, points won't automatically get sorted. To do that, see BR_EnvSortPoints.\nReturns true on success.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":9,"entries":[{"identifier":"TrackEnvelope envelope","description":""},{"identifier":"boolean active","description":""},{"identifier":"boolean visible","description":""},{"identifier":"boolean armed","description":""},{"identifier":"boolean inLane","description":""},{"identifier":"integer laneHeight","description":""},{"identifier":"integer defaultShape","description":""},{"identifier":"boolean faderScaling","description":""},{"identifier":"optional integer automationItemsOptionsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_EnvSetProperties","return_values":[],"parameters":[{"identifier":"envelope","type":"BR_Envelope"},{"identifier":"active","type":"boolean"},{"identifier":"visible","type":"boolean"},{"identifier":"armed","type":"boolean"},{"identifier":"inLane","type":"boolean"},{"identifier":"laneHeight","type":"integer"},{"identifier":"defaultShape","type":"integer"},{"identifier":"faderScaling","type":"boolean"},{"isOptional":true,"type":"integer","identifier":"automationItemsOptionsIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"BR_EnvSetProperties\""},{"type_name":"BR_Envelope","identifier":"envelope"},{"type_name":"bool","identifier":"active"},{"type_name":"bool","identifier":"visible"},{"type_name":"bool","identifier":"armed"},{"type_name":"bool","identifier":"inLane"},{"type_name":"int","identifier":"laneHeight"},{"type_name":"int","identifier":"defaultShape"},{"type_name":"bool","identifier":"faderScaling"},{"identifier":"automationItemsOptionsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"5.979","SWS":"2.11.0"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.BR_EnvSetProperties(BR_Envelope envelope, boolean active, boolean visible, boolean armed, boolean inLane, integer laneHeight, integer defaultShape, boolean faderScaling, optional integer automationItemsOptionsIn)","eel":"extension_api(\"BR_EnvSetProperties\", BR_Envelope envelope, bool active, bool visible, bool armed, bool inLane, int laneHeight, int defaultShape, bool faderScaling, optional int automationItemsOptionsIn)","python":"(BR_Envelope envelope, Boolean active, Boolean visible, Boolean armed, Boolean inLane, Int laneHeight, Int defaultShape, Boolean faderScaling, Int automationItemsOptionsInOptional) = BR_EnvSetProperties(envelope, active, visible, armed, inLane, laneHeight, defaultShape, faderScaling, automationItemsOptionsInOptional)","cpp":"void BR_EnvSetProperties(BR_Envelope* envelope, bool active, bool visible, bool armed, bool inLane, int laneHeight, int defaultShape, bool faderScaling, int* automationItemsOptionsInOptional)"},"title":"BR_EnvSetProperties","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[BR] Set envelope properties for the envelope object allocated with BR_EnvAlloc. \n\nFor parameter description see BR_EnvGetProperties.\n\nSetting automationItemsOptions requires REAPER 5.979+.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"BR_Envelope envelope","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_EnvSortPoints","return_values":[],"parameters":[{"identifier":"envelope","type":"BR_Envelope"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"BR_EnvSortPoints\""},{"type_name":"BR_Envelope","identifier":"envelope"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.BR_EnvSortPoints(BR_Envelope envelope)","eel":"extension_api(\"BR_EnvSortPoints\", BR_Envelope envelope)","python":"BR_EnvSortPoints(BR_Envelope envelope)","cpp":"void BR_EnvSortPoints(BR_Envelope* envelope)"},"title":"BR_EnvSortPoints","chapters":["Envelope Management","Envelope Points"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[BR] Sort envelope points by position. \n\nThe only reason to call this is if sorted points are explicitly needed after editing them with BR_EnvSetPoint. \n\nNote that you do not have to call this before doing BR_EnvFree since it does handle unsorted points too.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"BR_Envelope envelope","description":""},{"identifier":"number position","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_EnvValueAtPos","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"envelope","type":"BR_Envelope"},{"identifier":"position","type":"number"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"BR_EnvValueAtPos\""},{"type_name":"BR_Envelope","identifier":"envelope"},{"identifier":"position"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.BR_EnvValueAtPos(BR_Envelope envelope, number position)","eel":"double extension_api(\"BR_EnvValueAtPos\", BR_Envelope envelope, position)","python":"Float retval = BR_EnvValueAtPos(BR_Envelope envelope, Float position)","cpp":"double BR_EnvValueAtPos(BR_Envelope* envelope, double position)"},"title":"BR_EnvValueAtPos","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[BR] Get envelope value at time position for the envelope object allocated with BR_EnvAlloc.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","arrangeviewmanagement","get","start","end","seconds","project"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_GetArrangeView","return_values":[{"isOptional":true,"type":"number","identifier":"retval"},{"identifier":"endTime","type":"number"}],"parameters":[{"identifier":"proj","type":"ReaProject"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"BR_GetArrangeView\""},{"type_name":"ReaProject","identifier":"proj"},{"identifier":"&startTime"},{"identifier":"&endTime"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number startTime retval","description":"the current starttime in the arrangeview in seconds"},{"identifier":"number endTime","description":"the current endtime in the arrangeview in seconds"}],"prog_lang":"*"},"functioncall":{"lua":"number startTime retval, number endTime = reaper.BR_GetArrangeView(ReaProject proj)","eel":"extension_api(\"BR_GetArrangeView\", ReaProject proj, &startTime, &endTime)","python":"(ReaProject proj, Float startTimeOut, Float endTimeOut) = BR_GetArrangeView(proj, startTimeOut, endTimeOut)","cpp":"void BR_GetArrangeView(ReaProject* proj, double* startTimeOut, double* endTimeOut)"},"title":"BR_GetArrangeView","chapters":["User Interface","Arrangeview Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+)\n\nGet start and end time position of arrange view. \n\nTo set arrange view instead, see BR_SetArrangeView.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number position","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_GetClosestGridDivision","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"position","type":"number"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"BR_GetClosestGridDivision\""},{"identifier":"position"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.BR_GetClosestGridDivision(number position)","eel":"double extension_api(\"BR_GetClosestGridDivision\", position)","python":"Float retval = BR_GetClosestGridDivision(Float position)","cpp":"double BR_GetClosestGridDivision(double position)"},"title":"BR_GetClosestGridDivision","chapters":["Api-Helper-Functions","Time/Grid Conversion/Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[BR] Get closest grid division to position. \n\nNote that this functions is different from SnapToGrid in two regards. SnapToGrid() needs snap enabled to work and this one works always. \nSecondly, grid divisions are different from grid lines because some grid lines may be hidden due to zoom level - this function ignores grid line visibility and always searches for the closest grid division at given position. \n\nFor more grid division functions, see BR_GetNextGridDivision and BR_GetPrevGridDivision.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.BR_GetCurrentTheme","return_values":[{"identifier":"themePath","type":"string"},{"identifier":"themeName","type":"string"}],"parameters":[]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"BR_GetCurrentTheme\""},{"identifier":"#themePath"},{"identifier":"#themeName"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string themePath","description":""},{"identifier":"string themeName","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string themePath, string themeName = reaper.BR_GetCurrentTheme()","eel":"extension_api(\"BR_GetCurrentTheme\", #themePath, #themeName)","python":"(String themePathOut, Int themePathOut_sz, String themeNameOut, Int themeNameOut_sz) = BR_GetCurrentTheme(themePathOut, themePathOut_sz, themeNameOut, themeNameOut_sz)","cpp":"void BR_GetCurrentTheme(char* themePathOut, int themePathOut_sz, char* themeNameOut, int themeNameOut_sz)"},"title":"BR_GetCurrentTheme","chapters":["Theme Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[BR] Get current theme information. themePathOut is set to full theme path and themeNameOut is set to theme name excluding any path info and extension","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","mediaitemmanagement","get","guid","project"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"string guidStringIn","description":"the guid of the MediaItem you want to request."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_GetMediaItemByGUID","return_values":[{"identifier":"item","type":"MediaItem"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"guidStringIn","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["MediaItem"],"parameters":[{"identifier":"\"BR_GetMediaItemByGUID\""},{"type_name":"ReaProject","identifier":"proj"},{"identifier":"\"guidStringIn\""}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem item","description":"the requested MediaItem as a MediaItem-object"}],"prog_lang":"*"},"functioncall":{"lua":"MediaItem item = reaper.BR_GetMediaItemByGUID(ReaProject proj, string guidStringIn)","eel":"MediaItem extension_api(\"BR_GetMediaItemByGUID\", ReaProject proj, \"guidStringIn\")","python":"MediaItem item = BR_GetMediaItemByGUID(ReaProject proj, String guidStringIn)","cpp":"MediaItem* BR_GetMediaItemByGUID(ReaProject* proj, const char* guidStringIn)"},"title":"BR_GetMediaItemByGUID","chapters":["Mediaitem Management","Item States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[BR] Get media item from GUID string. Note that the GUID must be enclosed in braces {}. \n\nTo get item's GUID as a string, see BR_GetMediaItemGUID.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","mediaitemmanagement","get","guid","item"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem item","description":"the MediaItem, whose guid you want to request"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_GetMediaItemGUID","return_values":[{"identifier":"guidString","type":"string"}],"parameters":[{"identifier":"item","type":"MediaItem"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"BR_GetMediaItemGUID\""},{"type_name":"MediaItem","identifier":"item"},{"identifier":"#guidString"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string guidString","description":"the requested guid of the MediaItem"}],"prog_lang":"*"},"functioncall":{"lua":"string guidString = reaper.BR_GetMediaItemGUID(MediaItem item)","eel":"extension_api(\"BR_GetMediaItemGUID\", MediaItem item, #guidString)","python":"(MediaItem item, String guidStringOut, Int guidStringOut_sz) = BR_GetMediaItemGUID(item, guidStringOut, guidStringOut_sz)","cpp":"void BR_GetMediaItemGUID(MediaItem* item, char* guidStringOut, int guidStringOut_sz)"},"title":"BR_GetMediaItemGUID","chapters":["Mediaitem Management","Item States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Get media item GUID as a string (guidStringOut_sz should be at least 64). To get media item back from GUID string, see [BR\\_GetMediaItemByGUID](#BR_GetMediaItemByGUID).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem item","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_GetMediaItemImageResource","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"image","type":"string"},{"identifier":"imageFlags","type":"integer"}],"parameters":[{"identifier":"item","type":"MediaItem"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"BR_GetMediaItemImageResource\""},{"type_name":"MediaItem","identifier":"item"},{"identifier":"#image"},{"type_name":"int","identifier":"&imageFlags"}]}},"requires":{"Reaper":"5.62","SWS":"2.11.0"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string image","description":""},{"identifier":"integer imageFlags","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string image, integer imageFlags = reaper.BR_GetMediaItemImageResource(MediaItem item)","eel":"bool extension_api(\"BR_GetMediaItemImageResource\", MediaItem item, #image, int &imageFlags)","python":"(Boolean retval, MediaItem item, String imageOut, Int imageOut_sz, Int imageFlagsOut) = BR_GetMediaItemImageResource(item, imageOut, imageOut_sz, imageFlagsOut)","cpp":"bool BR_GetMediaItemImageResource(MediaItem* item, char* imageOut, int imageOut_sz, int* imageFlagsOut)"},"title":"BR_GetMediaItemImageResource","chapters":["Mediaitem Management","Item States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Get currently loaded image resource and its flags for a given item. Returns false if there is no image resource set. To set image resource, see [BR\\_SetMediaItemImageResource](#BR_SetMediaItemImageResource).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_GetMediaItemTakeGUID","return_values":[{"identifier":"guidString","type":"string"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"BR_GetMediaItemTakeGUID\""},{"type_name":"MediaItem_Take","identifier":"take"},{"identifier":"#guidString"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string guidString","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string guidString = reaper.BR_GetMediaItemTakeGUID(MediaItem_Take take)","eel":"extension_api(\"BR_GetMediaItemTakeGUID\", MediaItem_Take take, #guidString)","python":"(MediaItem_Take take, String guidStringOut, Int guidStringOut_sz) = BR_GetMediaItemTakeGUID(take, guidStringOut, guidStringOut_sz)","cpp":"void BR_GetMediaItemTakeGUID(MediaItem_Take* take, char* guidStringOut, int guidStringOut_sz)"},"title":"BR_GetMediaItemTakeGUID","chapters":["Mediaitem Take Management","Take States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Get media item take GUID as a string (guidStringOut_sz should be at least 64). To get take from GUID string, see [SNM\\_GetMediaItemTakeByGUID](#SNM_GetMediaItemTakeByGUID).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_GetMediaSourceProperties","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"section","type":"boolean"},{"identifier":"start","type":"number"},{"identifier":"length","type":"number"},{"identifier":"fade","type":"number"},{"identifier":"reverse","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"BR_GetMediaSourceProperties\""},{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"bool","identifier":"&section"},{"identifier":"&start"},{"identifier":"&length"},{"identifier":"&fade"},{"type_name":"bool","identifier":"&reverse"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"boolean section","description":""},{"identifier":"number start","description":""},{"identifier":"number length","description":""},{"identifier":"number fade","description":""},{"identifier":"boolean reverse","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, boolean section, number start, number length, number fade, boolean reverse = reaper.BR_GetMediaSourceProperties(MediaItem_Take take)","eel":"bool extension_api(\"BR_GetMediaSourceProperties\", MediaItem_Take take, bool &section, &start, &length, &fade, bool &reverse)","python":"(Boolean retval, MediaItem_Take take, Boolean sectionOut, Float startOut, Float lengthOut, Float fadeOut, Boolean reverseOut) = BR_GetMediaSourceProperties(take, sectionOut, startOut, lengthOut, fadeOut, reverseOut)","cpp":"bool BR_GetMediaSourceProperties(MediaItem_Take* take, bool* sectionOut, double* startOut, double* lengthOut, double* fadeOut, bool* reverseOut)"},"title":"BR_GetMediaSourceProperties","chapters":["Mediaitem Take Management","Take States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Get take media source properties as they appear in Item properties. Returns false if take can't have them (MIDI items etc.).\nTo set source properties, see [BR\\_SetMediaSourceProperties](#BR_SetMediaSourceProperties).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","trackmanagement","get","guid","track"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"string guidStringIn","description":"the guid of the track you want to request"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_GetMediaTrackByGUID","return_values":[{"identifier":"tr","type":"MediaTrack"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"guidStringIn","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["MediaTrack"],"parameters":[{"identifier":"\"BR_GetMediaTrackByGUID\""},{"type_name":"ReaProject","identifier":"proj"},{"identifier":"\"guidStringIn\""}]}},"requires":{"Reaper":"5.62","SWS":"2.12.1.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack tr","description":"the MediaTrack requested, as MediaTrack-object"}],"prog_lang":"*"},"functioncall":{"lua":"MediaTrack tr = reaper.BR_GetMediaTrackByGUID(ReaProject proj, string guidStringIn)","eel":"MediaTrack extension_api(\"BR_GetMediaTrackByGUID\", ReaProject proj, \"guidStringIn\")","python":"MediaTrack tr = BR_GetMediaTrackByGUID(ReaProject proj, String guidStringIn)","cpp":"MediaTrack* BR_GetMediaTrackByGUID(ReaProject* proj, const char* guidStringIn)"},"title":"BR_GetMediaTrackByGUID","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Get media track from GUID string. Note that the GUID must be enclosed in braces {}. To get track's GUID as a string, see [GetSetMediaTrackInfo\\_String](#GetSetMediaTrackInfo_String).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack track","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_GetMediaTrackFreezeCount","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"track","type":"MediaTrack"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_GetMediaTrackFreezeCount\""},{"type_name":"MediaTrack","identifier":"track"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.BR_GetMediaTrackFreezeCount(MediaTrack track)","eel":"int extension_api(\"BR_GetMediaTrackFreezeCount\", MediaTrack track)","python":"Int retval = BR_GetMediaTrackFreezeCount(MediaTrack track)","cpp":"int BR_GetMediaTrackFreezeCount(MediaTrack* track)"},"title":"BR_GetMediaTrackFreezeCount","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Get media track freeze count (if track isn't frozen at all, returns 0).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack track","description":"the track, whose guid you want to get"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_GetMediaTrackGUID","return_values":[{"identifier":"guidString","type":"string"}],"parameters":[{"identifier":"track","type":"MediaTrack"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"BR_GetMediaTrackGUID\""},{"type_name":"MediaTrack","identifier":"track"},{"identifier":"#guidString"}]}},"requires":{"Reaper":"5.62","SWS":"2.12.1.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string guidString","description":"the guid of the track"}],"prog_lang":"*"},"functioncall":{"lua":"string guidString = reaper.BR_GetMediaTrackGUID(MediaTrack track)","eel":"extension_api(\"BR_GetMediaTrackGUID\", MediaTrack track, #guidString)","python":"(MediaTrack track, String guidStringOut, Int guidStringOut_sz) = BR_GetMediaTrackGUID(track, guidStringOut, guidStringOut_sz)","cpp":"void BR_GetMediaTrackGUID(MediaTrack* track, char* guidStringOut, int guidStringOut_sz)"},"title":"BR_GetMediaTrackGUID","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Deprecated, see [GetSetMediaTrackInfo\\_String](#GetSetMediaTrackInfo_String) (v5.95+). Get media track GUID as a string (guidStringOut\\_sz should be at least 64). To get media track back from GUID string, see [BR\\_GetMediaTrackByGUID](#BR_GetMediaTrackByGUID).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack track","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_GetMediaTrackLayouts","return_values":[{"identifier":"mcpLayoutName","type":"string"},{"identifier":"tcpLayoutName","type":"string"}],"parameters":[{"identifier":"track","type":"MediaTrack"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"BR_GetMediaTrackLayouts\""},{"type_name":"MediaTrack","identifier":"track"},{"identifier":"#mcpLayoutName"},{"identifier":"#tcpLayoutName"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string mcpLayoutName","description":""},{"identifier":"string tcpLayoutName","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string mcpLayoutName, string tcpLayoutName = reaper.BR_GetMediaTrackLayouts(MediaTrack track)","eel":"extension_api(\"BR_GetMediaTrackLayouts\", MediaTrack track, #mcpLayoutName, #tcpLayoutName)","python":"(MediaTrack track, String mcpLayoutNameOut, Int mcpLayoutNameOut_sz, String tcpLayoutNameOut, Int tcpLayoutNameOut_sz) = BR_GetMediaTrackLayouts(track, mcpLayoutNameOut, mcpLayoutNameOut_sz, tcpLayoutNameOut, tcpLayoutNameOut_sz)","cpp":"void BR_GetMediaTrackLayouts(MediaTrack* track, char* mcpLayoutNameOut, int mcpLayoutNameOut_sz, char* tcpLayoutNameOut, int tcpLayoutNameOut_sz)"},"title":"BR_GetMediaTrackLayouts","chapters":["Theme Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Deprecated, see [GetSetMediaTrackInfo](#GetSetMediaTrackInfo) (REAPER v5.02+). Get media track layouts for MCP and TCP. Empty string (\"\") means that layout is set to the default layout. To set media track layouts, see [BR\\_SetMediaTrackLayouts](#BR_SetMediaTrackLayouts).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer category","description":""},{"identifier":"integer sendidx","description":""},{"identifier":"integer envelopeType","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_GetMediaTrackSendInfo_Envelope","return_values":[{"identifier":"env","type":"TrackEnvelope"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"category","type":"integer"},{"identifier":"sendidx","type":"integer"},{"identifier":"envelopeType","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["TrackEnvelope"],"parameters":[{"identifier":"\"BR_GetMediaTrackSendInfo_Envelope\""},{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"category"},{"type_name":"int","identifier":"sendidx"},{"type_name":"int","identifier":"envelopeType"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"TrackEnvelope env","description":""}],"prog_lang":"*"},"functioncall":{"lua":"TrackEnvelope env = reaper.BR_GetMediaTrackSendInfo_Envelope(MediaTrack track, integer category, integer sendidx, integer envelopeType)","eel":"TrackEnvelope extension_api(\"BR_GetMediaTrackSendInfo_Envelope\", MediaTrack track, int category, int sendidx, int envelopeType)","python":"TrackEnvelope env = BR_GetMediaTrackSendInfo_Envelope(MediaTrack track, Int category, Int sendidx, Int envelopeType)","cpp":"TrackEnvelope* BR_GetMediaTrackSendInfo_Envelope(MediaTrack* track, int category, int sendidx, int envelopeType)"},"title":"BR_GetMediaTrackSendInfo_Envelope","chapters":["Track Management","Routing"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Get track envelope for send/receive/hardware output.\n\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nsendidx is zero-based (see [GetTrackNumSends](#GetTrackNumSends) to count track sends/receives/hardware outputs)\nenvelopeType determines which envelope is returned (0=volume, 1=pan, 2=mute)\n\nNote: To get or set other send attributes, see [BR\\_GetSetTrackSendInfo](#BR_GetSetTrackSendInfo) and [BR\\_GetMediaTrackSendInfo\\_Track](#BR_GetMediaTrackSendInfo_Track).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer category","description":""},{"identifier":"integer sendidx","description":""},{"identifier":"integer trackType","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_GetMediaTrackSendInfo_Track","return_values":[{"identifier":"tr","type":"MediaTrack"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"category","type":"integer"},{"identifier":"sendidx","type":"integer"},{"identifier":"trackType","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["MediaTrack"],"parameters":[{"identifier":"\"BR_GetMediaTrackSendInfo_Track\""},{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"category"},{"type_name":"int","identifier":"sendidx"},{"type_name":"int","identifier":"trackType"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack tr","description":""}],"prog_lang":"*"},"functioncall":{"lua":"MediaTrack tr = reaper.BR_GetMediaTrackSendInfo_Track(MediaTrack track, integer category, integer sendidx, integer trackType)","eel":"MediaTrack extension_api(\"BR_GetMediaTrackSendInfo_Track\", MediaTrack track, int category, int sendidx, int trackType)","python":"MediaTrack tr = BR_GetMediaTrackSendInfo_Track(MediaTrack track, Int category, Int sendidx, Int trackType)","cpp":"MediaTrack* BR_GetMediaTrackSendInfo_Track(MediaTrack* track, int category, int sendidx, int trackType)"},"title":"BR_GetMediaTrackSendInfo_Track","chapters":["Track Management","Routing"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Get source or destination media track for send/receive.\n\ncategory is <0 for receives, 0=sends\nsendidx is zero-based (see [GetTrackNumSends](#GetTrackNumSends) to count track sends/receives)\ntrackType determines which track is returned (0=source track, 1=destination track)\n\nNote: To get or set other send attributes, see [BR\\_GetSetTrackSendInfo](#BR_GetSetTrackSendInfo) and [BR\\_GetMediaTrackSendInfo_Envelope](#BR_GetMediaTrackSendInfo_Envelope).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_GetMidiSourceLenPPQ","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"BR_GetMidiSourceLenPPQ\""},{"type_name":"MediaItem_Take","identifier":"take"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.BR_GetMidiSourceLenPPQ(MediaItem_Take take)","eel":"double extension_api(\"BR_GetMidiSourceLenPPQ\", MediaItem_Take take)","python":"Float retval = BR_GetMidiSourceLenPPQ(MediaItem_Take take)","cpp":"double BR_GetMidiSourceLenPPQ(MediaItem_Take* take)"},"title":"BR_GetMidiSourceLenPPQ","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Get MIDI take source length in PPQ. In case the take isn't MIDI, return value will be -1.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_GetMidiTakePoolGUID","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"guidString","type":"string"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"BR_GetMidiTakePoolGUID\""},{"type_name":"MediaItem_Take","identifier":"take"},{"identifier":"#guidString"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string guidString","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string guidString = reaper.BR_GetMidiTakePoolGUID(MediaItem_Take take)","eel":"bool extension_api(\"BR_GetMidiTakePoolGUID\", MediaItem_Take take, #guidString)","python":"(Boolean retval, MediaItem_Take take, String guidStringOut, Int guidStringOut_sz) = BR_GetMidiTakePoolGUID(take, guidStringOut, guidStringOut_sz)","cpp":"bool BR_GetMidiTakePoolGUID(MediaItem_Take* take, char* guidStringOut, int guidStringOut_sz)"},"title":"BR_GetMidiTakePoolGUID","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Get MIDI take pool GUID as a string (guidStringOut_sz should be at least 64). Returns true if take is pooled.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_GetMidiTakeTempoInfo","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"ignoreProjTempo","type":"boolean"},{"identifier":"bpm","type":"number"},{"identifier":"num","type":"integer"},{"identifier":"den","type":"integer"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"BR_GetMidiTakeTempoInfo\""},{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"bool","identifier":"&ignoreProjTempo"},{"identifier":"&bpm"},{"type_name":"int","identifier":"&num"},{"type_name":"int","identifier":"&den"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"boolean ignoreProjTempo","description":""},{"identifier":"number bpm","description":""},{"identifier":"integer num","description":""},{"identifier":"integer den","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, boolean ignoreProjTempo, number bpm, integer num, integer den = reaper.BR_GetMidiTakeTempoInfo(MediaItem_Take take)","eel":"bool extension_api(\"BR_GetMidiTakeTempoInfo\", MediaItem_Take take, bool &ignoreProjTempo, &bpm, int &num, int &den)","python":"(Boolean retval, MediaItem_Take take, Boolean ignoreProjTempoOut, Float bpmOut, Int numOut, Int denOut) = BR_GetMidiTakeTempoInfo(take, ignoreProjTempoOut, bpmOut, numOut, denOut)","cpp":"bool BR_GetMidiTakeTempoInfo(MediaItem_Take* take, bool* ignoreProjTempoOut, double* bpmOut, int* numOut, int* denOut)"},"title":"BR_GetMidiTakeTempoInfo","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Get \"ignore project tempo\" information for MIDI take. Returns true if take can ignore project tempo (no matter if it's actually ignored), otherwise false.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","userinterface","get","mouse","cursor","context"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.BR_GetMouseCursorContext","return_values":[{"identifier":"window","type":"string"},{"identifier":"segment","type":"string"},{"identifier":"details","type":"string"}],"parameters":[]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"BR_GetMouseCursorContext\""},{"identifier":"#window"},{"identifier":"#segment"},{"identifier":"#details"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"string window retval","description":"the window, in which the mouse-cursor was, at time of calling BR_GetMouseCursorContext"},{"identifier":"string segment","description":"the segment within the window"},{"identifier":"string details","description":"details with the segment of the window"}],"prog_lang":"*"},"functioncall":{"lua":"string window, string segment, string details = reaper.BR_GetMouseCursorContext()","eel":"extension_api(\"BR_GetMouseCursorContext\", #window, #segment, #details)","python":"(String windowOut, Int windowOut_sz, String segmentOut, Int segmentOut_sz, String detailsOut, Int detailsOut_sz) = BR_GetMouseCursorContext(windowOut, windowOut_sz, segmentOut, segmentOut_sz, detailsOut, detailsOut_sz)","cpp":"void BR_GetMouseCursorContext(char* windowOut, int windowOut_sz, char* segmentOut, int segmentOut_sz, char* detailsOut, int detailsOut_sz)"},"title":"BR_GetMouseCursorContext","chapters":["Input/Output Devices","Mouse"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Get mouse cursor context. Each parameter returns information in a form of string as specified in the table below.\n\nTo get more info on stuff that was found under mouse cursor see [BR\\_GetMouseCursorContext\\_Envelope](#BR_GetMouseCursorContext_Envelope), [BR\\_GetMouseCursorContext\\_Item](#BR_GetMouseCursorContext_Item), [BR\\_GetMouseCursorContext\\_MIDI](#BR_GetMouseCursorContext_MIDI), [BR\\_GetMouseCursorContext\\_Position](#BR_GetMouseCursorContext_Position), [BR\\_GetMouseCursorContext\\_Take](#BR_GetMouseCursorContext_Take), [BR\\_GetMouseCursorContext\\_Track](#BR_GetMouseCursorContext_Track)\n<table border='2'>\n<tr><th style='width:100px'>Window</th><th style='width:100px'>Segment</th><th style='width:300px'>Details</th></tr>\n<tr><th rowspan='1' align = 'center'>unknown</th><td>\"\"</td><td>\"\"</td></tr>\n<tr><th rowspan='4' align = 'center'>ruler</th><td>region\\_lane </td><td>\"\"</td></tr>\n<tr><td>marker\\_lane </td><td>\"\"</td></tr>\n<tr><td>tempo\\_lane </td><td>\"\"</td></tr>\n<tr><td>timeline</td><td>\"\"</td></tr>\n<tr><th rowspan='1' align = 'center'>transport</th><td>\"\"</td><td>\"\"</td></tr>\n<tr><th rowspan='3' align = 'center'>tcp </th><td>track</td><td>\"\"</td></tr>\n<tr><td>envelope</td><td>\"\"</td></tr>\n<tr><td>empty</td><td>\"\"</td></tr>\n<tr><th rowspan='2' align = 'center'>mcp </th><td>track</td><td>\"\"</td></tr>\n<tr><td>empty</td><td>\"\"</td></tr>\n<tr><th rowspan='3' align = 'center'>arrange</th><td>track</td><td>empty,item, item\\_stretch\\_marker,env\\_point, env\\_segment </td></tr>\n<tr><td>envelope</td><td>empty, env\\_point, env\\_segment</td></tr>\n<tr><td>empty</td><td>\"\"</td></tr>\n<tr><th rowspan='5' align = 'center'>midi\\_editor </th><td>unknown</td><td>\"\"</td></tr>\n<tr><td>ruler</td><td>\"\"</td></tr>\n<tr><td>piano</td><td>\"\"</td></tr>\n<tr><td>notes</td><td>\"\"</td></tr>\n<tr><td>cc\\_lane</td><td>cc\\_selector, cc\\_lane</td></tr>\n</table>","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.BR_GetMouseCursorContext_Envelope","return_values":[{"identifier":"retval","type":"TrackEnvelope"},{"identifier":"takeEnvelope","type":"boolean"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["TrackEnvelope"],"parameters":[{"identifier":"\"BR_GetMouseCursorContext_Envelope\""},{"type_name":"bool","identifier":"&takeEnvelope"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"TrackEnvelope retval","description":""},{"identifier":"boolean takeEnvelope","description":""}],"prog_lang":"*"},"functioncall":{"lua":"TrackEnvelope retval, boolean takeEnvelope = reaper.BR_GetMouseCursorContext_Envelope()","eel":"TrackEnvelope extension_api(\"BR_GetMouseCursorContext_Envelope\", bool &takeEnvelope)","python":"(TrackEnvelope retval, Boolean takeEnvelopeOut) = BR_GetMouseCursorContext_Envelope(takeEnvelopeOut)","cpp":"TrackEnvelope* BR_GetMouseCursorContext_Envelope(bool* takeEnvelopeOut)"},"title":"BR_GetMouseCursorContext_Envelope","chapters":["Envelope Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Returns envelope that was captured with the last call to [BR\\_GetMouseCursorContext](#BR_GetMouseCursorContext). In case the envelope belongs to take, takeEnvelope will be true.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.BR_GetMouseCursorContext_Item","return_values":[{"identifier":"item","type":"MediaItem"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["MediaItem"],"parameters":[{"identifier":"\"BR_GetMouseCursorContext_Item\""}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem item","description":""}],"prog_lang":"*"},"functioncall":{"lua":"MediaItem item = reaper.BR_GetMouseCursorContext_Item()","eel":"MediaItem extension_api(\"BR_GetMouseCursorContext_Item\")","python":"MediaItem item = BR_GetMouseCursorContext_Item()","cpp":"MediaItem* BR_GetMouseCursorContext_Item()"},"title":"BR_GetMouseCursorContext_Item","chapters":["Input/Output Devices","Mouse"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Returns item under mouse cursor that was captured with the last call to [BR\\_GetMouseCursorContext](#BR_GetMouseCursorContext). Note that the function will return item even if mouse cursor is over some other track lane element like stretch marker or envelope. This enables for easier identification of items when you want to ignore elements within the item.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.BR_GetMouseCursorContext_MIDI","return_values":[{"identifier":"retval","type":"identifier"},{"identifier":"inlineEditor","type":"boolean"},{"identifier":"noteRow","type":"integer"},{"identifier":"ccLane","type":"integer"},{"identifier":"ccLaneVal","type":"integer"},{"identifier":"ccLaneId","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"BR_GetMouseCursorContext_MIDI\""},{"type_name":"bool","identifier":"&inlineEditor"},{"type_name":"int","identifier":"&noteRow"},{"type_name":"int","identifier":"&ccLane"},{"type_name":"int","identifier":"&ccLaneVal"},{"type_name":"int","identifier":"&ccLaneId"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"identifier retval","description":""},{"identifier":"boolean inlineEditor","description":""},{"identifier":"integer noteRow","description":""},{"identifier":"integer ccLane","description":""},{"identifier":"integer ccLaneVal","description":""},{"identifier":"integer ccLaneId","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier retval, boolean inlineEditor, integer noteRow, integer ccLane, integer ccLaneVal, integer ccLaneId = reaper.BR_GetMouseCursorContext_MIDI()","eel":"void* extension_api(\"BR_GetMouseCursorContext_MIDI\", bool &inlineEditor, int &noteRow, int &ccLane, int &ccLaneVal, int &ccLaneId)","python":"(void retval, Boolean inlineEditorOut, Int noteRowOut, Int ccLaneOut, Int ccLaneValOut, Int ccLaneIdOut) = BR_GetMouseCursorContext_MIDI(inlineEditorOut, noteRowOut, ccLaneOut, ccLaneValOut, ccLaneIdOut)","cpp":"void* BR_GetMouseCursorContext_MIDI(bool* inlineEditorOut, int* noteRowOut, int* ccLaneOut, int* ccLaneValOut, int* ccLaneIdOut)"},"title":"BR_GetMouseCursorContext_MIDI","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Returns midi editor under mouse cursor that was captured with the last call to [BR\\_GetMouseCursorContext](#BR_GetMouseCursorContext).\n\ninlineEditor: if mouse was captured in inline MIDI editor, this will be true (consequentially, returned MIDI editor will be NULL)\nnoteRow: note row or piano key under mouse cursor (0-127)\nccLane: CC lane under mouse cursor (CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity, 0x208=notation events)\nccLaneVal: value in CC lane under mouse cursor (0-127 or 0-16383)\nccLaneId: lane position, counting from the top (0 based)\n\nNote: due to API limitations, if mouse is over inline MIDI editor with some note rows hidden, noteRow will be -1","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.BR_GetMouseCursorContext_Position","return_values":[{"identifier":"retval","type":"number"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"BR_GetMouseCursorContext_Position\""}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.BR_GetMouseCursorContext_Position()","eel":"double extension_api(\"BR_GetMouseCursorContext_Position\")","python":"Float retval = BR_GetMouseCursorContext_Position()","cpp":"double BR_GetMouseCursorContext_Position()"},"title":"BR_GetMouseCursorContext_Position","chapters":["User Interface","Arrangeview Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Returns project time position in arrange/ruler/midi editor that was captured with the last call to [BR\\_GetMouseCursorContext](#BR_GetMouseCursorContext).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.BR_GetMouseCursorContext_StretchMarker","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_GetMouseCursorContext_StretchMarker\""}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.BR_GetMouseCursorContext_StretchMarker()","eel":"int extension_api(\"BR_GetMouseCursorContext_StretchMarker\")","python":"Int retval = BR_GetMouseCursorContext_StretchMarker()","cpp":"int BR_GetMouseCursorContext_StretchMarker()"},"title":"BR_GetMouseCursorContext_StretchMarker","chapters":["Marker Management","Stretch Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Returns id of a stretch marker under mouse cursor that was captured with the last call to [BR\\_GetMouseCursorContext](#BR_GetMouseCursorContext).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.BR_GetMouseCursorContext_Take","return_values":[{"identifier":"take","type":"MediaItem_Take"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["MediaItem_Take"],"parameters":[{"identifier":"\"BR_GetMouseCursorContext_Take\""}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":"the found take under the mouse-cursor"}],"prog_lang":"*"},"functioncall":{"lua":"MediaItem_Take take = reaper.BR_GetMouseCursorContext_Take()","eel":"MediaItem_Take extension_api(\"BR_GetMouseCursorContext_Take\")","python":"MediaItem_Take take = BR_GetMouseCursorContext_Take()","cpp":"MediaItem_Take* BR_GetMouseCursorContext_Take()"},"title":"BR_GetMouseCursorContext_Take","chapters":["Mediaitem Take Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Returns take under mouse cursor that was captured with the last call to [BR\\_GetMouseCursorContext](#BR_GetMouseCursorContext).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.BR_GetMouseCursorContext_Track","return_values":[{"identifier":"tr","type":"MediaTrack"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["MediaTrack"],"parameters":[{"identifier":"\"BR_GetMouseCursorContext_Track\""}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack tr","description":"the track under the mouse-cursor"}],"prog_lang":"*"},"functioncall":{"lua":"MediaTrack tr = reaper.BR_GetMouseCursorContext_Track()","eel":"MediaTrack extension_api(\"BR_GetMouseCursorContext_Track\")","python":"MediaTrack tr = BR_GetMouseCursorContext_Track()","cpp":"MediaTrack* BR_GetMouseCursorContext_Track()"},"title":"BR_GetMouseCursorContext_Track","chapters":["Track Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Returns track under mouse cursor that was captured with the last call to [BR\\_GetMouseCursorContext](#BR_GetMouseCursorContext).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number position","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_GetNextGridDivision","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"position","type":"number"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"BR_GetNextGridDivision\""},{"identifier":"position"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.BR_GetNextGridDivision(number position)","eel":"double extension_api(\"BR_GetNextGridDivision\", position)","python":"Float retval = BR_GetNextGridDivision(Float position)","cpp":"double BR_GetNextGridDivision(double position)"},"title":"BR_GetNextGridDivision","chapters":["Api-Helper-Functions","Time/Grid Conversion/Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Get next grid division after the time position. For more grid divisions function, see [BR\\_GetClosestGridDivision](#BR_GetClosestGridDivision) and [BR\\_GetPrevGridDivision](#BR_GetPrevGridDivision).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number position","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_GetPrevGridDivision","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"position","type":"number"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"BR_GetPrevGridDivision\""},{"identifier":"position"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.BR_GetPrevGridDivision(number position)","eel":"double extension_api(\"BR_GetPrevGridDivision\", position)","python":"Float retval = BR_GetPrevGridDivision(Float position)","cpp":"double BR_GetPrevGridDivision(double position)"},"title":"BR_GetPrevGridDivision","chapters":["Api-Helper-Functions","Time/Grid Conversion/Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Get previous grid division before the time position. For more grid division functions, see [BR\\_GetClosestGridDivision](#BR_GetClosestGridDivision) and [BR\\_GetNextGridDivision](#BR_GetNextGridDivision).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"integer category","description":""},{"identifier":"integer sendidx","description":""},{"identifier":"string parmname","description":""},{"identifier":"boolean setNewValue","description":""},{"identifier":"number newValue","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_GetSetTrackSendInfo","return_values":[{"identifier":"value","type":"number"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"category","type":"integer"},{"identifier":"sendidx","type":"integer"},{"identifier":"parmname","type":"string"},{"identifier":"setNewValue","type":"boolean"},{"identifier":"newValue","type":"number"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"BR_GetSetTrackSendInfo\""},{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"category"},{"type_name":"int","identifier":"sendidx"},{"identifier":"\"parmname\""},{"type_name":"bool","identifier":"setNewValue"},{"identifier":"newValue"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number value","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number value = reaper.BR_GetSetTrackSendInfo(MediaTrack track, integer category, integer sendidx, string parmname, boolean setNewValue, number newValue)","eel":"double extension_api(\"BR_GetSetTrackSendInfo\", MediaTrack track, int category, int sendidx, \"parmname\", bool setNewValue, newValue)","python":"Float retval = BR_GetSetTrackSendInfo(MediaTrack track, Int category, Int sendidx, String parmname, Boolean setNewValue, Float newValue)","cpp":"double BR_GetSetTrackSendInfo(MediaTrack* track, int category, int sendidx, const char* parmname, bool setNewValue, double newValue)"},"title":"BR_GetSetTrackSendInfo","chapters":["Track Management","Routing"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[BR] Get or set send attributes.\n\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nsendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)\nTo set attribute, pass setNewValue as true\n\nList of possible parameters:\n\n   B_MUTE : send mute state (1.0 if muted, otherwise 0.0)\n   B_PHASE : send phase state (1.0 if phase is inverted, otherwise 0.0)\n   B_MONO : send mono state (1.0 if send is set to mono, otherwise 0.0)\n   D_VOL : send volume (1.0=+0dB etc...)\n   D_PAN : send pan (-1.0=100%L, 0=center, 1.0=100%R)\n   D_PANLAW : send pan law (1.0=+0.0db, 0.5=-6dB, -1.0=project default etc...)\n   I_SENDMODE : send mode (0=post-fader, 1=pre-fx, 2=post-fx(deprecated), 3=post-fx)\n   I_SRCCHAN : audio source starting channel index or -1 if audio send is disabled (&1024=mono...note that in that case, when reading index, you should do (index XOR 1024) to get starting channel index)\n   I_DSTCHAN : audio destination starting channel index (&1024=mono (and in case of hardware output &512=rearoute)...note that in that case, when reading index, you should do (index XOR (1024 OR 512)) to get starting channel index)\n   I_MIDI_SRCCHAN : source MIDI channel, -1 if MIDI send is disabled (0=all, 1-16)\n   I_MIDI_DSTCHAN : destination MIDI channel, -1 if MIDI send is disabled (0=original, 1-16)\n   I_MIDI_SRCBUS : source MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)\n   I_MIDI_DSTBUS : receive MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)\n   I_MIDI_LINK_VOLPAN : link volume/pan controls to MIDI\n\nNote: To get or set other send attributes, see [BR\\_GetMediaTrackSendInfo\\_Envelope](#BR_GetMediaTrackSendInfo_Envelope) and [BR\\_GetMediaTrackSendInfo\\_Track](#BR_GetMediaTrackSendInfo_Track).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_GetTakeFXCount","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_GetTakeFXCount\""},{"type_name":"MediaItem_Take","identifier":"take"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.BR_GetTakeFXCount(MediaItem_Take take)","eel":"int extension_api(\"BR_GetTakeFXCount\", MediaItem_Take take)","python":"Int retval = BR_GetTakeFXCount(MediaItem_Take take)","cpp":"int BR_GetTakeFXCount(MediaItem_Take* take)"},"title":"BR_GetTakeFXCount","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Returns FX count for supplied take","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_IsMidiOpenInInlineEditor","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"BR_IsMidiOpenInInlineEditor\""},{"type_name":"MediaItem_Take","identifier":"take"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.BR_IsMidiOpenInInlineEditor(MediaItem_Take take)","eel":"bool extension_api(\"BR_IsMidiOpenInInlineEditor\", MediaItem_Take take)","python":"Boolean retval = BR_IsMidiOpenInInlineEditor(MediaItem_Take take)","cpp":"bool BR_IsMidiOpenInInlineEditor(MediaItem_Take* take)"},"title":"BR_IsMidiOpenInInlineEditor","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[SWS] Check if take has MIDI inline editor open and returns true or false.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_IsTakeMidi","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"inProjectMidi","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"BR_IsTakeMidi\""},{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"bool","identifier":"&inProjectMidi"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"boolean inProjectMidi","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, boolean inProjectMidi = reaper.BR_IsTakeMidi(MediaItem_Take take)","eel":"bool extension_api(\"BR_IsTakeMidi\", MediaItem_Take take, bool &inProjectMidi)","python":"(Boolean retval, MediaItem_Take take, Boolean inProjectMidiOut) = BR_IsTakeMidi(take, inProjectMidiOut)","cpp":"bool BR_IsTakeMidi(MediaItem_Take* take, bool* inProjectMidiOut)"},"title":"BR_IsTakeMidi","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Check if take is MIDI take, in case MIDI take is in-project MIDI source data, inProjectMidiOut will be true, otherwise false.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.BR_ItemAtMouseCursor","return_values":[{"identifier":"item","type":"MediaItem"},{"identifier":"position","type":"number"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["MediaItem"],"parameters":[{"identifier":"\"BR_ItemAtMouseCursor\""},{"identifier":"&position"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem item","description":"the item at mouse-cursor"},{"identifier":"number position","description":"position at mouse-cursor"}],"prog_lang":"*"},"functioncall":{"lua":"MediaItem item, number position = reaper.BR_ItemAtMouseCursor()","eel":"MediaItem extension_api(\"BR_ItemAtMouseCursor\", &position)","python":"(MediaItem retval, Float positionOut) = BR_ItemAtMouseCursor(positionOut)","cpp":"MediaItem* BR_ItemAtMouseCursor(double* positionOut)"},"title":"BR_ItemAtMouseCursor","chapters":["Mediaitem Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Get media item under mouse cursor. Position is mouse cursor position in arrange.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier midiEditor","description":""},{"identifier":"integer laneId","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_MIDI_CCLaneRemove","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"midiEditor","type":"identifier"},{"identifier":"laneId","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"BR_MIDI_CCLaneRemove\""},{"type_name":"void*","identifier":"midiEditor"},{"type_name":"int","identifier":"laneId"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.BR_MIDI_CCLaneRemove(identifier midiEditor, integer laneId)","eel":"bool extension_api(\"BR_MIDI_CCLaneRemove\", void* midiEditor, int laneId)","python":"Boolean retval = BR_MIDI_CCLaneRemove(void midiEditor, Int laneId)","cpp":"bool BR_MIDI_CCLaneRemove(vpid* midiEditor, int laneId)"},"title":"BR_MIDI_CCLaneRemove","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Remove CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier midiEditor","description":""},{"identifier":"integer laneId","description":""},{"identifier":"integer newCC","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_MIDI_CCLaneReplace","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"midiEditor","type":"identifier"},{"identifier":"laneId","type":"integer"},{"identifier":"newCC","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"BR_MIDI_CCLaneReplace\""},{"type_name":"void*","identifier":"midiEditor"},{"type_name":"int","identifier":"laneId"},{"type_name":"int","identifier":"newCC"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.BR_MIDI_CCLaneReplace(identifier midiEditor, integer laneId, integer newCC)","eel":"bool extension_api(\"BR_MIDI_CCLaneReplace\", void* midiEditor, int laneId, int newCC)","python":"Boolean retval = BR_MIDI_CCLaneReplace(void midiEditor, Int laneId, Int newCC)","cpp":"bool BR_MIDI_CCLaneReplace(void* midiEditor, int laneId, int newCC)"},"title":"BR_MIDI_CCLaneReplace","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Replace CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success.\nValid CC lanes: CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean checkRuler","description":"true, include ruler/markerarea; false, donÄt include ruler/markerarea"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_PositionAtMouseCursor","return_values":[{"identifier":"position","type":"number"}],"parameters":[{"identifier":"checkRuler","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"BR_PositionAtMouseCursor\""},{"type_name":"bool","identifier":"checkRuler"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number position","description":"the position at mouse-cursor"}],"prog_lang":"*"},"functioncall":{"lua":"number position = reaper.BR_PositionAtMouseCursor(boolean checkRuler)","eel":"double extension_api(\"BR_PositionAtMouseCursor\", bool checkRuler)","python":"Float retval = BR_PositionAtMouseCursor(Boolean checkRuler)","cpp":"double BR_PositionAtMouseCursor(bool checkRuler)"},"title":"BR_PositionAtMouseCursor","chapters":["User Interface","Arrangeview Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Get position at mouse cursor. To check ruler along with arrange, pass checkRuler=true. Returns -1 if cursor is not over arrange/ruler.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","arrangeviewmanagement","set","starttime","endtime","arrangeview","seconds"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"number startTime","description":"the new starttime of the arrangewview in seconds"},{"identifier":"number endTime","description":"the new endtime of the arrangewview in seconds"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_SetArrangeView","return_values":[],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"startTime","type":"number"},{"identifier":"endTime","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"BR_SetArrangeView\""},{"type_name":"ReaProject","identifier":"proj"},{"identifier":"startTime"},{"identifier":"endTime"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.BR_SetArrangeView(ReaProject proj, number startTime, number endTime)","eel":"extension_api(\"BR_SetArrangeView\", ReaProject proj, startTime, endTime)","python":"BR_SetArrangeView(ReaProject proj, Float startTime, Float endTime)","cpp":"void BR_SetArrangeView(ReaProject* proj, double startTime, double endTime)"},"title":"BR_SetArrangeView","chapters":["User Interface","Arrangeview Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Deprecated, see [GetSet\\_ArrangeView2](#GetSet_ArrangeView2) (REAPER v5.12pre4+) -- Set start and end time position of arrange view. To get arrange view instead, see [BR\\_GetArrangeView](#BR_GetArrangeView).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem item","description":""},{"identifier":"number startTime","description":""},{"identifier":"number endTime","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_SetItemEdges","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"item","type":"MediaItem"},{"identifier":"startTime","type":"number"},{"identifier":"endTime","type":"number"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"BR_SetItemEdges\""},{"type_name":"MediaItem","identifier":"item"},{"identifier":"startTime"},{"identifier":"endTime"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.BR_SetItemEdges(MediaItem item, number startTime, number endTime)","eel":"bool extension_api(\"BR_SetItemEdges\", MediaItem item, startTime, endTime)","python":"Boolean retval = BR_SetItemEdges(MediaItem item, Float startTime, Float endTime)","cpp":"bool BR_SetItemEdges(MediaItem* item, double startTime, double endTime)"},"title":"BR_SetItemEdges","chapters":["Mediaitem Management","Item States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Set item start and end edges' position - returns true in case of any changes","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem item","description":""},{"identifier":"string imageIn","description":""},{"identifier":"integer imageFlags","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_SetMediaItemImageResource","return_values":[],"parameters":[{"identifier":"item","type":"MediaItem"},{"identifier":"imageIn","type":"string"},{"identifier":"imageFlags","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"BR_SetMediaItemImageResource\""},{"type_name":"MediaItem","identifier":"item"},{"identifier":"\"imageIn\""},{"type_name":"int","identifier":"imageFlags"}]}},"requires":{"Reaper":"5.974","SWS":"2.13.1.0"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.BR_SetMediaItemImageResource(MediaItem item, string imageIn, integer imageFlags)","eel":"extension_api(\"BR_SetMediaItemImageResource\", MediaItem item, \"imageIn\", int imageFlags)","python":"BR_SetMediaItemImageResource(MediaItem item, String imageIn, Int imageFlags)","cpp":"void BR_SetMediaItemImageResource(MediaItem* item, const char* imageIn, int imageFlags)"},"title":"BR_SetMediaItemImageResource","chapters":["Mediaitem Management","Item States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[BR] Set image resource and its flags for a given item. \n\nTo clear current image resource, pass imageIn as \"\".\n\nimageFlags: \n&1=0: don't display image, \n&1: center / tile, \n&3: stretch, \n&5: full height (REAPER 5.974+).\n\nCan also be used to display existing text in empty items unstretched (pass imageIn = \"\", imageFlags = 0) or stretched (pass imageIn = \"\". imageFlags = 3).\n\nTo get image resource, see BR_GetMediaItemImageResource","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"boolean section","description":""},{"identifier":"number start","description":""},{"identifier":"number length","description":""},{"identifier":"number fade","description":""},{"identifier":"boolean reverse","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_SetMediaSourceProperties","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"section","type":"boolean"},{"identifier":"start","type":"number"},{"identifier":"length","type":"number"},{"identifier":"fade","type":"number"},{"identifier":"reverse","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"BR_SetMediaSourceProperties\""},{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"bool","identifier":"section"},{"identifier":"start"},{"identifier":"length"},{"identifier":"fade"},{"type_name":"bool","identifier":"reverse"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.BR_SetMediaSourceProperties(MediaItem_Take take, boolean section, number start, number length, number fade, boolean reverse)","eel":"bool extension_api(\"BR_SetMediaSourceProperties\", MediaItem_Take take, bool section, start, length, fade, bool reverse)","python":"Boolean retval = BR_SetMediaSourceProperties(MediaItem_Take take, Boolean section, Float start, Float length, Float fade, Boolean reverse)","cpp":"bool BR_SetMediaSourceProperties(MediaItem_Take* take, bool section, double start, double length, double fade, bool reverse)"},"title":"BR_SetMediaSourceProperties","chapters":["Mediaitem Take Management","Take States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Set take media source properties. Returns false if take can't have them (MIDI items etc.). Section parameters have to be valid only when passing section=true.\nTo get source properties, see [BR\\_GetMediaSourceProperties](#BR_GetMediaSourceProperties).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"stirng mcpLayoutNameIn","description":""},{"identifier":"string tcpLayoutNameIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_SetMediaTrackLayouts","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"mcpLayoutNameIn","type":"string"},{"identifier":"tcpLayoutNameIn","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"BR_SetMediaTrackLayouts\""},{"type_name":"MediaTrack","identifier":"track"},{"identifier":"\"mcpLayoutNameIn\""},{"identifier":"\"tcpLayoutNameIn\""}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.BR_SetMediaTrackLayouts(MediaTrack track, string mcpLayoutNameIn, string tcpLayoutNameIn)","eel":"bool extension_api(\"BR_SetMediaTrackLayouts\", MediaTrack track, \"mcpLayoutNameIn\", \"tcpLayoutNameIn\")","python":"Boolean retval = BR_SetMediaTrackLayouts(MediaTrack track, String mcpLayoutNameIn, String tcpLayoutNameIn)","cpp":"bool BR_SetMediaTrackLayouts(MediaTrack* track, const char* mcpLayoutNameIn, const char* tcpLayoutNameIn)"},"title":"BR_SetMediaTrackLayouts","chapters":["Theme Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Deprecated, see [GetSetMediaTrackInfo](#GetSetMediaTrackInfo) (REAPER v5.02+). Set media track layouts for MCP and TCP. To set default layout, pass empty string (\"\") as layout name. In case layouts were successfully set, returns true (if layouts are already set to supplied layout names, it will return false since no changes were made).\nTo get media track layouts, see [BR\\_GetMediaTrackLayouts](#BR_GetMediaTrackLayouts).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"boolean ignoreProjTempo","description":""},{"identifier":"number bpm","description":""},{"identifier":"integer num","description":""},{"identifier":"integer den","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_SetMidiTakeTempoInfo","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"ignoreProjTempo","type":"boolean"},{"identifier":"bpm","type":"number"},{"identifier":"num","type":"integer"},{"identifier":"den","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"BR_SetMidiTakeTempoInfo\""},{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"bool","identifier":"ignoreProjTempo"},{"identifier":"bpm"},{"type_name":"int","identifier":"num"},{"type_name":"int","identifier":"den"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.BR_SetMidiTakeTempoInfo(MediaItem_Take take, boolean ignoreProjTempo, number bpm, integer num, integer den)","eel":"bool extension_api(\"BR_SetMidiTakeTempoInfo\", MediaItem_Take take, bool ignoreProjTempo, bpm, int num, int den)","python":"Boolean retval = BR_SetMidiTakeTempoInfo(MediaItem_Take take, Boolean ignoreProjTempo, Float bpm, Int num, Int den)","cpp":"bool BR_SetMidiTakeTempoInfo(MediaItem_Take* take, bool ignoreProjTempo, double bpm, int num, int den)"},"title":"BR_SetMidiTakeTempoInfo","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Set \"ignore project tempo\" information for MIDI take. Returns true in case the take was successfully updated.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"string filenameIn","description":""},{"identifier":"boolean inProjectData","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_SetTakeSourceFromFile","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"filenameIn","type":"string"},{"identifier":"inProjectData","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"BR_SetTakeSourceFromFile\""},{"type_name":"MediaItem_Take","identifier":"take"},{"identifier":"\"filenameIn\""},{"type_name":"bool","identifier":"inProjectData"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.BR_SetTakeSourceFromFile(MediaItem_Take take, string filenameIn, boolean inProjectData)","eel":"bool extension_api(\"BR_SetTakeSourceFromFile\", MediaItem_Take take, \"filenameIn\", bool inProjectData)","python":"Boolean retval = BR_SetTakeSourceFromFile(MediaItem_Take take, String filenameIn, Boolean inProjectData)","cpp":"bool BR_SetTakeSourceFromFile(MediaItem_Take* take, const char* filenameIn, bool inProjectData)"},"title":"BR_SetTakeSourceFromFile","chapters":["Mediaitem Take Management","Take States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Set new take source from file. To import MIDI file as in-project source data pass inProjectData=true. Returns false if failed.\nAny take source properties from the previous source will be lost - to preserve them, see [BR\\_SetTakeSourceFromFile2](#BR_SetTakeSourceFromFile2).\nNote: To set source from existing take, see [SNM\\_GetSetSourceState2](#SNM_GetSetSourceState2).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"string filenameIn","description":""},{"identifier":"boolean inProjectData","description":""},{"identifier":"boolean keepSourceProperties","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_SetTakeSourceFromFile2","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"filenameIn","type":"string"},{"identifier":"inProjectData","type":"boolean"},{"identifier":"keepSourceProperties","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"BR_SetTakeSourceFromFile2\""},{"type_name":"MediaItem_Take","identifier":"take"},{"identifier":"\"filenameIn\""},{"type_name":"bool","identifier":"inProjectData"},{"type_name":"bool","identifier":"keepSourceProperties"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.BR_SetTakeSourceFromFile2(MediaItem_Take take, string filenameIn, boolean inProjectData, boolean keepSourceProperties)","eel":"bool extension_api(\"BR_SetTakeSourceFromFile2\", MediaItem_Take take, \"filenameIn\", bool inProjectData, bool keepSourceProperties)","python":"Boolean retval = BR_SetTakeSourceFromFile2(MediaItem_Take take, String filenameIn, Boolean inProjectData, Boolean keepSourceProperties)","cpp":"bool BR_SetTakeSourceFromFile2(MediaItem_Take* take, const char* filenameIn, bool inProjectData, bool keepSourceProperties)"},"title":"BR_SetTakeSourceFromFile2","chapters":["Mediaitem Take Management","Take States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Differs from [BR\\_SetTakeSourceFromFile](#BR_SetTakeSourceFromFile) only that it can also preserve existing take media source properties.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.BR_TakeAtMouseCursor","return_values":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"position","type":"number"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["MediaItem_Take"],"parameters":[{"identifier":"\"BR_TakeAtMouseCursor\""},{"identifier":"&position"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":"the take under mouse-cursor"},{"identifier":"number position","description":"the position under mouse-cursor"}],"prog_lang":"*"},"functioncall":{"lua":"MediaItem_Take take, number position = reaper.BR_TakeAtMouseCursor()","eel":"MediaItem_Take extension_api(\"BR_TakeAtMouseCursor\", &position)","python":"(MediaItem_Take retval, Float positionOut) = BR_TakeAtMouseCursor(positionOut)","cpp":"MediaItem_Take* BR_TakeAtMouseCursor(double* positionOut)"},"title":"BR_TakeAtMouseCursor","chapters":["Mediaitem Take Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Get take under mouse cursor. Position is mouse cursor position in arrange.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.BR_TrackAtMouseCursor","return_values":[{"identifier":"retval","type":"MediaTrack"},{"identifier":"context","type":"integer"},{"identifier":"position","type":"number"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["MediaTrack"],"parameters":[{"identifier":"\"BR_TrackAtMouseCursor\""},{"type_name":"int","identifier":"&context"},{"identifier":"&position"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem retval","description":""},{"identifier":"integer context","description":""},{"identifier":"number position","description":""}],"prog_lang":"*"},"functioncall":{"lua":"MediaTrack retval, integer context, number position = reaper.BR_TrackAtMouseCursor()","eel":"MediaTrack extension_api(\"BR_TrackAtMouseCursor\", int &context, &position)","python":"(MediaTrack retval, Int contextOut, Float positionOut) = BR_TrackAtMouseCursor(contextOut, positionOut)","cpp":"MediaTrack* BR_TrackAtMouseCursor(int* contextOut, double* positionOut)"},"title":"BR_TrackAtMouseCursor","chapters":["Track Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Get track under mouse cursor.\nContext signifies where the track was found: 0 = TCP, 1 = MCP, 2 = Arrange.\nPosition will hold mouse cursor position in arrange if applicable.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":"the track, in which the fx is located, whose name you want to get"},{"identifier":"integer fx","description":"the index of the fx, whose name you want to get"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_TrackFX_GetFXModuleName","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"name","type":"string"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"fx","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"BR_TrackFX_GetFXModuleName\""},{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"fx"},{"identifier":"#name"}]}},"requires":{"Reaper":"5.62","SWS":"2.13.0.0"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, getting name was successful; false, getting name was unsuccesful"},{"identifier":"string name","description":"the name of the fx-module"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string name = reaper.BR_TrackFX_GetFXModuleName(MediaTrack track, integer fx)","eel":"bool extension_api(\"BR_TrackFX_GetFXModuleName\", MediaTrack track, int fx, #name)","python":"(Boolean retval, MediaTrack track, Int fx, String nameOut, Int nameOut_sz) = BR_TrackFX_GetFXModuleName(track, fx, nameOut, nameOut_sz)","cpp":"bool BR_TrackFX_GetFXModuleName(MediaTrack* track, int fx, char* nameOut, int nameOut_sz)"},"title":"BR_TrackFX_GetFXModuleName","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Deprecated, see TrackFX_GetNamedConfigParm/'fx_ident' (v6.37+). Get the exact name (like effect.dll, effect.vst3, etc...) of an FX.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","filemanagement","ini","get","value","section","key"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"string sectionName","description":"the [section] in which the key is stored, you'd like to get"},{"identifier":"string keyName","description":"the key from the [section], whose value you'd like to get"},{"identifier":"string defaultString","description":"a default value that will be returned, if the [section] and/or key does not exist in the ini-file yet."},{"identifier":"string filePath","description":"the path+filename, where the [section] and key are stored"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_GetPrivateProfileString","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"value","type":"string"}],"parameters":[{"identifier":"sectionName","type":"string"},{"identifier":"keyName","type":"string"},{"identifier":"defaultString","type":"string"},{"identifier":"filePath","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_Win32_GetPrivateProfileString\""},{"identifier":"\"sectionName\""},{"identifier":"\"keyName\""},{"identifier":"\"defaultString\""},{"identifier":"\"filePath\""},{"identifier":"#string"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":"number of characters of the value"},{"identifier":"string value","description":"the value of that key"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, string value = reaper.BR_Win32_GetPrivateProfileString(string sectionName, string keyName, string defaultString, string filePath)","eel":"int extension_api(\"BR_Win32_GetPrivateProfileString\", \"sectionName\", \"keyName\", \"defaultString\", \"filePath\", #string)","python":"(Int retval, String sectionName, String keyName, String defaultString, String filePath, String stringOut, Int stringOut_sz) = BR_Win32_GetPrivateProfileString(sectionName, keyName, defaultString, filePath, stringOut, stringOut_sz)","cpp":"int BR_Win32_GetPrivateProfileString(const char* sectionName, const char* keyName, const char* defaultString, const char* filePath, char* stringOut, int stringOut_sz)"},"title":"BR_Win32_GetPrivateProfileString","chapters":["File Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Equivalent to win32 API GetPrivateProfileString(). For example, you can use this to get values from REAPER.ini\n\nIf you have multiple sections in that file with the same name, only the first one will be used, the rest will be ignored by Reaper.\nIf you have multiple keys with the same name within a section, only the first one will be used, the rest will be ignored by Reaper.\nYou can get the paths using [GetExePath](#GetExePath) for the Reaper-application-folder, [GetResourcePath](#GetResourcePath) for the ressources-folder or get\\_ini\\_file for the path+filename of the Reaper.ini-file.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"string operation","description":""},{"identifier":"string file","description":""},{"identifier":"string parameters","description":""},{"identifier":"string directory","description":""},{"identifier":"integer showFlags","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_ShellExecute","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"operation","type":"string"},{"identifier":"file","type":"string"},{"identifier":"parameters","type":"string"},{"identifier":"directory","type":"string"},{"identifier":"showFlags","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_Win32_ShellExecute\""},{"identifier":"\"operation\""},{"identifier":"\"file\""},{"identifier":"\"parameters\""},{"identifier":"\"directory\""},{"type_name":"int","identifier":"showFlags"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.BR_Win32_ShellExecute(string operation, string file, string parameters, string directory, integer showFlags)","eel":"int extension_api(\"BR_Win32_ShellExecute\", \"operation\", \"file\", \"parameters\", \"directory\", int showFlags)","python":"Int retval = BR_Win32_ShellExecute(String operation, String file, String parameters, String directory, Int showFlags)","cpp":"int BR_Win32_ShellExecute(const char* operation, const char* file, const char* parameters, const char* directory, int showFlags)"},"title":"BR_Win32_ShellExecute","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API ShellExecute() with HWND set to main window","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["filemanagement","ini","write","value","section","key"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"string sectionName","description":"the [section] in which the key is stored, you'd like to set"},{"identifier":"string keyName","description":"the key from the [section], whose value you'd like to set"},{"identifier":"string value","description":"the value you want to have set to the key"},{"identifier":"stirng filePath","description":"the path+filename, where the [section] and key are going to be stored"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_WritePrivateProfileString","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"sectionName","type":"string"},{"identifier":"keyName","type":"string"},{"identifier":"value","type":"string"},{"identifier":"filePath","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"BR_Win32_WritePrivateProfileString\""},{"identifier":"\"sectionName\""},{"identifier":"\"keyName\""},{"identifier":"\"value\""},{"identifier":"\"filePath\""}]}},"requires":{"Reaper":"5.62","SWS":"2.13.0.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, if it worked; false, if not"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.BR_Win32_WritePrivateProfileString(string sectionName, string keyName, string value, string filePath)","eel":"bool extension_api(\"BR_Win32_WritePrivateProfileString\", \"sectionName\", \"keyName\", \"value\", \"filePath\")","python":"Boolean retval = BR_Win32_WritePrivateProfileString(String sectionName, String keyName, String value, String filePath)","cpp":"bool BR_Win32_WritePrivateProfileString(const char* sectionName, const char* keyName, const char* value, const char* filePath)"},"title":"BR_Win32_WritePrivateProfileString","chapters":["File Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Equivalent to win32 API WritePrivateProfileString(). For example, you can use this to write to REAPER.ini\n\nIf you have multiple sections in that file with the same name, only the first one will be used, the rest will be ignored by Reaper.\nIf you have multiple keys with the same name within a section, only the first one will be used, the rest will be ignored by Reaper.\nYou can get the paths using [GetExePath](#GetExePath) for the Reaper-application-folder, [GetResourcePath](#GetResourcePath) for the ressources-folder or [get\\_ini\\_file](#get_ini_file) for the path+filename of the Reaper.ini-file.\n\nYou can pass an empty string as value to delete a key.\n\nImportant: Don't use \\n in parameter value, or the reread-value might be incomplete!","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number time","description":""},{"identifier":"number quantum","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Blink_GetBeatAtTime","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"time","type":"number"},{"identifier":"quantum","type":"number"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"Blink_GetBeatAtTime\""},{"identifier":"time"},{"identifier":"quantum"}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.Blink_GetBeatAtTime(number time, number quantum)","eel":"double extension_api(\"Blink_GetBeatAtTime\", time, quantum)","python":"Double retval = Blink_GetBeatAtTime(double time, double quantum)","cpp":"double Blink_GetBeatAtTime(double time, double quantum)"},"title":"Blink_GetBeatAtTime(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get session beat value corresponding to given time for given quantum.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.Blink_GetClockNow","return_values":[{"identifier":"retval","type":"number"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"Blink_GetClockNow\""}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.Blink_GetClockNow()","eel":"double extension_api(\"Blink_GetClockNow\")","python":"Double retval = Blink_GetClockNow()","cpp":"double Blink_GetClockNow()"},"title":"Blink_GetClockNow(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Clock used by Blink.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.Blink_GetEnabled","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"Blink_GetEnabled\""}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.Blink_GetEnabled()","eel":"bool extension_api(\"Blink_GetEnabled\")","python":"Boolean retval = Blink_GetEnabled()","cpp":"bool Blink_GetEnabled()"},"title":"Blink_GetEnabled(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Is Blink currently enabled?","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.Blink_GetMaster","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"Blink_GetMaster\""}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.Blink_GetMaster()","eel":"bool extension_api(\"Blink_GetMaster\")","python":"Boolean retval = Blink_GetMaster()","cpp":"bool Blink_GetMaster()"},"title":"Blink_GetMaster(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Is Blink Master?","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.Blink_GetNumPeers","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"Blink_GetNumPeers\""}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.Blink_GetNumPeers()","eel":"int extension_api(\"Blink_GetNumPeers\")","python":"Int retval = Blink_GetNumPeers()","cpp":"int Blink_GetNumPeers()"},"title":"Blink_GetNumPeers(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"How many peers are currently connected in Link session?","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number time","description":""},{"identifier":"number quantum","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Blink_GetPhaseAtTime","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"time","type":"number"},{"identifier":"quantum","type":"number"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"Blink_GetPhaseAtTime\""},{"identifier":"time"},{"identifier":"quantum"}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.Blink_GetPhaseAtTime(number time, number quantum)","eel":"double extension_api(\"Blink_GetPhaseAtTime\", time, quantum)","python":"Double retval = Blink_GetPhaseAtTime(double time, double quantum)","cpp":"double Blink_GetPhaseAtTime(double time, double quantum)"},"title":"Blink_GetPhaseAtTime(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get session phase at given time for given quantum.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.Blink_GetPlaying","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"Blink_GetPlaying\""}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.Blink_GetPlaying()","eel":"bool extension_api(\"Blink_GetPlaying\")","python":"Boolean retval = Blink_GetPlaying()","cpp":"bool Blink_GetPlaying()"},"title":"Blink_GetPlaying(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Is transport playing?","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.Blink_GetPuppet","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"Blink_GetPuppet\""}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.Blink_GetPuppet()","eel":"bool extension_api(\"Blink_GetPuppet\")","python":"Boolean retval = Blink_GetPuppet()","cpp":"bool Blink_GetPuppet()"},"title":"Blink_GetPuppet(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Is Blink Puppet?","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.Blink_GetQuantum","return_values":[{"identifier":"retval","type":"number"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"Blink_GetQuantum\""}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.Blink_GetQuantum()","eel":"double extension_api(\"Blink_GetQuantum\")","python":"Double retval = Blink_GetQuantum()","cpp":"double Blink_GetQuantum()"},"title":"Blink_GetQuantum(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get quantum.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.Blink_GetStartStopSyncEnabled","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"Blink_GetStartStopSyncEnabled\""}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.Blink_GetStartStopSyncEnabled()","eel":"bool extension_api(\"Blink_GetStartStopSyncEnabled\")","python":"Boolean retval = Blink_GetStartStopSyncEnabled()","cpp":"bool Blink_GetStartStopSyncEnabled()"},"title":"Blink_GetStartStopSyncEnabled(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Is start/stop synchronization enabled?","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.Blink_GetTempo","return_values":[{"identifier":"retval","type":"number"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"Blink_GetTempo\""}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.Blink_GetTempo()","eel":"double extension_api(\"Blink_GetTempo\")","python":"Double retval = Blink_GetTempo()","cpp":"double Blink_GetTempo()"},"title":"Blink_GetTempo(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Tempo of timeline, in quarter note Beats Per Minute.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number beat","description":""},{"identifier":"number quantum","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Blink_GetTimeAtBeat","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"beat","type":"number"},{"identifier":"quantum","type":"number"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"Blink_GetTimeAtBeat\""},{"identifier":"beat"},{"identifier":"quantum"}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.Blink_GetTimeAtBeat(number beat, number quantum)","eel":"double extension_api(\"Blink_GetTimeAtBeat\", beat, quantum)","python":"Double retval = Blink_GetTimeAtBeat(double beat, double quantum)","cpp":"double Blink_GetTimeAtBeat(double beat, double quantum)"},"title":"Blink_GetTimeAtBeat(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get time at which given beat occurs for given quantum.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.Blink_GetTimeForPlaying","return_values":[{"identifier":"retval","type":"number"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"Blink_GetTimeForPlaying\""}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.Blink_GetTimeForPlaying()","eel":"double extension_api(\"Blink_GetTimeForPlaying\")","python":"Double retval = Blink_GetTimeForPlaying()","cpp":"double Blink_GetTimeForPlaying()"},"title":"Blink_GetTimeForPlaying(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get time at which transport start/stop occurs.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.Blink_GetVersion","return_values":[{"identifier":"retval","type":"number"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"Blink_GetVersion\""}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.Blink_GetVersion()","eel":"double extension_api(\"Blink_GetVersion\")","python":"Double retval = Blink_GetVersion()","cpp":"double Blink_GetVersion()"},"title":"Blink_GetVersion(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get Blink version.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number beat","description":""},{"identifier":"number quantum","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Blink_SetBeatAtStartPlayingTimeRequest","return_values":[],"parameters":[{"identifier":"beat","type":"number"},{"identifier":"quantum","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"Blink_SetBeatAtStartPlayingTimeRequest\""},{"identifier":"beat"},{"identifier":"quantum"}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Blink_SetBeatAtStartPlayingTimeRequest(number beat, number quantum)","eel":"extension_api(\"Blink_SetBeatAtStartPlayingTimeRequest\", beat, quantum)","python":"Blink_SetBeatAtStartPlayingTimeRequest(double beat, double quantum)","cpp":"void Blink_SetBeatAtStartPlayingTimeRequest(double beat, double quantum)"},"title":"Blink_SetBeatAtStartPlayingTimeRequest(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Convenience function to attempt to map given beat to time when transport is starting to play in context of given quantum. This function evaluates to a no-op if GetPlaying() equals false.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"number bpm","description":""},{"identifier":"number time","description":""},{"identifier":"number quantum","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Blink_SetBeatAtTimeForce","return_values":[],"parameters":[{"identifier":"bpm","type":"number"},{"identifier":"time","type":"number"},{"identifier":"quantum","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"Blink_SetBeatAtTimeForce\""},{"identifier":"bpm"},{"identifier":"time"},{"identifier":"quantum"}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Blink_SetBeatAtTimeForce(number bpm, number time, number quantum)","eel":"extension_api(\"Blink_SetBeatAtTimeForce\", bpm, time, quantum)","python":"Blink_SetBeatAtTimeForce(double bpm, double time, double quantum)","cpp":"void Blink_SetBeatAtTimeForce(double bpm, double time, double quantum)"},"title":"Blink_SetBeatAtTimeForce(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Rudely re-map beat/time relationship for all peers in Link session.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"number bpm","description":""},{"identifier":"number time","description":""},{"identifier":"number quantum","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Blink_SetBeatAtTimeRequest","return_values":[],"parameters":[{"identifier":"bpm","type":"number"},{"identifier":"time","type":"number"},{"identifier":"quantum","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"Blink_SetBeatAtTimeRequest\""},{"identifier":"bpm"},{"identifier":"time"},{"identifier":"quantum"}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Blink_SetBeatAtTimeRequest(number bpm, number time, number quantum)","eel":"extension_api(\"Blink_SetBeatAtTimeRequest\", bpm, time, quantum)","python":"Blink_SetBeatAtTimeRequest(double bpm, double time, double quantum)","cpp":"void Blink_SetBeatAtTimeRequest(double bpm, double time, double quantum)"},"title":"Blink_SetBeatAtTimeRequest(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Attempt to map given beat to given time in context of given quantum.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean enable","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Blink_SetCaptureTransportCommands","return_values":[],"parameters":[{"identifier":"enable","type":"boolean"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"Blink_SetCaptureTransportCommands\""},{"type_name":"bool","identifier":"enable"}]}},"requires":{"ReaBlink":"0.4.4","Reaper":"6.23"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Blink_SetCaptureTransportCommands(boolean enable)","eel":"extension_api(\"Blink_SetCaptureTransportCommands\", bool enable)","python":"Blink_SetCaptureTransportCommands(bool enable)","cpp":"void Blink_SetCaptureTransportCommands(bool enable)"},"title":"Blink_SetCaptureTransportCommands(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Captures REAPER Transport commands and 'Tempo: Increase/Decrease current project tempo by 01 BPM' commands and broadcasts them into Link session. When used with Master or Puppet mode enabled, provides better integration between REAPER and Link session transport and tempos.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean enable","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Blink_SetEnabled","return_values":[],"parameters":[{"identifier":"enable","type":"boolean"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"Blink_SetEnabled\""},{"type_name":"bool","identifier":"enable"}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Blink_SetEnabled(boolean enable)","eel":"extension_api(\"Blink_SetEnabled\", bool enable)","python":"Blink_SetEnabled(bool enable)","cpp":"void Blink_SetEnabled(bool enable)"},"title":"Blink_SetEnabled(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Enable/disable Blink. In Blink methods transport, tempo and timeline refer to Link session, not local REAPER instance.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean enable","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Blink_SetMaster","return_values":[],"parameters":[{"identifier":"enable","type":"boolean"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"Blink_SetMaster\""},{"type_name":"bool","identifier":"enable"}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Blink_SetMaster(boolean enable)","eel":"extension_api(\"Blink_SetMaster\", bool enable)","python":"Blink_SetMaster(bool enable)","cpp":"void Blink_SetMaster(bool enable)"},"title":"Blink_SetMaster(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set Blink as Master. Puppet needs to be enabled first. Same as Puppet, but possible beat offset is broadcast to Link session, effectively forcing local REAPER timeline on peers. Only one, if any, Blink should be Master in Link session.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean playing","description":""},{"identifier":"number time","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Blink_SetPlaying","return_values":[],"parameters":[{"identifier":"playing","type":"boolean"},{"identifier":"time","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"Blink_SetPlaying\""},{"type_name":"bool","identifier":"playing"},{"identifier":"time"}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Blink_SetPlaying(boolean playing, number time)","eel":"extension_api(\"Blink_SetPlaying\", bool playing, time)","python":"Blink_SetPlaying(bool playing, double time)","cpp":"void Blink_SetPlaying(bool playing, double time)"},"title":"Blink_SetPlaying(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set if transport should be playing or stopped, taking effect at given time.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"boolean playing","description":""},{"identifier":"number time","description":""},{"identifier":"number beat","description":""},{"identifier":"number quantum","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Blink_SetPlayingAndBeatAtTimeRequest","return_values":[],"parameters":[{"identifier":"playing","type":"boolean"},{"identifier":"time","type":"number"},{"identifier":"beat","type":"number"},{"identifier":"quantum","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"Blink_SetPlayingAndBeatAtTimeRequest\""},{"type_name":"bool","identifier":"playing"},{"identifier":"time"},{"identifier":"beat"},{"identifier":"quantum"}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Blink_SetPlayingAndBeatAtTimeRequest(boolean playing, number time, number beat, number quantum)","eel":"extension_api(\"Blink_SetPlayingAndBeatAtTimeRequest\", bool playing, time, beat, quantum)","python":"Blink_SetPlayingAndBeatAtTimeRequest(bool playing, double time, double beat, double quantum)","cpp":"void Blink_SetPlayingAndBeatAtTimeRequest(bool playing, double time, double beat, double quantum)"},"title":"Blink_SetPlayingAndBeatAtTimeRequest(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Convenience function to start or stop transport at given time and attempt to map given beat to this time in context of given quantum.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean enable","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Blink_SetPuppet","return_values":[],"parameters":[{"identifier":"enable","type":"boolean"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"Blink_SetPuppet\""},{"type_name":"bool","identifier":"enable"}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Blink_SetPuppet(boolean enable)","eel":"extension_api(\"Blink_SetPuppet\", bool enable)","python":"Blink_SetPuppet(bool enable)","cpp":"void Blink_SetPuppet(bool enable)"},"title":"Blink_SetPuppet(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set Blink as Puppet. When enabled, Blink attempts to synchronize local REAPER tempo to Link session tempo by adjusting current active tempo/time signature marker, or broadcasts local REAPER tempo changes into Link session, and attempts to correct possible offset by adjusting REAPER playrate. Based on cumulative single beat phase since Link session transport start, regardless of quantum.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number quantum","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Blink_SetQuantum","return_values":[],"parameters":[{"identifier":"quantum","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"Blink_SetQuantum\""},{"identifier":"quantum"}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Blink_SetQuantum(number quantum)","eel":"extension_api(\"Blink_SetQuantum\", quantum)","python":"Blink_SetQuantum(double quantum)","cpp":"void Blink_SetQuantum(double quantum)"},"title":"Blink_SetQuantum(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set quantum. Usually this is set to length of one measure/bar in quarter notes.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean enable","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Blink_SetStartStopSyncEnabled","return_values":[],"parameters":[{"identifier":"enable","type":"boolean"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"Blink_SetStartStopSyncEnabled\""},{"type_name":"bool","identifier":"enable"}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Blink_SetStartStopSyncEnabled(boolean enable)","eel":"extension_api(\"Blink_SetStartStopSyncEnabled\", bool enable)","python":"Blink_SetStartStopSyncEnabled(bool enable)","cpp":"void Blink_SetStartStopSyncEnabled(bool enable)"},"title":"Blink_SetStartStopSyncEnabled(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Enable start/stop synchronization.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number bpm","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Blink_SetTempo","return_values":[],"parameters":[{"identifier":"bpm","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"Blink_SetTempo\""},{"identifier":"bpm"}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Blink_SetTempo(number bpm)","eel":"extension_api(\"Blink_SetTempo\", bpm)","python":"Blink_SetTempo(double bpm)","cpp":"void Blink_SetTempo(double bpm)"},"title":"Blink_SetTempo(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set timeline tempo to given bpm value.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number bpm","description":""},{"identifier":"number time","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Blink_SetTempoAtTime","return_values":[],"parameters":[{"identifier":"bpm","type":"number"},{"identifier":"time","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"Blink_SetTempoAtTime\""},{"identifier":"bpm"},{"identifier":"time"}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Blink_SetTempoAtTime(number bpm, number time)","eel":"extension_api(\"Blink_SetTempoAtTime\", bpm, time)","python":"Blink_SetTempoAtTime(double bpm, double time)","cpp":"void Blink_SetTempoAtTime(double bpm, double time)"},"title":"Blink_SetTempoAtTime(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set tempo to given bpm value, taking effect at given time.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reablink","ableton live"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.Blink_StartStop","return_values":[],"parameters":[]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"Blink_StartStop\""}]}},"requires":{"ReaBlink":"0.4.0","Reaper":"6.23"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Blink_StartStop()","eel":"extension_api(\"Blink_StartStop\")","python":"Blink_StartStop()","cpp":"void Blink_StartStop()"},"title":"Blink_StartStop(Blink)","chapters":["ReaBlink"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Transport start/stop.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer index","description":"the index of the SWS-custom-color"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_GetCustomColor","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"index","type":"integer"}]},"eel":{"method_name":"retval","return_values":["int"],"parameters":[{"type_name":"int","identifier":"index"}]}},"requires":{"Reaper":"6.20","SWS":"2.13.1.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the color-value of the chosen custom-color"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.CF_GetCustomColor(integer index)","eel":"int retval = CF_GetCustomColor(int index)","python":"Int retval = CF_GetCustomColor(Int index)","cpp":"int retval = CF_GetCustomColor(int index)"},"title":"CF_GetCustomColor","chapters":["SWS","Miscellaneous"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get one of 16 SWS custom colors (0xBBGGRR on Windows, 0xRRGGBB everyhwere else). Index is zero-based.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer index","description":"the index of the SWS-color to set"},{"identifier":"integer color","description":"the new color-value for this SWS-custom-color"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_SetCustomColor","return_values":[],"parameters":[{"identifier":"index","type":"integer"},{"identifier":"color","type":"integer"}]},"eel":{"return_values":["CF_SetCustomColor"],"parameters":[{"type_name":"int","identifier":"index"},{"type_name":"int","identifier":"color"}]}},"requires":{"Reaper":"6.20","SWS":"2.13.1.0"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CF_SetCustomColor(integer index, integer color)","eel":"CF_SetCustomColor(int index, int color)","python":"CF_SetCustomColor(Int index, Int color)","cpp":"void retval = CF_SetCustomColor(int index, int color)"},"title":"CF_SetCustomColor","chapters":["SWS","Miscellaneous"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set one of 16 SWS custom colors (0xBBGGRR on Windows, 0xRRGGBB everyhwere else). Index is zero-based. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem item","description":"the item, whose take you want to remove"},{"identifier":"integer takeIdx","description":"the take of the item, that you want to remove"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.NF_DeleteTakeFromItem","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"item","type":"MediaItem"},{"identifier":"takeIdx","type":"integer"}]},"eel":{"method_name":"retval","return_values":["bool"],"parameters":[{"type_name":"MediaItem","identifier":"item"},{"type_name":"int","identifier":"takeIdx"}]}},"requires":{"Reaper":"6.20","SWS":"2.13.1.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, deleting was successful; false, deleting was unsuccessful"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.NF_DeleteTakeFromItem(MediaItem item, integer takeIdx)","eel":"bool retval = NF_DeleteTakeFromItem(MediaItem item, int takeIdx)","python":"Boolean retval = NF_DeleteTakeFromItem(MediaItem item, Int takeIdx)","cpp":"bool retval = NF_DeleteTakeFromItem(MediaItem* item, int takeIdx)"},"title":"NF_DeleteTakeFromItem","chapters":["Mediaitem Take Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Deletes a take from an item. takeIdx is zero-based. Returns true on success.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","helperfunctions","clipboard","get"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.CF_GetClipboard","return_values":[{"identifier":"text","type":"string"}],"parameters":[]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"CF_GetClipboard\""},{"identifier":"#text"}]}},"requires":{"Reaper":"5.979","SWS":"2.12.1.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string text","description":"the content of the clipboard"}],"prog_lang":"*"},"functioncall":{"lua":"string text = reaper.CF_GetClipboard()","eel":"extension_api(\"CF_GetClipboard\", #text)","python":"(String textOutNeedBig, Int textOutNeedBig_sz) = CF_GetClipboard(textOutNeedBig, textOutNeedBig_sz)","cpp":"void CF_GetClipboard(char* textOutNeedBig, int textOutNeedBig_sz)"},"title":"CF_GetClipboard","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Read the contents of the system clipboard.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","helperfunctions","clipboard","get","faststring","big"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"WDL_FastString output","description":"a faststring used by this "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_GetClipboardBig","return_values":[{"identifier":"clipboard_content","type":"string"}],"parameters":[{"identifier":"output","type":"WDL_FastString"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"CF_GetClipboardBig\""},{"identifier":"#retval"},{"type_name":"WDL_FastString","identifier":"output"}]}},"requires":{"Reaper":"5.62","SWS":"2.11.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string clipboard_content","description":"the content of the clipboard"}],"prog_lang":"*"},"functioncall":{"lua":"string clipboard_content = reaper.CF_GetClipboardBig(WDL_FastString output)","eel":"bool extension_api(\"CF_GetClipboardBig\", #retval, WDL_FastString output)","python":"String retval = CF_GetClipboardBig(WDL_FastString output)","cpp":"const char* CF_GetClipboardBig(WDL_FastString* output)"},"title":"CF_GetClipboardBig","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"\\[DEPRECATED: Use [CF\\_GetClipboard](#CF_GetClipboard)\\] Read the contents of the system clipboard. See [SNM\\_CreateFastString](#SNM_CreateFastString) and [SNM\\_DeleteFastString](#SNM_DeleteFastString).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","helperfunctions","clipboard","put","set"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string str","description":"the string to put into the clipboard"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_SetClipboard","return_values":[],"parameters":[{"identifier":"str","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"CF_SetClipboard\""},{"identifier":"\"str\""}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CF_SetClipboard(string str)","eel":"extension_api(\"CF_SetClipboard\", \"str\")","python":"CF_SetClipboard(String str)","cpp":"void CF_SetClipboard(const char* str)"},"title":"CF_SetClipboard","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Write the given string into the system clipboard.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"RprMidiTake midiTake","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.FNG_AddMidiNote","return_values":[{"identifier":"note","type":"RprMidiNote"}],"parameters":[{"identifier":"midiTake","type":"RprMidiTake"}]},"eel":{"method_name":"extension_api","return_values":["RprMidiNote"],"parameters":[{"identifier":"\"FNG_AddMidiNote\""},{"type_name":"RprMidiTake","identifier":"midiTake"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"RprMidiNote note","description":""}],"prog_lang":"*"},"functioncall":{"lua":"RprMidiNote note = reaper.FNG_AddMidiNote(RprMidiTake midiTake)","eel":"RprMidiNote extension_api(\"FNG_AddMidiNote\", RprMidiTake midiTake)","python":"RprMidiNote note = FNG_AddMidiNote(RprMidiTake midiTake)","cpp":"RprMidiNote* FNG_AddMidiNote(RprMidiTake* midiTake)"},"title":"FNG_AddMidiNote","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[FNG]Add MIDI note to MIDI take","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.FNG_AllocMidiTake","return_values":[{"identifier":"rpr_take","type":"RprMidiTake"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"method_name":"extension_api","return_values":["RprMidiTake"],"parameters":[{"identifier":"\"FNG_AllocMidiTake\""},{"type_name":"MediaItem_Take","identifier":"take"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"RprMidiTake rpr_take","description":""}],"prog_lang":"*"},"functioncall":{"lua":"RprMidiTake rpr_take = reaper.FNG_AllocMidiTake(MediaItem_Take take)","eel":"RprMidiTake extension_api(\"FNG_AllocMidiTake\", MediaItem_Take take)","python":"RprMidiTake rpr_take = FNG_AllocMidiTake(MediaItem_Take take)","cpp":"RprMidiTake* FNG_AllocMidiTake(MediaItem_Take* take)"},"title":"FNG_AllocMidiTake","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[FNG]Allocate a RprMidiTake from a take pointer. Returns a NULL pointer if the take is not an in-project MIDI take","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"RprMidiTake midiTake","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.FNG_CountMidiNotes","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"midiTake","type":"RprMidiTake"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"FNG_CountMidiNotes\""},{"type_name":"RprMidiTake","identifier":"midiTake"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.FNG_CountMidiNotes(RprMidiTake midiTake)","eel":"int extension_api(\"FNG_CountMidiNotes\", RprMidiTake midiTake)","python":"Int retval = FNG_CountMidiNotes(RprMidiTake midiTake)","cpp":"int FNG_CountMidiNotes(RprMidiTake* midiTake)"},"title":"FNG_CountMidiNotes","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[FNG]Count of how many MIDI notes are in the MIDI take","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"RprMidiTake midiTake","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.FNG_FreeMidiTake","return_values":[],"parameters":[{"identifier":"midiTake","type":"RprMidiTake"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"FNG_FreeMidiTake\""},{"type_name":"RprMidiTake","identifier":"midiTake"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.FNG_FreeMidiTake(RprMidiTake midiTake)","eel":"extension_api(\"FNG_FreeMidiTake\", RprMidiTake midiTake)","python":"FNG_FreeMidiTake(RprMidiTake midiTake)","cpp":"void FNG_FreeMidiTake(RprMidiTake* midiTake)"},"title":"FNG_FreeMidiTake","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[FNG]Commit changes to MIDI take and free allocated memory","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"RprMidiTake midiTake","description":""},{"identifier":"integer index","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.FNG_GetMidiNote","return_values":[{"identifier":"note","type":"RprMidiNote"}],"parameters":[{"identifier":"midiTake","type":"RprMidiTake"},{"identifier":"index","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["RprMidiNote"],"parameters":[{"identifier":"\"FNG_GetMidiNote\""},{"type_name":"RprMidiTake","identifier":"midiTake"},{"type_name":"int","identifier":"index"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"RprMidiNote note","description":""}],"prog_lang":"*"},"functioncall":{"lua":"RprMidiNote note = reaper.FNG_GetMidiNote(RprMidiTake midiTake, integer index)","eel":"RprMidiNote extension_api(\"FNG_GetMidiNote\", RprMidiTake midiTake, int index)","python":"RprMidiNote note = FNG_GetMidiNote(RprMidiTake midiTake, Int index)","cpp":"RprMidiNote* FNG_GetMidiNote(RprMidiTake* midiTake, int index)"},"title":"FNG_GetMidiNote","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[FNG]Get a MIDI note from a MIDI take at specified index","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"RprMidiNote midiNote","description":""},{"identifier":"string property","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.FNG_GetMidiNoteIntProperty","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"midiNote","type":"RprMidiNote"},{"identifier":"property","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"FNG_GetMidiNoteIntProperty\""},{"type_name":"RprMidiNote","identifier":"midiNote"},{"identifier":"\"property\""}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.FNG_GetMidiNoteIntProperty(RprMidiNote midiNote, string property)","eel":"int extension_api(\"FNG_GetMidiNoteIntProperty\", RprMidiNote midiNote, \"property\")","python":"Int retval = FNG_GetMidiNoteIntProperty(RprMidiNote midiNote, String property)","cpp":"int FNG_GetMidiNoteIntProperty(RprMidiNote* midiNote, const char* property)"},"title":"FNG_GetMidiNoteIntProperty","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[FNG]Get MIDI note property","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"RprMidiNote midiNote","description":""},{"identifier":"string property","description":""},{"identifier":"integer value","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.FNG_SetMidiNoteIntProperty","return_values":[],"parameters":[{"identifier":"midiNote","type":"RprMidiNote"},{"identifier":"property","type":"string"},{"identifier":"value","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"FNG_SetMidiNoteIntProperty\""},{"type_name":"RprMidiNote","identifier":"midiNote"},{"identifier":"\"property\""},{"type_name":"int","identifier":"value"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.FNG_SetMidiNoteIntProperty(RprMidiNote midiNote, string property, integer value)","eel":"extension_api(\"FNG_SetMidiNoteIntProperty\", RprMidiNote midiNote, \"property\", int value)","python":"FNG_SetMidiNoteIntProperty(RprMidiNote midiNote, String property, Int value)","cpp":"void FNG_SetMidiNoteIntProperty(RprMidiNote* midiNote, const char* property, int value)"},"title":"FNG_SetMidiNoteIntProperty","chapters":["MIDI Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[FNG]Set MIDI note property","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"boolean analyzeTruePeak","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.NF_AnalyzeTakeLoudness","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"lufsIntegrated","type":"number"},{"identifier":"range","type":"number"},{"identifier":"truePeak","type":"number"},{"identifier":"truePeakPos","type":"number"},{"identifier":"shortTermMax","type":"number"},{"identifier":"momentaryMax","type":"number"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"analyzeTruePeak","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"NF_AnalyzeTakeLoudness\""},{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"bool","identifier":"analyzeTruePeak"},{"identifier":"&lufsIntegrated"},{"identifier":"&range"},{"type_name":"&","identifier":"truePeak"},{"identifier":"&truePeakPos"},{"identifier":"&shortTermMax"},{"identifier":"&momentaryMax"}]}},"requires":{"Reaper":"5.62","SWS":"2.13.1.0"},"return_values":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number lufsIntegrated","description":""},{"identifier":"number range","description":""},{"identifier":"number truePeak","description":""},{"identifier":"number truePeakPos","description":""},{"identifier":"number shortTermMax","description":""},{"identifier":"number momentaryMax","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number lufsIntegrated, number range, number truePeak, number truePeakPos, number shortTermMax, number momentaryMax = reaper.NF_AnalyzeTakeLoudness(MediaItem_Take take, boolean analyzeTruePeak)","eel":"bool extension_api(\"NF_AnalyzeTakeLoudness\", MediaItem_Take take, bool analyzeTruePeak, &lufsIntegrated, &range, & truePeak, &truePeakPos, &shortTermMax, &momentaryMax)","python":"(Boolean retval, MediaItem_Take take, Boolean analyzeTruePeak, Float lufsIntegratedOut, Float rangeOut, Float truePeakOut, Float truePeakPosOut, Float shortTermMaxOut, Float momentaryMaxOut) = NF_AnalyzeTakeLoudness(take, analyzeTruePeak, lufsIntegratedOut, rangeOut, truePeakOut, truePeakPosOut, shortTermMaxOut, momentaryMaxOut)","cpp":"bool NF_AnalyzeTakeLoudness(MediaItem_Take* take, bool analyzeTruePeak, double* lufsIntegratedOut, double* rangeOut, double* truePeakOut, double* truePeakPosOut, double* shortTermMaxOut, double* momentaryMaxOut)"},"title":"NF_AnalyzeTakeLoudness","chapters":["Mediaitem Take Management","Normalizing/Loudness"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Full loudness analysis. retval: returns true on successful analysis, false on MIDI take or when analysis failed for some reason. analyzeTruePeak=true: Also do true peak analysis. Returns true peak value in dBTP and true peak position (relative to item position). Considerably slower than without true peak analysis (since it uses oversampling). Note: Short term uses a time window of 3 sec. for calculation. So for items shorter than this shortTermMaxOut can't be calculated correctly. Momentary uses a time window of 0.4 sec.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string base64Str","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.NF_Base64_Decode","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"decodedStr","type":"string"}],"parameters":[{"identifier":"base64Str","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"NF_Base64_Decode\""},{"identifier":"\"base64Str\""},{"identifier":"#decodedStr"}]}},"requires":{"Reaper":"5.965","SWS":"2.13.2.0"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string decodeStr","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string decodedStr = reaper.NF_Base64_Decode(string base64Str)","eel":"bool extension_api(\"NF_Base64_Decode\", \"base64Str\", #decodedStr)","python":"(Boolean retval, String base64Str, String decodedStrOutNeedBig, Int decodedStrOutNeedBig_sz) = NF_Base64_Decode(base64Str, decodedStrOutNeedBig, decodedStrOutNeedBig_sz)","cpp":"bool NF_Base64_Decode(const char* base64Str, char* decodedStrOutNeedBig, int decodedStrOutNeedBig_sz)"},"title":"NF_Base64_Decode","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Decodes a Base64-string.\n\nReturns true on success.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string str","description":""},{"identifier":"boolean usePadding","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.NF_Base64_Encode","return_values":[{"identifier":"encodedStr","type":"string"}],"parameters":[{"identifier":"str","type":"string"},{"identifier":"usePadding","type":"boolean"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"NF_Base64_Encode\""},{"identifier":"\"str\""},{"type_name":"bool","identifier":"usePadding"},{"identifier":"#encodedStr"}]}},"requires":{"Reaper":"5.965","SWS":"2.13.2.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string decodeStr","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string encodedStr = reaper.NF_Base64_Encode(string str, boolean usePadding)","eel":"extension_api(\"NF_Base64_Encode\", \"str\", bool usePadding, #encodedStr)","python":"(String str, Int str_sz, Boolean usePadding, String encodedStrOutNeedBig, Int encodedStrOutNeedBig_sz) = NF_Base64_Encode(str, str_sz, usePadding, encodedStrOutNeedBig, encodedStrOutNeedBig_sz)","cpp":"void NF_Base64_Encode(const char* str, int str_sz, bool usePadding, char* encodedStrOutNeedBig, int encodedStrOutNeedBig_sz)"},"title":"NF_Base64_Encode","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Encodes a string into Base64-encoding\n\nInput string may contain null bytes in REAPER 6.44 or newer. \n\nNote: Doesn't allow padding in the middle (e.g. concatenated encoded strings), doesn't allow newlines.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","configuration","settings","startup action","clear"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.NF_ClearGlobalStartupAction","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"NF_ClearGlobalStartupAction\""}]}},"requires":{"Reaper":"6.23","SWS":"2.13.0.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.NF_ClearGlobalStartupAction()","eel":"bool extension_api(\"NF_ClearGlobalStartupAction\")","python":"Boolean retval = NF_ClearGlobalStartupAction()","cpp":"bool NF_ClearGlobalStartupAction()"},"title":"NF_ClearGlobalStartupAction","chapters":["Configuration Settings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns true if global startup action was cleared successfully.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","configuration","settings","startup action","clear"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.NF_ClearProjectStartupAction","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"NF_ClearProjectStartupAction\""}]}},"requires":{"Reaper":"6.23","SWS":"2.13.0.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.NF_ClearProjectStartupAction()","eel":"bool extension_api(\"NF_ClearProjectStartupAction\")","python":"Boolean retval = NF_ClearProjectStartupAction()","cpp":"bool NF_ClearProjectStartupAction()"},"title":"NF_ClearProjectStartupAction","chapters":["Configuration Settings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns true if project startup action was cleared successfully.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","configuration","settings","startup action","clear"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.NF_ClearProjectTrackSelectionAction","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"NF_ClearProjectTrackSelectionAction\""}]}},"requires":{"Reaper":"6.23","SWS":"2.13.0.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.NF_ClearProjectTrackSelectionAction()","eel":"bool extension_api(\"NF_ClearProjectTrackSelectionAction\")","python":"Boolean retval = NF_ClearProjectTrackSelectionAction()","cpp":"bool NF_ClearProjectTrackSelectionAction()"},"title":"NF_ClearProjectTrackSelectionAction","chapters":["Configuration Settings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns true if project track selection action was cleared successfully.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","configuration","settings","startup action","get"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.NF_GetGlobalStartupAction","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"desc","type":"string"},{"identifier":"cmdId","type":"string"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"NF_GetGlobalStartupAction\""},{"identifier":"#desc"},{"identifier":"#cmdId"}]}},"requires":{"Reaper":"6.23","SWS":"2.13.0.0"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string desc","description":""},{"identifier":"string cmdId","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string desc, string cmdId = reaper.NF_GetGlobalStartupAction()","eel":"bool extension_api(\"NF_GetGlobalStartupAction\", #desc, #cmdId)","python":"Boolean retval = NF_GetGlobalStartupAction(char* descOut, int descOut_sz, char* cmdIdOut, int cmdIdOut_sz)","cpp":"bool NF_GetGlobalStartupAction(char* descOut, int descOut_sz, char* cmdIdOut, int cmdIdOut_sz)"},"title":"NF_GetGlobalStartupAction","chapters":["Configuration Settings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Gets action description and command ID number (for native actions) or named command IDs / identifier strings (for extension actions /ReaScripts) if global startup action is set, otherwise empty string. Returns false on failure.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"boolean analyzeTruePeak","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.NF_AnalyzeTakeLoudness2","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"lufsIntegrated","type":"number"},{"identifier":"range","type":"number"},{"identifier":"truePeak","type":"number"},{"identifier":"truePeakPos","type":"number"},{"identifier":"shortTermMax","type":"number"},{"identifier":"momentaryMax","type":"number"},{"identifier":"shortTermMaxPos","type":"number"},{"identifier":"momentaryMaxPos","type":"number"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"analyzeTruePeak","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"NF_AnalyzeTakeLoudness2\""},{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"bool","identifier":"analyzeTruePeak"},{"identifier":"&lufsIntegrated"},{"identifier":"&range"},{"type_name":"&","identifier":"truePeak"},{"identifier":"&truePeakPos"},{"identifier":"&shortTermMax"},{"identifier":"&momentaryMax"},{"identifier":"&shortTermMaxPos"},{"identifier":"&momentaryMaxPos"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":9,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number lufsIntegrated","description":""},{"identifier":"number range","description":""},{"identifier":"number truePeak","description":""},{"identifier":"number truePeakPos","description":""},{"identifier":"number shortTermMax","description":""},{"identifier":"number momentaryMax","description":""},{"identifier":"number shortTermMaxPos","description":""},{"identifier":"number momentaryMaxPos","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number lufsIntegrated, number range, number truePeak, number truePeakPos, number shortTermMax, number momentaryMax, number shortTermMaxPos, number momentaryMaxPos = reaper.NF_AnalyzeTakeLoudness2(MediaItem_Take take, boolean analyzeTruePeak)","eel":"bool extension_api(\"NF_AnalyzeTakeLoudness2\", MediaItem_Take take, bool analyzeTruePeak, &lufsIntegrated, &range, & truePeak, &truePeakPos, &shortTermMax, &momentaryMax, &shortTermMaxPos, &momentaryMaxPos)","python":"(Boolean retval, MediaItem_Take take, Boolean analyzeTruePeak, Float lufsIntegratedOut, Float rangeOut, Float truePeakOut, Float truePeakPosOut, Float shortTermMaxOut, Float momentaryMaxOut, Float shortTermMaxPosOut, Float momentaryMaxPosOut) = NF_AnalyzeTakeLoudness2(take, analyzeTruePeak, lufsIntegratedOut, rangeOut, truePeakOut, truePeakPosOut, shortTermMaxOut, momentaryMaxOut, shortTermMaxPosOut, momentaryMaxPosOut)","cpp":"bool NF_AnalyzeTakeLoudness2(MediaItem_Take* take, bool analyzeTruePeak, double* lufsIntegratedOut, double* rangeOut, double* truePeakOut, double* truePeakPosOut, double* shortTermMaxOut, double* momentaryMaxOut, double* shortTermMaxPosOut, double* momentaryMaxPosOut)"},"title":"NF_AnalyzeTakeLoudness2","chapters":["Mediaitem Take Management","Normalizing/Loudness"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Same as [NF\\_AnalyzeTakeLoudness](#NF_AnalyzeTakeLoudness) but additionally returns shortTermMaxPos and momentaryMaxPos (in absolute project time). Note: shortTermMaxPos and momentaryMaxPos actually indicate the beginning of time *intervalls*, (3 sec. and 0.4 sec. resp.). ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.NF_AnalyzeTakeLoudness_IntegratedOnly","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"lufsIntegrated","type":"number"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"NF_AnalyzeTakeLoudness_IntegratedOnly\""},{"type_name":"MediaItem_Take","identifier":"take"},{"identifier":"&lufsIntegrated"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number lufsIntegrated","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number lufsIntegrated = reaper.NF_AnalyzeTakeLoudness_IntegratedOnly(MediaItem_Take take)","eel":"bool extension_api(\"NF_AnalyzeTakeLoudness_IntegratedOnly\", MediaItem_Take take, &lufsIntegrated)","python":"(Boolean retval, MediaItem_Take take, Float lufsIntegratedOut) = NF_AnalyzeTakeLoudness_IntegratedOnly(take, lufsIntegratedOut)","cpp":"bool NF_AnalyzeTakeLoudness_IntegratedOnly(MediaItem_Take* take, double* lufsIntegratedOut)"},"title":"NF_AnalyzeTakeLoudness_IntegratedOnly","chapters":["Mediaitem Take Management","Normalizing/Loudness"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Does LUFS integrated analysis only. Faster than full loudness analysis ([NF\\_AnalyzeTakeLoudness](#NF_AnalyzeTakeLoudness)) . Use this if only LUFS integrated is required.\nTake vol. env. is taken into account. \n\nSee: [Signal flow](http://wiki.cockos.com/wiki/index.php/Measure_and_normalize_loudness_with_SWS).\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem item","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.NF_GetMediaItemAverageRMS","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"item","type":"MediaItem"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"NF_GetMediaItemAverageRMS\""},{"type_name":"MediaItem","identifier":"item"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.NF_GetMediaItemAverageRMS(MediaItem item)","eel":"double extension_api(\"NF_GetMediaItemAverageRMS\", MediaItem item)","python":"Float retval = NF_GetMediaItemAverageRMS(MediaItem item)","cpp":"double NF_GetMediaItemAverageRMS(MediaItem* item)"},"title":"NF_GetMediaItemAverageRMS","chapters":["Mediaitem Take Management","Normalizing/Loudness"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the average overall (non-windowed) dB RMS level of active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \nReturns -150.0 if MIDI take or empty item.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem item","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.NF_GetMediaItemMaxPeak","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"item","type":"MediaItem"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"NF_GetMediaItemMaxPeak\""},{"type_name":"MediaItem","identifier":"item"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.NF_GetMediaItemMaxPeak(MediaItem item)","eel":"double extension_api(\"NF_GetMediaItemMaxPeak\", MediaItem item)","python":"Float retval = NF_GetMediaItemMaxPeak(MediaItem item)","cpp":"double NF_GetMediaItemMaxPeak(MediaItem* item)"},"title":"NF_GetMediaItemMaxPeak","chapters":["Mediaitem Management","Normalizing/Loudness"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the greatest max. peak value in dBFS of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \nReturns -150.0 if MIDI take or empty item.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem item","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.NF_GetMediaItemPeakRMS_NonWindowed","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"item","type":"MediaItem"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"NF_GetMediaItemPeakRMS_NonWindowed\""},{"type_name":"MediaItem","identifier":"item"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.NF_GetMediaItemPeakRMS_NonWindowed(MediaItem item)","eel":"double extension_api(\"NF_GetMediaItemPeakRMS_NonWindowed\", MediaItem item)","python":"Float retval = NF_GetMediaItemPeakRMS_NonWindowed(MediaItem item)","cpp":"double NF_GetMediaItemPeakRMS_NonWindowed(MediaItem* item)"},"title":"NF_GetMediaItemPeakRMS_NonWindowed","chapters":["Mediaitem Management","Normalizing/Loudness"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the greatest overall (non-windowed) dB RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \nReturns -150.0 if MIDI take or empty item.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem item","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.NF_GetMediaItemPeakRMS_Windowed","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"item","type":"MediaItem"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"NF_GetMediaItemPeakRMS_Windowed\""},{"type_name":"MediaItem","identifier":"item"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.NF_GetMediaItemPeakRMS_Windowed(MediaItem item)","eel":"double extension_api(\"NF_GetMediaItemPeakRMS_Windowed\", MediaItem item)","python":"Float retval = NF_GetMediaItemPeakRMS_Windowed(MediaItem item)","cpp":"double NF_GetMediaItemPeakRMS_Windowed(MediaItem* item)"},"title":"NF_GetMediaItemPeakRMS_Windowed","chapters":["Mediaitem Management","Normalizing/Loudness"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the average dB RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \nObeys 'Window size for peak RMS' setting in 'SWS: Set RMS analysis/normalize options' for calculation. Returns -150.0 if MIDI take or empty item.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","configuration","settings","startup action","get"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.NF_GetProjectStartupAction","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"desc","type":"string"},{"identifier":"cmdId","type":"string"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"NF_GetProjectStartupAction\""},{"identifier":"#desc"},{"identifier":"#cmdId"}]}},"requires":{"Reaper":"6.23","SWS":"2.13.0.0"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string desc","description":""},{"identifier":"string cmdId","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string desc, string cmdId = reaper.NF_GetProjectStartupAction()","eel":"bool extension_api(\"NF_GetProjectStartupAction\", #desc, #cmdId)","python":"Boolean retval = NF_GetProjectStartupAction(char* descOut, int descOut_sz, char* cmdIdOut, int cmdIdOut_sz)","cpp":"bool NF_GetProjectStartupAction(char* descOut, int descOut_sz, char* cmdIdOut, int cmdIdOut_sz)"},"title":"NF_GetProjectStartupAction","chapters":["Configuration Settings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Gets action description and command ID number (for native actions) or named command IDs / identifier strings (for extension actions /ReaScripts) if project startup action is set, otherwise empty string. Returns false on failure.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","configuration","settings","track selection action","get"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.NF_GetProjectTrackSelectionAction","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"desc","type":"string"},{"identifier":"cmdId","type":"string"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"NF_GetProjectTrackSelectionAction\""},{"identifier":"#desc"},{"identifier":"#cmdId"}]}},"requires":{"Reaper":"6.23","SWS":"2.13.0.0"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string desc","description":""},{"identifier":"string cmdId","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string desc, string cmdId = reaper.NF_GetProjectTrackSelectionAction()","eel":"bool extension_api(\"NF_GetProjectTrackSelectionAction\", #desc, #cmdId)","python":"Boolean retval = NF_GetProjectTrackSelectionAction(char* descOut, int descOut_sz, char* cmdIdOut, int cmdIdOut_sz)","cpp":"bool NF_GetProjectTrackSelectionAction(char* descOut, int descOut_sz, char* cmdIdOut, int cmdIdOut_sz)"},"title":"NF_GetProjectTrackSelectionAction","chapters":["Configuration Settings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Gets action description and command ID number (for native actions) or named command IDs / identifier strings (for extension actions /ReaScripts) if project track selection action is set, otherwise empty string. Returns false on failure.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","audio management","read","audio","file","bitrate"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string fn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.NF_ReadAudioFileBitrate","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"fn","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"NF_ReadAudioFileBitrate\""},{"identifier":"\"fn\""}]}},"requires":{"Reaper":"6.23","SWS":"2.13.0.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.NF_ReadAudioFileBitrate(string fn)","eel":"int extension_api(\"NF_ReadAudioFileBitrate\", \"fn\")","python":"Int retval = NF_ReadAudioFileBitrate(const char* fn)","cpp":"int NF_ReadAudioFileBitrate(const char* fn)"},"title":"NF_ReadAudioFileBitrate","chapters":["Audio Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the bitrate of an audio file in kb/s if available (0 otherwise). For supported filetypes see <a href=\"https://taglib.org/api/classTagLib_1_1AudioProperties.html#ae5b7650b50f8c8f8cc022f25cfee48c5\">TagLib::AudioProperties::bitrate</a>.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer amount","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.NF_ScrollHorizontallyByPercentage","return_values":[],"parameters":[{"identifier":"amount","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"NF_ScrollHorizontallyByPercentage\""},{"type_name":"int","identifier":"amount"}]}},"requires":{"Reaper":"5.965","SWS":"2.13.2.0"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.NF_ScrollHorizontallyByPercentage(integer amount)","eel":"extension_api(\"NF_ScrollHorizontallyByPercentage\", int amount)","python":"NF_ScrollHorizontallyByPercentage(Int amount)","cpp":"void NF_ScrollHorizontallyByPercentage(int amount)"},"title":"NF_ScrollHorizontallyByPercentage","chapters":["User Interface","Arrangeview Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"100 means scroll one page. Negative values scroll left.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","configuration","settings","startup action","set"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string str","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.NF_SetGlobalStartupAction","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"str","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"NF_SetGlobalStartupAction\""},{"identifier":"\"str\""}]}},"requires":{"Reaper":"6.23","SWS":"2.13.0.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.NF_SetGlobalStartupAction(string str)","eel":"bool extension_api(\"NF_SetGlobalStartupAction\", \"str\")","python":"Boolean retval = NF_SetGlobalStartupAction(const char* str)","cpp":"bool NF_SetGlobalStartupAction(const char* str)"},"title":"NF_SetGlobalStartupAction","chapters":["Configuration Settings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns true if global startup action was set successfully (i.e. valid action ID). Note: For SWS / S&M actions and macros / scripts, you must use identifier strings (e.g. \"_SWS_ABOUT\", \"_f506bc780a0ab34b8fdedb67ed5d3649\"), not command IDs (e.g. \"47145\").\nTip: to copy such identifiers, right-click the action in the Actions window > Copy selected action cmdID / identifier string.\nNOnly works for actions / scripts from Main action section.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","configuration","settings","startup action","set"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string str","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.NF_SetProjectStartupAction","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"str","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"NF_SetProjectStartupAction\""},{"identifier":"\"str\""}]}},"requires":{"Reaper":"6.23","SWS":"2.13.0.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.NF_SetProjectStartupAction(string str)","eel":"bool extension_api(\"NF_SetProjectStartupAction\", \"str\")","python":"Boolean retval = NF_SetProjectStartupAction(const char* str)","cpp":"bool NF_SetProjectStartupAction(const char* str)"},"title":"NF_SetProjectStartupAction","chapters":["Configuration Settings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns true if project startup action was set successfully (i.e. valid action ID). Note: For SWS / S&M actions and macros / scripts, you must use identifier strings (e.g. \"_SWS_ABOUT\", \"_f506bc780a0ab34b8fdedb67ed5d3649\"), not command IDs (e.g. \"47145\").\nTip: to copy such identifiers, right-click the action in the Actions window > Copy selected action cmdID / identifier string.\nOnly works for actions / scripts from Main action section. Project must be saved after setting project startup action to be persistent.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","configuration","settings","startup action","set"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string str","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.NF_SetProjectTrackSelectionAction","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"str","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"NF_SetProjectTrackSelectionAction\""},{"identifier":"\"str\""}]}},"requires":{"Reaper":"6.23","SWS":"2.13.0.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.NF_SetProjectTrackSelectionAction(string str)","eel":"bool extension_api(\"NF_SetProjectTrackSelectionAction\", \"str\")","python":"Boolean retval = NF_SetProjectTrackSelectionAction(const char* str)","cpp":"bool NF_SetProjectTrackSelectionAction(const char* str)"},"title":"NF_SetProjectTrackSelectionAction","chapters":["Configuration Settings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns true if project track selection action was set successfully (i.e. valid action ID). Note: For SWS / S&M actions and macros / scripts, you must use identifier strings (e.g. \"_SWS_ABOUT\", \"_f506bc780a0ab34b8fdedb67ed5d3649\"), not command IDs (e.g. \"47145\").\nTip: to copy such identifiers, right-click the action in the Actions window > Copy selected action cmdID / identifier string.\nOnly works for actions / scripts from Main action section. Project must be saved after setting project track selection action to be persistent.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","fx management","get","fx module name"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string str","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.NF_TakeFX_GetFXModuleName","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"name","type":"string"}],"parameters":[{"identifier":"item","type":"MediaItem"},{"identifier":"fx","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"NF_TakeFX_GetFXModuleName\""},{"type_name":"MediaItem","identifier":"item"},{"type_name":"int","identifier":"fx"},{"identifier":"#name"}]}},"requires":{"Reaper":"6.23","SWS":"2.13.0.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string name = reaper.NF_TakeFX_GetFXModuleName(MediaItem item, integer fx)","eel":"bool extension_api(\"NF_TakeFX_GetFXModuleName\", MediaItem item, int fx, #name)","python":"(Boolean retval, MediaItem item, Int fx, String nameOut, Int nameOut_sz) = NF_TakeFX_GetFXModuleName(item, fx, nameOut, nameOut_sz)","cpp":"bool NF_TakeFX_GetFXModuleName(MediaItem* item, int fx, char* nameOut, int nameOut_sz)"},"title":"NF_TakeFX_GetFXModuleName","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Deprecated, see TakeFX_GetNamedConfigParm/'fx_ident' (v6.37+). See BR_TrackFX_GetFXModuleName. fx: counted consecutively across all takes (zero-based).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack src","description":""},{"identifier":"MediaTrack dest","description":""},{"identifier":"integer type","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_AddReceive","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"src","type":"MediaTrack"},{"identifier":"dest","type":"MediaTrack"},{"identifier":"type","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"SNM_AddReceive\""},{"type_name":"MediaTrack","identifier":"src"},{"type_name":"MediaTrack","identifier":"dest"},{"type_name":"int","identifier":"type"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SNM_AddReceive(MediaTrack src, MediaTrack dest, integer type)","eel":"bool extension_api(\"SNM_AddReceive\", MediaTrack src, MediaTrack dest, int type)","python":"Boolean retval = SNM_AddReceive(MediaTrack src, MediaTrack dest, Int type)","cpp":"bool SNM_AddReceive(MediaTrack* src, MediaTrack* dest, int type)"},"title":"SNM_AddReceive","chapters":["Track Management","Routing"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"\\[S&M\\] Deprecated, see [CreateTrackSend](#CreateTrackSend) (v5.15pre1+). Adds a receive. Returns false if nothing updated.\ntype -1=Default type (user preferences), 0=Post-Fader (Post-Pan), 1=Pre-FX, 2=deprecated, 3=Pre-Fader (Post-FX).\nNote: obeys default sends preferences, supports frozen tracks, etc..","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack tr","description":""},{"identifier":"integer fxId","description":""},{"identifier":"integer prmId","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_AddTCPFXParm","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"tr","type":"MediaTrack"},{"identifier":"fxId","type":"integer"},{"identifier":"prmId","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"SNM_AddTCPFXParm\""},{"type_name":"MediaTrack","identifier":"tr"},{"type_name":"int","identifier":"fxId"},{"type_name":"int","identifier":"prmId"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SNM_AddTCPFXParm(MediaTrack tr, integer fxId, integer prmId)","eel":"bool extension_api(\"SNM_AddTCPFXParm\", MediaTrack tr, int fxId, int prmId)","python":"Boolean retval = SNM_AddTCPFXParm(MediaTrack tr, Int fxId, Int prmId)","cpp":"bool SNM_AddTCPFXParm(MediaTrack* tr, int fxId, int prmId)"},"title":"SNM_AddTCPFXParm","chapters":["FX Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[S&M] Add an FX parameter knob in the TCP. Returns false if nothing updated (invalid parameters, knob already present, etc..)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string str","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_CreateFastString","return_values":[{"identifier":"fstr","type":"WDL_FastString"}],"parameters":[{"identifier":"str","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["WDL_FastString"],"parameters":[{"identifier":"\"SNM_CreateFastString\""},{"identifier":"\"str\""}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"WDL_FastString fstr","description":""}],"prog_lang":"*"},"functioncall":{"lua":"WDL_FastString fstr = reaper.SNM_CreateFastString(string str)","eel":"WDL_FastString extension_api(\"SNM_CreateFastString\", \"str\")","python":"WDL_FastString fstr = SNM_CreateFastString(String str)","cpp":"WDL_FastString* SNM_CreateFastString(const char* str)"},"title":"SNM_CreateFastString","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"\\[S&M\\] Instantiates a new \"fast string\". You must delete this string, see [SNM\\_DeleteFastString](#SNM_DeleteFastString).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"WDL_FastString str","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_DeleteFastString","return_values":[],"parameters":[{"identifier":"str","type":"WDL_FastString"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"SNM_DeleteFastString\""},{"type_name":"WDL_FastString","identifier":"str"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.SNM_DeleteFastString(WDL_FastString str)","eel":"extension_api(\"SNM_DeleteFastString\", WDL_FastString str)","python":"SNM_DeleteFastString(WDL_FastString str)","cpp":"void SNM_DeleteFastString(WDL_FastString* str)"},"title":"SNM_DeleteFastString","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[S&M] Deletes a \"fast string\" instance.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","reaper","project","config","preferences","variables","get","internal"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string varname","description":"the name of the config-variable to be read; not case sensitive"},{"identifier":"number errvalue","description":"the errorvalue that will be returned, if varname isn't a valid one"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_GetDoubleConfigVar","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"varname","type":"string"},{"identifier":"errvalue","type":"number"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"SNM_GetDoubleConfigVar\""},{"identifier":"\"varname\""},{"identifier":"errvalue"}]}},"requires":{"Reaper":"5.62","SWS":"2.12.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":"the returned number/doublefloat-value of varname"}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.SNM_GetDoubleConfigVar(string varname, number errvalue)","eel":"double extension_api(\"SNM_GetDoubleConfigVar\", \"varname\", errvalue)","python":"Float retval = SNM_GetDoubleConfigVar(String varname, Float errvalue)","cpp":"double SNM_GetDoubleConfigVar(const char* varname, double errvalue)"},"title":"SNM_GetDoubleConfigVar","chapters":["Api-Helper-Functions","Config Variables"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[S&M] Returns a floating-point preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found).\n\nThe settings can be from the Preferences, Project settings and Render-dialog, as well as numerous other settings, as e.g. set in the context menu of the transport-area.\nSome variables are bitfields, where each bit represents e.g a checkbox in the preferences.\n\nsee <a =\"Reaper_Config_Variables.html\">Reaper Config Variables</a> for valid config-vars","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"WDL_FastString str","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_GetFastString","return_values":[{"identifier":"str","type":"string"}],"parameters":[{"identifier":"str","type":"WDL_FastString"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"SNM_GetFastString\""},{"identifier":"#retval"},{"type_name":"WDL_FastString","identifier":"str"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string str","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string str = reaper.SNM_GetFastString(WDL_FastString str)","eel":"bool extension_api(\"SNM_GetFastString\", #retval, WDL_FastString str)","python":"String retval = SNM_GetFastString(WDL_FastString str)","cpp":"const char* SNM_GetFastString(WDL_FastString* str)"},"title":"SNM_GetFastString","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[S&M] Gets the \"fast string\" content.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"WDL_FastString str","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_GetFastStringLength","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"str","type":"WDL_FastString"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"SNM_GetFastStringLength\""},{"type_name":"WDL_FastString","identifier":"str"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.SNM_GetFastStringLength(WDL_FastString str)","eel":"int extension_api(\"SNM_GetFastStringLength\", WDL_FastString str)","python":"Int retval = SNM_GetFastStringLength(WDL_FastString str)","cpp":"int SNM_GetFastStringLength(WDL_FastString* str)"},"title":"SNM_GetFastStringLength","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[S&M] Gets the \"fast string\" length.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","reaper","project","config","preferences","variables","get","internal"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string varname","description":"the name of the config-variable to be read; not case sensitive"},{"identifier":"integer errvalue","description":"the errorvalue that will be returned, if varname isn't a valid one"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_GetIntConfigVar","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"varname","type":"string"},{"identifier":"errvalue","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"SNM_GetIntConfigVar\""},{"identifier":"\"varname\""},{"type_name":"int","identifier":"errvalue"}]}},"requires":{"Reaper":"5.80","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the returned integer-value of varname"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.SNM_GetIntConfigVar(string varname, integer errvalue)","eel":"int extension_api(\"SNM_GetIntConfigVar\", \"varname\", int errvalue)","python":"Int retval = SNM_GetIntConfigVar(String varname, Int errvalue)","cpp":"int SNM_GetIntConfigVar(const char* varname, int errvalue)"},"title":"SNM_GetIntConfigVar","chapters":["Api-Helper-Functions","Config Variables"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[S&M] Returns an integer preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found).\n\nThe settings can be from the Preferences, Project settings and Render-dialog, as well as numerous other settings, as e.g. set in the context menu of the transport-area.\nSome variables are bitfields, where each bit represents e.g a checkbox in the preferences.\n\nsee <a href=\"Reaper_Config_Variables.html\">Reaper Config Variables</a> for valid config-vars","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","reaper","project","config","preferences","variables","get","internal"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string varname","description":"the name of the config-variable to be read; not case sensitive"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_GetLongConfigVar","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"high","type":"integer"},{"identifier":"low","type":"integer"}],"parameters":[{"identifier":"varname","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"SNM_GetLongConfigVar\""},{"identifier":"\"varname\""},{"type_name":"int","identifier":"&high"},{"type_name":"int","identifier":"&low"}]}},"requires":{"Reaper":"5.80","SWS":"2.12.1"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"boolean retval","description":"true, varname was found; false, varname wasn't found"},{"identifier":"integer high","description":"the high-32bits of the value"},{"identifier":"integer low","description":"the low-32bits of the value"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer high, integer low = reaper.SNM_GetLongConfigVar(string varname)","eel":"bool extension_api(\"SNM_GetLongConfigVar\", \"varname\", int &high, int &low)","python":"(Boolean retval, String varname, Int highOut, Int lowOut) = SNM_GetLongConfigVar(varname, highOut, lowOut)","cpp":"bool SNM_GetLongConfigVar(const char* varname, int* highOut, int* lowOut)"},"title":"SNM_GetLongConfigVar","chapters":["Api-Helper-Functions","Config Variables"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"\\[S&M\\] Reads a 64-bit integer preference split in two 32-bit integers (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).\n\nsee [Reaper Config Variables](Reaper_Config_Variables.html) for valid config-vars","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject project","description":"the project-number. 0 for the current project. "},{"identifier":"string guid","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_GetMediaItemTakeByGUID","return_values":[{"identifier":"take","type":"MediaItem_Take"}],"parameters":[{"identifier":"project","type":"ReaProject"},{"identifier":"guid","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["MediaItem_Take"],"parameters":[{"identifier":"\"SNM_GetMediaItemTakeByGUID\""},{"type_name":"ReaProject","identifier":"project"},{"identifier":"\"guid\""}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":""}],"prog_lang":"*"},"functioncall":{"lua":"MediaItem_Take take = reaper.SNM_GetMediaItemTakeByGUID(ReaProject project, string guid)","eel":"MediaItem_Take extension_api(\"SNM_GetMediaItemTakeByGUID\", ReaProject project, \"guid\")","python":"MediaItem_Take take = SNM_GetMediaItemTakeByGUID(ReaProject project, String guid)","cpp":"MediaItem_Take* SNM_GetMediaItemTakeByGUID(ReaProject* project, const char* guid)"},"title":"SNM_GetMediaItemTakeByGUID","chapters":["Mediaitem Take Management","Take States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"\\[S&M\\] Gets a take by GUID as string. The GUID must be enclosed in braces {}. To get take GUID as string, see [BR\\_GetMediaItemTakeGUID](#BR_GetMediaItemTakeGUID)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"integer num","description":""},{"identifier":"boolean isrgn","description":""},{"identifier":"WDL_FastString name","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_GetProjectMarkerName","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"num","type":"integer"},{"identifier":"isrgn","type":"boolean"},{"identifier":"name","type":"WDL_FastString"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"SNM_GetProjectMarkerName\""},{"type_name":"ReaProject","identifier":"proj"},{"type_name":"int","identifier":"num"},{"type_name":"bool","identifier":"isrgn"},{"type_name":"WDL_FastString","identifier":"name"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SNM_GetProjectMarkerName(ReaProject proj, integer num, boolean isrgn, WDL_FastString name)","eel":"bool extension_api(\"SNM_GetProjectMarkerName\", ReaProject proj, int num, bool isrgn, WDL_FastString name)","python":"Boolean retval = SNM_GetProjectMarkerName(ReaProject proj, Int num, Boolean isrgn, WDL_FastString name)","cpp":"bool SNM_GetProjectMarkerName(ReaProject* proj, int num, bool isrgn, WDL_FastString* name)"},"title":"SNM_GetProjectMarkerName","chapters":["Marker Management","Project Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[S&M] Gets a marker/region name. Returns true if marker/region found.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"identifier obj","description":""},{"identifier":"WDL_FastString state","description":""},{"identifier":"boolean setnewvalue","description":""},{"identifier":"boolean wantminimalstate","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_GetSetObjectState","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"obj","type":"identifier"},{"identifier":"state","type":"WDL_FastString"},{"identifier":"setnewvalue","type":"boolean"},{"identifier":"wantminimalstate","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"SNM_GetSetObjectState\""},{"type_name":"void*","identifier":"obj"},{"type_name":"WDL_FastString","identifier":"state"},{"type_name":"bool","identifier":"setnewvalue"},{"type_name":"bool","identifier":"wantminimalstate"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SNM_GetSetObjectState(identifier obj, WDL_FastString state, boolean setnewvalue, boolean wantminimalstate)","eel":"bool extension_api(\"SNM_GetSetObjectState\", void* obj, WDL_FastString state, bool setnewvalue, bool wantminimalstate)","python":"Boolean retval = SNM_GetSetObjectState(void obj, WDL_FastString state, Boolean setnewvalue, Boolean wantminimalstate)","cpp":"bool SNM_GetSetObjectState(void* obj, WDL_FastString* state, bool setnewvalue, bool wantminimalstate)"},"title":"SNM_GetSetObjectState","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[S&M] Gets or sets the state of a track, an item or an envelope. The state chunk size is unlimited. Returns false if failed.\nWhen getting a track state (and when you are not interested in FX data), you can use wantminimalstate=true to radically reduce the length of the state. Do not set such minimal states back though, this is for read-only applications!\nNote: unlike the native GetSetObjectState, calling to FreeHeapPtr() is not required.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"MediaItem item","description":""},{"identifier":"integer takeidx","description":""},{"identifier":"WDL_FastString state","description":""},{"identifier":"boolean setnewvalue","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_GetSetSourceState","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"item","type":"MediaItem"},{"identifier":"takeidx","type":"integer"},{"identifier":"state","type":"WDL_FastString"},{"identifier":"setnewvalue","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"SNM_GetSetSourceState\""},{"type_name":"MediaItem","identifier":"item"},{"type_name":"int","identifier":"takeidx"},{"type_name":"WDL_FastString","identifier":"state"},{"type_name":"bool","identifier":"setnewvalue"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SNM_GetSetSourceState(MediaItem item, integer takeidx, WDL_FastString state, boolean setnewvalue)","eel":"bool extension_api(\"SNM_GetSetSourceState\", MediaItem item, int takeidx, WDL_FastString state, bool setnewvalue)","python":"Boolean retval = SNM_GetSetSourceState(MediaItem item, Int takeidx, WDL_FastString state, Boolean setnewvalue)","cpp":"bool SNM_GetSetSourceState(MediaItem* item, int takeidx, WDL_FastString* state, bool setnewvalue)"},"title":"SNM_GetSetSourceState","chapters":["Mediaitem Management","Item States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"\\[S&M\\] Gets or sets a take source state. Returns false if failed. Use takeidx=-1 to get/alter the active take.\nNote: this function does not use a MediaItem\\_Take\\* param in order to manage empty takes (i.e. takes with MediaItem\\_Take\\*==NULL), see [SNM\\_GetSetSourceState2](#SNM_GetSetSourceState2).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem_Take take","description":""},{"identifier":"WDL_FastString state","description":""},{"identifier":"boolean setnewvalue","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_GetSetSourceState2","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"},{"identifier":"state","type":"WDL_FastString"},{"identifier":"setnewvalue","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"SNM_GetSetSourceState2\""},{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"WDL_FastString","identifier":"state"},{"type_name":"bool","identifier":"setnewvalue"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SNM_GetSetSourceState2(MediaItem_Take take, WDL_FastString state, boolean setnewvalue)","eel":"bool extension_api(\"SNM_GetSetSourceState2\", MediaItem_Take take, WDL_FastString state, bool setnewvalue)","python":"Boolean retval = SNM_GetSetSourceState2(MediaItem_Take take, WDL_FastString state, Boolean setnewvalue)","cpp":"bool SNM_GetSetSourceState2(MediaItem_Take* take, WDL_FastString* state, bool setnewvalue)"},"title":"SNM_GetSetSourceState2","chapters":["Mediaitem Take Management","Take States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"\\[S&M\\] Gets or sets a take source state. Returns false if failed.\nNote: this function cannot deal with empty takes, see [SNM\\_GetSetSourceState](#SNM_GetSetSourceState).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"takeWDL_FastString type","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_GetSourceType","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"isOptional":true,"type":"MediaItem_Take","identifier":"type"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"SNM_GetSourceType\""},{"type_name":"MediaItem_Take","identifier":"take"},{"type_name":"WDL_FastString","identifier":"type"}]}},"requires":{"Reaper":"5.62","SWS":"2.12.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SNM_GetSourceType(MediaItem_Take takeWDL_FastString type)","eel":"bool extension_api(\"SNM_GetSourceType\", MediaItem_Take take, WDL_FastString type)","python":"Boolean retval = SNM_GetSourceType(MediaItem_Take take, WDL_FastString type)","cpp":"bool SNM_GetSourceType(MediaItem_Take* take, WDL_FastString* type)"},"title":"SNM_GetSourceType","chapters":["Mediaitem Take Management","Take States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[S&M] Deprecated, see [GetMediaSourceType](#GetMediaSourceType). Gets the source type of a take. Returns false if failed (e.g. take with empty source, etc..)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack tr","description":""},{"identifier":"integer fxId","description":""},{"identifier":"integer what","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_MoveOrRemoveTrackFX","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"tr","type":"MediaTrack"},{"identifier":"fxId","type":"integer"},{"identifier":"what","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"SNM_MoveOrRemoveTrackFX\""},{"type_name":"MediaTrack","identifier":"tr"},{"type_name":"int","identifier":"fxId"},{"type_name":"int","identifier":"what"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SNM_MoveOrRemoveTrackFX(MediaTrack tr, integer fxId, integer what)","eel":"bool extension_api(\"SNM_MoveOrRemoveTrackFX\", MediaTrack tr, int fxId, int what)","python":"Boolean retval = SNM_MoveOrRemoveTrackFX(MediaTrack tr, Int fxId, Int what)","cpp":"bool SNM_MoveOrRemoveTrackFX(MediaTrack* tr, int fxId, int what)"},"title":"SNM_MoveOrRemoveTrackFX","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[S&M] Deprecated, see TakeFX_/TrackFX_ CopyToTrack/Take, TrackFX/TakeFX _Delete (v5.95pre2+). Move or removes a track FX. Returns true if tr has been updated.\nfxId: fx index in chain or -1 for the selected fx. what: 0 to remove, -1 to move fx up in chain, 1 to move fx down in chain.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string fn","description":"the filename+path of the mediafile"},{"identifier":"string tag","description":"the tag you want to request; \"artist\", \"album\", \"genre\", \"comment\", \"title\", \"track\", \"year\""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_ReadMediaFileTag","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"tagval","type":"string"}],"parameters":[{"identifier":"fn","type":"string"},{"identifier":"tag","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"SNM_ReadMediaFileTag\""},{"identifier":"\"fn\""},{"identifier":"\"tag\""},{"identifier":"#tagval"}]}},"requires":{"Reaper":"5.62","SWS":"2.12.0"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, value could be read; false, value could not be read"},{"identifier":"string tagval","description":"the value of the requested tag"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string tagval = reaper.SNM_ReadMediaFileTag(string fn, string tag)","eel":"bool extension_api(\"SNM_ReadMediaFileTag\", \"fn\", \"tag\", #tagval)","python":"(Boolean retval, String fn, String tag, String tagvalOut, Int tagvalOut_sz) = SNM_ReadMediaFileTag(fn, tag, tagvalOut, tagvalOut_sz)","cpp":"bool SNM_ReadMediaFileTag(const char* fn, const char* tag, char* tagvalOut, int tagvalOut_sz)"},"title":"SNM_ReadMediaFileTag","chapters":["File Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"\\[S&M\\] Reads a media file tag. Supported tags: \"artist\", \"album\", \"genre\", \"comment\", \"title\", \"track\" (track number) or \"year\". Returns false if tag was not found. See [SNM\\_TagMediaFile](#SNM_TagMediaFile).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack tr","description":""},{"identifier":"integer rcvidx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_RemoveReceive","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"tr","type":"MediaTrack"},{"identifier":"rcvidx","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"SNM_RemoveReceive\""},{"type_name":"MediaTrack","identifier":"tr"},{"type_name":"int","identifier":"rcvidx"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SNM_RemoveReceive(MediaTrack tr, integer rcvidx)","eel":"bool extension_api(\"SNM_RemoveReceive\", MediaTrack tr, int rcvidx)","python":"Boolean retval = SNM_RemoveReceive(MediaTrack tr, Int rcvidx)","cpp":"bool SNM_RemoveReceive(MediaTrack* tr, int rcvidx)"},"title":"SNM_RemoveReceive","chapters":["Track Management","Routing"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"\\[S&M\\] Deprecated, see [RemoveTrackSend](#RemoveTrackSend) (v5.15pre1+). Removes a receive. Returns false if nothing updated.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack tr","description":""},{"identifier":"MediaTrack srctr","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_RemoveReceivesFrom","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"tr","type":"MediaTrack"},{"identifier":"srctr","type":"MediaTrack"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"SNM_RemoveReceivesFrom\""},{"type_name":"MediaTrack","identifier":"tr"},{"type_name":"MediaTrack","identifier":"srctr"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SNM_RemoveReceivesFrom(MediaTrack tr, MediaTrack srctr)","eel":"bool extension_api(\"SNM_RemoveReceivesFrom\", MediaTrack tr, MediaTrack srctr)","python":"Boolean retval = SNM_RemoveReceivesFrom(MediaTrack tr, MediaTrack srctr)","cpp":"bool SNM_RemoveReceivesFrom(MediaTrack* tr, MediaTrack* srctr)"},"title":"SNM_RemoveReceivesFrom","chapters":["Track Management","Routing"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[S&M] Removes all receives from srctr. Returns false if nothing updated.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string name","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_SelectResourceBookmark","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"name","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"SNM_SelectResourceBookmark\""},{"identifier":"\"name\""}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.SNM_SelectResourceBookmark(string name)","eel":"int extension_api(\"SNM_SelectResourceBookmark\", \"name\")","python":"Int retval = SNM_SelectResourceBookmark(String name)","cpp":"int SNM_SelectResourceBookmark(const char* name)"},"title":"SNM_SelectResourceBookmark","chapters":["User Interface","Dialogs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[S&M] Select a bookmark of the Resources window. Returns the related bookmark id (or -1 if failed).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","reaper","project","config","preferences","variables","set","internal"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string varname","description":"the name of the config-variable to be read; not case sensitive"},{"identifier":"number newvalue","description":"the new value to be set into varname"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_SetDoubleConfigVar","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"varname","type":"string"},{"identifier":"newvalue","type":"number"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"SNM_SetDoubleConfigVar\""},{"identifier":"\"varname\""},{"identifier":"newvalue"}]}},"requires":{"Reaper":"5.62","SWS":"2.12.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, if setting was successful; false, if not "}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SNM_SetDoubleConfigVar(string varname, number newvalue)","eel":"bool extension_api(\"SNM_SetDoubleConfigVar\", \"varname\", newvalue)","python":"Boolean retval = SNM_SetDoubleConfigVar(String varname, Float newvalue)","cpp":"bool SNM_SetDoubleConfigVar(const char* varname, double newvalue)"},"title":"SNM_SetDoubleConfigVar","chapters":["Api-Helper-Functions","Config Variables"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[S&M] Sets a floating-point preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found or newvalue out of range).\n\nThe settings can be from the Preferences, Project settings and Render-dialog, as well as numerous other settings, as e.g. set in the context menu of the transport-area.\nSome variables are bitfields, where each bit represents e.g a checkbox in the preferences.\n\nThe changed settings are usually only changed within the running Reaper, but not stored in the config-files, so you need to do it manually or they get lost after Reaper is closed!\n\nsee <a hre=\"Reaper_Config_Variables.html\">Reaper Config Variables</a> for valid config-vars","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"WDL_FastString str","description":""},{"identifier":"string newstr","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_SetFastString","return_values":[{"identifier":"fstr","type":"WDL_FastString"}],"parameters":[{"identifier":"str","type":"WDL_FastString"},{"identifier":"newstr","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["WDL_FastString"],"parameters":[{"identifier":"\"SNM_SetFastString\""},{"type_name":"WDL_FastString","identifier":"str"},{"identifier":"\"newstr\""}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"WDL_FastString fstr","description":""}],"prog_lang":"*"},"functioncall":{"lua":"WDL_FastString fstr = reaper.SNM_SetFastString(WDL_FastString str, string newstr)","eel":"WDL_FastString extension_api(\"SNM_SetFastString\", WDL_FastString str, \"newstr\")","python":"WDL_FastString fstr = SNM_SetFastString(WDL_FastString str, String newstr)","cpp":"WDL_FastString* SNM_SetFastString(WDL_FastString* str, const char* newstr)"},"title":"SNM_SetFastString","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[S&M] Sets the \"fast string\" content. Returns str for facility.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","reaper","project","config","preferences","variables","set","internal"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string varname","description":"the name of the config-variable to be read; not case sensitive"},{"identifier":"integer newvalue","description":"the newly set value for varname"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_SetIntConfigVar","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"varname","type":"string"},{"identifier":"newvalue","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"SNM_SetIntConfigVar\""},{"identifier":"\"varname\""},{"type_name":"int","identifier":"newvalue"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, if setting was successful, false if not"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SNM_SetIntConfigVar(string varname, integer newvalue)","eel":"bool extension_api(\"SNM_SetIntConfigVar\", \"varname\", int newvalue)","python":"Boolean retval = SNM_SetIntConfigVar(String varname, Int newvalue)","cpp":"bool SNM_SetIntConfigVar(const char* varname, int newvalue)"},"title":"SNM_SetIntConfigVar","chapters":["Api-Helper-Functions","Config Variables"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[S&M] Sets an integer preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).\n\nSome variables are bitfields, where each bit represents e.g a checkbox in the preferences.\nThe changed settings are usually only changed within the running Reaper, but not stored in the config-files, so you need to do it manually or they get lost after Reaper is closed!\n\nsee <a href=\"Reaper_Config_Variables.html\">Reaper Config Variables</a> for valid config-vars","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","reaper","project","config","preferences","variables","set","internal"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"string varname","description":"the name of the config-variable to be read; not case sensitive"},{"identifier":"integer newHighValue","description":"the newly set value for varname of the high-32bits"},{"identifier":"integer newLowValue","description":"the newly set value for varname of the low-32bits"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_SetLongConfigVar","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"varname","type":"string"},{"identifier":"newHighValue","type":"integer"},{"identifier":"newLowValue","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"SNM_SetLongConfigVar\""},{"identifier":"\"varname\""},{"type_name":"int","identifier":"newHighValue"},{"type_name":"int","identifier":"newLowValue"}]}},"requires":{"Reaper":"5.62","SWS":"2.12.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, if setting was successful, false if not"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SNM_SetLongConfigVar(string varname, integer newHighValue, integer newLowValue)","eel":"bool extension_api(\"SNM_SetLongConfigVar\", \"varname\", int newHighValue, int newLowValue)","python":"Boolean retval = SNM_SetLongConfigVar(String varname, Int newHighValue, Int newLowValue)","cpp":"bool SNM_SetLongConfigVar(const char* varname, int newHighValue, int newLowValue)"},"title":"SNM_SetLongConfigVar","chapters":["Api-Helper-Functions","Config Variables"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"\\[S&M\\] Sets a 64-bit integer preference from two 32-bit integers (looks in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).\n\nSome variables are bitfields, where each bit represents e.g a checkbox in the preferences.\nThe changed settings are usually only changed within the running Reaper, but not stored in the config-files, so you need to do it manually or they get lost after Reaper is closed!\n\nsee [Reaper Config Variables](Reaper_Config_Variables.html) for valid config-vars","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"ReaProject proj","description":"the project-number. 0 for the current project. "},{"identifier":"integer num","description":""},{"identifier":"boolean isrgn","description":""},{"identifier":"number pos","description":""},{"identifier":"number rgnend","description":""},{"identifier":"string name","description":""},{"identifier":"integer color","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_SetProjectMarker","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"proj","type":"ReaProject"},{"identifier":"num","type":"integer"},{"identifier":"isrgn","type":"boolean"},{"identifier":"pos","type":"number"},{"identifier":"rgnend","type":"number"},{"identifier":"name","type":"string"},{"identifier":"color","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"SNM_SetProjectMarker\""},{"type_name":"ReaProject","identifier":"proj"},{"type_name":"int","identifier":"num"},{"type_name":"bool","identifier":"isrgn"},{"identifier":"pos"},{"identifier":"rgnend"},{"identifier":"\"name\""},{"type_name":"int","identifier":"color"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SNM_SetProjectMarker(ReaProject proj, integer num, boolean isrgn, number pos, number rgnend, string name, integer color)","eel":"bool extension_api(\"SNM_SetProjectMarker\", ReaProject proj, int num, bool isrgn, pos, rgnend, \"name\", int color)","python":"Boolean retval = SNM_SetProjectMarker(ReaProject proj, Int num, Boolean isrgn, Float pos, Float rgnend, String name, Int color)","cpp":"bool SNM_SetProjectMarker(ReaProject* proj, int num, bool isrgn, double pos, double rgnend, const char* name, int color)"},"title":"SNM_SetProjectMarker","chapters":["Marker Management","Project Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"\\[S&M\\] Deprecated, see [SetProjectMarker4](#SetProjectMarker4) -- Same function as SetProjectMarker3() except it can set empty names \"\".","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string varname","description":"the name of the config-var"},{"identifier":"string newvalue","description":"the new value to set the config variable with"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_SetStringConfigVar","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"varname","type":"string"},{"identifier":"newvalue","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"SNM_SetStringConfigVar\""},{"identifier":"\"varname\""},{"identifier":"\"newvalue\""}]}},"requires":{"Reaper":"6.02","SWS":"2.13.0.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, setting was successful; false, setting was unsuccessful"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SNM_SetStringConfigVar(string varname, string newvalue)","eel":"bool extension_api(\"SNM_SetStringConfigVar\", \"varname\", \"newvalue\")","python":"Boolean retval = SNM_SetStringConfigVar(String varname, String newvalue)","cpp":"bool SNM_SetStringConfigVar(const char* varname, const char* newvalue)"},"title":"SNM_SetStringConfigVar","chapters":["Api-Helper-Functions","Config Variables"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[S&M] Sets a string preference (general prefs only). Returns false if failed (e.g. varname not found or value too long).\n\nsee <a =\"Reaper_Config_Variables.html\">Reaper Config Variables</a> for valid config-vars","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","filemanagement","tag","id3","add"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"string fn","description":"the mediafilename, in which to add the tag"},{"identifier":"string tag","description":"\"artist\", \"album\", \"genre\", \"comment\", \"title\", \"track\" or \"year\""},{"identifier":"string tagval","description":"the new value to be added"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_TagMediaFile","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"fn","type":"string"},{"identifier":"tag","type":"string"},{"identifier":"tagval","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"SNM_TagMediaFile\""},{"identifier":"\"fn\""},{"identifier":"\"tag\""},{"identifier":"\"tagval\""}]}},"requires":{"Reaper":"5.62","SWS":"2.12.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, if adding the tag worked; false, if adding didn't work."}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.SNM_TagMediaFile(string fn, string tag, string tagval)","eel":"bool extension_api(\"SNM_TagMediaFile\", \"fn\", \"tag\", \"tagval\")","python":"Boolean retval = SNM_TagMediaFile(String fn, String tag, String tagval)","cpp":"bool SNM_TagMediaFile(const char* fn, const char* tag, const char* tagval)"},"title":"SNM_TagMediaFile","chapters":["File Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"\\[S&M\\] Tags a media file thanks to [TagLib](https://taglib.github.io). Use an empty tagval to clear a tag. When a file is opened in REAPER, turn it offline before using this function. Returns false if nothing updated. See [SNM\\_ReadMediaFileTag](#SNM_ReadMediaFileTag).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer bookmarkId","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.SNM_TieResourceSlotActions","return_values":[],"parameters":[{"identifier":"bookmarkId","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"SNM_TieResourceSlotActions\""},{"type_name":"int","identifier":"bookmarkId"}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.SNM_TieResourceSlotActions(integer bookmarkId)","eel":"extension_api(\"SNM_TieResourceSlotActions\", int bookmarkId)","python":"SNM_TieResourceSlotActions(Int bookmarkId)","cpp":"void SNM_TieResourceSlotActions(int bookmarkId)"},"title":"SNM_TieResourceSlotActions","chapters":["User Interface","Dialogs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[S&M] Attach Resources slot actions to a given bookmark.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","userinterface","midi","editor","open","active"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.SN_FocusMIDIEditor","return_values":[],"parameters":[]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"SN_FocusMIDIEditor\""}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.SN_FocusMIDIEditor()","eel":"extension_api(\"SN_FocusMIDIEditor\")","python":"SN_FocusMIDIEditor()","cpp":"void SN_FocusMIDIEditor()"},"title":"SN_FocusMIDIEditor","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Focuses the active/open MIDI editor.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","trackmanagement","get","notes","sws","mediaitem"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem item","description":"the MediaItem from which to get the notes from"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ULT_GetMediaItemNote","return_values":[{"identifier":"str","type":"string"}],"parameters":[{"identifier":"item","type":"MediaItem"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ULT_GetMediaItemNote\""},{"identifier":"#retval"},{"type_name":"MediaItem","identifier":"item"}]}},"requires":{"Reaper":"5.62","SWS":"2.12.1.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string str","description":"the notes, as stored in the MediaItem. If no notes exist, it will return \"\""}],"prog_lang":"*"},"functioncall":{"lua":"string str = reaper.ULT_GetMediaItemNote(MediaItem item)","eel":"bool extension_api(\"ULT_GetMediaItemNote\", #retval, MediaItem item)","python":"String retval = ULT_GetMediaItemNote(MediaItem item)","cpp":"const char* ULT_GetMediaItemNote(MediaItem* item)"},"title":"ULT_GetMediaItemNote","chapters":["Mediaitem Management","Item States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"markdown","description":"Deprecated\n\n[ULT] Deprecated, see [GetSetMediaItemInfo\\_String](#GetSetMediaItemInfo_String) (v5.95+). Get item notes.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","mediaitemmanagement","set","mediaitem","notes","sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem item","description":"the MediaItem in which to add the Notes"},{"identifier":"string note","description":"the notes to be added. Newlines are allowed. Long strings may slow down Reaper!"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ULT_SetMediaItemNote","return_values":[],"parameters":[{"identifier":"item","type":"MediaItem"},{"identifier":"note","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ULT_SetMediaItemNote\""},{"type_name":"MediaItem","identifier":"item"},{"identifier":"\"note\""}]}},"requires":{"Reaper":"5.62","SWS":"2.9.7"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ULT_SetMediaItemNote(MediaItem item, string note)","eel":"extension_api(\"ULT_SetMediaItemNote\", MediaItem item, \"note\")","python":"ULT_SetMediaItemNote(MediaItem item, String note)","cpp":"void ULT_SetMediaItemNote(MediaItem* item, const char* note)"},"title":"ULT_SetMediaItemNote","chapters":["Mediaitem Management","Item States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"markdown","description":"[ULT] Deprecated, see [GetSetMediaItemInfo\\_String](#GetSetMediaItemInfo_String) (v5.95+). Set item notes.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer section","description":"the section of the action:\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"},{"identifier":"integer cmdID","description":"the command-id of the action, whose shortcuts you want to count"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Actions_CountShortcuts","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"section","type":"integer"},{"identifier":"cmdID","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_Actions_CountShortcuts\""},{"type_name":"int","identifier":"section"},{"type_name":"int","identifier":"cmdID"}]}},"requires":{"Reaper":"5.974","JS":"1.220"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the number of shortcuts available"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_Actions_CountShortcuts(integer section, integer cmdID)","eel":"int extension_api(\"JS_Actions_CountShortcuts\", int section, int cmdID)","python":"Int retval = JS_Actions_CountShortcuts(Int section, Int cmdID)","cpp":"int JS_Actions_CountShortcuts(int section, int cmdID)"},"title":"JS_Actions_CountShortcuts","chapters":["JS_Plugin","Shortcuts"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Counts the shortcuts available for a specific action within a section.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer section","description":"the section of the action:\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"},{"identifier":"integer cmdID","description":"the command-id of the action, whose shortcut you want to delete"},{"identifier":"integer shortcutidx","description":"the shortcut that you want to delete; 0-based"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Actions_DeleteShortcut","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"section","type":"integer"},{"identifier":"cmdID","type":"integer"},{"identifier":"shortcutidx","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_Actions_DeleteShortcut\""},{"type_name":"int","identifier":"section"},{"type_name":"int","identifier":"cmdID"},{"type_name":"int","identifier":"shortcutidx"}]}},"requires":{"Reaper":"5.974","JS":"1.220"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, deleting was successful; false, deleting was unsuccessful"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.JS_Actions_DeleteShortcut(integer section, integer cmdID, integer shortcutidx)","eel":"bool extension_api(\"JS_Actions_DeleteShortcut\", int section, int cmdID, int shortcutidx)","python":"Boolean retval = JS_Actions_DeleteShortcut(Int section, Int cmdID, Int shortcutidx)","cpp":"bool JS_Actions_DeleteShortcut(int section, int cmdID, int shortcutidx)"},"title":"JS_Actions_DeleteShortcut","chapters":["JS_Plugin","Shortcuts"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Deletes a shortcut of a specific action within a section.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer section","description":"the section of the action:\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"},{"identifier":"integer cmdID","description":"the command-id of the action, whose shortcut you want to set"},{"identifier":"integer shortcutidx","description":"the shortcut that you want to set; 0-based"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Actions_DoShortcutDialog","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"section","type":"integer"},{"identifier":"cmdID","type":"integer"},{"identifier":"shortcutidx","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_Actions_DoShortcutDialog\""},{"type_name":"int","identifier":"section"},{"type_name":"int","identifier":"cmdID"},{"type_name":"int","identifier":"shortcutidx"}]}},"requires":{"Reaper":"5.974","JS":"1.220"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, setting was successful; false, setting was unsuccessful"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.JS_Actions_DoShortcutDialog(integer section, integer cmdID, integer shortcutidx)","eel":"bool extension_api(\"JS_Actions_DoShortcutDialog\", int section, int cmdID, int shortcutidx)","python":"Boolean retval = JS_Actions_DoShortcutDialog(Int section, Int cmdID, Int shortcutidx)","cpp":"bool JS_Actions_DoShortcutDialog(int section, int cmdID, int shortcutidx)"},"title":"JS_Actions_DoShortcutDialog","chapters":["JS_Plugin","Shortcuts"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Opens the do-shortcut-dialog, which allows you setting a shortcut for a specific action.\n\nIf the shortcut index is higher than the current number of shortcuts, it will add a new shortcut.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer section","description":"the section of the action:\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"},{"identifier":"integer cmdID","description":"the command-id of the action, whose shortcut-description you want to get"},{"identifier":"integer shortcutidx","description":"the shortcut whose description you want to get; 0-based"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Actions_GetShortcutDesc","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"desc","type":"string"}],"parameters":[{"identifier":"section","type":"integer"},{"identifier":"cmdID","type":"integer"},{"identifier":"shortcutidx","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_Actions_GetShortcutDesc\""},{"type_name":"int","identifier":"section"},{"type_name":"int","identifier":"cmdID"},{"type_name":"int","identifier":"shortcutidx"},{"identifier":"#desc"}]}},"requires":{"Reaper":"5.974","JS":"1.220"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, getting was successful; false, getting was unsuccessful"},{"identifier":"string desc","description":"the description of the shortcut; \"\", if shortcut is not available"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string desc = reaper.JS_Actions_GetShortcutDesc(integer section, integer cmdID, integer shortcutidx)","eel":"bool extension_api(\"JS_Actions_GetShortcutDesc\", int section, int cmdID, int shortcutidx, #desc)","python":"(Boolean retval, Int section, Int cmdID, Int shortcutidx, String descOut, Int descOut_sz) = JS_Actions_GetShortcutDesc(section, cmdID, shortcutidx, descOut, descOut_sz)","cpp":"bool JS_Actions_GetShortcutDesc(int section, int cmdID, int shortcutidx, char* descOut, int descOut_sz)"},"title":"JS_Actions_GetShortcutDesc","chapters":["JS_Plugin","Shortcuts"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"returns the description of a shortcut, as stored for a specific action within a section.\n\nThis will be the shown representation of the shortcut as seen in the actionlist. That means, it is localized!","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier address","description":""},{"identifier":"integer offset","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Byte","return_values":[{"identifier":"byte","type":"integer"}],"parameters":[{"identifier":"pointer","type":"identifier"},{"identifier":"offset","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Byte\""},{"type_name":"void*","identifier":"pointer"},{"type_name":"int","identifier":"offset"},{"type_name":"int","identifier":"&byte"}]}},"requires":{"Reaper":"5.974","JS":"0.971"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer byte","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer byte = reaper.JS_Byte(identifier pointer, integer offset)","eel":"extension_api(\"JS_Byte\", void* pointer, int offset, int &byte)","python":"(void pointer, Int offset, Int byteOut) = JS_Byte(pointer, offset, byteOut)","cpp":"void JS_Byte(void* pointer, int offset, int* byteOut)"},"title":"JS_Byte","chapters":["Api-Helper-Functions","Address/Datatype Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the unsigned byte at address[offset]. Offset is added as steps of 1 byte each.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":11,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"integer dstx","description":""},{"identifier":"integer dsty","description":""},{"identifier":"integer dstw","description":""},{"identifier":"integer dsth","description":""},{"identifier":"identifier sysBitmap","description":""},{"identifier":"integer srcx","description":""},{"identifier":"integer srcy","description":""},{"identifier":"integer srcw","description":""},{"identifier":"integer srch","description":""},{"identifier":"optional boolean autoUpdate","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Composite","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"dstx","type":"integer"},{"identifier":"dsty","type":"integer"},{"identifier":"dstw","type":"integer"},{"identifier":"dsth","type":"integer"},{"identifier":"sysBitmap","type":"identifier"},{"identifier":"srcx","type":"integer"},{"identifier":"srcy","type":"integer"},{"identifier":"srcw","type":"integer"},{"identifier":"srch","type":"integer"},{"isOptional":true,"type":"boolean","identifier":"autoUpdate"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_Composite\""},{"type_name":"void*","identifier":"windowHWND"},{"type_name":"int","identifier":"dstx"},{"type_name":"int","identifier":"dsty"},{"type_name":"int","identifier":"dstw"},{"type_name":"int","identifier":"dsth"},{"type_name":"void*","identifier":"sysBitmap"},{"type_name":"int","identifier":"srcx"},{"type_name":"int","identifier":"srcy"},{"type_name":"int","identifier":"srcw"},{"type_name":"int","identifier":"srch"},{"identifier":"autoUpdateOptional","modifier":"optional","type_name":"boolean"}]}},"requires":{"Reaper":"5.974","JS":"1.215"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"1 if successful\n-1 = windowHWND is not a window\n-3 = Could not obtain the original window process\n-4 = sysBitmap is not a LICE bitmap\n-5 = sysBitmap is not a system bitmap\n-6 = Could not obtain the window HDC\n-7 = Error when subclassing to new window process."}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_Composite(identifier windowHWND, integer dstx, integer dsty, integer dstw, integer dsth, identifier sysBitmap, integer srcx, integer srcy, integer srcw, integer srch, optional boolean autoUpdate)","eel":"int extension_api(\"JS_Composite\", void* windowHWND, int dstx, int dsty, int dstw, int dsth, void* sysBitmap, int srcx, int srcy, int srcw, int srch, optional boolean autoUpdateOptional)","python":"(Int retval, void windowHWND, Int dstx, Int dsty, Int dstw, Int dsth, void sysBitmap, Int srcx, Int srcy, Int srcw, Int srch, Boolean autoUpdateOptional) = JS_Composite(windowHWND, dstx, dsty, dstw, dsth, sysBitmap, srcx, srcy, srcw, srch, autoUpdateOptional)","cpp":"int JS_Composite(void* windowHWND, int dstx, int dsty, int dstw, int dsth, void* sysBitmap, int srcx, int srcy, int srcw, int srch, bool* autoUpdateOptional)"},"title":"JS_Composite","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Composites a LICE bitmap with a REAPER window. Each time that the window is re-drawn, the bitmap will be blitted over the window's client area (with per-pixel alpha blending).\n\n\\* If dstw or dsth is -1, the bitmap will be stretched to fill the width or height of the window, respectively.\n\n\\* autoUpdate is an optional parameter that is false by default. If true, JS\\_Composite will automatically invalidate and re-draw the part of the window that covers the current position of the bitmap, and if the bitmap is being moved, also the previous position. (If only one or a handful of bitmaps are being moved across the screen, autoUpdate should result in smoother animation on WindowsOS; if numerous bitmaps are spread over the entire window, it may be faster to disable autoUpdate and instead call [JS\\_Window\\_InvalidateRect](#JS_Window_InvalidateRect) explicitly once all bitmaps have been moved.)\n\n\\* InvalidateRect should also be called whenever the contents of the bitmap contents have been changed, but not the position, to trigger a window update.\n\n\\* On WindowsOS, the key to reducing flickering is to slow down the frequency at which the window is re-drawn. InvalidateRect should only be called when absolutely necessary, preferably not more than 20 times per second. (Also refer to the [JS\\_Composite\\_Delay](#JS_Composite_Delay) function.)\n\n\\* On WindowsOS, flickering can further be reduced by keeping the invalidated area as small as possible, covering only the bitmaps that have been edited or moved. However, if numerous bitmaps are spread over the entire window, it may be faster to simply invalidate the entire client area.\n\n\\* This function should not be applied directly to top-level windows, but rather to child windows.\n\n\\* Some classes of UI elements, particularly buttons, do not take kindly to being composited, and may crash REAPER.\n\n\\* On WindowsOS, GDI blitting does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either [LICE\\_Blit](#LICE_Blit) or [LICE\\_ProcessRect](#LICE_ProcessRect).\n\nReturns:\n1 if successful, otherwise -1 = windowHWND is not a window, -3 = Could not obtain the original window process, -4 = sysBitmap is not a LICE bitmap, -5 = sysBitmap is not a system bitmap, -6 = Could not obtain the window HDC, -7 = Error when subclassing to new window process.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"number minTime","description":""},{"identifier":"number maxTime","description":""},{"identifier":"integer numBitmapsWhenMax","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Composite_Delay","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"prevMinTime","type":"number"},{"identifier":"prevMaxTime","type":"number"},{"identifier":"prevBitmaps","type":"integer"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"minTime","type":"number"},{"identifier":"maxTime","type":"number"},{"identifier":"numBitmapsWhenMax","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_Composite_Delay\""},{"type_name":"void*","identifier":"windowHWND"},{"identifier":"minTime"},{"identifier":"maxTime"},{"type_name":"int","identifier":"numBitmapsWhenMax"},{"identifier":"&prevMinTime"},{"identifier":"&prevMaxTime"},{"type_name":"int","identifier":"&prevBitmaps"}]}},"requires":{"Reaper":"5.974","JS":"1.010"},"return_values":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"integer retval","description":""},{"identifier":"number prevMinTime","description":""},{"identifier":"number prevMaxTime","description":""},{"identifier":"integer prevBitmaps","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, number prevMinTime, number prevMaxTime, integer prevBitmaps = reaper.JS_Composite_Delay(identifier windowHWND, number minTime, number maxTime, integer numBitmapsWhenMax)","eel":"int extension_api(\"JS_Composite_Delay\", void* windowHWND, minTime, maxTime, int numBitmapsWhenMax, &prevMinTime, &prevMaxTime, int &prevBitmaps)","python":"(Int retval, void windowHWND, Float minTime, Float maxTime, Int numBitmapsWhenMax, Float prevMinTimeOut, Float prevMaxTimeOut, Int prevBitmapsOut) = JS_Composite_Delay(windowHWND, minTime, maxTime, numBitmapsWhenMax, prevMinTimeOut, prevMaxTimeOut, prevBitmapsOut)","cpp":"int JS_Composite_Delay(void* windowHWND, double minTime, double maxTime, int numBitmapsWhenMax, double* prevMinTimeOut, double* prevMaxTimeOut, int* prevBitmapsOut)"},"title":"JS_Composite_Delay","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"On WindowsOS, flickering of composited images can be improved considerably by slowing the refresh rate of the window. The optimal refresh rate may depend on the number of composited bitmaps.\n\nminTime is the minimum refresh delay, in seconds, when only one bitmap is composited onto the window. The delay time will increase linearly with the number of bitmaps, up to a maximum of maxTime when numBitmapsWhenMax is reached.\n\nIf both minTime and maxTime are 0, all delay settings for the window are cleared.\n\nReturns:\n* retval = 1 if successful, 0 if arguments are invalid (i.e. if maxTime < minTime, or maxBitmaps < 1).\n* If delay times have not previously been set for this window, prev time values are 0.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier windowHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Composite_ListBitmaps","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"list","type":"string"}],"parameters":[{"identifier":"windowHWND","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_Composite_ListBitmaps\""},{"type_name":"void*","identifier":"windowHWND"},{"identifier":"#list"}]}},"requires":{"Reaper":"5.974","JS":"0.980"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":""},{"identifier":"string list","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, string list = reaper.JS_Composite_ListBitmaps(identifier windowHWND)","eel":"int extension_api(\"JS_Composite_ListBitmaps\", void* windowHWND, #list)","python":"(Int retval, void windowHWND, String listOutNeedBig, Int listOutNeedBig_sz) = JS_Composite_ListBitmaps(windowHWND, listOutNeedBig, listOutNeedBig_sz)","cpp":"int JS_Composite_ListBitmaps(void* windowHWND, char* listOutNeedBig, int listOutNeedBig_sz)"},"title":"JS_Composite_ListBitmaps","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Returns all bitmaps composited to the given window.\n\nThe list is formatted as a comma-separated string of hexadecimal values, each representing a LICE_IBitmap\\* pointer.\n\nretval is the number of linked bitmaps found, or negative if an error occured.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"identifier bitmap","description":""},{"identifier":"boolean autoUpdate","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Composite_Unlink","return_values":[],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"bitmap","type":"identifier"},{"identifier":"autoUpdate","type":"boolean"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Composite_Unlink\""},{"type_name":"void*","identifier":"windowHWND"},{"type_name":"void*","identifier":"bitmap"},{"type_name":"boolean","identifier":"autoUpdateOptional"}]}},"requires":{"Reaper":"5.974","JS":"1.002"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_Composite_Unlink(identifier windowHWND, identifier bitmap, boolean autoUpdate)","eel":"extension_api(\"JS_Composite_Unlink\", void* windowHWND, void* bitmap, boolean autoUpdateOptional)","python":"(void windowHWND, void bitmapOptional, Boolean autoUpdateOptional) = JS_Composite_Unlink(windowHWND, bitmapOptional, autoUpdateOptional)","cpp":"void JS_Composite_Unlink(void* windowHWND, void* bitmapOptional, bool* autoUpdateOptional)"},"title":"JS_Composite_Unlink","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Unlinks the window and bitmap.\n\n* autoUpdate is an optional parameter. If unlinking a single bitmap and autoUpdate is true, the function will automatically re-draw the window to remove the blitted image.\n\nIf no bitmap is specified, all bitmaps composited to the window will be unlinked -- even those by other scripts.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier address","description":""},{"identifier":"integer offset","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Double","return_values":[{"identifier":"double","type":"number"}],"parameters":[{"identifier":"address","type":"identifier"},{"identifier":"pointer","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Double\""},{"type_name":"void*","identifier":"pointer"},{"type_name":"int","identifier":"offset"},{"identifier":"&double"}]}},"requires":{"Reaper":"5.974","JS":"0.971"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number double","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number double = reaper.JS_Double(identifier address, integer pointer)","eel":"extension_api(\"JS_Double\", void* pointer, int offset, &double)","python":"(void pointer, Int offset, Float doubleOut) = JS_Double(pointer, offset, doubleOut)","cpp":"void JS_Double(void* pointer, int offset, double* doubleOut)"},"title":"JS_Double","chapters":["Api-Helper-Functions","Address/Datatype Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the 8-byte floating point value at address[offset]. Offset is added as steps of 8 bytes each.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string filePath","description":"the file, whose file-stats you want to get"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_File_Stat","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"size","type":"number"},{"identifier":"accessedTime","type":"string"},{"identifier":"modifiedTime","type":"string"},{"identifier":"cTime","type":"string"},{"identifier":"deviceID","type":"integer"},{"identifier":"deviceSpecialID","type":"integer"},{"identifier":"inode","type":"integer"},{"identifier":"mode","type":"integer"},{"identifier":"numLinks","type":"integer"},{"identifier":"ownerUserID","type":"integer"},{"identifier":"ownerGroupID","type":"integer"}],"parameters":[{"identifier":"filePath","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_File_Stat\""},{"identifier":"\"filePath\""},{"identifier":"&size"},{"identifier":"#accessedTime"},{"identifier":"#modifiedTime"},{"identifier":"#cTime"},{"type_name":"int","identifier":"&deviceID"},{"type_name":"int","identifier":"&deviceSpecialID"},{"type_name":"int","identifier":"&inode"},{"type_name":"int","identifier":"&mode"},{"type_name":"int","identifier":"&numLinks"},{"type_name":"int","identifier":"&ownerUserID"},{"type_name":"int","identifier":"&ownerGroupID"}]}},"requires":{"Reaper":"5.974","JS":"1.217"},"return_values":{"markup_type":"plaintext","param_count":12,"entries":[{"identifier":"integer retval","description":"negative, if not retrievable; 0, if retrieving was successful"},{"identifier":"number size","description":"the size of the file in bytes"},{"identifier":"string accessedTime","description":"the last time the file was accessed"},{"identifier":"string modifiedTime","description":"the last time the file was modified"},{"identifier":"string cTime","description":"the time the file was created(Windows) or the last time its status had changed(Mac and Linux)"},{"identifier":"integer deviceID","description":"the ID of the device"},{"identifier":"integer deviceSpecialID","description":"the special ID of the file"},{"identifier":"integer inode","description":"the inode"},{"identifier":"integer mode","description":"the attributes set"},{"identifier":"integer numLinks","description":"the number of links"},{"identifier":"integer ownerUserID","description":"ID of the user the file belongs to"},{"identifier":"integer ownerGroupID","description":"ID of the group the file belongs to"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, number size, string accessedTime, string modifiedTime, string cTime, integer deviceID, integer deviceSpecialID, integer inode, integer mode, integer numLinks, integer ownerUserID, integer ownerGroupID = reaper.JS_File_Stat(string filePath)","eel":"int extension_api(\"JS_File_Stat\", \"filePath\", &size, #accessedTime, #modifiedTime, #cTime, int &deviceID, int &deviceSpecialID, int &inode, int &mode, int &numLinks, int &ownerUserID, int &ownerGroupID)","python":"(Int retval, String filePath, Float sizeOut, String accessedTimeOut, String modifiedTimeOut, String cTimeOut, Int deviceIDOut, Int deviceSpecialIDOut, Int inodeOut, Int modeOut, Int numLinksOut, Int ownerUserIDOut, Int ownerGroupIDOut) = JS_File_Stat(filePath, sizeOut, accessedTimeOut, modifiedTimeOut, cTimeOut, deviceIDOut, deviceSpecialIDOut, inodeOut, modeOut, numLinksOut, ownerUserIDOut, ownerGroupIDOut)","cpp":"int JS_File_Stat(const char* filePath, double* sizeOut, char* accessedTimeOut, char* modifiedTimeOut, char* cTimeOut, int* deviceIDOut, int* deviceSpecialIDOut, int* inodeOut, int* modeOut, int* numLinksOut, int* ownerUserIDOut, int* ownerGroupIDOut)"},"title":"JS_File_Stat","chapters":["File Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns information about a file.\n\ncTime is not implemented on all systems. If it does return a time, the value may differ depending on the OS: on WindowsOS, it may refer to the time that the file was either created or copied, whereas on Linux and macOS, it may refer to the time of last status change.\n\nretval is 0 if successful, negative if not.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":9,"entries":[{"identifier":"identifier destHDC","description":""},{"identifier":"integer dstx","description":""},{"identifier":"integer dsty","description":""},{"identifier":"identifier sourceHDC","description":""},{"identifier":"integer srcx","description":""},{"identifier":"integer srxy","description":""},{"identifier":"integer width","description":""},{"identifier":"integer height","description":""},{"identifier":"optional string mode","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_GDI_Blit","return_values":[],"parameters":[{"identifier":"destHDC","type":"identifier"},{"identifier":"dstx","type":"integer"},{"identifier":"dsty","type":"integer"},{"identifier":"sourceHDC","type":"identifier"},{"identifier":"srcx","type":"integer"},{"identifier":"srxy","type":"integer"},{"identifier":"width","type":"integer"},{"identifier":"height","type":"integer"},{"isOptional":true,"type":"string","identifier":"mode"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_GDI_Blit\""},{"type_name":"void*","identifier":"destHDC"},{"type_name":"int","identifier":"dstx"},{"type_name":"int","identifier":"dsty"},{"type_name":"void*","identifier":"sourceHDC"},{"type_name":"int","identifier":"srcx"},{"type_name":"int","identifier":"srxy"},{"type_name":"int","identifier":"width"},{"type_name":"int","identifier":"height"},{"type_name":"optional","identifier":"\"mode\""}]}},"requires":{"Reaper":"5.974","JS":"1.002"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_GDI_Blit(identifier destHDC, integer dstx, integer dsty, identifier sourceHDC, integer srcx, integer srxy, integer width, integer height, optional string mode)","eel":"extension_api(\"JS_GDI_Blit\", void* destHDC, int dstx, int dsty, void* sourceHDC, int srcx, int srxy, int width, int height, optional \"mode\")","python":"JS_GDI_Blit(void destHDC, Int dstx, Int dsty, void sourceHDC, Int srcx, Int srxy, Int width, Int height, String modeOptional)","cpp":"void JS_GDI_Blit(void* destHDC, int dstx, int dsty, void* sourceHDC, int srcx, int srxy, int width, int height, const char* modeOptional)"},"title":"JS_GDI_Blit","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Blits between two device contexts, which may include LICE \"system bitmaps\".\n\nmode: Optional parameter. \"SRCCOPY\" by default, or specify \"ALPHA\" to enable per-pixel alpha blending.\n\nWARNING: On WindowsOS, GDI\\_Blit does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE\\_Blit or LICE\\_ProcessRect.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer color","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_GDI_CreateFillBrush","return_values":[{"identifier":"font","type":"identifier"}],"parameters":[{"identifier":"color","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_GDI_CreateFillBrush\""},{"type_name":"int","identifier":"color"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier font","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier font = reaper.JS_GDI_CreateFillBrush(integer color)","eel":"void* extension_api(\"JS_GDI_CreateFillBrush\", int color)","python":"identifier font = JS_GDI_CreateFillBrush(Int color)","cpp":"void* JS_GDI_CreateFillBrush(int color)"},"title":"JS_GDI_CreateFillBrush","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"integer height","description":""},{"identifier":"integer weight","description":""},{"identifier":"integer angle","description":""},{"identifier":"boolean italic","description":""},{"identifier":"boolean underline","description":""},{"identifier":"boolean strike","description":""},{"identifier":"string fontName","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_GDI_CreateFont","return_values":[{"identifier":"font","type":"identifier"}],"parameters":[{"identifier":"height","type":"integer"},{"identifier":"weight","type":"integer"},{"identifier":"angle","type":"integer"},{"identifier":"italic","type":"boolean"},{"identifier":"underline","type":"boolean"},{"identifier":"strike","type":"boolean"},{"identifier":"fontName","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_GDI_CreateFont\""},{"type_name":"int","identifier":"height"},{"type_name":"int","identifier":"weight"},{"type_name":"int","identifier":"angle"},{"type_name":"bool","identifier":"italic"},{"type_name":"bool","identifier":"underline"},{"type_name":"bool","identifier":"strike"},{"identifier":"\"fontName\""}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier font","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier font = reaper.JS_GDI_CreateFont(integer height, integer weight, integer angle, boolean italic, boolean underline, boolean strike, string fontName)","eel":"void* extension_api(\"JS_GDI_CreateFont\", int height, int weight, int angle, bool italic, bool underline, bool strike, \"fontName\")","python":"identifier font = JS_GDI_CreateFont(Int height, Int weight, Int angle, Boolean italic, Boolean underline, Boolean strikeOut, String fontName)","cpp":"void* JS_GDI_CreateFont(int height, int weight, int angle, bool italic, bool underline, bool strikeOut, const char* fontName)"},"title":"JS_GDI_CreateFont","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Parameters:\n\n* weight: 0 - 1000, with 0 = auto, 400 = normal and 700 = bold.\n\n* angle: the angle, in tenths of degrees, between the text and the x-axis of the device.\n\n* fontName: If empty string \"\", uses first font that matches the other specified attributes.\n\n\n\n           Note: Text color must be set separately.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer width","description":""},{"identifier":"integer color","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_GDI_CreatePen","return_values":[{"identifier":"pen","type":"identifier"}],"parameters":[{"identifier":"width","type":"integer"},{"identifier":"color","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_GDI_CreatePen\""},{"type_name":"int","identifier":"width"},{"type_name":"int","identifier":"color"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier pen","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier pen = reaper.JS_GDI_CreatePen(integer width, integer color)","eel":"void* extension_api(\"JS_GDI_CreatePen\", int width, int color)","python":"identifier pen = JS_GDI_CreatePen(Int width, Int color)","cpp":"void* JS_GDI_CreatePen(int width, int color)"},"title":"JS_GDI_CreatePen","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier GDIObject","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_GDI_DeleteObject","return_values":[],"parameters":[{"identifier":"GDIObject","type":"identifier"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_GDI_DeleteObject\""},{"type_name":"void*","identifier":"GDIObject"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_GDI_DeleteObject(identifier GDIObject)","eel":"extension_api(\"JS_GDI_DeleteObject\", void* GDIObject)","python":"JS_GDI_DeleteObject(void GDIObject)","cpp":"void JS_GDI_DeleteObject(void* GDIObject)"},"title":"JS_GDI_DeleteObject","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"identifier deviceHDC","description":""},{"identifier":"string text","description":""},{"identifier":"integer len","description":""},{"identifier":"integer left","description":""},{"identifier":"integer top","description":""},{"identifier":"integer right","description":""},{"identifier":"integer bottom","description":""},{"identifier":"string align","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_GDI_DrawText","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"deviceHDC","type":"identifier"},{"identifier":"text","type":"string"},{"identifier":"len","type":"integer"},{"identifier":"left","type":"integer"},{"identifier":"top","type":"integer"},{"identifier":"right","type":"integer"},{"identifier":"bottom","type":"integer"},{"identifier":"align","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_GDI_DrawText\""},{"type_name":"void*","identifier":"deviceHDC"},{"identifier":"\"text\""},{"type_name":"int","identifier":"len"},{"type_name":"int","identifier":"left"},{"type_name":"int","identifier":"top"},{"type_name":"int","identifier":"right"},{"type_name":"int","identifier":"bottom"},{"identifier":"\"align"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_GDI_DrawText(identifier deviceHDC, string text, integer len, integer left, integer top, integer right, integer bottom, string align))","eel":"int extension_api(\"JS_GDI_DrawText\", void* deviceHDC, \"text\", int len, int left, int top, int right, int bottom, \"align)\")","python":"Int retval = JS_GDI_DrawText(void deviceHDC, String text, Int len, Int left, Int top, Int right, Int bottom, String align))","cpp":"int JS_GDI_DrawText(void* deviceHDC, const char* text, int len, int left, int top, int right, int bottom, const char* align))"},"title":"JS_GDI_DrawText","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Parameters:\n\n* align: Combination of: \"TOP\", \"VCENTER\", \"LEFT\", \"HCENTER\", \"RIGHT\", \"BOTTOM\", \"WORDBREAK\", \"SINGLELINE\", \"NOCLIP\", \"CALCRECT\", \"NOPREFIX\" or \"ELLIPSIS\"\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"identifier deviceHDC","description":""},{"identifier":"integer left","description":""},{"identifier":"integer top","description":""},{"identifier":"integer right","description":""},{"identifier":"integer bottom","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_GDI_FillEllipse","return_values":[],"parameters":[{"identifier":"deviceHDC","type":"identifier"},{"identifier":"left","type":"integer"},{"identifier":"top","type":"integer"},{"identifier":"right","type":"integer"},{"identifier":"bottom","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_GDI_FillEllipse\""},{"type_name":"void*","identifier":"deviceHDC"},{"type_name":"int","identifier":"left"},{"type_name":"int","identifier":"top"},{"type_name":"int","identifier":"right"},{"type_name":"int","identifier":"bottom"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_GDI_FillEllipse(identifier deviceHDC, integer left, integer top, integer right, integer bottom)","eel":"extension_api(\"JS_GDI_FillEllipse\", void* deviceHDC, int left, int top, int right, int bottom)","python":"JS_GDI_FillEllipse(void deviceHDC, Int left, Int top, Int right, Int bottom)","cpp":"void JS_GDI_FillEllipse(void* deviceHDC, int left, int top, int right, int bottom)"},"title":"JS_GDI_FillEllipse","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"identifier deviceHDC","description":""},{"identifier":"string packedX","description":""},{"identifier":"string packedY","description":""},{"identifier":"integer numPoints","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_GDI_FillPolygon","return_values":[],"parameters":[{"identifier":"deviceHDC","type":"identifier"},{"identifier":"packedX","type":"string"},{"identifier":"packedY","type":"string"},{"identifier":"numPoints","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_GDI_FillPolygon\""},{"type_name":"void*","identifier":"deviceHDC"},{"identifier":"\"packedX\""},{"identifier":"\"packedY\""},{"type_name":"int","identifier":"numPoints"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_GDI_FillPolygon(identifier deviceHDC, string packedX, string packedY, integer numPoints)","eel":"extension_api(\"JS_GDI_FillPolygon\", void* deviceHDC, \"packedX\", \"packedY\", int numPoints)","python":"JS_GDI_FillPolygon(void deviceHDC, String packedX, String packedY, Int numPoints)","cpp":"void JS_GDI_FillPolygon(void* deviceHDC, const char* packedX, const char* packedY, int numPoints)"},"title":"JS_GDI_FillPolygon","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"packedX and packedY are strings of points, each packed as \"<i4\".\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"identifier deviceHDC","description":""},{"identifier":"integer left","description":""},{"identifier":"integer top","description":""},{"identifier":"integer right","description":""},{"identifier":"integer bottom","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_GDI_FillRect","return_values":[],"parameters":[{"identifier":"deviceHDC","type":"identifier"},{"identifier":"left","type":"integer"},{"identifier":"top","type":"integer"},{"identifier":"right","type":"integer"},{"identifier":"bottom","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_GDI_FillRect\""},{"type_name":"void*","identifier":"deviceHDC"},{"type_name":"int","identifier":"left"},{"type_name":"int","identifier":"top"},{"type_name":"int","identifier":"right"},{"type_name":"int","identifier":"bottom"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_GDI_FillRect(identifier deviceHDC, integer left, integer top, integer right, integer bottom)","eel":"extension_api(\"JS_GDI_FillRect\", void* deviceHDC, int left, int top, int right, int bottom)","python":"JS_GDI_FillRect(void deviceHDC, Int left, Int top, Int right, Int bottom)","cpp":"void JS_GDI_FillRect(void* deviceHDC, int left, int top, int right, int bottom)"},"title":"JS_GDI_FillRect","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"identifier deviceHDC","description":""},{"identifier":"integer left","description":""},{"identifier":"integer top","description":""},{"identifier":"integer right","description":""},{"identifier":"integer bottom","description":""},{"identifier":"integer xrnd","description":""},{"identifier":"integer yrnd","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_GDI_FillRoundRect","return_values":[],"parameters":[{"identifier":"deviceHDC","type":"identifier"},{"identifier":"left","type":"integer"},{"identifier":"top","type":"integer"},{"identifier":"right","type":"integer"},{"identifier":"bottom","type":"integer"},{"identifier":"xrnd","type":"integer"},{"identifier":"yrnd","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_GDI_FillRoundRect\""},{"type_name":"void*","identifier":"deviceHDC"},{"type_name":"int","identifier":"left"},{"type_name":"int","identifier":"top"},{"type_name":"int","identifier":"right"},{"type_name":"int","identifier":"bottom"},{"type_name":"int","identifier":"xrnd"},{"type_name":"int","identifier":"yrnd"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_GDI_FillRoundRect(identifier deviceHDC, integer left, integer top, integer right, integer bottom, integer xrnd, integer yrnd)","eel":"extension_api(\"JS_GDI_FillRoundRect\", void* deviceHDC, int left, int top, int right, int bottom, int xrnd, int yrnd)","python":"JS_GDI_FillRoundRect(void deviceHDC, Int left, Int top, Int right, Int bottom, Int xrnd, Int yrnd)","cpp":"void JS_GDI_FillRoundRect(void* deviceHDC, int left, int top, int right, int bottom, int xrnd, int yrnd)"},"title":"JS_GDI_FillRoundRect","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier windowHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_GDI_GetClientDC","return_values":[{"identifier":"device_context","type":"identifier"}],"parameters":[{"identifier":"windowHWND","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_GDI_GetClientDC\""},{"type_name":"void*","identifier":"windowHWND"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier device_context","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier device_context = reaper.JS_GDI_GetClientDC(identifier windowHWND)","eel":"void* extension_api(\"JS_GDI_GetClientDC\", void* windowHWND)","python":"identifier device_context = JS_GDI_GetClientDC(void windowHWND)","cpp":"void* JS_GDI_GetClientDC(void* windowHWND)"},"title":"JS_GDI_GetClientDC","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the device context for the client area of the specified window.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.JS_GDI_GetScreenDC","return_values":[{"identifier":"device_context","type":"identifier"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_GDI_GetScreenDC\""}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier device_context","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier device_context = reaper.JS_GDI_GetScreenDC()","eel":"void* extension_api(\"JS_GDI_GetScreenDC\")","python":"identifier device_context = JS_GDI_GetScreenDC()","cpp":"void* JS_GDI_GetScreenDC()"},"title":"JS_GDI_GetScreenDC","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns a device context for the entire screen.\n\n\n\nWARNING: Only available on Windows, not Linux or MacOS.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string GUIElement","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_GDI_GetSysColor","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"GUIElement","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_GDI_GetSysColor\""},{"identifier":"\"GUIElement\""}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_GDI_GetSysColor(string GUIElement)","eel":"int extension_api(\"JS_GDI_GetSysColor\", \"GUIElement\")","python":"Int retval = JS_GDI_GetSysColor(String GUIElement)","cpp":"int JS_GDI_GetSysColor(const char* GUIElement)"},"title":"JS_GDI_GetSysColor","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier deviceHDC","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_GDI_GetTextColor","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"deviceHDC","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_GDI_GetTextColor\""},{"type_name":"void*","identifier":"deviceHDC"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_GDI_GetTextColor(identifier deviceHDC)","eel":"int extension_api(\"JS_GDI_GetTextColor\", void* deviceHDC)","python":"Int retval = JS_GDI_GetTextColor(void deviceHDC)","cpp":"int JS_GDI_GetTextColor(void* deviceHDC)"},"title":"JS_GDI_GetTextColor","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier windowHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_GDI_GetWindowDC","return_values":[{"identifier":"device_context","type":"identifier"}],"parameters":[{"identifier":"windowHWND","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_GDI_GetWindowDC\""},{"type_name":"void*","identifier":"windowHWND"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier device_context","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier device_context = reaper.JS_GDI_GetWindowDC(identifier windowHWND)","eel":"void* extension_api(\"JS_GDI_GetWindowDC\", void* windowHWND)","python":"identifier device_context = JS_GDI_GetWindowDC(void windowHWND)","cpp":"void* JS_GDI_GetWindowDC(void* windowHWND)"},"title":"JS_GDI_GetWindowDC","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the device context for the entire window, including title bar and frame.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"identifier deviceHDC","description":""},{"identifier":"integer x1","description":""},{"identifier":"integer y1","description":""},{"identifier":"integer x2","description":""},{"identifier":"integer y2","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_GDI_Line","return_values":[],"parameters":[{"identifier":"deviceHDC","type":"identifier"},{"identifier":"x1","type":"integer"},{"identifier":"y1","type":"integer"},{"identifier":"x2","type":"integer"},{"identifier":"y2","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_GDI_Line\""},{"type_name":"void*","identifier":"deviceHDC"},{"type_name":"int","identifier":"x1"},{"type_name":"int","identifier":"y1"},{"type_name":"int","identifier":"x2"},{"type_name":"int","identifier":"y2"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_GDI_Line(identifier deviceHDC, integer x1, integer y1, integer x2, integer y2)","eel":"extension_api(\"JS_GDI_Line\", void* deviceHDC, int x1, int y1, int x2, int y2)","python":"JS_GDI_Line(void deviceHDC, Int x1, Int y1, Int x2, Int y2)","cpp":"void JS_GDI_Line(void* deviceHDC, int x1, int y1, int x2, int y2)"},"title":"JS_GDI_Line","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"identifier deviceHDC","description":""},{"identifier":"string packedX","description":""},{"identifier":"string packedY","description":""},{"identifier":"integer numPoints","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_GDI_Polyline","return_values":[],"parameters":[{"identifier":"deviceHDC","type":"identifier"},{"identifier":"packedX","type":"string"},{"identifier":"packedY","type":"string"},{"identifier":"numPoints","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_GDI_Polyline\""},{"type_name":"void*","identifier":"deviceHDC"},{"identifier":"\"packedX\""},{"identifier":"\"packedY\""},{"type_name":"int","identifier":"numPoints"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_GDI_Polyline(identifier deviceHDC, string packedX, string packedY, integer numPoints)","eel":"extension_api(\"JS_GDI_Polyline\", void* deviceHDC, \"packedX\", \"packedY\", int numPoints)","python":"JS_GDI_Polyline(void deviceHDC, String packedX, String packedY, Int numPoints)","cpp":"void JS_GDI_Polyline(void* deviceHDC, const char* packedX, const char* packedY, int numPoints)"},"title":"JS_GDI_Polyline","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"packedX and packedY are strings of points, each packed as \"<i4\".\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"identifier deviceHDC","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_GDI_ReleaseDC","return_values":[],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"deviceHDC","type":"identifier"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_GDI_ReleaseDC\""},{"type_name":"void*","identifier":"windowHWND"},{"type_name":"void*","identifier":"deviceHDC"}]}},"requires":{"Reaper":"5.974","JS":"0.999"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_GDI_ReleaseDC(identifier windowHWND, identifier deviceHDC)","eel":"extension_api(\"JS_GDI_ReleaseDC\", void* windowHWND, void* deviceHDC)","python":"JS_GDI_ReleaseDC(void windowHWND, void deviceHDC)","cpp":"void JS_GDI_ReleaseDC(void* windowHWND, void* deviceHDC)"},"title":"JS_GDI_ReleaseDC","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"To release a window HDC, both arguments must be supplied: the HWND as well as the HDC. To release a screen DC, only the HDC needs to be supplied.\n\nFor compatibility with previous versions, the HWND and HDC can be supplied in any order.\n\nNOTE: Any GDI HDC should be released immediately after drawing, and deferred scripts should get and release new DCs in each cycle.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier deviceHDC","description":""},{"identifier":"identifier GDIObject","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_GDI_SelectObject","return_values":[{"identifier":"object","type":"identifier"}],"parameters":[{"identifier":"deviceHDC","type":"identifier"},{"identifier":"GDIObject","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_GDI_SelectObject\""},{"type_name":"void*","identifier":"deviceHDC"},{"type_name":"void*","identifier":"GDIObject"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier object","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier object = reaper.JS_GDI_SelectObject(identifier deviceHDC, identifier GDIObject)","eel":"void* extension_api(\"JS_GDI_SelectObject\", void* deviceHDC, void* GDIObject)","python":"identifier object = JS_GDI_SelectObject(void deviceHDC, void GDIObject)","cpp":"void* JS_GDI_SelectObject(void* deviceHDC, void* GDIObject)"},"title":"JS_GDI_SelectObject","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Activates a font, pen, or fill brush for subsequent drawing in the specified device context.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"identifier deviceHDC","description":""},{"identifier":"integer x","description":""},{"identifier":"integer y","description":""},{"identifier":"integer color","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_GDI_SetPixel","return_values":[],"parameters":[{"identifier":"deviceHDC","type":"identifier"},{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"},{"identifier":"color","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_GDI_SetPixel\""},{"type_name":"void*","identifier":"deviceHDC"},{"type_name":"int","identifier":"x"},{"type_name":"int","identifier":"y"},{"type_name":"int","identifier":"color"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_GDI_SetPixel(identifier deviceHDC, integer x, integer y, integer color)","eel":"extension_api(\"JS_GDI_SetPixel\", void* deviceHDC, int x, int y, int color)","python":"JS_GDI_SetPixel(void deviceHDC, Int x, Int y, Int color)","cpp":"void JS_GDI_SetPixel(void* deviceHDC, int x, int y, int color)"},"title":"JS_GDI_SetPixel","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier deviceHDC","description":""},{"identifier":"integer color","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_GDI_SetTextBkColor","return_values":[],"parameters":[{"identifier":"deviceHDC","type":"identifier"},{"identifier":"color","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_GDI_SetTextBkColor\""},{"type_name":"void*","identifier":"deviceHDC"},{"type_name":"int","identifier":"color"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_GDI_SetTextBkColor(identifier deviceHDC, integer color)","eel":"extension_api(\"JS_GDI_SetTextBkColor\", void* deviceHDC, int color)","python":"JS_GDI_SetTextBkColor(void deviceHDC, Int color)","cpp":"void JS_GDI_SetTextBkColor(void* deviceHDC, int color)"},"title":"JS_GDI_SetTextBkColor","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier deviceHDC","description":""},{"identifier":"integer mode","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_GDI_SetTextBkMode","return_values":[],"parameters":[{"identifier":"deviceHDC","type":"identifier"},{"identifier":"mode","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_GDI_SetTextBkMode\""},{"type_name":"void*","identifier":"deviceHDC"},{"type_name":"int","identifier":"mode"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_GDI_SetTextBkMode(identifier deviceHDC, integer mode)","eel":"extension_api(\"JS_GDI_SetTextBkMode\", void* deviceHDC, int mode)","python":"JS_GDI_SetTextBkMode(void deviceHDC, Int mode)","cpp":"void JS_GDI_SetTextBkMode(void* deviceHDC, int mode)"},"title":"JS_GDI_SetTextBkMode","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier deviceHDC","description":""},{"identifier":"integer color","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_GDI_SetTextColor","return_values":[],"parameters":[{"identifier":"deviceHDC","type":"identifier"},{"identifier":"color","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_GDI_SetTextColor\""},{"type_name":"void*","identifier":"deviceHDC"},{"type_name":"int","identifier":"color"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_GDI_SetTextColor(identifier deviceHDC, integer color)","eel":"extension_api(\"JS_GDI_SetTextColor\", void* deviceHDC, int color)","python":"JS_GDI_SetTextColor(void deviceHDC, Int color)","cpp":"void JS_GDI_SetTextColor(void* deviceHDC, int color)"},"title":"JS_GDI_SetTextColor","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":11,"entries":[{"identifier":"identifier destHDC","description":""},{"identifier":"integer dstx","description":""},{"identifier":"integer dsty","description":""},{"identifier":"integer dstw","description":""},{"identifier":"integer dsth","description":""},{"identifier":"identifier sourceHDC","description":""},{"identifier":"integer srcx","description":""},{"identifier":"integer srxy","description":""},{"identifier":"integer srcw","description":""},{"identifier":"integer srch","description":""},{"identifier":"optional string mode","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_GDI_StretchBlit","return_values":[],"parameters":[{"identifier":"destHDC","type":"identifier"},{"identifier":"dstx","type":"integer"},{"identifier":"dsty","type":"integer"},{"identifier":"dstw","type":"integer"},{"identifier":"dsth","type":"integer"},{"identifier":"sourceHDC","type":"identifier"},{"identifier":"srcx","type":"integer"},{"identifier":"srxy","type":"integer"},{"identifier":"srcw","type":"integer"},{"identifier":"srch","type":"integer"},{"isOptional":true,"type":"string","identifier":"mode"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_GDI_StretchBlit\""},{"type_name":"void*","identifier":"destHDC"},{"type_name":"int","identifier":"dstx"},{"type_name":"int","identifier":"dsty"},{"type_name":"int","identifier":"dstw"},{"type_name":"int","identifier":"dsth"},{"type_name":"void*","identifier":"sourceHDC"},{"type_name":"int","identifier":"srcx"},{"type_name":"int","identifier":"srxy"},{"type_name":"int","identifier":"srcw"},{"type_name":"int","identifier":"srch"},{"type_name":"optional","identifier":"\"mode\""}]}},"requires":{"Reaper":"5.974","JS":"1.002"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_GDI_StretchBlit(identifier destHDC, integer dstx, integer dsty, integer dstw, integer dsth, identifier sourceHDC, integer srcx, integer srxy, integer srcw, integer srch, optional string mode)","eel":"extension_api(\"JS_GDI_StretchBlit\", void* destHDC, int dstx, int dsty, int dstw, int dsth, void* sourceHDC, int srcx, int srxy, int srcw, int srch, optional \"mode\")","python":"JS_GDI_StretchBlit(void destHDC, Int dstx, Int dsty, Int dstw, Int dsth, void sourceHDC, Int srcx, Int srxy, Int srcw, Int srch, String modeOptional)","cpp":"void JS_GDI_StretchBlit(void* destHDC, int dstx, int dsty, int dstw, int dsth, void* sourceHDC, int srcx, int srxy, int srcw, int srch, const char* modeOptional)"},"title":"JS_GDI_StretchBlit","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Blits between two device contexts, which may include LICE \"system bitmaps\".\n\nmodeOptional: \"SRCCOPY\" by default, or specify \"ALPHA\" to enable per-pixel alpha blending.\n\nWARNING: On WindowsOS, GDI\\_Blit does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE\\_Blit or LICE\\_ProcessRect.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier headerHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Header_GetItemCount","return_values":[{"identifier":"count","type":"integer"}],"parameters":[{"identifier":"headerHWND","type":"identifier"}]},"eel":{"method_name":"count","return_values":["int"],"parameters":[{"identifier":"\"JS_Header_GetItemCount\""},{"type_name":"void*","identifier":"headerHWND"}]}},"requires":{"Reaper":"5.974","JS":"1.310"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer count","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer count = reaper.JS_Header_GetItemCount(identifier headerHWND)","eel":"int count = extension_api(\"JS_Header_GetItemCount\", void* headerHWND)","python":"Int count = JS_Header_GetItemCount(void headerHWND)","cpp":"int count = JS_Header_GetItemCount(void* headerHWND)"},"title":"JS_Header_GetItemCount","chapters":["User Interface","List Views"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"returns the number of item of the listview","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier address","description":""},{"identifier":"integer offset","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Int","return_values":[{"identifier":"int","type":"integer"}],"parameters":[{"identifier":"pointer","type":"identifier"},{"identifier":"offset","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Int\""},{"type_name":"void*","identifier":"pointer"},{"type_name":"int","identifier":"offset"},{"type_name":"int","identifier":"&int"}]}},"requires":{"Reaper":"5.974","JS":"0.971"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer int","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer int = reaper.JS_Int(identifier pointer, integer offset)","eel":"extension_api(\"JS_Int\", void* pointer, int offset, int &int)","python":"(void pointer, Int offset, Int intOut) = JS_Int(pointer, offset, intOut)","cpp":"void JS_Int(void* pointer, int offset, int* intOut)"},"title":"JS_Int","chapters":["Api-Helper-Functions","Address/Datatype Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the 4-byte signed integer at address[offset]. Offset is added as steps of 4 bytes each.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"identifier bitmap","description":""},{"identifier":"number hue","description":""},{"identifier":"number saturation","description":""},{"identifier":"number value","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_AlterBitmapHSV","return_values":[],"parameters":[{"identifier":"bitmap","type":"identifier"},{"identifier":"hue","type":"number"},{"identifier":"saturation","type":"number"},{"identifier":"value","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_AlterBitmapHSV\""},{"type_name":"void*","identifier":"bitmap"},{"identifier":"hue"},{"identifier":"saturation"},{"identifier":"value"}]}},"requires":{"Reaper":"5.974","JS":"0.988"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_LICE_AlterBitmapHSV(identifier bitmap, number hue, number saturation, number value)","eel":"extension_api(\"JS_LICE_AlterBitmapHSV\", void* bitmap, hue, saturation, value)","python":"(JS_LICE_AlterBitmapHSV(void bitmap, Float hue, Float saturation, Float value)","cpp":"void JS_LICE_AlterBitmapHSV(void* bitmap, double hue, double saturation, double value)"},"title":"JS_LICE_AlterBitmapHSV","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"identifier bitmap","description":""},{"identifier":"integer x","description":""},{"identifier":"integer y","description":""},{"identifier":"integer w","description":""},{"identifier":"integer h","description":""},{"identifier":"number hue","description":""},{"identifier":"number saturation","description":""},{"identifier":"number value","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_AlterRectHSV","return_values":[],"parameters":[{"identifier":"bitmap","type":"identifier"},{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"},{"identifier":"w","type":"integer"},{"identifier":"h","type":"integer"},{"identifier":"hue","type":"number"},{"identifier":"saturation","type":"number"},{"identifier":"value","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_AlterRectHSV\""},{"type_name":"void*","identifier":"bitmap"},{"type_name":"int","identifier":"x"},{"type_name":"int","identifier":"y"},{"type_name":"int","identifier":"w"},{"type_name":"int","identifier":"h"},{"identifier":"hue"},{"identifier":"saturation"},{"identifier":"value"}]}},"requires":{"Reaper":"5.974","JS":"0.988"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_LICE_AlterRectHSV(identifier bitmap, integer x, integer y, integer w, integer h, number hue, number saturation, number value)","eel":"extension_api(\"JS_LICE_AlterRectHSV\", void* bitmap, int x, int y, int w, int h, hue, saturation, value)","python":"JS_LICE_AlterRectHSV(void bitmap, Int x, Int y, Int w, Int h, Float hue, Float saturation, Float value)","cpp":"void JS_LICE_AlterRectHSV(void* bitmap, int x, int y, int w, int h, double hue, double saturation, double value)"},"title":"JS_LICE_AlterRectHSV","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":10,"entries":[{"identifier":"identifier bitmap","description":""},{"identifier":"number cx","description":""},{"identifier":"number cy","description":""},{"identifier":"number r","description":""},{"identifier":"number minAngle","description":""},{"identifier":"number maxAngle","description":""},{"identifier":"integer color","description":""},{"identifier":"number alpha","description":""},{"identifier":"string mode","description":""},{"identifier":"boolean antialias","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_Arc","return_values":[],"parameters":[{"identifier":"bitmap","type":"identifier"},{"identifier":"cx","type":"number"},{"identifier":"cy","type":"number"},{"identifier":"r","type":"number"},{"identifier":"minAngle","type":"number"},{"identifier":"maxAngle","type":"number"},{"identifier":"color","type":"integer"},{"identifier":"alpha","type":"number"},{"identifier":"mode","type":"string"},{"identifier":"antialias","type":"boolean"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_Arc\""},{"type_name":"void*","identifier":"bitmap"},{"identifier":"cx"},{"identifier":"cy"},{"identifier":"r"},{"identifier":"minAngle"},{"identifier":"maxAngle"},{"type_name":"int","identifier":"color"},{"identifier":"alpha"},{"identifier":"\"mode\""},{"type_name":"bool","identifier":"antialias"}]}},"requires":{"Reaper":"5.974","JS":"1.000"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_LICE_Arc(identifier bitmap, number cx, number cy, number r, number minAngle, number maxAngle, integer color, number alpha, string mode, boolean antialias)","eel":"extension_api(\"JS_LICE_Arc\", void* bitmap, cx, cy, r, minAngle, maxAngle, int color, alpha, \"mode\", bool antialias)","python":"JS_LICE_Arc(void bitmap, Float cx, Float cy, Float r, Float minAngle, Float maxAngle, Int color, Float alpha, String mode, Boolean antialias)","cpp":"void JS_LICE_Arc(void* bitmap, double cx, double cy, double r, double minAngle, double maxAngle, int color, double alpha, const char* mode, bool antialias)"},"title":"JS_LICE_Arc","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\n\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier reaperarray","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_ArrayAllBitmaps","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"reaperarray","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_LICE_ArrayAllBitmaps\""},{"type_name":"void*","identifier":"reaperarray"}]}},"requires":{"Reaper":"5.974","JS":"1.215"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_LICE_ArrayAllBitmaps(identifier reaperarray)","eel":"int extension_api(\"JS_LICE_ArrayAllBitmaps\", void* reaperarray)","python":"Int retval = JS_LICE_ArrayAllBitmaps(void reaperarray)","cpp":"int JS_LICE_ArrayAllBitmaps(void* reaperarray)"},"title":"JS_LICE_ArrayAllBitmaps","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":14,"entries":[{"identifier":"identifier bitmap","description":""},{"identifier":"number xstart","description":""},{"identifier":"number ystart","description":""},{"identifier":"number xctl1","description":""},{"identifier":"number yctl1","description":""},{"identifier":"number xctl2","description":""},{"identifier":"number yctl2","description":""},{"identifier":"number xend","description":""},{"identifier":"number yend","description":""},{"identifier":"number tol","description":""},{"identifier":"integer color","description":""},{"identifier":"number alpha","description":""},{"identifier":"string mode","description":""},{"identifier":"boolean antialias","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_Bezier","return_values":[],"parameters":[{"identifier":"bitmap","type":"identifier"},{"identifier":"xstart","type":"number"},{"identifier":"ystart","type":"number"},{"identifier":"xctl1","type":"number"},{"identifier":"yctl1","type":"number"},{"identifier":"xctl2","type":"number"},{"identifier":"yctl2","type":"number"},{"identifier":"xend","type":"number"},{"identifier":"yend","type":"number"},{"identifier":"tol","type":"number"},{"identifier":"color","type":"integer"},{"identifier":"alpha","type":"number"},{"identifier":"mode","type":"string"},{"identifier":"antialias","type":"boolean"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_Bezier\""},{"type_name":"void*","identifier":"bitmap"},{"identifier":"xstart"},{"identifier":"ystart"},{"identifier":"xctl1"},{"identifier":"yctl1"},{"identifier":"xctl2"},{"identifier":"yctl2"},{"identifier":"xend"},{"identifier":"yend"},{"identifier":"tol"},{"type_name":"int","identifier":"color"},{"identifier":"alpha"},{"identifier":"\"mode\""},{"type_name":"bool","identifier":"antialias"}]}},"requires":{"Reaper":"5.974","JS":"0.986"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_LICE_Bezier(identifier bitmap, number xstart, number ystart, number xctl1, number yctl1, number xctl2, number yctl2, number xend, number yend, number tol, integer color, number alpha, string mode, boolean antialias)","eel":"extension_api(\"JS_LICE_Bezier\", void* bitmap, xstart, ystart, xctl1, yctl1, xctl2, yctl2, xend, yend, tol, int color, alpha, \"mode\", bool antialias)","python":"JS_LICE_Bezier(void bitmap, Float xstart, Float ystart, Float xctl1, Float yctl1, Float xctl2, Float yctl2, Float xend, Float yend, Float tol, Int color, Float alpha, String mode, Boolean antialias)","cpp":"void JS_LICE_Bezier(void* bitmap, double xstart, double ystart, double xctl1, double yctl1, double xctl2, double yctl2, double xend, double yend, double tol, int color, double alpha, const char* mode, bool antialias)"},"title":"JS_LICE_Bezier","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\" to enable per-pixel alpha blending.\n\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":10,"entries":[{"identifier":"identifier destBitmap","description":""},{"identifier":"integer dstx","description":""},{"identifier":"integer dsty","description":""},{"identifier":"identifier sourceBitmap","description":""},{"identifier":"integer srcx","description":""},{"identifier":"integer srcy","description":""},{"identifier":"integer width","description":""},{"identifier":"integer height","description":""},{"identifier":"number alpha","description":""},{"identifier":"string mode","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_Blit","return_values":[],"parameters":[{"identifier":"destBitmap","type":"identifier"},{"identifier":"dstx","type":"integer"},{"identifier":"dsty","type":"integer"},{"identifier":"sourceBitmap","type":"identifier"},{"identifier":"srcx","type":"integer"},{"identifier":"srcy","type":"integer"},{"identifier":"width","type":"integer"},{"identifier":"height","type":"integer"},{"identifier":"alpha","type":"number"},{"identifier":"mode","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_Blit\""},{"type_name":"void*","identifier":"destBitmap"},{"type_name":"int","identifier":"dstx"},{"type_name":"int","identifier":"dsty"},{"type_name":"void*","identifier":"sourceBitmap"},{"type_name":"int","identifier":"srcx"},{"type_name":"int","identifier":"srcy"},{"type_name":"int","identifier":"width"},{"type_name":"int","identifier":"height"},{"identifier":"alpha"},{"identifier":"\"mode\""}]}},"requires":{"Reaper":"5.974","JS":"0.988"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_LICE_Blit(identifier destBitmap, integer dstx, integer dsty, identifier sourceBitmap, integer srcx, integer srcy, integer width, integer height, number alpha, string mode)","eel":"extension_api(\"JS_LICE_Blit\", void* destBitmap, int dstx, int dsty, void* sourceBitmap, int srcx, int srcy, int width, int height, alpha, \"mode\")","python":"JS_LICE_Blit(void destBitmap, Int dstx, Int dsty, void sourceBitmap, Int srcx, Int srcy, Int width, Int height, Float alpha, String mode)","cpp":"void JS_LICE_Blit(void* destBitmap, int dstx, int dsty, void* sourceBitmap, int srcx, int srcy, int width, int height, double alpha, const char* mode)"},"title":"JS_LICE_Blit","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Standard LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\" to enable per-pixel alpha blending.\n\nIn addition to the standard LICE modes, LICE\\_Blit also offers:\n\\* \"CHANCOPY\\_XTOY\", with X and Y any of the four channels, A, R, G or B. (CHANCOPY\\_ATOA is similar to MASK mode.)\n\\* \"BLUR\"\n\\* \"ALPHAMUL\", which overwrites the destination with a per-pixel alpha-multiplied copy of the source. (Similar to first clearing the destination with 0x00000000 and then blitting with \"COPY,ALPHA\".)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"identifier bitmap","description":""},{"identifier":"number cx","description":""},{"identifier":"number cy","description":""},{"identifier":"number r","description":""},{"identifier":"integer color","description":""},{"identifier":"number alpha","description":""},{"identifier":"string mode","description":""},{"identifier":"boolean antialias","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_Circle","return_values":[],"parameters":[{"identifier":"bitmap","type":"identifier"},{"identifier":"cx","type":"number"},{"identifier":"cy","type":"number"},{"identifier":"r","type":"number"},{"identifier":"color","type":"integer"},{"identifier":"alpha","type":"number"},{"identifier":"mode","type":"string"},{"identifier":"antialias","type":"boolean"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_Circle\""},{"type_name":"void*","identifier":"bitmap"},{"identifier":"cx"},{"identifier":"cy"},{"identifier":"r"},{"type_name":"int","identifier":"color"},{"identifier":"alpha"},{"identifier":"\"mode\""},{"type_name":"bool","identifier":"antialias"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_LICE_Circle(identifier bitmap, number cx, number cy, number r, integer color, number alpha, string mode, boolean antialias)","eel":"extension_api(\"JS_LICE_Circle\", void* bitmap, cx, cy, r, int color, alpha, \"mode\", bool antialias)","python":"JS_LICE_Circle(void bitmap, Float cx, Float cy, Float r, Int color, Float alpha, String mode, Boolean antialias)","cpp":"void JS_LICE_Circle(void* bitmap, double cx, double cy, double r, int color, double alpha, const char* mode, bool antialias)"},"title":"JS_LICE_Circle","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\n\n\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier bitmap","description":""},{"identifier":"integer color","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_Clear","return_values":[],"parameters":[{"identifier":"bitmap","type":"identifier"},{"identifier":"color","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_Clear\""},{"type_name":"void*","identifier":"bitmap"},{"type_name":"int","identifier":"color"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_LICE_Clear(identifier bitmap, integer color)","eel":"extension_api(\"JS_LICE_Clear\", void* bitmap, int color)","python":"JS_LICE_Clear(void bitmap, Int color)","cpp":"void JS_LICE_Clear(void* bitmap, int color)"},"title":"JS_LICE_Clear","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"boolean isSysBitmap","description":""},{"identifier":"integer width","description":""},{"identifier":"integer height","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_CreateBitmap","return_values":[{"identifier":"bitmap","type":"identifier"}],"parameters":[{"identifier":"isSysBitmap","type":"boolean"},{"identifier":"width","type":"integer"},{"identifier":"height","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_LICE_CreateBitmap\""},{"type_name":"bool","identifier":"isSysBitmap"},{"type_name":"int","identifier":"width"},{"type_name":"int","identifier":"height"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier bitmap","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier bitmap = reaper.JS_LICE_CreateBitmap(boolean isSysBitmap, integer width, integer height)","eel":"void* extension_api(\"JS_LICE_CreateBitmap\", bool isSysBitmap, int width, int height)","python":"identifier bitmap = JS_LICE_CreateBitmap(Boolean isSysBitmap, Int width, Int height)","cpp":"void* JS_LICE_CreateBitmap(bool isSysBitmap, int width, int height)"},"title":"JS_LICE_CreateBitmap","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.JS_LICE_CreateFont","return_values":[{"identifier":"font","type":"identifier"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_LICE_CreateFont\""}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier font","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier font = reaper.JS_LICE_CreateFont()","eel":"void* extension_api(\"JS_LICE_CreateFont\")","python":"identifier font = JS_LICE_CreateFont()","cpp":"void* JS_LICE_CreateFont()"},"title":"JS_LICE_CreateFont","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier bitmap","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_DestroyBitmap","return_values":[],"parameters":[{"identifier":"bitmap","type":"identifier"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_DestroyBitmap\""},{"type_name":"void*","identifier":"bitmap"}]}},"requires":{"Reaper":"5.974","JS":"1.000"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_LICE_DestroyBitmap(identifier bitmap)","eel":"extension_api(\"JS_LICE_DestroyBitmap\", void* bitmap)","python":"JS_LICE_DestroyBitmap(void bitmap)","cpp":"void JS_LICE_DestroyBitmap(void* bitmap)"},"title":"JS_LICE_DestroyBitmap","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Deletes the bitmap, and also unlinks bitmap from any composited window.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier LICEFont","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_DestroyFont","return_values":[],"parameters":[{"identifier":"LICEFont","type":"identifier"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_DestroyFont\""},{"type_name":"void*","identifier":"LICEFont"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_LICE_DestroyFont(identifier LICEFont)","eel":"extension_api(\"JS_LICE_DestroyFont\", void* LICEFont)","python":"JS_LICE_DestroyFont(void LICEFont)","cpp":"void JS_LICE_DestroyFont(void* LICEFont)"},"title":"JS_LICE_DestroyFont","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"identifier bitmap","description":""},{"identifier":"integer x","description":""},{"identifier":"integer y","description":""},{"identifier":"integer c","description":""},{"identifier":"integer color","description":""},{"identifier":"number alpha","description":""},{"identifier":"integer mode","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_DrawChar","return_values":[],"parameters":[{"identifier":"bitmap","type":"identifier"},{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"},{"identifier":"c","type":"integer"},{"identifier":"color","type":"integer"},{"identifier":"alpha","type":"number"},{"identifier":"mode","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_DrawChar\""},{"type_name":"void*","identifier":"bitmap"},{"type_name":"int","identifier":"x"},{"type_name":"int","identifier":"y"},{"type_name":"char","identifier":"c"},{"type_name":"int","identifier":"color"},{"identifier":"alpha"},{"type_name":"int","identifier":"mode"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_LICE_DrawChar(identifier bitmap, integer x, integer y, integer c, integer color, number alpha, integer mode))","eel":"extension_api(\"JS_LICE_DrawChar\", void* bitmap, int x, int y, char c, int color, alpha, int mode))","python":"JS_LICE_DrawChar(void bitmap, Int x, Int y, Int c, Int color, Float alpha, Int mode))","cpp":"void JS_LICE_DrawChar(void* bitmap, int x, int y, char c, int color, double alpha, int mode))"},"title":"JS_LICE_DrawChar","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"identifier bitmap","description":""},{"identifier":"identifier LICEFont","description":""},{"identifier":"string text","description":""},{"identifier":"integer textLen","description":""},{"identifier":"integer x1","description":""},{"identifier":"integer y1","description":""},{"identifier":"integer x2","description":""},{"identifier":"integer y2","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_DrawText","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"bitmap","type":"identifier"},{"identifier":"LICEFont","type":"identifier"},{"identifier":"text","type":"string"},{"identifier":"textLen","type":"integer"},{"identifier":"x1","type":"integer"},{"identifier":"y1","type":"integer"},{"identifier":"x2","type":"integer"},{"identifier":"y2","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_LICE_DrawText\""},{"type_name":"void*","identifier":"bitmap"},{"type_name":"void*","identifier":"LICEFont"},{"identifier":"\"text\""},{"type_name":"int","identifier":"textLen"},{"type_name":"int","identifier":"x1"},{"type_name":"int","identifier":"y1"},{"type_name":"int","identifier":"x2"},{"type_name":"int","identifier":"y2"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_LICE_DrawText(identifier bitmap, identifier LICEFont, string text, integer textLen, integer x1, integer y1, integer x2, integer y2)","eel":"int extension_api(\"JS_LICE_DrawText\", void* bitmap, void* LICEFont, \"text\", int textLen, int x1, int y1, int x2, int y2)","python":"Int retval = JS_LICE_DrawText(void bitmap, void LICEFont, String text, Int textLen, Int x1, Int y1, Int x2, Int y2)","cpp":"int JS_LICE_DrawText(void* bitmap, void* LICEFont, const char* text, int textLen, int x1, int y1, int x2, int y2)"},"title":"JS_LICE_DrawText","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"identifier bitmap","description":""},{"identifier":"number cx","description":""},{"identifier":"number cy","description":""},{"identifier":"number r","description":""},{"identifier":"integer color","description":""},{"identifier":"number alpha","description":""},{"identifier":"string mode","description":""},{"identifier":"boolean antialias","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_FillCircle","return_values":[],"parameters":[{"identifier":"bitmap","type":"identifier"},{"identifier":"cx","type":"number"},{"identifier":"cy","type":"number"},{"identifier":"r","type":"number"},{"identifier":"color","type":"integer"},{"identifier":"alpha","type":"number"},{"identifier":"mode","type":"string"},{"identifier":"antialias","type":"boolean"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_FillCircle\""},{"type_name":"void*","identifier":"bitmap"},{"identifier":"cx"},{"identifier":"cy"},{"identifier":"r"},{"type_name":"int","identifier":"color"},{"identifier":"alpha"},{"identifier":"\"mode\""},{"type_name":"bool","identifier":"antialias"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_LICE_FillCircle(identifier bitmap, number cx, number cy, number r, integer color, number alpha, string mode, boolean antialias)","eel":"extension_api(\"JS_LICE_FillCircle\", void* bitmap, cx, cy, r, int color, alpha, \"mode\", bool antialias)","python":"JS_LICE_FillCircle(void bitmap, Float cx, Float cy, Float r, Int color, Float alpha, String mode, Boolean antialias)","cpp":"void JS_LICE_FillCircle(void* bitmap, double cx, double cy, double r, int color, double alpha, const char* mode, bool antialias)"},"title":"JS_LICE_FillCircle","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\n\n\n\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"identifier bitmap","description":""},{"identifier":"string packedX","description":""},{"identifier":"string packedY","description":""},{"identifier":"integer numPoints","description":""},{"identifier":"integer color","description":""},{"identifier":"number alpha","description":""},{"identifier":"string mode","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_FillPolygon","return_values":[],"parameters":[{"identifier":"bitmap","type":"identifier"},{"identifier":"packedX","type":"string"},{"identifier":"packedY","type":"string"},{"identifier":"numPoints","type":"integer"},{"identifier":"color","type":"integer"},{"identifier":"alpha","type":"number"},{"identifier":"mode","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_FillPolygon\""},{"type_name":"void*","identifier":"bitmap"},{"identifier":"\"packedX\""},{"identifier":"\"packedY\""},{"type_name":"int","identifier":"numPoints"},{"type_name":"int","identifier":"color"},{"identifier":"alpha"},{"identifier":"\"mode\""}]}},"requires":{"Reaper":"5.974","JS":"0.986"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_LICE_FillPolygon(identifier bitmap, string packedX, string packedY, integer numPoints, integer color, number alpha, string mode)","eel":"extension_api(\"JS_LICE_FillPolygon\", void* bitmap, \"packedX\", \"packedY\", int numPoints, int color, alpha, \"mode\")","python":"JS_LICE_FillPolygon(void bitmap, String packedX, String packedY, Int numPoints, Int color, Float alpha, String mode)","cpp":"void JS_LICE_FillPolygon(void* bitmap, const char* packedX, const char* packedY, int numPoints, int color, double alpha, const char* mode)"},"title":"JS_LICE_FillPolygon","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"packedX and packedY are two strings of coordinates, each packed as \"<i4\".\n\nLICE modes : \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\" to enable per-pixel alpha blending.\n\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"identifier bitmap","description":""},{"identifier":"integer x","description":""},{"identifier":"integer y","description":""},{"identifier":"integer w","description":""},{"identifier":"integer h","description":""},{"identifier":"integer color","description":""},{"identifier":"number alpha","description":""},{"identifier":"string mode","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_FillRect","return_values":[],"parameters":[{"identifier":"bitmap","type":"identifier"},{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"},{"identifier":"w","type":"integer"},{"identifier":"h","type":"integer"},{"identifier":"color","type":"integer"},{"identifier":"alpha","type":"number"},{"identifier":"mode","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_FillRect\""},{"type_name":"void*","identifier":"bitmap"},{"type_name":"int","identifier":"x"},{"type_name":"int","identifier":"y"},{"type_name":"int","identifier":"w"},{"type_name":"int","identifier":"h"},{"type_name":"int","identifier":"color"},{"identifier":"alpha"},{"identifier":"\"mode\""}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_LICE_FillRect(identifier bitmap, integer x, integer y, integer w, integer h, integer color, number alpha, string mode)","eel":"extension_api(\"JS_LICE_FillRect\", void* bitmap, int x, int y, int w, int h, int color, alpha, \"mode\")","python":"JS_LICE_FillRect(void bitmap, Int x, Int y, Int w, Int h, Int color, Float alpha, String mode)","cpp":"void JS_LICE_FillRect(void* bitmap, int x, int y, int w, int h, int color, double alpha, const char* mode)"},"title":"JS_LICE_FillRect","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\n\n\n\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":10,"entries":[{"identifier":"identifier bitmap","description":""},{"identifier":"integer x1","description":""},{"identifier":"integer y1","description":""},{"identifier":"integer x2","description":""},{"identifier":"integer y2","description":""},{"identifier":"integer x3","description":""},{"identifier":"integer y3","description":""},{"identifier":"integer color","description":""},{"identifier":"number alpha","description":""},{"identifier":"string mode","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_FillTriangle","return_values":[],"parameters":[{"identifier":"bitmap","type":"identifier"},{"identifier":"x1","type":"integer"},{"identifier":"y1","type":"integer"},{"identifier":"x2","type":"integer"},{"identifier":"y2","type":"integer"},{"identifier":"x3","type":"integer"},{"identifier":"y3","type":"integer"},{"identifier":"color","type":"integer"},{"identifier":"alpha","type":"number"},{"identifier":"mode","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_FillTriangle\""},{"type_name":"void*","identifier":"bitmap"},{"type_name":"int","identifier":"x1"},{"type_name":"int","identifier":"y1"},{"type_name":"int","identifier":"x2"},{"type_name":"int","identifier":"y2"},{"type_name":"int","identifier":"x3"},{"type_name":"int","identifier":"y3"},{"type_name":"int","identifier":"color"},{"identifier":"alpha"},{"identifier":"\"mode\""}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_LICE_FillTriangle(identifier bitmap, integer x1, integer y1, integer x2, integer y2, integer x3, integer y3, integer color, number alpha, string mode)","eel":"extension_api(\"JS_LICE_FillTriangle\", void* bitmap, int x1, int y1, int x2, int y2, int x3, int y3, int color, alpha, \"mode\")","python":"JS_LICE_FillTriangle(void bitmap, Int x1, Int y1, Int x2, Int y2, Int x3, Int y3, Int color, Float alpha, String mode)","cpp":"void JS_LICE_FillTriangle(void* bitmap, int x1, int y1, int x2, int y2, int x3, int y3, int color, double alpha, const char* mode)"},"title":"JS_LICE_FillTriangle","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\n\n\n\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier bitmap","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_GetDC","return_values":[{"identifier":"device_context","type":"identifier"}],"parameters":[{"identifier":"bitmap","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_LICE_GetDC\""},{"type_name":"void*","identifier":"bitmap"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier device_context","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier device_context = reaper.JS_LICE_GetDC(identifier bitmap)","eel":"void* extension_api(\"JS_LICE_GetDC\", void* bitmap)","python":"identifier device_context = JS_LICE_GetDC(void bitmap)","cpp":"void* JS_LICE_GetDC(void* bitmap)"},"title":"JS_LICE_GetDC","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier bitmap","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_GetHeight","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"bitmap","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_LICE_GetHeight\""},{"type_name":"void*","identifier":"bitmap"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_LICE_GetHeight(identifier bitmap)","eel":"int extension_api(\"JS_LICE_GetHeight\", void* bitmap)","python":"Int retval = JS_LICE_GetHeight(void bitmap)","cpp":"int JS_LICE_GetHeight(void* bitmap)"},"title":"JS_LICE_GetHeight","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier bitmap","description":""},{"identifier":"integer x","description":""},{"identifier":"integer y","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_GetPixel","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"bitmap","type":"identifier"},{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_LICE_GetPixel\""},{"type_name":"void*","identifier":"bitmap"},{"type_name":"int","identifier":"x"},{"type_name":"int","identifier":"y"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_LICE_GetPixel(identifier bitmap, integer x, integer y)","eel":"int extension_api(\"JS_LICE_GetPixel\", void* bitmap, int x, int y)","python":"Int retval = JS_LICE_GetPixel(void bitmap, Int x, Int y)","cpp":"int JS_LICE_GetPixel(void* bitmap, int x, int y)"},"title":"JS_LICE_GetPixel","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the color of the specified pixel.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier bitmap","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_GetWidth","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"bitmap","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_LICE_GetWidth\""},{"type_name":"void*","identifier":"bitmap"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_LICE_GetWidth(identifier bitmap)","eel":"int extension_api(\"JS_LICE_GetWidth\", void* bitmap)","python":"Int retval = JS_LICE_GetWidth(void bitmap)","cpp":"int JS_LICE_GetWidth(void* bitmap)"},"title":"JS_LICE_GetWidth","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":18,"entries":[{"identifier":"identifier bitmap","description":""},{"identifier":"integer dstx","description":""},{"identifier":"integer dsty","description":""},{"identifier":"integer dstw","description":""},{"identifier":"integer dsth","description":""},{"identifier":"number ir","description":""},{"identifier":"number ig","description":""},{"identifier":"number ib","description":""},{"identifier":"number ia","description":""},{"identifier":"number drdx","description":""},{"identifier":"number dgdx","description":""},{"identifier":"number dbdx","description":""},{"identifier":"number dadx","description":""},{"identifier":"number drdy","description":""},{"identifier":"number dgdy","description":""},{"identifier":"number dbdy","description":""},{"identifier":"number dady","description":""},{"identifier":"string mode","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_GradRect","return_values":[],"parameters":[{"identifier":"bitmap","type":"identifier"},{"identifier":"dstx","type":"integer"},{"identifier":"dsty","type":"integer"},{"identifier":"dstw","type":"integer"},{"identifier":"dsth","type":"integer"},{"identifier":"ir","type":"number"},{"identifier":"ig","type":"number"},{"identifier":"ib","type":"number"},{"identifier":"ia","type":"number"},{"identifier":"drdx","type":"number"},{"identifier":"dgdx","type":"number"},{"identifier":"dbdx","type":"number"},{"identifier":"dadx","type":"number"},{"identifier":"drdy","type":"number"},{"identifier":"dgdy","type":"number"},{"identifier":"dbdy","type":"number"},{"identifier":"dady","type":"number"},{"identifier":"mode","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_GradRect\""},{"type_name":"void*","identifier":"bitmap"},{"type_name":"int","identifier":"dstx"},{"type_name":"int","identifier":"dsty"},{"type_name":"int","identifier":"dstw"},{"type_name":"int","identifier":"dsth"},{"identifier":"ir"},{"identifier":"ig"},{"identifier":"ib"},{"identifier":"ia"},{"identifier":"drdx"},{"identifier":"dgdx"},{"identifier":"dbdx"},{"identifier":"dadx"},{"identifier":"drdy"},{"identifier":"dgdy"},{"identifier":"dbdy"},{"identifier":"dady"},{"identifier":"\"mode\""}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_LICE_GradRect(identifier bitmap, integer dstx, integer dsty, integer dstw, integer dsth, number ir, number ig, number ib, number ia, number drdx, number dgdx, number dbdx, number dadx, number drdy, number dgdy, number dbdy, number dady, string mode)","eel":"extension_api(\"JS_LICE_GradRect\", void* bitmap, int dstx, int dsty, int dstw, int dsth, ir, ig, ib, ia, drdx, dgdx, dbdx, dadx, drdy, dgdy, dbdy, dady, \"mode\")","python":"JS_LICE_GradRect(void bitmap, Int dstx, Int dsty, Int dstw, Int dsth, Float ir, Float ig, Float ib, Float ia, Float drdx, Float dgdx, Float dbdx, Float dadx, Float drdy, Float dgdy, Float dbdy, Float dady, String mode)","cpp":"void JS_LICE_GradRect(void* bitmap, int dstx, int dsty, int dstw, int dsth, double ir, double ig, double ib, double ia, double drdx, double dgdx, double dbdx, double dadx, double drdy, double dgdy, double dbdy, double dady, const char* mode)"},"title":"JS_LICE_GradRect","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier bitmap","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_IsFlipped","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"bitmap","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_LICE_IsFlipped\""},{"type_name":"void*","identifier":"bitmap"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.JS_LICE_IsFlipped(identifier bitmap)","eel":"bool  extension_api(\"JS_LICE_IsFlipped\", void* bitmap)","python":"Boolean retval = JS_LICE_IsFlipped(void bitmap)","cpp":"bool JS_LICE_IsFlipped(void* bitmap)"},"title":"JS_LICE_IsFlipped","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":9,"entries":[{"identifier":"identifier bitmap","description":""},{"identifier":"number x1","description":""},{"identifier":"number y1","description":""},{"identifier":"number x2","description":""},{"identifier":"number y2","description":""},{"identifier":"integer color","description":""},{"identifier":"number alpha","description":""},{"identifier":"string mode","description":""},{"identifier":"boolean antialias","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_Line","return_values":[],"parameters":[{"identifier":"bitmap","type":"identifier"},{"identifier":"x1","type":"number"},{"identifier":"y1","type":"number"},{"identifier":"x2","type":"number"},{"identifier":"y2","type":"number"},{"identifier":"color","type":"integer"},{"identifier":"alpha","type":"number"},{"identifier":"mode","type":"string"},{"identifier":"antialias","type":"boolean"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_Line\""},{"type_name":"void*","identifier":"bitmap"},{"identifier":"x1"},{"identifier":"y1"},{"identifier":"x2"},{"identifier":"y2"},{"type_name":"int","identifier":"color"},{"identifier":"alpha"},{"identifier":"\"mode\""},{"type_name":"bool","identifier":"antialias"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_LICE_Line(identifier bitmap, number x1, number y1, number x2, number y2, integer color, number alpha, string mode, boolean antialias)","eel":"extension_api(\"JS_LICE_Line\", void* bitmap, x1, y1, x2, y2, int color, alpha, \"mode\", bool antialias)","python":"JS_LICE_Line(void bitmap, Float x1, Float y1, Float x2, Float y2, Int color, Float alpha, String mode, Boolean antialias)","cpp":"void JS_LICE_Line(void* bitmap, double x1, double y1, double x2, double y2, int color, double alpha, const char* mode, bool antialias)"},"title":"JS_LICE_Line","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\n\n\n\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.JS_LICE_ListAllBitmaps","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"list","type":"string"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_LICE_ListAllBitmaps\""},{"identifier":"#list"}]}},"requires":{"Reaper":"5.974","JS":"1.000"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":""},{"identifier":"string list","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, string list = reaper.JS_LICE_ListAllBitmaps()","eel":"int extension_api(\"JS_LICE_ListAllBitmaps\", #list)","python":"(Int retval, String listOutNeedBig, Int listOutNeedBig_sz) = JS_LICE_ListAllBitmaps(listOutNeedBig, listOutNeedBig_sz)","cpp":"int JS_LICE_ListAllBitmaps(char* listOutNeedBig, int listOutNeedBig_sz)"},"title":"JS_LICE_ListAllBitmaps","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string filename","description":"the filename+path of the jpg-file to load"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_LoadJPG","return_values":[{"identifier":"image","type":"identifier"}],"parameters":[{"identifier":"filename","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_LICE_LoadJPG\""},{"identifier":"\"filename\""}]}},"requires":{"Reaper":"5.974","JS":"1.215"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier image","description":"the bitmap, which holds the jpg"}],"prog_lang":"*"},"functioncall":{"lua":"identifier image = reaper.JS_LICE_LoadJPG(string filename)","eel":"void* extension_api(\"JS_LICE_LoadJPG\", \"filename\")","python":"identifier image = JS_LICE_LoadJPG(String filename)","cpp":"void* JS_LICE_LoadJPG(const char* filename)"},"title":"JS_LICE_LoadJPG","chapters":["File Management","Image Files"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns a system LICE bitmap containing the JPEG.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string buffer","description":"the buffer which holds the jpg-file to load"},{"identifier":"integer bufsize","description":"the size of the buffer to read"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_LoadJPGFromMemory","return_values":[{"identifier":"image","type":"identifier"}],"parameters":[{"identifier":"buffer","type":"string"},{"identifier":"bufsize","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_LICE_LoadJPGFromMemory\""},{"identifier":"\"buffer\""},{"type_name":"int","identifier":"bufsize"}]}},"requires":{"Reaper":"5.974","JS":"1.301"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier image","description":"the bitmap, which holds the jpg"}],"prog_lang":"*"},"functioncall":{"lua":"identifier image = reaper.JS_LICE_LoadJPGFromMemory(string buffer, integer bufsize)","eel":"void* extension_api(\"JS_LICE_LoadJPGFromMemory\", \"buffer\", int bufsize)","python":"identifier image = JS_LICE_LoadJPGFromMemory(String buffer, Int bufsize)","cpp":"void* JS_LICE_LoadJPGFromMemory(const char* buffer, int bufsize)"},"title":"JS_LICE_LoadJPGFromMemory","chapters":["File Management","Image Files"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns a system LICE bitmap containing the JPEG.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string filename","description":"the filename with path of the png filename to load"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_LoadPNG","return_values":[{"identifier":"bitmap","type":"identifier"}],"parameters":[{"identifier":"filename","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_LICE_LoadPNG\""},{"identifier":"\"filename\""}]}},"requires":{"Reaper":"5.974","JS":"0.980"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier bitmap","description":"the bitmap, which holds the png"}],"prog_lang":"*"},"functioncall":{"lua":"identifier bitmap = reaper.JS_LICE_LoadPNG(string filename)","eel":"void* extension_api(\"JS_LICE_LoadPNG\", \"filename\")","python":"identifier bitmap = JS_LICE_LoadPNG(String filename)","cpp":"void* JS_LICE_LoadPNG(const char* filename)"},"title":"JS_LICE_LoadPNG","chapters":["File Management","Image Files"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns a system LICE bitmap containing the PNG.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string buffer","description":"the buffer of the png to load"},{"identifier":"integer bufsize","description":"the size of the buffer to load"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_LoadPNGFromMemory","return_values":[{"identifier":"bitmap","type":"identifier"}],"parameters":[{"identifier":"buffer","type":"string"},{"identifier":"bufsize","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_LICE_LoadPNGFromMemory\""},{"identifier":"\"buffer\""},{"type_name":"int","identifier":"bufsize"}]}},"requires":{"Reaper":"5.974","JS":"1.301"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier bitmap","description":"the bitmap, which holds the png"}],"prog_lang":"*"},"functioncall":{"lua":"identifier bitmap = reaper.JS_LICE_LoadPNGFromMemory(string buffer, integer bufsize)","eel":"void* extension_api(\"JS_LICE_LoadPNGFromMemory\", \"buffer\", int bufsize)","python":"identifier bitmap = JS_LICE_LoadPNGFromMemory(String buffer, Int bufsize)","cpp":"void* JS_LICE_LoadPNGFromMemory(const char* buffer, int bufsize)"},"title":"JS_LICE_LoadPNGFromMemory","chapters":["File Management","Image Files"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns a system LICE bitmap containing the PNG.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string text","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_MeasureText","return_values":[{"identifier":"width","type":"integer"},{"identifier":"Height","type":"integer"}],"parameters":[{"identifier":"text","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_MeasureText\""},{"identifier":"\"text\""},{"type_name":"int","identifier":"&width"},{"type_name":"int","identifier":"&Height"}]}},"requires":{"Reaper":"5.974","JS":"0.986"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer width","description":""},{"identifier":"integer Height","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer width, integer Height = reaper.JS_LICE_MeasureText(string text)","eel":"extension_api(\"JS_LICE_MeasureText\", \"text\", int &width, int &Height)","python":"(String text, Int widthOut, Int HeightOut) = JS_LICE_MeasureText(text, widthOut, HeightOut)","cpp":"void JS_LICE_MeasureText(const char* text, int* widthOut, int* HeightOut)"},"title":"JS_LICE_MeasureText","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"identifier bitmap","description":""},{"identifier":"integer x","description":""},{"identifier":"integer y","description":""},{"identifier":"integer w","description":""},{"identifier":"integer h","description":""},{"identifier":"string mode","description":""},{"identifier":"number operand","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_ProcessRect","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"bitmap","type":"identifier"},{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"},{"identifier":"w","type":"integer"},{"identifier":"h","type":"integer"},{"identifier":"mode","type":"string"},{"identifier":"operand","type":"number"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_LICE_ProcessRect\""},{"type_name":"void*","identifier":"bitmap"},{"type_name":"int","identifier":"x"},{"type_name":"int","identifier":"y"},{"type_name":"int","identifier":"w"},{"type_name":"int","identifier":"h"},{"identifier":"\"mode\""},{"identifier":"operand"}]}},"requires":{"Reaper":"5.974","JS":"0.988"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.JS_LICE_ProcessRect(identifier bitmap, integer x, integer y, integer w, integer h, string mode, number operand)","eel":"bool extension_api(\"JS_LICE_ProcessRect\", void* bitmap, int x, int y, int w, int h, \"mode\", operand)","python":"Boolean retval = JS_LICE_ProcessRect(void bitmap, Int x, Int y, Int w, Int h, String mode, Float operand)","cpp":"bool JS_LICE_ProcessRect(void* bitmap, int x, int y, int w, int h, const char* mode, double operand)"},"title":"JS_LICE_ProcessRect","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Applies bitwise operations to each pixel in the target rectangle.\n\noperand: a color in 0xAARRGGBB format.\n\nmodes:\n\\* \"XOR\", \"OR\" or \"AND\".\n\\* \"SET\\_XYZ\", with XYZ any combination of A, R, G, and B: copies the specified channels from operand to the bitmap. (Useful for setting the alpha values of a bitmap.)\n\\* \"ALPHAMUL\": Performs alpha pre-multiplication on each pixel in the rect. operand is ignored in this mode. (On WindowsOS, GDI\\_Blit does not perform alpha multiplication on the fly, and a separate alpha pre-multiplication step is therefore required.)\n\nNOTE:\nLICE\\_Blit and LICE\\_ScaledBlit are also useful for processing bitmap colors. For example, to multiply all channel values by 1.5:\nreaper.JS\\_LICE\\_Blit(bitmap, x, y, bitmap, x, y, w, h, 0.5, \"ADD\").","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"identifier bitmap","description":""},{"identifier":"integer x","description":""},{"identifier":"integer y","description":""},{"identifier":"integer color","description":""},{"identifier":"number alpha","description":""},{"identifier":"string mode","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_PutPixel","return_values":[],"parameters":[{"identifier":"bitmap","type":"identifier"},{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"},{"identifier":"color","type":"integer"},{"identifier":"alpha","type":"number"},{"identifier":"mode","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_PutPixel\""},{"type_name":"void*","identifier":"bitmap"},{"type_name":"int","identifier":"x"},{"type_name":"int","identifier":"y"},{"type_name":"int","identifier":"color"},{"identifier":"alpha"},{"identifier":"\"mode\""}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_LICE_PutPixel(identifier bitmap, integer x, integer y, integer color, number alpha, string mode)","eel":"extension_api(\"JS_LICE_PutPixel\", void* bitmap, int x, int y, int color, alpha, \"mode\")","python":"JS_LICE_PutPixel(void bitmap, Int x, Int y, Int color, Float alpha, String mode)","cpp":"void JS_LICE_PutPixel(void* bitmap, int x, int y, int color, double alpha, const char* mode)"},"title":"JS_LICE_PutPixel","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\n\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier bitmap","description":""},{"identifier":"integer width","description":""},{"identifier":"integer height","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_Resize","return_values":[],"parameters":[{"identifier":"bitmap","type":"identifier"},{"identifier":"width","type":"integer"},{"identifier":"height","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_Resize\""},{"type_name":"void*","identifier":"bitmap"},{"type_name":"int","identifier":"width"},{"type_name":"int","identifier":"height"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_LICE_Resize(identifier bitmap, integer width, integer height)","eel":"extension_api(\"JS_LICE_Resize\", void* bitmap, int width, int height)","python":"JS_LICE_Resize(void bitmap, Int width, Int height)","cpp":"void JS_LICE_Resize(void* bitmap, int width, int height)"},"title":"JS_LICE_Resize","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":16,"entries":[{"identifier":"identifier destBitmap","description":""},{"identifier":"integer dstx","description":""},{"identifier":"integer dsty","description":""},{"identifier":"integer dstw","description":""},{"identifier":"integer dsth","description":""},{"identifier":"identifier sourceBitmap","description":""},{"identifier":"number srcx","description":""},{"identifier":"number srcy","description":""},{"identifier":"number srcw","description":""},{"identifier":"number srch","description":""},{"identifier":"number angle","description":""},{"identifier":"number rotxcent","description":""},{"identifier":"number rotycent","description":""},{"identifier":"boolean cliptosourcerect","description":""},{"identifier":"number alpha","description":""},{"identifier":"string mode","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_RotatedBlit","return_values":[],"parameters":[{"identifier":"destBitmap","type":"identifier"},{"identifier":"dstx","type":"integer"},{"identifier":"dsty","type":"integer"},{"identifier":"dstw","type":"integer"},{"identifier":"dsth","type":"integer"},{"identifier":"sourceBitmap","type":"identifier"},{"identifier":"srcx","type":"number"},{"identifier":"srcy","type":"number"},{"identifier":"srcw","type":"number"},{"identifier":"srch","type":"number"},{"identifier":"angle","type":"number"},{"identifier":"rotxcent","type":"number"},{"identifier":"rotycent","type":"number"},{"identifier":"cliptosourcerect","type":"boolean"},{"identifier":"alpha","type":"number"},{"identifier":"mode","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_RotatedBlit\""},{"type_name":"void*","identifier":"destBitmap"},{"type_name":"int","identifier":"dstx"},{"type_name":"int","identifier":"dsty"},{"type_name":"int","identifier":"dstw"},{"type_name":"int","identifier":"dsth"},{"type_name":"void*","identifier":"sourceBitmap"},{"identifier":"srcx"},{"identifier":"srcy"},{"identifier":"srcw"},{"identifier":"srch"},{"identifier":"angle"},{"identifier":"rotxcent"},{"identifier":"rotycent"},{"type_name":"bool","identifier":"cliptosourcerect"},{"identifier":"alpha"},{"identifier":"\"mode\""}]}},"requires":{"Reaper":"5.974","JS":"0.986"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_LICE_RotatedBlit(identifier destBitmap, integer dstx, integer dsty, integer dstw, integer dsth, identifier sourceBitmap, number srcx, number srcy, number srcw, number srch, number angle, number rotxcent, number rotycent, boolean cliptosourcerect, number alpha, string mode)","eel":"extension_api(\"JS_LICE_RotatedBlit\", void* destBitmap, int dstx, int dsty, int dstw, int dsth, void* sourceBitmap, srcx, srcy, srcw, srch, angle, rotxcent, rotycent, bool cliptosourcerect, alpha, \"mode\")","python":"JS_LICE_RotatedBlit(void destBitmap, Int dstx, Int dsty, Int dstw, Int dsth, void sourceBitmap, Float srcx, Float srcy, Float srcw, Float srch, Float angle, Float rotxcent, Float rotycent, Boolean cliptosourcerect, Float alpha, String mode)","cpp":"void JS_LICE_RotatedBlit(void* destBitmap, int dstx, int dsty, int dstw, int dsth, void* sourceBitmap, double srcx, double srcy, double srcw, double srch, double angle, double rotxcent, double rotycent, bool cliptosourcerect, double alpha, const char* mode)"},"title":"JS_LICE_RotatedBlit","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\" to enable per-pixel alpha blending.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":10,"entries":[{"identifier":"identifier bitmap","description":""},{"identifier":"number x","description":""},{"identifier":"number y","description":""},{"identifier":"number w","description":""},{"identifier":"number h","description":""},{"identifier":"integer cornerradius","description":""},{"identifier":"integer color","description":""},{"identifier":"number alpha","description":""},{"identifier":"string mode","description":""},{"identifier":"boolean antialias","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_RoundRect","return_values":[],"parameters":[{"identifier":"bitmap","type":"identifier"},{"identifier":"x","type":"number"},{"identifier":"y","type":"number"},{"identifier":"w","type":"number"},{"identifier":"h","type":"number"},{"identifier":"cornerradius","type":"integer"},{"identifier":"color","type":"integer"},{"identifier":"alpha","type":"number"},{"identifier":"mode","type":"string"},{"identifier":"antialias","type":"boolean"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_RoundRect\""},{"type_name":"void*","identifier":"bitmap"},{"identifier":"x"},{"identifier":"y"},{"identifier":"w"},{"identifier":"h"},{"type_name":"int","identifier":"cornerradius"},{"type_name":"int","identifier":"color"},{"identifier":"alpha"},{"identifier":"\"mode\""},{"type_name":"bool","identifier":"antialias"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_LICE_RoundRect(identifier bitmap, number x, number y, number w, number h, integer cornerradius, integer color, number alpha, string mode, boolean antialias)","eel":"extension_api(\"JS_LICE_RoundRect\", void* bitmap, x, y, w, h, int cornerradius, int color, alpha, \"mode\", bool antialias)","python":"JS_LICE_RoundRect(void bitmap, Float x, Float y, Float w, Float h, Int cornerradius, Int color, Float alpha, String mode, Boolean antialias)","cpp":"void JS_LICE_RoundRect(void* bitmap, double x, double y, double w, double h, int cornerradius, int color, double alpha, const char* mode, bool antialias)"},"title":"JS_LICE_RoundRect","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\n\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":12,"entries":[{"identifier":"identifier destBitmap","description":""},{"identifier":"integer dstx","description":""},{"identifier":"integer dsty","description":""},{"identifier":"integer dstw","description":""},{"identifier":"integer dsth","description":""},{"identifier":"identifier srcBitmap","description":""},{"identifier":"number srcx","description":""},{"identifier":"number srcy","description":""},{"identifier":"number srcw","description":""},{"identifier":"number srch","description":""},{"identifier":"number alpha","description":""},{"identifier":"string mode","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_ScaledBlit","return_values":[],"parameters":[{"identifier":"destBitmap","type":"identifier"},{"identifier":"dstx","type":"integer"},{"identifier":"dsty","type":"integer"},{"identifier":"dstw","type":"integer"},{"identifier":"dsth","type":"integer"},{"identifier":"srcBitmap","type":"identifier"},{"identifier":"srcx","type":"number"},{"identifier":"srcy","type":"number"},{"identifier":"srcw","type":"number"},{"identifier":"srch","type":"number"},{"identifier":"alpha","type":"number"},{"identifier":"mode","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_ScaledBlit\""},{"type_name":"void*","identifier":"destBitmap"},{"type_name":"int","identifier":"dstx"},{"type_name":"int","identifier":"dsty"},{"type_name":"int","identifier":"dstw"},{"type_name":"int","identifier":"dsth"},{"type_name":"void*","identifier":"srcBitmap"},{"identifier":"srcx"},{"identifier":"srcy"},{"identifier":"srcw"},{"identifier":"srch"},{"identifier":"alpha"},{"identifier":"\"mode\""}]}},"requires":{"Reaper":"5.974","JS":"0.986"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_LICE_ScaledBlit(identifier destBitmap, integer dstx, integer dsty, integer dstw, integer dsth, identifier srcBitmap, number srcx, number srcy, number srcw, number srch, number alpha, string mode)","eel":"extension_api(\"JS_LICE_ScaledBlit\", void* destBitmap, int dstx, int dsty, int dstw, int dsth, void* srcBitmap, srcx, srcy, srcw, srch, alpha, \"mode\")","python":"JS_LICE_ScaledBlit(void destBitmap, Int dstx, Int dsty, Int dstw, Int dsth, void srcBitmap, Float srcx, Float srcy, Float srcw, Float srch, Float alpha, String mode)","cpp":"void JS_LICE_ScaledBlit(void* destBitmap, int dstx, int dsty, int dstw, int dsth, void* srcBitmap, double srcx, double srcy, double srcw, double srch, double alpha, const char* mode)"},"title":"JS_LICE_ScaledBlit","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\" to enable per-pixel alpha blending.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier bitmap","description":""},{"identifier":"integer colorRGB","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_SetAlphaFromColorMask","return_values":[],"parameters":[{"identifier":"bitmap","type":"identifier"},{"identifier":"colorRGB","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_SetAlphaFromColorMask\""},{"type_name":"void*","identifier":"bitmap"},{"type_name":"int","identifier":"colorRGB"}]}},"requires":{"Reaper":"5.974","JS":"0.988"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_LICE_SetAlphaFromColorMask(identifier bitmap, integer colorRGB)","eel":"extension_api(\"JS_LICE_SetAlphaFromColorMask\", void* bitmap, int colorRGB)","python":"JS_LICE_SetAlphaFromColorMask(void bitmap, Int colorRGB)","cpp":"void JS_LICE_SetAlphaFromColorMask(void* bitmap, int colorRGB)"},"title":"JS_LICE_SetAlphaFromColorMask","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sets all pixels that match the given color's RGB values to fully transparent, and all other pixels to fully opaque. (All pixels' RGB values remain unchanged.)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier LICEFont","description":""},{"identifier":"integer color","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_SetFontBkColor","return_values":[],"parameters":[{"identifier":"LICEFont","type":"identifier"},{"identifier":"color","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_SetFontBkColor\""},{"type_name":"void*","identifier":"LICEFont"},{"type_name":"int","identifier":"color"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_LICE_SetFontBkColor(identifier LICEFont, integer color)","eel":"extension_api(\"JS_LICE_SetFontBkColor\", void* LICEFont, int color)","python":"JS_LICE_SetFontBkColor(void LICEFont, Int color)","cpp":"void JS_LICE_SetFontBkColor(void* LICEFont, int color)"},"title":"JS_LICE_SetFontBkColor","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sets the color of the font background.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier LICEFont","description":""},{"identifier":"integer color","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_SetFontColor","return_values":[],"parameters":[{"identifier":"LICEFont","type":"identifier"},{"identifier":"color","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_SetFontColor\""},{"type_name":"void*","identifier":"LICEFont"},{"type_name":"int","identifier":"color"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_LICE_SetFontColor(identifier LICEFont, integer color)","eel":"extension_api(\"JS_LICE_SetFontColor\", void* LICEFont, int color)","python":"JS_LICE_SetFontColor(void LICEFont, Int color)","cpp":"void JS_LICE_SetFontColor(void* LICEFont, int color)"},"title":"JS_LICE_SetFontColor","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier LICEFont","description":""},{"identifier":"integer color","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_SetFontFXColor","return_values":[],"parameters":[{"identifier":"LICEFont","type":"identifier"},{"identifier":"color","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_SetFontFXColor\""},{"type_name":"void*","identifier":"LICEFont"},{"type_name":"int","identifier":"color"}]}},"requires":{"Reaper":"5.974","JS":"1.301"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_LICE_SetFontFXColor(identifier LICEFont, integer color)","eel":"extension_api(\"JS_LICE_SetFontFXColor\", void* LICEFont, int color)","python":"JS_LICE_SetFontFXColor(void LICEFont, Int color)","cpp":"void JS_LICE_SetFontFXColor(void* LICEFont, int color)"},"title":"JS_LICE_SetFontFXColor","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sets the color of font FX such as shadow.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier LICEFont","description":""},{"identifier":"identifier GDIFont","description":""},{"identifier":"string moreFormats","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_SetFontFromGDI","return_values":[],"parameters":[{"identifier":"LICEFont","type":"identifier"},{"identifier":"GDIFont","type":"identifier"},{"identifier":"moreFormats","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_LICE_SetFontFromGDI\""},{"type_name":"void*","identifier":"LICEFont"},{"type_name":"void*","identifier":"GDIFont"},{"identifier":"\"moreFormats\""}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_LICE_SetFontFromGDI(identifier LICEFont, identifier GDIFont, string moreFormats)","eel":"extension_api(\"JS_LICE_SetFontFromGDI\", void* LICEFont, void* GDIFont, \"moreFormats\")","python":"JS_LICE_SetFontFromGDI(void LICEFont, void GDIFont, String moreFormats)","cpp":"void JS_LICE_SetFontFromGDI(void* LICEFont, void* GDIFont, const char* moreFormats)"},"title":"JS_LICE_SetFontFromGDI","chapters":["User Interface","Drawing in HWNDs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Converts a GDI font into a LICE font.\n\nThe font can be modified by the following flags, in a comma-separated list:\n\n\"VERTICAL\", \"BOTTOMUP\", \"NATIVE\", \"BLUR\", \"INVERT\", \"MONO\", \"SHADOW\" or \"OUTLINE\".","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"string filename","description":"the filename+path of the jpg to write"},{"identifier":"LICE_IBitmap bitmap","description":"the bitmap, that you want to write as jpg-file"},{"identifier":"integer quality","description":"the quality-setting in percent, from 1(lowest quality) to 100(highest quality)"},{"identifier":"optional boolean forceBaseline","description":"true, ensure compatibility with all JPEG-viewers(prevent too low quality); nil or false, allow too low quality(possible compatibility-problems with some JPEG-viewers)"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_WriteJPG","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"filename","type":"string"},{"identifier":"bitmap","type":"identifier"},{"identifier":"quality","type":"integer"},{"identifier":"forceBaseline","type":"unsupported"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_LICE_WriteJPG\""},{"identifier":"\"filename\""},{"type_name":"void*","identifier":"bitmap"},{"type_name":"int","identifier":"quality"},{"type_name":"unsupported","identifier":"forceBaselineOptional"}]}},"requires":{"Reaper":"5.974","JS":"1.215"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, writing was successful; false, writing was unsuccessful"}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.JS_LICE_WriteJPG(string filename, identifier bitmap, integer quality, unsupported forceBaseline)","eel":"bool extension_api(\"JS_LICE_WriteJPG\", \"filename\", void* bitmap, int quality, unsupported forceBaselineOptional)","python":"(Boolean retval, String filename, void bitmap, Int quality, Boolean forceBaselineOptional) = JS_LICE_WriteJPG(filename, bitmap, quality, forceBaselineOptional)","cpp":"bool JS_LICE_WriteJPG(const char* filename, void* bitmap, int quality, bool* forceBaselineOptional)"},"title":"JS_LICE_WriteJPG","chapters":["File Management","Image Files"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Parameters:\n\n\\* quality is an integer in the range 1..100.\n\\* forceBaseline is an optional boolean parameter that ensures compatibility with all JPEG viewers by preventing too low quality, \"cubist\" settings. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"string filename","description":"the filename+path of the png-file to write"},{"identifier":"LICE_IBitmap bitmap","description":"the bitmap, whose contents shall be written as png-file"},{"identifier":"boolean wantAlpha","description":"true, store alpha; false, don't store alpha"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_LICE_WritePNG","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"filename","type":"string"},{"identifier":"bitmap","type":"identifier"},{"identifier":"wantAlpha","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_LICE_WritePNG\""},{"identifier":"\"filename\""},{"type_name":"void*","identifier":"bitmap"},{"type_name":"bool","identifier":"wantAlpha"}]}},"requires":{"Reaper":"5.974","JS":"1.215"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, writing was successful; false, writing was not successful"}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.JS_LICE_WritePNG(string filename, identifier bitmap, boolean wantAlpha)","eel":"bool extension_api(\"JS_LICE_WritePNG\", \"filename\", void* bitmap, bool wantAlpha)","python":"Boolean retval = JS_LICE_WritePNG(String filename, void bitmap, Boolean wantAlpha)","cpp":"bool JS_LICE_WritePNG(const char* filename, void* bitmap, bool wantAlpha)"},"title":"JS_LICE_WritePNG","chapters":["File Management","Image Files"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Writes the contents of a LICE_IBitMap as png-file.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier listviewHWND","description":""},{"identifier":"integer index","description":""},{"identifier":"boolean partialOK","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_ListView_EnsureVisible","return_values":[],"parameters":[{"identifier":"listviewHWND","type":"identifier"},{"identifier":"index","type":"integer"},{"identifier":"partialOK","type":"boolean"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_ListView_EnsureVisible\""},{"type_name":"void*","identifier":"listviewHWND"},{"type_name":"int","identifier":"index"},{"type_name":"bool","identifier":"partialOK"}]}},"requires":{"Reaper":"5.974","JS":"0.990"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_ListView_EnsureVisible(identifier listviewHWND, integer index, boolean partialOK)","eel":"extension_api(\"JS_ListView_EnsureVisible\", void* listviewHWND, int index, bool partialOK)","python":"JS_ListView_EnsureVisible(void listviewHWND, Int index, Boolean partialOK)","cpp":"void JS_ListView_EnsureVisible(void* listviewHWND, int index, bool partialOK)"},"title":"JS_ListView_EnsureVisible","chapters":["User Interface","List Views"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string USEnglish","description":"the original english string"},{"identifier":"string LangPackSection","description":"the section in the Reaper-language-pack-file, in which the string is locate"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Localize","return_values":[{"identifier":"translation","type":"string"}],"parameters":[{"identifier":"USEnglish","type":"string"},{"identifier":"LangPackSection","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Localize\""},{"identifier":"\"USEnglish\""},{"identifier":"\"LangPackSection\""},{"identifier":"#translation"}]}},"requires":{"Reaper":"5.974","JS":"0.963"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string translation","description":"the translated string, according to the currently used LangPack"}],"prog_lang":"*"},"functioncall":{"lua":"string translation = reaper.JS_Localize(string USEnglish, string LangPackSection)","eel":"extension_api(\"JS_Localize\", \"USEnglish\", \"LangPackSection\", #translation)","python":"(String USEnglish, String LangPackSection, String translationOut, Int translationOut_sz) = JS_Localize(USEnglish, LangPackSection, translationOut, translationOut_sz)","cpp":"void JS_Localize(const char* USEnglish, const char* LangPackSection, char* translationOut, int translationOut_sz)"},"title":"JS_Localize","chapters":["Api-Helper-Functions","Localization"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Returns the translation of the given US English text, according to the currently loaded Language Pack.\n\nParameters:\n\\* LangPackSection: Language Packs are divided into sections such as \"common\" or \"DLG\\_102\".\n\\* In Lua, by default, text of up to 1024 chars can be returned. To increase (or reduce) the default buffer size, a string and size can be included as optional 3rd and 4th arguments.\n\nExample: reaper.JS\\_Localize(\"Actions\", \"common\", \"\", 20)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier reaperarray","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_MIDIEditor_ArrayAll","return_values":[],"parameters":[{"identifier":"reaperarray","type":"identifier"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_MIDIEditor_ArrayAll\""},{"type_name":"void*","identifier":"reaperarray"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_MIDIEditor_ArrayAll(identifier reaperarray)","eel":"extension_api(\"JS_MIDIEditor_ArrayAll\", void* reaperarray)","python":"JS_MIDIEditor_ArrayAll(void reaperarray)","cpp":"void JS_MIDIEditor_ArrayAll(void* reaperarray)"},"title":"JS_MIDIEditor_ArrayAll","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Returns the addresses of all open MIDI windows (whether docked or not).\n\n\\* The addresses are stored in the provided reaper.array.\n\n\\* Each address can be converted to a REAPER object (HWND) by the function JS\\_Window\\_HandleFromAddress.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string buf","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_MIDIEditor_ListAll","return_values":[{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"buf","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_MIDIEditor_ListAll\""},{"identifier":"#buf"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string buf","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string buf = reaper.JS_MIDIEditor_ListAll(string buf)","eel":"extension_api(\"JS_MIDIEditor_ListAll\", #buf)","python":"(String buf, Int buf_sz) = JS_MIDIEditor_ListAll(buf, buf_sz)","cpp":"void JS_MIDIEditor_ListAll(char* buf, int buf_sz)"},"title":"JS_MIDIEditor_ListAll","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Returns a list of HWNDs of all open MIDI windows (whether docked or not).\n\n\\* The list is formatted as a comma-separated (and terminated) string of hexadecimal values.\n\n\\* Each value is an address that can be converted to a HWND by the function JS\\_Window\\_HandleFromAddress.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer sizeBytes","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Mem_Alloc","return_values":[{"identifier":"memory","type":"identifier"}],"parameters":[{"identifier":"sizeBytes","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_Mem_Alloc\""},{"type_name":"int","identifier":"sizeBytes"}]}},"requires":{"Reaper":"5.974","JS":"0.971"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier memory","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier memory = reaper.JS_Mem_Alloc(integer sizeBytes)","eel":"void* extension_api(\"JS_Mem_Alloc\", int sizeBytes)","python":"identifier memory = JS_Mem_Alloc(Int sizeBytes)","cpp":"void* JS_Mem_Alloc(int sizeBytes)"},"title":"JS_Mem_Alloc","chapters":["Api-Helper-Functions","Address/Datatype Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Allocates memory for general use by functions that require memory buffers.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier mallocPointer","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Mem_Free","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"mallocPointer","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_Mem_Free\""},{"type_name":"void*","identifier":"mallocPointer"}]}},"requires":{"Reaper":"5.974","JS":"0.971"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.JS_Mem_Free(identifier mallocPointer)","eel":"bool extension_api(\"JS_Mem_Free\", void* mallocPointer)","python":"Boolean retval = JS_Mem_Free(void mallocPointer)","cpp":"bool JS_Mem_Free(void* mallocPointer)"},"title":"JS_Mem_Free","chapters":["Api-Helper-Functions","Address/Datatype Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Frees memory that was previously allocated by JS\\_Mem\\_Alloc.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"identifier mallocPointer","description":""},{"identifier":"integer offset","description":""},{"identifier":"string packedString","description":""},{"identifier":"integer stringLength","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Mem_FromString","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"mallocPointer","type":"identifier"},{"identifier":"offset","type":"integer"},{"identifier":"packedString","type":"string"},{"identifier":"stringLength","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_Mem_FromString\""},{"type_name":"void*","identifier":"mallocPointer"},{"type_name":"int","identifier":"offset"},{"identifier":"\"packedString\""},{"type_name":"int","identifier":"stringLength"}]}},"requires":{"Reaper":"5.974","JS":"0.971"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.JS_Mem_FromString(identifier mallocPointer, integer offset, string packedString, integer stringLength)","eel":"bool extension_api(\"JS_Mem_FromString\", void* mallocPointer, int offset, \"packedString\", int stringLength)","python":"Boolean retval = JS_Mem_FromString(void mallocPointer, Int offset, String packedString, Int stringLength)","cpp":"bool JS_Mem_FromString(void* mallocPointer, int offset, const char* packedString, int stringLength)"},"title":"JS_Mem_FromString","chapters":["Api-Helper-Functions","Address/Datatype Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Copies a packed string into a memory buffer.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.JS_Mouse_GetCursor","return_values":[{"identifier":"mouse_cursor","type":"identifier"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_Mouse_GetCursor\""}]}},"requires":{"Reaper":"5.974","JS":"0.988"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier mouse_cursor","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier mouse_cursor = reaper.JS_Mouse_GetCursor()","eel":"void* extension_api(\"JS_Mouse_GetCursor\")","python":"identifier mouse_cursor = JS_Mouse_GetCursor()","cpp":"void* JS_Mouse_GetCursor()"},"title":"JS_Mouse_GetCursor","chapters":["Input/Output Devices","Mouse"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"On Windows, retrieves a handle to the current mouse cursor.\nOn Linux and macOS, retrieves a handle to the last cursor set by REAPER or its extensions via SWELL.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer flags","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Mouse_GetState","return_values":[{"identifier":"mouse_states","type":"integer"}],"parameters":[{"identifier":"flags","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_Mouse_GetState\""},{"type_name":"int","identifier":"flags"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer mouse_states","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer mouse_states = reaper.JS_Mouse_GetState(integer flags)","eel":"int extension_api(\"JS_Mouse_GetState\", int flags)","python":"Int retval = JS_Mouse_GetState(Int flags)","cpp":"int JS_Mouse_GetState(int flags)"},"title":"JS_Mouse_GetState","chapters":["Input/Output Devices","Mouse"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Retrieves the states of mouse buttons and modifiers keys.\n\nParameters:\n\n* flags, state: The parameter and the return value both use the same format as gfx.mouse_cap. I.e., to get the states of the left mouse button and the ctrl key, use flags = 0b00000101.\nuse -1 as flags to retrieve the states of all mouse-buttons and modifier","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer cursorNumber","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Mouse_LoadCursor","return_values":[{"identifier":"mouse_cursor","type":"identifier"}],"parameters":[{"identifier":"cursorNumber","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_Mouse_LoadCursor\""},{"type_name":"int","identifier":"cursorNumber"}]}},"requires":{"Reaper":"5.974","JS":"0.964"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier mouse_cursor","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier mouse_cursor = reaper.JS_Mouse_LoadCursor(integer cursorNumber)","eel":"void* extension_api(\"JS_Mouse_LoadCursor\", int cursorNumber)","python":"identifier mouse_cursor = JS_Mouse_LoadCursor(Int cursorNumber)","cpp":"void* JS_Mouse_LoadCursor(int cursorNumber)"},"title":"JS_Mouse_LoadCursor","chapters":["Input/Output Devices","Mouse"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Loads a cursor by number.\n\ncursorNumber: Same as used for gfx.setcursor, and includes some of Windows' predefined cursors (with numbers > 32000; refer to documentation for the Win32 C++ function LoadCursor), and REAPER's own cursors (with numbers < 2000). \n\nIf successful, returns a handle to the cursor, which can be used in [JS\\_Mouse\\_SetCursor](#JS_Mouse_SetCursor).\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string pathAndFileName","description":"the filename with path to the .cur-cursor-file"},{"identifier":"optional boolean forceNewLoad","description":"true, force reloading the cursor; false or nil, don't reload the cursor"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Mouse_LoadCursorFromFile","return_values":[{"identifier":"mouse_cursor","type":"identifier"}],"parameters":[{"identifier":"pathAndFileName","type":"string"},{"isOptional":true,"type":"boolean","identifier":"forceNewLoad"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_Mouse_LoadCursorFromFile\""},{"identifier":"\"pathAndFileName\""},{"type_name":"boolean","identifier":"forceNewLoad"}]}},"requires":{"Reaper":"5.974","JS":"1.310"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier mouse_cursor","description":"a handle for the mouse-cursor"}],"prog_lang":"*"},"functioncall":{"lua":"identifier mouse_cursor = reaper.JS_Mouse_LoadCursorFromFile(string pathAndFileName, optional boolean forceNewLoad)","eel":"void* extension_api(\"JS_Mouse_LoadCursorFromFile\", \"pathAndFileName\", boolean forceNewLoad)","python":"identifier mouse_cursor = JS_Mouse_LoadCursorFromFile(String pathAndFileName, Boolean forceNewLoadOptional)","cpp":"void* JS_Mouse_LoadCursorFromFile(const char* pathAndFileName, bool* forceNewLoad)"},"title":"JS_Mouse_LoadCursorFromFile","chapters":["Input/Output Devices","Mouse"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Loads a cursor from a .cur file.\n\nforceNewLoad is an optional boolean parameter:\n* If omitted or false, and if the cursor file has already been loaded previously during the REAPER session by any script, the file will not be re-loaded, and the existing handle will be returned.\n* If true, the file will be re-loaded and a new handle will be returned.\n* WARNING: Each time that a cursor file is re-loaded, the number of GDI objects increases for the entire duration of the REAPER session.\n\nIf successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier cursorHandle","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Mouse_SetCursor","return_values":[],"parameters":[{"identifier":"cursorHandle","type":"identifier"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Mouse_SetCursor\""},{"type_name":"void*","identifier":"cursorHandle"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_Mouse_SetCursor(identifier cursorHandle)","eel":"extension_api(\"JS_Mouse_SetCursor\", void* cursorHandle)","python":"JS_Mouse_SetCursor(void cursorHandle)","cpp":"void JS_Mouse_SetCursor(void* cursorHandle)"},"title":"JS_Mouse_SetCursor","chapters":["Input/Output Devices","Mouse"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sets the mouse cursor.  (Only lasts while script is running, and for a single \"defer\" cycle.)\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer x","description":""},{"identifier":"integer y","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Mouse_SetPosition","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_Mouse_SetPosition\""},{"type_name":"int","identifier":"x"},{"type_name":"int","identifier":"y"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.JS_Mouse_SetPosition(integer x, integer y)","eel":"bool  extension_api(\"JS_Mouse_SetPosition\", int x, int y)","python":"Boolean retval = JS_Mouse_SetPosition(Int x, Int y)","cpp":"bool JS_Mouse_SetPosition(int x, int y)"},"title":"JS_Mouse_SetPosition","chapters":["Input/Output Devices","Mouse"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Moves the mouse cursor to the specified coordinates.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string s","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_PtrFromStr","return_values":[{"identifier":"ptr","type":"identifier"}],"parameters":[{"identifier":"s","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_PtrFromStr\""},{"identifier":"\"s\""}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier ptr","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier ptr = reaper.JS_PtrFromStr(string s)","eel":"void* extension_api(\"JS_PtrFromStr\", \"s\")","python":"identifier ptr = JS_PtrFromStr(String s)","cpp":"void* JS_PtrFromStr(const char* s)"},"title":"JS_PtrFromStr","chapters":["Api-Helper-Functions","Address/Datatype Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.JS_ReaScriptAPI_Version","return_values":[{"identifier":"version","type":"number"}],"parameters":[]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_ReaScriptAPI_Version\""},{"identifier":"&version"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number version","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number version = reaper.JS_ReaScriptAPI_Version()","eel":"extension_api(\"JS_ReaScriptAPI_Version\", &version)","python":"(Float version) = JS_ReaScriptAPI_Version(versionOut)","cpp":"void JS_ReaScriptAPI_Version(double* versionOut)"},"title":"JS_ReaScriptAPI_Version","chapters":["JS_Plugin","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the version of the js_ReaScriptAPI extension.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier pointer","description":""},{"identifier":"integer offset","description":""},{"identifier":"integer lengthChars","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_String","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"pointer","type":"identifier"},{"identifier":"offset","type":"integer"},{"identifier":"lengthChars","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_String\""},{"type_name":"void*","identifier":"pointer"},{"type_name":"int","identifier":"offset"},{"type_name":"int","identifier":"lengthChars"},{"identifier":"#buf"}]}},"requires":{"Reaper":"5.974","JS":"0.971"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string buf = reaper.JS_String(identifier pointer, integer offset, integer lengthChars)","eel":"bool extension_api(\"JS_String\", void* pointer, int offset, int lengthChars, #buf)","python":"(Boolean retval, void pointer, Int offset, Int lengthChars, String bufOutNeedBig, Int bufOutNeedBig_sz) = JS_String(pointer, offset, lengthChars, bufOutNeedBig, bufOutNeedBig_sz)","cpp":"bool JS_String(void* pointer, int offset, int lengthChars, char* bufOutNeedBig, int bufOutNeedBig_sz)"},"title":"JS_String","chapters":["Api-Helper-Functions","Address/Datatype Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the memory contents starting at address[offset] as a packed string. Offset is added as steps of 1 byte (char) each.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number cutoffTime","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_VKeys_GetDown","return_values":[{"identifier":"state","type":"string"}],"parameters":[{"identifier":"cutoffTime","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_VKeys_GetDown\""},{"identifier":"cutoffTime"},{"identifier":"#state"}]}},"requires":{"Reaper":"5.974","JS":"0.993"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string state","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string state = reaper.JS_VKeys_GetDown(number cutoffTime)","eel":"extension_api(\"JS_VKeys_GetDown\", cutoffTime, #state)","python":"(Float cutoffTime, String stateOutNeedBig, Int stateOutNeedBig_sz) = JS_VKeys_GetDown(cutoffTime, stateOutNeedBig, stateOutNeedBig_sz)","cpp":"void JS_VKeys_GetDown(double cutoffTime, char* stateOutNeedBig, int* stateOutNeedBig_sz)"},"title":"JS_VKeys_GetDown","chapters":["Input/Output Devices","Keyboard"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Returns a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYDOWN messages since cutoffTime.\n\nNotes:\n* Mouse buttons and modifier keys are not (currently) reliably detected, and JS\\_Mouse\\_GetState can be used instead.\n* Auto-repeated KEYDOWN messages are ignored.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.JS_VKeys_ClearHistory","return_values":[],"parameters":[]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_VKeys_ClearHistory\""}]}},"requires":{"Reaper":"5.974","JS":"0.980"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_VKeys_ClearHistory()","eel":"extension_api(\"JS_VKeys_ClearHistory\")","python":"JS_VKeys_ClearHistory()","cpp":"void JS_VKeys_ClearHistory()"},"title":"JS_VKeys_ClearHistory","chapters":["Input/Output Devices","Keyboard"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"deprecated","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.JS_VKeys_GetHistory","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"state","type":"string"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_VKeys_GetHistory\""},{"identifier":"#state"}]}},"requires":{"Reaper":"5.974","JS":"0.980"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string state","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string state = reaper.JS_VKeys_GetHistory()","eel":"bool extension_api(\"JS_VKeys_GetHistory\", #state)","python":"(Boolean retval, String stateOutNeedBig, Int stateOutNeedBig_sz) = JS_VKeys_GetHistory(stateOutNeedBig, stateOutNeedBig_sz)","cpp":"bool JS_VKeys_GetHistory(char* stateOutNeedBig, int* stateOutNeedBig_sz)"},"title":"JS_VKeys_GetHistory","chapters":["Input/Output Devices","Keyboard"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"deprecated","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.JS_VKeys_GetState","return_values":[{"identifier":"state","type":"string"},{"identifier":"unknown","type":"integer"}],"parameters":[{"identifier":"cutoffTime","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_VKeys_GetState\""},{"identifier":"cutoffTime"},{"identifier":"#state"}]}},"requires":{"Reaper":"5.974","JS":"0.993"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string state","description":"a 255-byte array, where each entry represents the key pressed. For instance, if A is pressed, the 65th byte=AsciiCode 1, else 65th byte=AsciiCode 0. The IDE-watchlist will probably truncate this string."},{"identifier":"integer unknown","description":"unknown; probably cutofftime"}],"prog_lang":"*"},"functioncall":{"lua":"string state, integer unknown = reaper.JS_VKeys_GetState(number cutoffTime)","eel":"extension_api(\"JS_VKeys_GetState\", cutoffTime, #state)","python":"(Float cutoffTime, String stateOutNeedBig, Int stateOutNeedBig_sz) = JS_VKeys_GetState(cutoffTime, stateOutNeedBig, stateOutNeedBig_sz)","cpp":"void JS_VKeys_GetState(double cutoffTime, char* stateOutNeedBig, int* stateOutNeedBig_sz)"},"title":"JS_VKeys_GetState","chapters":["Input/Output Devices","Keyboard"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Retrieves the current states (0 or 1) of all virtual keys, from 0x01 to 0xFF, in a 255-byte array.\n\ncutoffTime: A key is only regarded as down if it sent a KEYDOWN message after the cut-off time, not followed by KEYUP. (This is useful for excluding old KEYDOWN messages that weren't properly followed by KEYUP.) \nIf cutoffTime is positive, is it interpreted as absolute time in similar format as time_precise().\nIf cutoffTime is negative, it is relative to the current time.\n\nNotes:\nNotes:\n* Mouse buttons and modifier keys are not (currently) reliably detected, and JS\\_Mouse\\_GetState can be used instead.\n* Auto-repeated KEYDOWN messages are ignored.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number cutoffTime","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_VKeys_GetUp","return_values":[{"identifier":"state","type":"string"}],"parameters":[{"identifier":"cutoffTime","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_VKeys_GetUp\""},{"identifier":"cutoffTime"},{"identifier":"#state"}]}},"requires":{"Reaper":"5.974","JS":"0.986"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string state","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string state = reaper.JS_VKeys_GetUp(number cutoffTime)","eel":"extension_api(\"JS_VKeys_GetUp\", cutoffTime, #state)","python":"(Float cutoffTime, String stateOutNeedBig, Int stateOutNeedBig_sz) = JS_VKeys_GetUp(cutoffTime, stateOutNeedBig, stateOutNeedBig_sz)","cpp":"void JS_VKeys_GetUp(double cutoffTime, char* stateOutNeedBig, int* stateOutNeedBig_sz)"},"title":"JS_VKeys_GetUp","chapters":["Input/Output Devices","Keyboard"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Return a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYUP messages since cutoffTime.\n\nNote: Mouse buttons and modifier keys are not (currently) reliably detected, and [JS\\_Mouse\\_GetState](#JS_Mouse_GetState) can be used instead.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer keyCode","description":""},{"identifier":"integer intercept","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_VKeys_Intercept","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"keyCode","type":"integer"},{"identifier":"intercept","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_VKeys_Intercept\""},{"type_name":"int","identifier":"keyCode"},{"type_name":"int","identifier":"intercept"}]}},"requires":{"Reaper":"5.974","JS":"0.980"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_VKeys_Intercept(integer keyCode, integer intercept)","eel":"int extension_api(\"JS_VKeys_Intercept\", int keyCode, int intercept)","python":"Int retval = JS_VKeys_Intercept(Int keyCode, Int intercept)","cpp":"int JS_VKeys_Intercept(int keyCode, int intercept)"},"title":"JS_VKeys_Intercept","chapters":["Input/Output Devices","Keyboard"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Intercepting (blocking) virtual keys work similar to the native function PreventUIRefresh: Each key has a (non-negative) intercept state, and the key is passed through as usual if the state equals 0, or blocked if the state is greater than 0.\n\nkeyCode: The virtual key code of the key, or -1 to change the state of all keys.\n\nintercept: A script can increase the intercept state by passing +1, or lower the state by passing -1. \nMultiple scripts can block the same key, and the intercept state may reach up to 255. \nIf zero is passed, the intercept state is not changed, but the current state is returned.\n\nReturns: If keyCode refers to a single key, the intercept state of that key is returned. If keyCode = -1, the state of the key that is most strongly blocked (highest intercept state) is returned.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"string messages","description":""},{"identifier":"boolean passThrough","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_WindowMessage_Intercept","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"messages","type":"string"},{"identifier":"passThrough","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_WindowMessage_Intercept\""},{"type_name":"void*","identifier":"windowHWND"},{"identifier":"\"messages\""},{"type_name":"bool","identifier":"passThrough"}]}},"requires":{"Reaper":"5.974","JS":"0.980"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_WindowMessage_Intercept(identifier windowHWND, string messages, boolean passThrough)","eel":"int extension_api(\"JS_WindowMessage_Intercept\", void* windowHWND, \"messages\", bool passThrough)","python":"Int retval = JS_WindowMessage_Intercept(void windowHWND, String messages, Boolean passThrough)","cpp":"int JS_WindowMessage_Intercept(void* windowHWND, const char* messages, bool passThrough)"},"title":"JS_WindowMessage_Intercept","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Intercepts window messages to specified window.\n\nParameters:\n\n * message: a single message type to be intercepted, either in WM_ or hexadecimal format. For example \"WM_SETCURSOR\" or \"0x0020\".\n\n * passThrough: Whether message should be blocked (false) or passed through (true) to the window.\n\n    For more information on message codes, refer to the Win32 C++ API documentation.\n\n    For a list of message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ name.\n\n\n\nReturns:\n\n * 1: Success.\n\n * 0: The message type is already being intercepted by another script.\n\n * -2: message string could not be parsed.\n\n * -3: Failure getting original window process / window not valid.\n\n * -6: Could not obtain the window client HDC.\n\n\nNotes:\n\n * Intercepted messages can be polled using JS_WindowMessage_Peek.\n\n * Intercepted messages can be edited, if necessary, and then forwarded to their original destination using JS_WindowMessage_Post or JS_WindowMessage_Send.\n\n * To check whether a message type is being blocked or passed through, Peek the message type, or retrieve the entire List of intercepts.\n\n * Mouse events are typically received by the child window under the mouse, not the parent window.\n\n Keyboard events are usually *not* received by any individual window. To intercept keyboard events, use the VKey functions.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"string messages","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_WindowMessage_InterceptList","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"messages","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_WindowMessage_InterceptList\""},{"type_name":"void*","identifier":"windowHWND"},{"identifier":"\"messages\""}]}},"requires":{"Reaper":"5.974","JS":"0.980"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_WindowMessage_InterceptList(identifier windowHWND, string messages)","eel":"int extension_api(\"JS_WindowMessage_InterceptList\", void* windowHWND, \"messages\")","python":"Int retval = JS_WindowMessage_InterceptList(void windowHWND, String messages)","cpp":"int JS_WindowMessage_InterceptList(void* windowHWND, const char* messages)"},"title":"JS_WindowMessage_InterceptList","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Intercepts window messages to specified window.\n\n\n\n           Parameters:\n\n* messages: comma-separated string of message types to be intercepted (either in WM_ or hexadecimal format), each with a \"block\" or \"passthrough\" modifier to specify whether the message should be blocked or passed through to the window. For example \"WM_SETCURSOR:block, 0x0201:passthrough\".\n\n   For more information on message codes, refer to the Win32 C++ API documentation.\n\n   For a list of message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ name.\n\n\n\n           Returns:\n\n* 1: Success.\n\n* 0: The message type is already being intercepted by another script.\n\n* -1: windowHWND is not a valid window.\n\n* -2: message string could not be parsed.\n\n* -3: Failure getting original window process.\n\n* -6: Could not obtain the window client HDC.\n\n           Notes:\n\n* Intercepted messages can be polled using JS_WindowMessage_Peek.\n\n* Intercepted messages can be edited, if necessary, and then forwarded to their original destination using JS_WindowMessage_Post or JS_WindowMessage_Send.\n\n* To check whether a message type is being blocked or passed through, Peek the message type, or retrieve the entire List of intercepts.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_WindowMessage_ListIntercepts","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"buf","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_WindowMessage_ListIntercepts\""},{"type_name":"void*","identifier":"windowHWND"},{"identifier":"#buf"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string buf = reaper.JS_WindowMessage_ListIntercepts(identifier windowHWND, string buf)","eel":"bool  extension_api(\"JS_WindowMessage_ListIntercepts\", void* windowHWND, #buf)","python":"(Boolean retval, void windowHWND, String buf, Int buf_sz) = JS_WindowMessage_ListIntercepts(windowHWND, buf, buf_sz)","cpp":"bool JS_WindowMessage_ListIntercepts(void* windowHWND, char* buf, int buf_sz)"},"title":"JS_WindowMessage_ListIntercepts","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns a string with a list of all message types currently being intercepted for the specified window.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"string message","description":""},{"identifier":"boolean passThrough","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_WindowMessage_PassThrough","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"message","type":"string"},{"identifier":"passThrough","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_WindowMessage_PassThrough\""},{"type_name":"void*","identifier":"windowHWND"},{"identifier":"\"message\""},{"type_name":"bool","identifier":"passThrough"}]}},"requires":{"Reaper":"5.974","JS":"0.998"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_WindowMessage_PassThrough(identifier windowHWND, string message, boolean passThrough)","eel":"int extension_api(\"JS_WindowMessage_PassThrough\", void* windowHWND, \"message\", bool passThrough)","python":"Int retval = JS_WindowMessage_PassThrough(void windowHWND, String message, Boolean passThrough)","cpp":"int JS_WindowMessage_PassThrough(void* windowHWND, const char* message, bool passThrough)"},"title":"JS_WindowMessage_PassThrough","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Changes the passthrough setting of a message type that is already being intercepted.\n\nReturns 1 if successful, 0 if the message type is not yet being intercepted, or -2 if the argument could not be parsed.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"string message","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_WindowMessage_Peek","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"passedThrough","type":"boolean"},{"identifier":"time","type":"number"},{"identifier":"wParamLow","type":"integer"},{"identifier":"wParamHigh","type":"integer"},{"identifier":"lParamLow","type":"integer"},{"identifier":"lParamHigh","type":"integer"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"message","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_WindowMessage_Peek\""},{"type_name":"void*","identifier":"windowHWND"},{"identifier":"\"message\""},{"type_name":"bool","identifier":"&passedThrough"},{"identifier":"&time"},{"type_name":"int","identifier":"&wParamLow"},{"type_name":"int","identifier":"&wParamHigh"},{"type_name":"int","identifier":"&lParamLow"},{"type_name":"int","identifier":"&lParamHigh"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"boolean passedThrough","description":""},{"identifier":"number time","description":""},{"identifier":"integer wParamLow","description":""},{"identifier":"integer wParamHigh","description":""},{"identifier":"integer lParamLow","description":""},{"identifier":"integer lParamHigh","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, boolean passedThrough, number time, integer wParamLow, integer wParamHigh, integer lParamLow, integer lParamHigh = reaper.JS_WindowMessage_Peek(identifier windowHWND, string message)","eel":"bool  extension_api(\"JS_WindowMessage_Peek\", void* windowHWND, \"message\", bool &passedThrough, &time, int &wParamLow, int &wParamHigh, int &lParamLow, int &lParamHigh)","python":"(Boolean retval, void windowHWND, String message, Boolean passedThroughOut, Float timeOut, Int wParamLowOut, Int wParamHighOut, Int lParamLowOut, Int lParamHighOut) = JS_WindowMessage_Peek(windowHWND, message, passedThroughOut, timeOut, wParamLowOut, wParamHighOut, lParamLowOut, lParamHighOut)","cpp":"bool JS_WindowMessage_Peek(void* windowHWND, const char* message, bool* passedThroughOut, double* timeOut, int* wParamLowOut, int* wParamHighOut, int* lParamLowOut, int* lParamHighOut)"},"title":"JS_WindowMessage_Peek","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Polls the state of an intercepted message.\n\n\n\n           Parameters:\n\n* message: String containing a single message name, such as \"WM_SETCURSOR\", or in hexadecimal format, \"0x0020\".\n\n(For a list of message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ name.)\n\n\n\n           Returns:\n\n* A retval of false indicates that the message type is not being intercepted in the specified window.\n\n* All messages are timestamped. A time of 0 indicates that no message if this type has been intercepted yet.\n\n* For more information about wParam and lParam for different message types, refer to Win32 C++ documentation.\n\n* For example, in the case of mousewheel, returns mousewheel delta, modifier keys, x position and y position.\n\n* wParamHigh, lParamLow and lParamHigh are signed, whereas wParamLow is unsigned.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"string message","description":""},{"identifier":"number wParam","description":""},{"identifier":"integer wParamHighWord","description":""},{"identifier":"number lParam","description":""},{"identifier":"integer lParamHighWord","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_WindowMessage_Post","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"message","type":"string"},{"identifier":"wParam","type":"number"},{"identifier":"wParamHighWord","type":"integer"},{"identifier":"lParam","type":"number"},{"identifier":"lParamHighWord","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_WindowMessage_Post\""},{"type_name":"void*","identifier":"windowHWND"},{"identifier":"\"message\""},{"identifier":"wParam"},{"type_name":"int","identifier":"wParamHighWord"},{"identifier":"lParam"},{"type_name":"int","identifier":"lParamHighWord"}]}},"requires":{"Reaper":"5.974","JS":"0.998"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.JS_WindowMessage_Post(identifier windowHWND, string message, number wParam, integer wParamHighWord, number lParam, integer lParamHighWord)","eel":"bool extension_api(\"JS_WindowMessage_Post\", void* windowHWND, \"message\", wParam, int wParamHighWord, lParam, int lParamHighWord)","python":"Boolean retval = JS_WindowMessage_Post(void windowHWND, String message, Float wParam, Int wParamHighWord, Float lParam, Int lParamHighWord)","cpp":"bool JS_WindowMessage_Post(void* windowHWND, const char* message, double wParam, int wParamHighWord, double lParam, int lParamHighWord)"},"title":"JS_WindowMessage_Post","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"If the specified window and message type are not currently being intercepted by a script, this function will post the message in the message queue of the specified window, and return without waiting.\n\nIf the window and message type are currently being intercepted, the message will be sent directly to the original window process, similar to WindowMessage_Send, thereby skipping any intercepts.\n\nParameters:\n* message: String containing a single message name, such as \"WM_SETCURSOR\", or in hexadecimal format, \"0x0020\".\n(For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)\n* wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.\n(Most window messages encode separate information into the two WORDs. However, for those rare cases in which the entire WPARAM and LPARAM must be used to post a large pointer, the script can store this address in wParam or lParam, and keep wParamHigh and lParamHigh zero.)\n\nNotes:\n* For more information about parameter values, refer to documentation for the Win32 C++ function PostMessage.\n* Messages should only be sent to windows that were created from the main thread.\n* Useful for simulating mouse clicks and calling mouse modifier actions from scripts.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"string messages","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_WindowMessage_Release","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"messages","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_WindowMessage_Release\""},{"type_name":"void*","identifier":"windowHWND"},{"identifier":"\"messages\""}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_WindowMessage_Release(identifier windowHWND, string messages)","eel":"int extension_api(\"JS_WindowMessage_Release\", void* windowHWND, \"messages\")","python":"Int retval = JS_WindowMessage_Release(void windowHWND, String messages)","cpp":"int JS_WindowMessage_Release(void* windowHWND, const char* messages)"},"title":"JS_WindowMessage_Release","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Release intercepts of specified message types.\n\n           Parameters:\n\n* messages: \"WM_SETCURSOR,WM_MOUSEHWHEEL\" or \"0x0020,0x020E\", for example.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.JS_WindowMessage_ReleaseAll","return_values":[],"parameters":[]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_WindowMessage_ReleaseAll\""}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_WindowMessage_ReleaseAll()","eel":"extension_api(\"JS_WindowMessage_ReleaseAll\")","python":"JS_WindowMessage_ReleaseAll()","cpp":"void JS_WindowMessage_ReleaseAll()"},"title":"JS_WindowMessage_ReleaseAll","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Release script intercepts of window messages for all windows.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier windowHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_WindowMessage_ReleaseWindow","return_values":[],"parameters":[{"identifier":"windowHWND","type":"identifier"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_WindowMessage_ReleaseWindow\""},{"type_name":"void*","identifier":"windowHWND"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_WindowMessage_ReleaseWindow(identifier windowHWND)","eel":"extension_api(\"JS_WindowMessage_ReleaseWindow\", void* windowHWND)","python":"JS_WindowMessage_ReleaseWindow(void windowHWND)","cpp":"void JS_WindowMessage_ReleaseWindow(void* windowHWND)"},"title":"JS_WindowMessage_ReleaseWindow","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Release script intercepts of window messages for specified window.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"string message","description":""},{"identifier":"number wParam","description":""},{"identifier":"integer wParamHighWord","description":""},{"identifier":"number lParam","description":""},{"identifier":"integer lParamHighWord","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_WindowMessage_Send","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"message","type":"string"},{"identifier":"wParam","type":"number"},{"identifier":"wParamHighWord","type":"integer"},{"identifier":"lParam","type":"number"},{"identifier":"lParamHighWord","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_WindowMessage_Send\""},{"type_name":"void*","identifier":"windowHWND"},{"identifier":"\"message\""},{"identifier":"wParam"},{"type_name":"int","identifier":"wParamHighWord"},{"identifier":"lParam"},{"type_name":"int","identifier":"lParamHighWord"}]}},"requires":{"Reaper":"5.974","JS":"0.998"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_WindowMessage_Send(identifier windowHWND, string message, number wParam, integer wParamHighWord, number lParam, integer lParamHighWord)","eel":"int extension_api(\"JS_WindowMessage_Send\", void* windowHWND, \"message\", wParam, int wParamHighWord, lParam, int lParamHighWord)","python":"Int retval = JS_WindowMessage_Send(void windowHWND, String message, Float wParam, Int wParamHighWord, Float lParam, Int lParamHighWord)","cpp":"int JS_WindowMessage_Send(void* windowHWND, const char* message, double wParam, int wParamHighWord, double lParam, int lParamHighWord)"},"title":"JS_WindowMessage_Send","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sends a message to the specified window by calling the window process directly, and only returns after the message has been processed. Any intercepts of the message by scripts will be skipped, and the message can therefore not be blocked.\n\nParameters:\n* message: String containing a single message name, such as \"WM_SETCURSOR\", or in hexadecimal format, \"0x0020\".\n(For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)\n* wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.\n(Most window messages encode separate information into the two WORDs. However, for those rare cases in which the entire WPARAM and LPARAM must be used to post a large pointer, the script can store this address in wParam or lParam, and keep wParamHigh and lParamHigh zero.)\n\nNotes:\n* For more information about parameter and return values, refer to documentation for the Win32 C++ function SendMessage.\n* Messages should only be sent to windows that were created from the main thread.\n* Useful for simulating mouse clicks and calling mouse modifier actions from scripts.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier handle","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_AddressFromHandle","return_values":[{"identifier":"address","type":"number"}],"parameters":[{"identifier":"handle","type":"identifier"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Window_AddressFromHandle\""},{"type_name":"void*","identifier":"handle"},{"identifier":"&address"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number address","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number address = reaper.JS_Window_AddressFromHandle(identifier handle)","eel":"extension_api(\"JS_Window_AddressFromHandle\", void* handle, &address)","python":"(void handle, Float addressOut) = JS_Window_AddressFromHandle(handle, addressOut)","cpp":"void JS_Window_AddressFromHandle(void* handle, double* addressOut)"},"title":"JS_Window_AddressFromHandle","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier parentHWND","description":""},{"identifier":"identifier reaperarray","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_ArrayAllChild","return_values":[],"parameters":[{"identifier":"parentHWND","type":"identifier"},{"identifier":"reaperarray","type":"identifier"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Window_ArrayAllChild\""},{"type_name":"void*","identifier":"parentHWND"},{"type_name":"void*","identifier":"reaperarray"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_Window_ArrayAllChild(identifier parentHWND, identifier reaperarray)","eel":"extension_api(\"JS_Window_ArrayAllChild\", void* parentHWND, void* reaperarray)","python":"JS_Window_ArrayAllChild(void parentHWND, void reaperarray)","cpp":"void JS_Window_ArrayAllChild(void* parentHWND, void* reaperarray)"},"title":"JS_Window_ArrayAllChild","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns all child windows of the specified parent.\n\n\n\n           The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier reaperarray","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_ArrayAllTop","return_values":[],"parameters":[{"identifier":"reaperarray","type":"identifier"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Window_ArrayAllTop\""},{"type_name":"void*","identifier":"reaperarray"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_Window_ArrayAllTop(identifier reaperarray)","eel":"extension_api(\"JS_Window_ArrayAllTop\", void* reaperarray)","python":"JS_Window_ArrayAllTop(void reaperarray)","cpp":"void JS_Window_ArrayAllTop(void* reaperarray)"},"title":"JS_Window_ArrayAllTop","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns all top-level windows.\n\n\n\n           The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"string title","description":""},{"identifier":"boolean exact","description":""},{"identifier":"identifier reaperarray","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_ArrayFind","return_values":[],"parameters":[{"identifier":"title","type":"string"},{"identifier":"exact","type":"boolean"},{"identifier":"reaperarray","type":"identifier"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Window_ArrayFind\""},{"identifier":"\"title\""},{"type_name":"bool","identifier":"exact"},{"type_name":"void*","identifier":"reaperarray"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_Window_ArrayFind(string title, boolean exact, identifier reaperarray)","eel":"extension_api(\"JS_Window_ArrayFind\", \"title\", bool exact, void* reaperarray)","python":"JS_Window_ArrayFind(String title, Boolean exact, void reaperarray)","cpp":"void JS_Window_ArrayFind(const char* title, bool exact, void* reaperarray)"},"title":"JS_Window_ArrayFind","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns all windows, whether top-level or child, whose titles match the specified string.\n\n\n\n           The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.\n\n\n\n           Parameters: * exact: Match entire title exactly, or match substring of title.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier windowHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_AttachResizeGrip","return_values":[],"parameters":[{"identifier":"windowHWND","type":"identifier"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Window_AttachResizeGrip\""},{"type_name":"void*","identifier":"windowHWND"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_Window_AttachResizeGrip(identifier windowHWND)","eel":"extension_api(\"JS_Window_AttachResizeGrip\", void* windowHWND)","python":"JS_Window_AttachResizeGrip(void windowHWND)","cpp":"void JS_Window_AttachResizeGrip(void* windowHWND)"},"title":"JS_Window_AttachResizeGrip","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier windowHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_AttachTopmostPin","return_values":[{"identifier":"HWND","type":"identifier"}],"parameters":[{"identifier":"windowHWND","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["void"],"parameters":[{"identifier":"\"JS_Window_AttachTopmostPin\""},{"type_name":"void*","identifier":"windowHWND"}]}},"requires":{"Reaper":"5.974","JS":"0.988"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier HWND","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier HWND = reaper.JS_Window_AttachTopmostPin(identifier windowHWND)","eel":"void extension_api(\"JS_Window_AttachTopmostPin\", void* windowHWND)","python":"identifier HWND = JS_Window_AttachTopmostPin(void windowHWND)","cpp":"void* JS_Window_AttachTopmostPin(void* windowHWND)"},"title":"JS_Window_AttachTopmostPin","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Attaches a \"pin on top\" button to the window frame. The button should remember its state when closing and re-opening the window.\n\nWARNING: This function does not yet work on Linux.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"integer x","description":""},{"identifier":"integer y","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_ClientToScreen","return_values":[{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Window_ClientToScreen\""},{"type_name":"void*","identifier":"windowHWND"},{"type_name":"int","identifier":"x"},{"type_name":"int","identifier":"y"},{"type_name":"int","identifier":"&x"},{"type_name":"int","identifier":"&y"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer x","description":""},{"identifier":"integer y","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer x, integer y = reaper.JS_Window_ClientToScreen(identifier windowHWND, integer x, integer y)","eel":"extension_api(\"JS_Window_ClientToScreen\", void* windowHWND, int x, int y, int &x, int &y)","python":"(void windowHWND, Int x, Int y, Int xOut, Int yOut) = JS_Window_ClientToScreen(windowHWND, x, y, xOut, yOut)","cpp":"void JS_Window_ClientToScreen(void* windowHWND, int x, int y, int* xOut, int* yOut)"},"title":"JS_Window_ClientToScreen","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Converts the client-area coordinates of a specified point to screen coordinates.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"string title","description":""},{"identifier":"string className","description":""},{"identifier":"integer x","description":""},{"identifier":"integer y","description":""},{"identifier":"integer w","description":""},{"identifier":"integer h","description":""},{"identifier":"optional string style","description":""},{"identifier":"identifier ownerHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_Create","return_values":[{"identifier":"retval","type":"identifier"},{"isOptional":true,"type":"string","identifier":"style"}],"parameters":[{"identifier":"title","type":"string"},{"identifier":"className","type":"string"},{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"},{"identifier":"w","type":"integer"},{"identifier":"h","type":"integer"},{"isOptional":true,"type":"string","identifier":"style"},{"identifier":"ownerHWND","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_Window_Create\""},{"identifier":"\"title\""},{"identifier":"\"className\""},{"type_name":"int","identifier":"x"},{"type_name":"int","identifier":"y"},{"type_name":"int","identifier":"w"},{"type_name":"int","identifier":"h"},{"type_name":"optional","identifier":"#style"},{"type_name":"void*","identifier":"ownerHWND"}]}},"requires":{"Reaper":"5.974","JS":"0.995"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier retval","description":""},{"identifier":"optional string style","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier retval, optional string style = reaper.JS_Window_Create(string title, string className, integer x, integer y, integer w, integer h, optional string style, identifier ownerHWND)","eel":"void* extension_api(\"JS_Window_Create\", \"title\", \"className\", int x, int y, int w, int h, optional #style, void* ownerHWND)","python":"(void retval, String title, String className, Int x, Int y, Int w, Int h, String styleOptional, void ownerHWNDOptional) = JS_Window_Create(title, className, x, y, w, h, styleOptional, ownerHWNDOptional)","cpp":"void* JS_Window_Create(const char* title, const char* className, int x, int y, int w, int h, char* styleOptional, void* ownerHWNDOptional)"},"title":"JS_Window_Create","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Creates a modeless window with WS\\_OVERLAPPEDWINDOW style and only rudimentary features. Scripts can paint into the window using GDI or LICE/Composite functions (and JS\\_Window\\_InvalidateRect to trigger re-painting).\n\nstyle: An optional parameter that overrides the default style. The string may include any combination of standard window styles, such as \"POPUP\" for a frameless window, or \"CAPTION,SIZEBOX,SYSMENU\" for a standard framed window.\n\nOn Linux and macOS, \"MAXIMIZE\" has not yet been implemented, and the remaining styles may appear slightly different from their WindowsOS counterparts.\n\nclassName: On Windows, only standard ANSI characters are supported.\n\nownerHWND: Optional parameter, only available on WindowsOS. Usually either the REAPER main window or another script window, and useful for ensuring that the created window automatically closes when the owner is closed.\n\nNOTE: On Linux and macOS, the window contents are only updated \\*between\\* defer cycles, so the window cannot be animated by for/while loops within a single defer cycle.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier windowHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_Destroy","return_values":[],"parameters":[{"identifier":"windowHWND","type":"identifier"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Window_Destroy\""},{"type_name":"void*","identifier":"windowHWND"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_Window_Destroy(identifier windowHWND)","eel":"extension_api(\"JS_Window_Destroy\", void* windowHWND)","python":"JS_Window_Destroy(void windowHWND)","cpp":"void JS_Window_Destroy(void* windowHWND)"},"title":"JS_Window_Destroy","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Destroys the specified window.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"boolean enable","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_Enable","return_values":[],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"enable","type":"boolean"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Window_Enable\""},{"type_name":"void*","identifier":"windowHWND"},{"type_name":"bool","identifier":"enable"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_Window_Enable(identifier windowHWND, boolean enable)","eel":"extension_api(\"JS_Window_Enable\", void* windowHWND, bool enable)","python":"JS_Window_Enable(void windowHWND, Boolean enable)","cpp":"void JS_Window_Enable(void* windowHWND, bool enable)"},"title":"JS_Window_Enable","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Enables or disables mouse and keyboard input to the specified window or control.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier windowHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_EnableMetal","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"windowHWND","type":"identifier"}]},"eel":{"method_name":"retval","return_values":["int"],"parameters":[{"identifier":"\"JS_Window_EnableMetal\""},{"type_name":"void*","identifier":"windowHWND"}]}},"requires":{"Reaper":"5.974","JS":"1.000"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_Window_EnableMetal(identifier windowHWND)","eel":"int retval = extension_api(\"JS_Window_EnableMetal\", void* windowHWND)","python":"Int retval = JS_Window_EnableMetal(void windowHWND)","cpp":"int retval = JS_Window_EnableMetal(void* windowHWND)"},"title":"JS_Window_EnableMetal","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"On macOS, returns the Metal graphics setting:\n2 = Metal enabled and support GetDC()/ReleaseDC() for drawing (more overhead).\n1 = Metal enabled.\n0 = N/A (Windows and Linux).\n-1 = non-metal async layered mode.\n-2 = non-metal non-async layered mode.\n\nWARNING: If using mode -1, any BitBlt()/StretchBlt() MUST have the source bitmap persist. If it is resized after Blit it could cause crashes.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string title","description":"the title of the window to find"},{"identifier":"boolean exact","description":"true, title must match exactly the name of the window; false, title can only partially match the windowtitle "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_Find","return_values":[{"identifier":"hwnd","type":"identifier"}],"parameters":[{"identifier":"title","type":"string"},{"identifier":"exact","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_Window_Find\""},{"identifier":"\"title\""},{"type_name":"bool","identifier":"exact"}]}},"requires":{"Reaper":"5.974","JS":"0.989"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd","description":"the identifier of the found window, or nil"}],"prog_lang":"*"},"functioncall":{"lua":"identifier hwnd = reaper.JS_Window_Find(string title, boolean exact)","eel":"void* extension_api(\"JS_Window_Find\", \"title\", bool exact)","python":"identifier hwnd = JS_Window_Find(String title, Boolean exact)","cpp":"void* JS_Window_Find(const char* title, bool exact)"},"title":"JS_Window_Find","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns a HWND to a window whose title matches the specified string.\n* Unlike the Win32 function FindWindow, this function searches top-level as well as child windows, so that the target window can be found irrespective of docked state.\n* In addition, the function can optionally match substrings of the title.\n* Matching is not case sensitive.\n\nParameters:\n* exact: Match entire title, or match substring of title.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier parentHWND","description":"the identifier of the parent window to the child-window"},{"identifier":"string title","description":"the title of the child-window to find"},{"identifier":"boolean exact","description":"true, title must match exactly the name of the window; false, title can only partially match the windowtitle "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_FindChild","return_values":[{"identifier":"hwnd","type":"identifier"}],"parameters":[{"identifier":"parentHWND","type":"identifier"},{"identifier":"title","type":"string"},{"identifier":"exact","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_Window_FindChild\""},{"type_name":"void*","identifier":"parentHWND"},{"identifier":"\"title\""},{"type_name":"bool","identifier":"exact"}]}},"requires":{"Reaper":"5.974","JS":"0.990"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd","description":"the identifier for the window found; nil, if no such window found"}],"prog_lang":"*"},"functioncall":{"lua":"identifier hwnd = reaper.JS_Window_FindChild(identifier parentHWND, string title, boolean exact)","eel":"void* extension_api(\"JS_Window_FindChild\", void* parentHWND, \"title\", bool exact)","python":"identifier hwnd = JS_Window_FindChild(void parentHWND, String title, Boolean exact)","cpp":"void* JS_Window_FindChild(void* parentHWND, const char* title, bool exact)"},"title":"JS_Window_FindChild","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns a HWND to a child window whose title matches the specified string.\n\nParameters:\n\n * exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier parentHWND","description":"the parent HWND, whose child-HWNDs you want to search through"},{"identifier":"integer ID","description":"the ID of the childHWND"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_FindChildByID","return_values":[{"identifier":"HWND","type":"identifier"}],"parameters":[{"identifier":"parentHWND","type":"identifier"},{"identifier":"ID","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_Window_FindChildByID\""},{"type_name":"void*","identifier":"parentHWND"},{"type_name":"int","identifier":"ID"}]}},"requires":{"Reaper":"5.974","JS":"0.963"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier HWND","description":"the HWND of the window, that the function found"}],"prog_lang":"*"},"functioncall":{"lua":"identifier HWND = reaper.JS_Window_FindChildByID(identifier parentHWND, integer ID)","eel":"void* extension_api(\"JS_Window_FindChildByID\", void* parentHWND, int ID)","python":"identifier HWND = JS_Window_FindChildByID(void parentHWND, Int ID)","cpp":"void* JS_Window_FindChildByID(void* parentHWND, int ID)"},"title":"JS_Window_FindChildByID","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Similar to the C++ WIN32 function GetDlgItem, this function finds child windows by ID.\n\n(The ID of a window may be retrieved by JS\\_Window\\_GetLongPtr.)\n\nFor instance: with Reaper's [MainHWND](#GetMainHwnd), you can get:\n    0: Transport(Windows)/MainHWND(Mac)\n    999: project-tabs(if existing, otherwise will be nil)\n    1000: trackview\n    1005: timeline\n    1259: Mouse editing help in the area beneath the track control panels","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"identifier parentHWND","description":"the parent hwnd of the child-window to find"},{"identifier":"identifier childHWND","description":"the parent child-window of the window to find; set it to parentHWND to search beginning with the first childhwnd of the parenthwnd"},{"identifier":"string className","description":"the name of the class of the child-window, that you want to find"},{"identifier":"string title","description":"the title of the child-window to find"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_FindEx","return_values":[{"identifier":"HWND","type":"identifier"}],"parameters":[{"identifier":"parentHWND","type":"identifier"},{"identifier":"childHWND","type":"identifier"},{"identifier":"className","type":"string"},{"identifier":"title","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_Window_FindEx\""},{"type_name":"void*","identifier":"parentHWND"},{"type_name":"void*","identifier":"childHWND"},{"identifier":"\"className\""},{"identifier":"\"title\""}]}},"requires":{"Reaper":"5.974","JS":"0.964"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier HWND","description":"the found window; nil, if no window has been found"}],"prog_lang":"*"},"functioncall":{"lua":"identifier HWND = reaper.JS_Window_FindEx(identifier parentHWND, identifier childHWND, string className, string title)","eel":"void* extension_api(\"JS_Window_FindEx\", void* parentHWND, void* childHWND, \"className\", \"title\")","python":"identifier HWND = JS_Window_FindEx(void parentHWND, void childHWND, String className, String title)","cpp":"void* JS_Window_FindEx(void* parentHWND, void* childHWND, const char* className, const char* title)"},"title":"JS_Window_FindEx","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns a handle to a child window whose class and title match the specified strings.\n\nParameters: * childWindow: The function searches child windows, beginning with the window *after* the specified child window. If childHWND is equal to parentHWND, the search begins with the first child window of parentHWND.\n* title: An empty string, \"\", will match all windows. (Search is not case sensitive.)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string title","description":"the title of the top-level window to find"},{"identifier":"boolean exact","description":"true, title must match exactly the name of the window; false, title can only partially match the windowtitle "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_FindTop","return_values":[{"identifier":"hwnd","type":"identifier"}],"parameters":[{"identifier":"title","type":"string"},{"identifier":"exact","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_Window_FindTop\""},{"identifier":"\"title\""},{"type_name":"bool","identifier":"exact"}]}},"requires":{"Reaper":"5.974","JS":"0.989"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd","description":"the found identifier of the window; nil, if not found"}],"prog_lang":"*"},"functioncall":{"lua":"identifier hwnd = reaper.JS_Window_FindTop(string title, boolean exact)","eel":"void* extension_api(\"JS_Window_FindTop\", \"title\", bool exact)","python":"identifier hwnd = JS_Window_FindTop(String title, Boolean exact)","cpp":"void* JS_Window_FindTop(const char* title, bool exact)"},"title":"JS_Window_FindTop","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns a HWND to a top-level window whose title matches the specified string.\n\nParameters:\n* exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer x","description":"the x-position in pixels, at which to find the window"},{"identifier":"integer y","description":"the y-position in pixels, at which to find the window"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_FromPoint","return_values":[{"identifier":"hwnd","type":"identifier"}],"parameters":[{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_Window_FromPoint\""},{"type_name":"int","identifier":"x"},{"type_name":"int","identifier":"y"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd","description":"the window found at the coordinates"}],"prog_lang":"*"},"functioncall":{"lua":"identifier hwnd = reaper.JS_Window_FromPoint(integer x, integer y)","eel":"void* extension_api(\"JS_Window_FromPoint\", int x, int y)","python":"identifier hwnd = JS_Window_FromPoint(Int x, Int y)","cpp":"void* JS_Window_FromPoint(int x, int y)"},"title":"JS_Window_FromPoint","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Retrieves a HWND to the window that contains the specified point.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_GetClassName","return_values":[{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"buf","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Window_GetClassName\""},{"type_name":"void*","identifier":"windowHWND"},{"identifier":"#buf"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string buf","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string buf = reaper.JS_Window_GetClassName(identifier windowHWND, string buf)","eel":"extension_api(\"JS_Window_GetClassName\", void* windowHWND, #buf)","python":"(void windowHWND, String buf, Int buf_sz) = JS_Window_GetClassName(windowHWND, buf, buf_sz)","cpp":"void JS_Window_GetClassName(void* windowHWND, char* buf, int buf_sz)"},"title":"JS_Window_GetClassName","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"WARNING: May not be fully implemented on MacOS and Linux.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier windowHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_GetClientRect","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"left","type":"integer"},{"identifier":"top","type":"integer"},{"identifier":"right","type":"integer"},{"identifier":"bottom","type":"integer"}],"parameters":[{"identifier":"windowHWND","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_Window_GetClientRect\""},{"type_name":"void*","identifier":"windowHWND"},{"type_name":"int","identifier":"&left"},{"type_name":"int","identifier":"&top"},{"type_name":"int","identifier":"&right"},{"type_name":"int","identifier":"&bottom"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer left","description":""},{"identifier":"integer top","description":""},{"identifier":"integer right","description":""},{"identifier":"integer bottom","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer left, integer top, integer right, integer bottom = reaper.JS_Window_GetClientRect(identifier windowHWND)","eel":"bool  extension_api(\"JS_Window_GetClientRect\", void* windowHWND, int &left, int &top, int &right, int &bottom)","python":"(Boolean retval, void windowHWND, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = JS_Window_GetClientRect(windowHWND, leftOut, topOut, rightOut, bottomOut)","cpp":"bool JS_Window_GetClientRect(void* windowHWND, int* leftOut, int* topOut, int* rightOut, int* bottomOut)"},"title":"JS_Window_GetClientRect","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Retrieves the coordinates of the client area rectangle of the specified window. The dimensions are given in screen coordinates relative to the upper-left corner of the screen.\n\nNOTE 1: Unlike the C++ function GetClientRect, this function returns the actual coordinates, not the width and height.\n\nNOTE 2: The pixel at (right, bottom) lies immediately outside the rectangle.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier windowHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_GetClientSize","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"width","type":"integer"},{"identifier":"height","type":"integer"}],"parameters":[{"identifier":"windowHWND","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_Window_GetClientSize\""},{"type_name":"void*","identifier":"windowHWND"},{"type_name":"int","identifier":"&width"},{"type_name":"int","identifier":"&height"}]}},"requires":{"Reaper":"5.974","JS":"1.215"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer width","description":""},{"identifier":"integer height","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer width, integer height = reaper.JS_Window_GetClientSize(identifier windowHWND)","eel":"bool extension_api(\"JS_Window_GetClientSize\", void* windowHWND, int &width, int &height)","python":"(Boolean retval, void windowHWND, Int widthOut, Int heightOut) = JS_Window_GetClientSize(windowHWND, widthOut, heightOut)","cpp":"bool JS_Window_GetClientSize(void* windowHWND, int* widthOut, int* heightOut)"},"title":"JS_Window_GetClientSize","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Retrieves a HWND to the window that has the keyboard focus, if the window is attached to the calling thread's message queue.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.JS_Window_GetFocus","return_values":[{"identifier":"hwnd","type":"identifier"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_Window_GetFocus\""}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier hwnd = reaper.JS_Window_GetFocus()","eel":"void* extension_api(\"JS_Window_GetFocus\")","python":"identifier hwnd = JS_Window_GetFocus()","cpp":"void* JS_Window_GetFocus()"},"title":"JS_Window_GetFocus","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Retrieves a HWND to the window that has the keyboard focus, if the window is attached to the calling thread's message queue.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.JS_Window_GetForeground","return_values":[{"identifier":"hwnd","type":"identifier"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_Window_GetForeground\""}]}},"requires":{"Reaper":"5.974","JS":"1.002"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier hwnd = reaper.JS_Window_GetForeground()","eel":"void* extension_api(\"JS_Window_GetForeground\")","python":"identifier hwnd = JS_Window_GetForeground()","cpp":"void* JS_Window_GetForeground()"},"title":"JS_Window_GetForeground","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Retrieves a HWND to the top-level foreground window (the window with which the user is currently working).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"string info","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_GetLong","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"info","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Window_GetLong\""},{"type_name":"void*","identifier":"windowHWND"},{"identifier":"\"info\""},{"identifier":"&retval"}]}},"requires":{"Reaper":"5.974","JS":"1.010"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.JS_Window_GetLong(identifier windowHWND, string info)","eel":"extension_api(\"JS_Window_GetLong\", void* windowHWND, \"info\", &retval)","python":"(void windowHWND, String info, Float retvalOut) = JS_Window_GetLong(windowHWND, info, retvalOut)","cpp":"void JS_Window_GetLong(void* windowHWND, const char* info, double* retvalOut)"},"title":"JS_Window_GetLong","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"In the case of \"DLGPROC\" and \"WNDPROC\", the return values can be converted to pointers by [JS\\_Window\\_HandleFromAddress](#JS_Window_HandleFromAddress).\n\nIf the function fails, the return value is 0.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"string info","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_GetLongPtr","return_values":[{"identifier":"long_ptr","type":"identifier"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"info","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_Window_GetLongPtr\""},{"type_name":"void*","identifier":"windowHWND"},{"identifier":"\"info\""}]}},"requires":{"Reaper":"5.974","JS":"1.010"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier long_ptr","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier long_ptr = reaper.JS_Window_GetLongPtr(identifier windowHWND, string info)","eel":"void* extension_api(\"JS_Window_GetLongPtr\", void* windowHWND, \"info\")","python":"identifier long_ptr = JS_Window_GetLongPtr(void windowHWND, String info)","cpp":"void* JS_Window_GetLongPtr(void* windowHWND, const char* info)"},"title":"JS_Window_GetLongPtr","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns information about the specified window.\n\n\n\ninfo: \"USERDATA\", \"WNDPROC\", \"DLGPROC\", \"ID\", \"EXSTYLE\" or \"STYLE\".\n\n\n\nFor documentation about the types of information returned, refer to the Win32 function GetWindowLongPtr.\nThe values returned by \"DLGPROC\" and \"WNDPROC\" are typically used as-is, as pointers, whereas the others should first be converted to integers.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier windowHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_GetParent","return_values":[{"identifier":"hwnd","type":"identifier"}],"parameters":[{"identifier":"windowHWND","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_Window_GetParent\""},{"type_name":"void*","identifier":"windowHWND"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier hwnd = reaper.JS_Window_GetParent(identifier windowHWND)","eel":"void* extension_api(\"JS_Window_GetParent\", void* windowHWND)","python":"identifier hwnd = JS_Window_GetParent(void windowHWND)","cpp":"void* JS_Window_GetParent(void* windowHWND)"},"title":"JS_Window_GetParent","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Retrieves a HWND to the specified window's parent or owner.\n\nReturns NULL if the window is unowned or if the function otherwise fails.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier windowHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_GetRect","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"left","type":"integer"},{"identifier":"top","type":"integer"},{"identifier":"right","type":"integer"},{"identifier":"bottom","type":"integer"}],"parameters":[{"identifier":"windowHWND","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_Window_GetRect\""},{"type_name":"void*","identifier":"windowHWND"},{"type_name":"int","identifier":"&left"},{"type_name":"int","identifier":"&top"},{"type_name":"int","identifier":"&right"},{"type_name":"int","identifier":"&bottom"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer left","description":""},{"identifier":"integer top","description":""},{"identifier":"integer right","description":""},{"identifier":"integer bottom","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer left, integer top, integer right, integer bottom = reaper.JS_Window_GetRect(identifier windowHWND)","eel":"bool  extension_api(\"JS_Window_GetRect\", void* windowHWND, int &left, int &top, int &right, int &bottom)","python":"(Boolean retval, void windowHWND, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = JS_Window_GetRect(windowHWND, leftOut, topOut, rightOut, bottomOut)","cpp":"bool JS_Window_GetRect(void* windowHWND, int* leftOut, int* topOut, int* rightOut, int* bottomOut)"},"title":"JS_Window_GetRect","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Retrieves the coordinates of the bounding rectangle of the specified window. The dimensions are given in screen coordinates relative to the upper-left corner of the screen.\n\nNOTE: The pixel at (right, bottom) lies immediately outside the rectangle.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"string relation","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_GetRelated","return_values":[{"identifier":"hwnd","type":"identifier"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"relation","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_Window_GetRelated\""},{"type_name":"void*","identifier":"windowHWND"},{"identifier":"\"relation\""}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier hwnd = reaper.JS_Window_GetRelated(identifier windowHWND, string relation)","eel":"void* extension_api(\"JS_Window_GetRelated\", void* windowHWND, \"relation\")","python":"identifier hwnd = JS_Window_GetRelated(void windowHWND, String relation)","cpp":"void* JS_Window_GetRelated(void* windowHWND, const char* relation)"},"title":"JS_Window_GetRelated","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window.\n\nrelation: \"LAST\", \"NEXT\", \"PREV\", \"OWNER\" or \"CHILD\".\n\n(Refer to documentation for Win32 C++ function GetWindow.)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"string scrollbar","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_GetScrollInfo","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"position","type":"integer"},{"identifier":"pageSize","type":"integer"},{"identifier":"min","type":"integer"},{"identifier":"max","type":"integer"},{"identifier":"trackPos","type":"integer"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"scrollbar","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_Window_GetScrollInfo\""},{"type_name":"void*","identifier":"windowHWND"},{"identifier":"\"scrollbar\""},{"type_name":"int","identifier":"&position"},{"type_name":"int","identifier":"&pageSize"},{"type_name":"int","identifier":"&min"},{"type_name":"int","identifier":"&max"},{"type_name":"int","identifier":"&trackPos"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer position","description":""},{"identifier":"integer pageSize","description":""},{"identifier":"integer min","description":""},{"identifier":"integer max","description":""},{"identifier":"integer trackPos","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer position, integer pageSize, integer min, integer max, integer trackPos = reaper.JS_Window_GetScrollInfo(identifier windowHWND, string scrollbar)","eel":"bool  extension_api(\"JS_Window_GetScrollInfo\", void* windowHWND, \"scrollbar\", int &position, int &pageSize, int &min, int &max, int &trackPos)","python":"(Boolean retval, void windowHWND, String scrollbar, Int positionOut, Int pageSizeOut, Int minOut, Int maxOut, Int trackPosOut) = JS_Window_GetScrollInfo(windowHWND, scrollbar, positionOut, pageSizeOut, minOut, maxOut, trackPosOut)","cpp":"bool JS_Window_GetScrollInfo(void* windowHWND, const char* scrollbar, int* positionOut, int* pageSizeOut, int* minOut, int* maxOut, int* trackPosOut)"},"title":"JS_Window_GetScrollInfo","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Retrieves the scroll information of a window.\n\nParameters:\n* scrollbar: \"v\" (or \"SB_VERT\", or \"VERT\") for vertical scroll, \"h\" (or \"SB_HORZ\" or \"HORZ\") for horizontal.\n\nReturns:\n* Leftmost or topmost visible pixel position, as well as the visible page size, the range minimum and maximum, and scroll box tracking position.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier windowHWND","description":"the hwnd of the window, whose title you want to retrieve"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_GetTitle","return_values":[{"identifier":"title","type":"string"}],"parameters":[{"identifier":"windowHWND","type":"identifier"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Window_GetTitle\""},{"type_name":"void*","identifier":"windowHWND"},{"identifier":"#title"}]}},"requires":{"Reaper":"5.974","JS":"0.992"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string title","description":"the title of the window"}],"prog_lang":"*"},"functioncall":{"lua":"string title = reaper.JS_Window_GetTitle(identifier windowHWND)","eel":"extension_api(\"JS_Window_GetTitle\", void* windowHWND, #title)","python":"(void windowHWND, String titleOut, Int titleOut_sz) = JS_Window_GetTitle(windowHWND, titleOut, titleOut_sz)","cpp":"void JS_Window_GetTitle(void* windowHWND, char* titleOut, int titleOut_sz)"},"title":"JS_Window_GetTitle","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the title (if any) of the specified window.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"integer x1","description":""},{"identifier":"integer y1","description":""},{"identifier":"integer x2","description":""},{"identifier":"integer y2","description":""},{"identifier":"boolean wantWork","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_GetViewportFromRect","return_values":[{"identifier":"left","type":"integer"},{"identifier":"top","type":"integer"},{"identifier":"right","type":"integer"},{"identifier":"bottom","type":"integer"}],"parameters":[{"identifier":"x1","type":"integer"},{"identifier":"y1","type":"integer"},{"identifier":"x2","type":"integer"},{"identifier":"y2","type":"integer"},{"identifier":"wantWork","type":"boolean"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Window_GetViewportFromRect\""},{"type_name":"int","identifier":"x1"},{"type_name":"int","identifier":"y1"},{"type_name":"int","identifier":"x2"},{"type_name":"int","identifier":"y2"},{"type_name":"bool","identifier":"wantWork"},{"type_name":"int","identifier":"&left"},{"type_name":"int","identifier":"&top"},{"type_name":"int","identifier":"&right"},{"type_name":"int","identifier":"&bottom"}]}},"requires":{"Reaper":"5.974","JS":"0.980"},"return_values":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"integer left","description":""},{"identifier":"integer top","description":""},{"identifier":"integer right","description":""},{"identifier":"integer bottom","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer left, integer top, integer right, integer bottom = reaper.JS_Window_GetViewportFromRect(integer x1, integer y1, integer x2, integer y2, boolean wantWork)","eel":"extension_api(\"JS_Window_GetViewportFromRect\", int x1, int y1, int x2, int y2, bool wantWork, int &left, int &top, int &right, int &bottom)","python":"(Int x1, Int y1, Int x2, Int y2, Boolean wantWork, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = JS_Window_GetViewportFromRect(x1, y1, x2, y2, wantWork, leftOut, topOut, rightOut, bottomOut)","cpp":"void JS_Window_GetViewportFromRect(int x1, int y1, int x2, int y2, bool wantWork, int* leftOut, int* topOut, int* rightOut, int* bottomOut)"},"title":"JS_Window_GetViewportFromRect","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Retrieves the dimensions of the display monitor that has the largest area of intersection with the specified rectangle.\n\nIf the monitor is not the primary display, some of the rectangle's coordinates may be negative.\n\nwantWork: Returns the work area of the display, which excludes the system taskbar or application desktop toolbars.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number address","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_HandleFromAddress","return_values":[{"identifier":"hwnd","type":"identifier"}],"parameters":[{"identifier":"address","type":"number"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_Window_HandleFromAddress\""},{"identifier":"address"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier hwnd = reaper.JS_Window_HandleFromAddress(number address)","eel":"void* extension_api(\"JS_Window_HandleFromAddress\", address)","python":"identifier hwnd = JS_Window_HandleFromAddress(Float address)","cpp":"void* JS_Window_HandleFromAddress(double address)"},"title":"JS_Window_HandleFromAddress","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Converts an address to a handle (such as a HWND) that can be utilized by REAPER and other API functions.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"integer left","description":""},{"identifier":"integer top","description":""},{"identifier":"integer right","description":""},{"identifier":"integer bottom","description":""},{"identifier":"boolean eraseBackground","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_InvalidateRect","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"left","type":"integer"},{"identifier":"top","type":"integer"},{"identifier":"right","type":"integer"},{"identifier":"bottom","type":"integer"},{"identifier":"eraseBackground","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_Window_InvalidateRect\""},{"type_name":"void*","identifier":"windowHWND"},{"type_name":"int","identifier":"left"},{"type_name":"int","identifier":"top"},{"type_name":"int","identifier":"right"},{"type_name":"int","identifier":"bottom"},{"type_name":"bool","identifier":"eraseBackground"}]}},"requires":{"Reaper":"5.974","JS":"0.980"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.JS_Window_InvalidateRect(identifier windowHWND, integer left, integer top, integer right, integer bottom, boolean eraseBackground)","eel":"bool extension_api(\"JS_Window_InvalidateRect\", void* windowHWND, int left, int top, int right, int bottom, bool eraseBackground)","python":"Boolean retval = JS_Window_InvalidateRect(void windowHWND, Int left, Int top, Int right, Int bottom, Boolean eraseBackground)","cpp":"bool JS_Window_InvalidateRect(void* windowHWND, int left, int top, int right, int bottom, bool eraseBackground)"},"title":"JS_Window_InvalidateRect","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Similar to the Win32 function InvalidateRect.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier parentHWND","description":""},{"identifier":"identifier childHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_IsChild","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"parentHWND","type":"identifier"},{"identifier":"childHWND","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_Window_IsChild\""},{"type_name":"void*","identifier":"parentHWND"},{"type_name":"void*","identifier":"childHWND"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.JS_Window_IsChild(identifier parentHWND, identifier childHWND)","eel":"bool  extension_api(\"JS_Window_IsChild\", void* parentHWND, void* childHWND)","python":"Boolean retval = JS_Window_IsChild(void parentHWND, void childHWND)","cpp":"bool JS_Window_IsChild(void* parentHWND, void* childHWND)"},"title":"JS_Window_IsChild","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Determines whether a window is a child window or descendant window of a specified parent window.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier windowHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_IsVisible","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"windowHWND","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_Window_IsVisible\""},{"type_name":"void*","identifier":"windowHWND"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.JS_Window_IsVisible(identifier windowHWND)","eel":"bool  extension_api(\"JS_Window_IsVisible\", void* windowHWND)","python":"Boolean retval = JS_Window_IsVisible(void windowHWND)","cpp":"bool JS_Window_IsVisible(void* windowHWND)"},"title":"JS_Window_IsVisible","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Determines the visibility state of the window.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier windowHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_IsWindow","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"windowHWND","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_Window_IsWindow\""},{"type_name":"void*","identifier":"windowHWND"}]}},"requires":{"Reaper":"5.974","JS":"0.999"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.JS_Window_IsWindow(identifier windowHWND)","eel":"bool  extension_api(\"JS_Window_IsWindow\", void* windowHWND)","python":"Boolean retval = JS_Window_IsWindow(void windowHWND)","cpp":"bool JS_Window_IsWindow(void* windowHWND)"},"title":"JS_Window_IsWindow","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Determines whether the specified window handle identifies an existing window.\n\nOn macOS and Linux, only windows that were created by WDL/swell will be identified (and only such windows should be acted on by scripts).\n\nNOTE: Since REAPER v5.974, windows can be checked using the native function ValidatePtr(windowHWND, \"HWND\").","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier parentHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_ListAllChild","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"list","type":"string"}],"parameters":[{"identifier":"parentHWND","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_Window_ListAllChild\""},{"type_name":"void*","identifier":"parentHWND"},{"identifier":"#list"}]}},"requires":{"Reaper":"5.974","JS":"0.963"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":""},{"identifier":"string list","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, string list = reaper.JS_Window_ListAllChild(identifier parentHWND)","eel":"int extension_api(\"JS_Window_ListAllChild\", void* parentHWND, #list)","python":"(Int retval, void parentHWND, String listOutNeedBig, Int listOutNeedBig_sz) = JS_Window_ListAllChild(parentHWND, listOutNeedBig, listOutNeedBig_sz)","cpp":"int JS_Window_ListAllChild(void* parentHWND, char* listOutNeedBig, int listOutNeedBig_sz)"},"title":"JS_Window_ListAllChild","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Finds all child windows of the specified parent.\n\nReturns:\n\\* retval: The number of windows found; negative if an error occurred.\n\\* list: A comma-separated string of hexadecimal values.\nEach value is an address that can be converted to a HWND by the function JS\\_Window\\_HandleFromAddress.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.JS_Window_ListAllTop","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"list","type":"string"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_Window_ListAllTop\""},{"identifier":"#list"}]}},"requires":{"Reaper":"5.974","JS":"0.963"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":""},{"identifier":"string list","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, string list = reaper.JS_Window_ListAllTop()","eel":"int extension_api(\"JS_Window_ListAllTop\", #list)","python":"(Int retval, String listOutNeedBig, Int listOutNeedBig_sz) = JS_Window_ListAllTop(listOutNeedBig, listOutNeedBig_sz)","cpp":"int JS_Window_ListAllTop(char* listOutNeedBig, int listOutNeedBig_sz)"},"title":"JS_Window_ListAllTop","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Finds all top-level windows.\n\nReturns:\n\\* retval: The number of windows found; negative if an error occurred.\n\\* list: A comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function JS\\_Window\\_HandleFromAddress.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string title","description":""},{"identifier":"boolean exact","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_ListFind","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"list","type":"string"}],"parameters":[{"identifier":"title","type":"string"},{"identifier":"exact","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_Window_ListFind\""},{"identifier":"\"title\""},{"type_name":"bool","identifier":"exact"},{"identifier":"#list"}]}},"requires":{"Reaper":"5.974","JS":"0.963"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":""},{"identifier":"string list","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, string list = reaper.JS_Window_ListFind(string title, boolean exact)","eel":"int extension_api(\"JS_Window_ListFind\", \"title\", bool exact, #list)","python":"(Int retval, String title, Boolean exact, String listOutNeedBig, Int listOutNeedBig_sz) = JS_Window_ListFind(title, exact, listOutNeedBig, listOutNeedBig_sz)","cpp":"int JS_Window_ListFind(const char* title, bool exact, char* listOutNeedBig, int listOutNeedBig_sz)"},"title":"JS_Window_ListFind","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Finds all windows (whether top-level or child) whose titles match the specified string.\n\nReturns:\n\\* retval: The number of windows found; negative if an error occurred.\n\\* list: A comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function JS\\_Window\\_HandleFromAddress.\n\nParameters:\n\\* exact: Match entire title exactly, or match substring of title.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"integer x1","description":""},{"identifier":"integer y1","description":""},{"identifier":"integer x2","description":""},{"identifier":"integer y2","description":""},{"identifier":"boolean wantWork","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_MonitorFromRect","return_values":[{"identifier":"left","type":"integer"},{"identifier":"top","type":"integer"},{"identifier":"right","type":"integer"},{"identifier":"bottom","type":"integer"}],"parameters":[{"identifier":"x1","type":"integer"},{"identifier":"y1","type":"integer"},{"identifier":"x2","type":"integer"},{"identifier":"y2","type":"integer"},{"identifier":"wantWork","type":"boolean"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Window_MonitorFromRect\""},{"type_name":"int","identifier":"x1"},{"type_name":"int","identifier":"y1"},{"type_name":"int","identifier":"x2"},{"type_name":"int","identifier":"y2"},{"type_name":"bool","identifier":"wantWork"},{"type_name":"int","identifier":"&left"},{"type_name":"int","identifier":"&top"},{"type_name":"int","identifier":"&right"},{"type_name":"int","identifier":"&bottom"}]}},"requires":{"Reaper":"5.974","JS":"0.963"},"return_values":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"integer left","description":""},{"identifier":"integer top","description":""},{"identifier":"integer right","description":""},{"identifier":"integer bottom","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer left, integer top, integer right, integer bottom = reaper.JS_Window_MonitorFromRect(integer x1, integer y1, integer x2, integer y2, boolean wantWork)","eel":"extension_api(\"JS_Window_MonitorFromRect\", int x1, int y1, int x2, int y2, bool wantWork, int &left, int &top, int &right, int &bottom)","python":"(Int x1, Int y1, Int x2, Int y2, Boolean wantWork, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = JS_Window_MonitorFromRect(x1, y1, x2, y2, wantWork, leftOut, topOut, rightOut, bottomOut)","cpp":"void JS_Window_MonitorFromRect(int x1, int y1, int x2, int y2, bool wantWork, int* leftOut, int* topOut, int* rightOut, int* bottomOut)"},"title":"JS_Window_MonitorFromRect","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Deprecated - use [GetViewportFromRect](#GetViewportFromRect) instead.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"integer left","description":""},{"identifier":"integer top","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_Move","return_values":[],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"left","type":"integer"},{"identifier":"top","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Window_Move\""},{"type_name":"void*","identifier":"windowHWND"},{"type_name":"int","identifier":"left"},{"type_name":"int","identifier":"top"}]}},"requires":{"Reaper":"5.974","JS":"0.993"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_Window_Move(identifier windowHWND, integer left, integer top)","eel":"extension_api(\"JS_Window_Move\", void* windowHWND, int left, int top)","python":"JS_Window_Move(void windowHWND, Int left, Int top)","cpp":"void JS_Window_Move(void* windowHWND, int left, int top)"},"title":"JS_Window_Move","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Changes the position of the specified window, keeping its size constant.\n\nNOTES:\n* For top-level windows, position is relative to the primary display.\n* On Windows and Linux, position is calculated as the coordinates of the upper left corner of the window, relative to upper left corner of the primary display, and the positive Y-axis points downward.\n* On macOS, position is calculated as the coordinates of the bottom left corner of the window, relative to bottom left corner of the display, and the positive Y-axis points upward.\n* For a child window, on all platforms, position is relative to the upper-left corner of the parent window's client area.\n* Equivalent to calling [JS\\_Window\\_SetPosition](#JS_Window_SetPosition) with NOSIZE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"integer commandID","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_OnCommand","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"commandID","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_Window_OnCommand\""},{"type_name":"void*","identifier":"windowHWND"},{"type_name":"int","identifier":"commandID"}]}},"requires":{"Reaper":"5.974","JS":"0.963"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.JS_Window_OnCommand(identifier windowHWND, integer commandID)","eel":"bool extension_api(\"JS_Window_OnCommand\", void* windowHWND, int commandID)","python":"Boolean retval = JS_Window_OnCommand(void windowHWND, Int commandID)","cpp":"bool JS_Window_OnCommand(void* windowHWND, int commandID)"},"title":"JS_Window_OnCommand","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Sends a \"WM\\_COMMAND\" message to the specified window, which simulates a user selecting a command in the window menu.\n\nThis function is similar to Main\\_OnCommand and MIDIEditor\\_OnCommand, but can send commands to any window that has a menu.\n\nIn the case of windows that are listed among the Action list's contexts (such as the Media Explorer), the commandIDs of the actions in the Actions list may be used.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"boolean remove","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_RemoveXPStyle","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"remove","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_Window_RemoveXPStyle\""},{"type_name":"void*","identifier":"windowHWND"},{"type_name":"bool","identifier":"remove"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.JS_Window_RemoveXPStyle(identifier windowHWND, boolean remove)","eel":"bool  extension_api(\"JS_Window_RemoveXPStyle\", void* windowHWND, bool remove)","python":"Boolean retval = JS_Window_RemoveXPStyle(void windowHWND, Boolean remove)","cpp":"bool JS_Window_RemoveXPStyle(void* windowHWND, bool remove)"},"title":"JS_Window_RemoveXPStyle","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"deprecated, removed from JS_0.952 and later","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"integer width","description":""},{"identifier":"integer height","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_Resize","return_values":[],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"width","type":"integer"},{"identifier":"height","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Window_Resize\""},{"type_name":"void*","identifier":"windowHWND"},{"type_name":"int","identifier":"width"},{"type_name":"int","identifier":"height"}]}},"requires":{"Reaper":"5.974","JS":"0.993"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_Window_Resize(identifier windowHWND, integer width, integer height)","eel":"extension_api(\"JS_Window_Resize\", void* windowHWND, int width, int height)","python":"JS_Window_Resize(void windowHWND, Int width, Int height)","cpp":"void JS_Window_Resize(void* windowHWND, int width, int height)"},"title":"JS_Window_Resize","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Changes the dimensions of the specified window, keeping the top left corner position constant.\n\n* If resizing script GUIs, call gfx.update() after resizing.\n\n* Equivalent to calling [JS\\_Window\\_SetPosition](#JS_Window_SetPosition) with NOMOVE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"integer x","description":""},{"identifier":"integer y","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_ScreenToClient","return_values":[{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Window_ScreenToClient\""},{"type_name":"void*","identifier":"windowHWND"},{"type_name":"int","identifier":"x"},{"type_name":"int","identifier":"y"},{"type_name":"int","identifier":"&x"},{"type_name":"int","identifier":"&y"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer x","description":""},{"identifier":"integer y","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer x, integer y = reaper.JS_Window_ScreenToClient(identifier windowHWND, integer x, integer y)","eel":"extension_api(\"JS_Window_ScreenToClient\", void* windowHWND, int x, int y, int &x, int &y)","python":"(void windowHWND, Int x, Int y, Int xOut, Int yOut) = JS_Window_ScreenToClient(windowHWND, x, y, xOut, yOut)","cpp":"void JS_Window_ScreenToClient(void* windowHWND, int x, int y, int* xOut, int* yOut)"},"title":"JS_Window_ScreenToClient","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Converts the screen coordinates of a specified point on the screen to client-area coordinates.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier windowHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_SetFocus","return_values":[],"parameters":[{"identifier":"windowHWND","type":"identifier"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Window_SetFocus\""},{"type_name":"void*","identifier":"windowHWND"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_Window_SetFocus(identifier windowHWND)","eel":"extension_api(\"JS_Window_SetFocus\", void* windowHWND)","python":"JS_Window_SetFocus(void windowHWND)","cpp":"void JS_Window_SetFocus(void* windowHWND)"},"title":"JS_Window_SetFocus","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sets the keyboard focus to the specified window.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier windowHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_SetForeground","return_values":[],"parameters":[{"identifier":"windowHWND","type":"identifier"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Window_SetForeground\""},{"type_name":"void*","identifier":"windowHWND"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_Window_SetForeground(identifier windowHWND)","eel":"extension_api(\"JS_Window_SetForeground\", void* windowHWND)","python":"JS_Window_SetForeground(void windowHWND)","cpp":"void JS_Window_SetForeground(void* windowHWND)"},"title":"JS_Window_SetForeground","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Brings the specified window into the foreground, activates the window, and directs keyboard input to it.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"string info","description":""},{"identifier":"number value","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_SetLong","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"info","type":"string"},{"identifier":"value","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Window_SetLong\""},{"type_name":"void*","identifier":"windowHWND"},{"identifier":"\"info\""},{"identifier":"value"},{"identifier":"&retval"}]}},"requires":{"Reaper":"5.974","JS":"0.990"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.JS_Window_SetLong(identifier windowHWND, string info, number value)","eel":"extension_api(\"JS_Window_SetLong\", void* windowHWND, \"info\", value, &retval)","python":"(void windowHWND, String info, Float value, Float retvalOut) = JS_Window_SetLong(windowHWND, info, value, retvalOut)","cpp":"void JS_Window_SetLong(void* windowHWND, const char* info, double value, double* retvalOut)"},"title":"JS_Window_SetLong","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Similar to the Win32 function SetWindowLongPtr. \n\ninfo: \"USERDATA\", \"WNDPROC\", \"DLGPROC\", \"ID\", \"EXSTYLE\" or \"STYLE\", and only on WindowOS, \"INSTANCE\" and \"PARENT\".","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"string mode","description":""},{"identifier":"number value","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_SetOpacity","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"mode","type":"string"},{"identifier":"value","type":"number"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_Window_SetOpacity\""},{"type_name":"void*","identifier":"windowHWND"},{"identifier":"\"mode\""},{"identifier":"value"}]}},"requires":{"Reaper":"5.974","JS":"0.990"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.JS_Window_SetOpacity(identifier windowHWND, string mode, number value)","eel":"bool extension_api(\"JS_Window_SetOpacity\", void* windowHWND, \"mode\", value)","python":"Boolean retval = JS_Window_SetOpacity(void windowHWND, String mode, Float value)","cpp":"bool JS_Window_SetOpacity(void* windowHWND, const char* mode, double value)"},"title":"JS_Window_SetOpacity","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sets the window opacity.\n\nParameters:  \nmode: either \"ALPHA\" or \"COLOR\".  \nvalue: If ALPHA, the specified value may range from zero to one, and will apply to the entire window, frame included.  \nIf COLOR, value specifies a 0xRRGGBB color, and all pixels of this color will be made transparent. (All mouse clicks over transparent pixels will pass through, too).  \n\nWARNING: COLOR mode is only available in Windows, not Linux or macOS.\n\nTransparency can only be applied to top-level windows. If windowHWND refers to a child window, the entire top-level window that contains windowHWND will be made transparent.  ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier childHWND","description":""},{"identifier":"identifier parentHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_SetParent","return_values":[{"identifier":"hwnd","type":"identifier"}],"parameters":[{"identifier":"childHWND","type":"identifier"},{"identifier":"parentHWND","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_Window_SetParent\""},{"type_name":"void*","identifier":"childHWND"},{"type_name":"void*","identifier":"parentHWND"}]}},"requires":{"Reaper":"5.974","JS":"1.220"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier hwnd = reaper.JS_Window_SetParent(identifier childHWND, identifier parentHWND)","eel":"void* extension_api(\"JS_Window_SetParent\", void* childHWND, void* parentHWND)","python":"identifier hwnd = JS_Window_SetParent(void childHWND, void parentHWNDOptional)","cpp":"void* JS_Window_SetParent(void* childHWND, void* parentHWNDOptional)"},"title":"JS_Window_SetParent","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"If successful, returns a handle to the previous parent window.\n\nOnly on WindowsOS: If parentHWND is not specified, the desktop window becomes the new parent window.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"integer left","description":""},{"identifier":"integer top","description":""},{"identifier":"integer width","description":""},{"identifier":"integer height","description":""},{"identifier":"optional string ZOrder","description":""},{"identifier":"optional string flags","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_SetPosition","return_values":[{"identifier":"retval","type":"boolean"},{"isOptional":true,"type":"string","identifier":"ZOrder"},{"isOptional":true,"type":"string","identifier":"flags"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"left","type":"integer"},{"identifier":"top","type":"integer"},{"identifier":"width","type":"integer"},{"identifier":"height","type":"integer"},{"isOptional":true,"type":"string","identifier":"ZOrder"},{"isOptional":true,"type":"string","identifier":"flags"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_Window_SetPosition\""},{"type_name":"void*","identifier":"windowHWND"},{"type_name":"int","identifier":"left"},{"type_name":"int","identifier":"top"},{"type_name":"int","identifier":"width"},{"type_name":"int","identifier":"height"},{"type_name":"optional","identifier":"#ZOrder"},{"type_name":"optional","identifier":"#flags"}]}},"requires":{"Reaper":"5.974","JS":"0.991"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"optional string ZOrder","description":""},{"identifier":"optional string flags","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, optional string ZOrder, optional string flags = reaper.JS_Window_SetPosition(identifier windowHWND, integer left, integer top, integer width, integer height, optional string ZOrder, optional string flags)","eel":"bool extension_api(\"JS_Window_SetPosition\", void* windowHWND, int left, int top, int width, int height, optional #ZOrder, optional #flags)","python":"(Boolean retval, void windowHWND, Int left, Int top, Int width, Int height, String ZOrderOptional, String flagsOptional) = JS_Window_SetPosition(windowHWND, left, top, width, height, ZOrderOptional, flagsOptional)","cpp":"bool JS_Window_SetPosition(void* windowHWND, int left, int top, int width, int height, char* ZOrderOptional, char* flagsOptional)"},"title":"JS_Window_SetPosition","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Interface to the Win32/swell function SetWindowPos, with which window position, size, Z-order and visibility can be set, and new frame styles can be applied.\n\nZOrder and flags are optional parameters. If no arguments are supplied, the window will simply be moved and resized, as if the NOACTIVATE, NOZORDER, NOOWNERZORDER flags were set.\n* ZOrder: \"BOTTOM\", \"TOPMOST\", \"NOTOPMOST\", \"TOP\" or a window HWND converted to a string, for example by the Lua function tostring.\n* flags: Any combination of the standard flags, of which \"NOMOVE\", \"NOSIZE\", \"NOZORDER\", \"NOACTIVATE\", \"SHOWWINDOW\", \"FRAMECHANGED\" and \"NOCOPYBITS\" should be valid cross-platform.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"string scrollbar","description":""},{"identifier":"integer position","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_SetScrollPos","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"scrollbar","type":"string"},{"identifier":"position","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_Window_SetScrollPos\""},{"type_name":"void*","identifier":"windowHWND"},{"identifier":"\"scrollbar\""},{"type_name":"int","identifier":"position"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.JS_Window_SetScrollPos(identifier windowHWND, string scrollbar, integer position)","eel":"bool extension_api(\"JS_Window_SetScrollPos\", void* windowHWND, \"scrollbar\", int position)","python":"Boolean retval = JS_Window_SetScrollPos(void windowHWND, String scrollbar, Int position)","cpp":"bool JS_Window_SetScrollPos(void* windowHWND, const char* scrollbar, int position)"},"title":"JS_Window_SetScrollPos","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Parameters:\n\n* scrollbar: \"v\" (or \"SB_VERT\", or \"VERT\") for vertical scroll, \"h\" (or \"SB_HORZ\" or \"HORZ\") for horizontal.\n\n\n\n           NOTE: API functions can scroll REAPER's windows, but cannot zoom them.  Instead, use actions such as \"View: Zoom to one loop iteration\".\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"string style","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_SetStyle","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"style","type":"string"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"style","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_Window_SetStyle\""},{"type_name":"void*","identifier":"windowHWND"},{"identifier":"#style"}]}},"requires":{"Reaper":"5.974","JS":"0.991"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string style","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string style = reaper.JS_Window_SetStyle(identifier windowHWND, string style)","eel":"bool extension_api(\"JS_Window_SetStyle\", void* windowHWND, #style)","python":"(Boolean retval, void windowHWND, String style) = JS_Window_SetStyle(windowHWND, style)","cpp":"bool JS_Window_SetStyle(void* windowHWND, char* style)"},"title":"JS_Window_SetStyle","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sets and applies a window style.\n\nstyle may include any combination of standard window styles, such as \"POPUP\" for a frameless window, or \"CAPTION,SIZEBOX,SYSMENU\" for a standard framed window.\n\nOn Linux and macOS, \"MAXIMIZE\" has not yet been implmented, and the remaining styles may appear slightly different from their WindowsOS counterparts.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"string title","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_SetTitle","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"title","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_Window_SetTitle\""},{"type_name":"void*","identifier":"windowHWND"},{"identifier":"\"title\""}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.JS_Window_SetTitle(identifier windowHWND, string title)","eel":"bool extension_api(\"JS_Window_SetTitle\", void* windowHWND, \"title\")","python":"Boolean retval = JS_Window_SetTitle(void windowHWND, String title)","cpp":"bool JS_Window_SetTitle(void* windowHWND, const char* title)"},"title":"JS_Window_SetTitle","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Changes the title of the specified window. Returns true if successful.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"string ZOrder","description":""},{"identifier":"identifier insertAfterHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_SetZOrder","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"ZOrder","type":"string"},{"identifier":"insertAfterHWND","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_Window_SetZOrder\""},{"type_name":"void*","identifier":"windowHWND"},{"identifier":"\"ZOrder\""},{"type_name":"void*","identifier":"insertAfterHWND"}]}},"requires":{"Reaper":"5.974","JS":"0.991"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.JS_Window_SetZOrder(identifier windowHWND, string ZOrder, identifier insertAfterHWND)","eel":"bool extension_api(\"JS_Window_SetZOrder\", void* windowHWND, \"ZOrder\", void* insertAfterHWND)","python":"Boolean retval = JS_Window_SetZOrder(void windowHWND, String ZOrder, void insertAfterHWND)","cpp":"bool JS_Window_SetZOrder(void* windowHWND, const char* ZOrder, void* insertAfterHWND)"},"title":"JS_Window_SetZOrder","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sets the window Z order.\n* Equivalent to calling JS_Window_SetPos with flags NOMOVE | NOSIZE.\n* Not all the Z orders have been implemented in Linux yet.\n\nParameters:\n* ZOrder: \"BOTTOM\", \"TOPMOST\", \"NOTOPMOST\", \"TOP\", or a window HWND converted to a string, for example by the Lua function tostring.\n\n* InsertAfterHWND: For compatibility with older versions, this parameter is still available, and is optional. If ZOrder is \"INSERTAFTER\", insertAfterHWND must be a handle to the window behind which windowHWND will be placed in the Z order, equivalent to setting ZOrder to this HWND; otherwise, insertAfterHWND is ignored and can be left out (or it can simply be set to the same value as windowHWND).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier windowHWND","description":""},{"identifier":"string state","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_Show","return_values":[],"parameters":[{"identifier":"windowHWND","type":"identifier"},{"identifier":"state","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Window_Show\""},{"type_name":"void*","identifier":"windowHWND"},{"identifier":"\"state\""}]}},"requires":{"Reaper":"5.974","JS":"0.991"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_Window_Show(identifier windowHWND, string state)","eel":"extension_api(\"JS_Window_Show\", void* windowHWND, \"state\")","python":"JS_Window_Show(void windowHWND, String state)","cpp":"void JS_Window_Show(void* windowHWND, const char* state)"},"title":"JS_Window_Show","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sets the specified window's show state.\n\nParameters:\n* state: One of the following options: \"SHOW\", \"SHOWNA\" (or \"SHOWNOACTIVATE\"), \"SHOWMINIMIZED\", \"HIDE\", \"NORMAL\", \"SHOWNORMAL\", \"SHOWMAXIMIZED\", \"SHOWDEFAULT\" or \"RESTORE\".\n\nOn Linux and macOS, only the first four options are fully implemented.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier windowHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Window_Update","return_values":[],"parameters":[{"identifier":"windowHWND","type":"identifier"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Window_Update\""},{"type_name":"void*","identifier":"windowHWND"}]}},"requires":{"Reaper":"5.974","JS":"0.980"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_Window_Update(identifier windowHWND)","eel":"extension_api(\"JS_Window_Update\", void* windowHWND)","python":"JS_Window_Update(void windowHWND)","cpp":"void JS_Window_Update(void* windowHWND)"},"title":"JS_Window_Update","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Similar to the Win32 function UpdateWindow.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension","zip"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string zipFile","description":""},{"identifier":"identifier zipHandle","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Zip_Close","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"zipFile","type":"string"},{"identifier":"zipHandle","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_Zip_Close\""},{"identifier":"\"zipFile\""},{"type_name":"void*","identifier":"zipHandle"}]}},"requires":{"Reaper":"6.23","JS":"1.301"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_Zip_Close(string zipFile, identifier zipHandle)","eel":"int extension_api(\"JS_Zip_Close\", \"zipFile\", void* zipHandle)","python":"Int retval = JS_Zip_Close(const char* zipFile, void* zipHandleOptional)","cpp":"int JS_Zip_Close(const char* zipFile, void* zipHandleOptional)"},"title":"JS_Zip_Close","chapters":["File Management","Zip Files"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Closes the zip archive, using either the file name or the zip handle. Finalizes entries and releases resources.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension","zip"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier zipHandle","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Zip_CountEntries","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"zipHandle","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_Zip_CountEntries\""},{"type_name":"void*","identifier":"zipHandle"}]}},"requires":{"Reaper":"6.23","JS":"1.301"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_Zip_CountEntries(identifier zipHandle)","eel":"int extension_api(\"JS_Zip_CountEntries\", void* zipHandle)","python":"Int retval = JS_Zip_CountEntries(void* zipHandle)","cpp":"int JS_Zip_CountEntries(void* zipHandle)"},"title":"JS_Zip_CountEntries","chapters":["File Management","Zip Files"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension","zip"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier zipHandle","description":""},{"identifier":"string entryNames","description":""},{"identifier":"integer entryNamesStrLen","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Zip_DeleteEntries","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"zipHandle","type":"identifier"},{"identifier":"entryNames","type":"string"},{"identifier":"entryNamesStrLen","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_Zip_DeleteEntries\""},{"type_name":"void*","identifier":"zipHandle"},{"identifier":"\"entryNames\""},{"type_name":"int","identifier":"entryNamesStrLen"}]}},"requires":{"Reaper":"6.23","JS":"1.301"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_Zip_DeleteEntries(identifier zipHandle, string entryNames, integer entryNamesStrLen)","eel":"int extension_api(\"JS_Zip_DeleteEntries\", void* zipHandle, \"entryNames\", int entryNamesStrLen)","python":"Int retval = JS_Zip_DeleteEntries(void* zipHandle, const char* entryNames, int entryNamesStrLen)","cpp":"int JS_Zip_DeleteEntries(void* zipHandle, const char* entryNames, int entryNamesStrLen)"},"title":"JS_Zip_DeleteEntries","chapters":["File Management","Zip Files"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Deletes the specified entries from an existing Zip file.\n\nentryNames is zero-separated and double-zero-terminated.\n\nReturns the number of deleted entries on success, negative number (< 0) on error.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension","zip"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier zipHandle","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Zip_Entry_Close","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"zipHandle","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_Zip_Entry_Close\""},{"type_name":"void*","identifier":"zipHandle"}]}},"requires":{"Reaper":"6.23","JS":"1.301"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_Zip_Entry_Close(identifier zipHandle)","eel":"int extension_api(\"JS_Zip_Entry_Close\", void* zipHandle)","python":"Int retval = JS_Zip_Entry_Close(void* zipHandle)","cpp":"int JS_Zip_Entry_Close(void* zipHandle)"},"title":"JS_Zip_Entry_Close","chapters":["File Management","Zip Files"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Closes a zip entry, flushes buffer and releases resources. In WRITE mode, entries must be closed in order to apply and save changes.\n\nReturns 0 on success, negative number (< 0) on error.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension","zip"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier zipHandle","description":""},{"identifier":"string inputFile","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Zip_Entry_CompressFile","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"zipHandle","type":"identifier"},{"identifier":"inputFile","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_Zip_Entry_CompressFile\""},{"type_name":"void*","identifier":"zipHandle"},{"identifier":"\"inputFile\""}]}},"requires":{"Reaper":"6.23","JS":"1.301"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_Zip_Entry_CompressFile(identifier zipHandle, string inputFile)","eel":"int extension_api(\"JS_Zip_Entry_CompressFile\", void* zipHandle, \"inputFile\")","python":"Int retval = JS_Zip_Entry_CompressFile(void* zipHandle, const char* inputFile)","cpp":"int JS_Zip_Entry_CompressFile(void* zipHandle, const char* inputFile)"},"title":"JS_Zip_Entry_CompressFile","chapters":["File Management","Zip Files"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Compresses the specified file into the zip archive's open entry.\n\nReturns 0 on success, negative number (< 0) on error.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension","zip"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier zipHandle","description":""},{"identifier":"string buf","description":""},{"identifier":"integer buf_size","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Zip_Entry_CompressMemory","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"zipHandle","type":"identifier"},{"identifier":"buf","type":"string"},{"identifier":"buf_size","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_Zip_Entry_CompressMemory\""},{"type_name":"void*","identifier":"zipHandle"},{"identifier":"\"buf\""},{"type_name":"int","identifier":"buf_size"}]}},"requires":{"Reaper":"6.23","JS":"1.301"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_Zip_Entry_CompressMemory(identifier zipHandle, string buf, integer buf_size)","eel":"int extension_api(\"JS_Zip_Entry_CompressMemory\", void* zipHandle, \"buf\", int buf_size)","python":"Int retval = JS_Zip_Entry_CompressMemory(void* zipHandle, const char* buf, int buf_size)","cpp":"int JS_Zip_Entry_CompressMemory(void* zipHandle, const char* buf, int buf_size)"},"title":"JS_Zip_Entry_CompressMemory","chapters":["File Management","Zip Files"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Compresses the specified memory buffer into the zip archive's open entry.\n\nReturns 0 on success, negative number (< 0) on error.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension","zip"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier zipHandle","description":""},{"identifier":"string outputFile","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Zip_Entry_ExtractToFile","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"zipHandle","type":"identifier"},{"identifier":"outputFile","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_Zip_Entry_ExtractToFile\""},{"type_name":"void*","identifier":"zipHandle"},{"identifier":"\"outputFile\""}]}},"requires":{"Reaper":"6.23","JS":"1.301"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_Zip_Entry_ExtractToFile(identifier zipHandle, string outputFile)","eel":"int extension_api(\"JS_Zip_Entry_ExtractToFile\", void* zipHandle, \"outputFile\")","python":"Int retval = JS_Zip_Entry_ExtractToFile(void* zipHandle, const char* outputFile)","cpp":"int JS_Zip_Entry_ExtractToFile(void* zipHandle, const char* outputFile)"},"title":"JS_Zip_Entry_ExtractToFile","chapters":["File Management","Zip Files"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Extracts the zip archive's open entry.\n\nReturns 0 on success, negative number (< 0) on error.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension","zip"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier zipHandle","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Zip_Entry_ExtractToMemory","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"contents","type":"string"}],"parameters":[{"identifier":"zipHandle","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_Zip_Entry_ExtractToMemory\""},{"type_name":"void*","identifier":"zipHandle"},{"identifier":"#contents"}]}},"requires":{"Reaper":"6.23","JS":"1.301"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":""},{"identifier":"string contents","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, string contents = reaper.JS_Zip_Entry_ExtractToMemory(identifier zipHandle)","eel":"int extension_api(\"JS_Zip_Entry_ExtractToMemory\", void* zipHandle, #contents)","python":"Int retval = JS_Zip_Entry_ExtractToMemory(void* zipHandle, char* contentsOutNeedBig, int contentsOutNeedBig_sz)","cpp":"int JS_Zip_Entry_ExtractToMemory(void* zipHandle, char* contentsOutNeedBig, int contentsOutNeedBig_sz)"},"title":"JS_Zip_Entry_ExtractToMemory","chapters":["File Management","Zip Files"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Extracts and returns the zip archive's open entry.\n\nReturns the number of bytes extracted on success, negative number (< 0) on error.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension","zip"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier zipHandle","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Zip_Entry_Info","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"name","type":"string"},{"identifier":"index","type":"integer"},{"identifier":"isFolder","type":"integer"},{"identifier":"size","type":"number"},{"identifier":"crc32","type":"number"}],"parameters":[{"identifier":"zipHandle","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_Zip_Entry_Info\""},{"type_name":"void*","identifier":"zipHandle"},{"identifier":"#name"},{"type_name":"int","identifier":"&index"},{"type_name":"int","identifier":"&isFolder"},{"identifier":"&size"},{"identifier":"&crc32"}]}},"requires":{"Reaper":"6.23","JS":"1.301"},"return_values":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"integer retval","description":""},{"identifier":"string name","description":""},{"identifier":"integer index","description":""},{"identifier":"integer isFolder","description":""},{"identifier":"number size","description":""},{"identifier":"number crc32","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, string name, integer index, integer isFolder, number size, number crc32 = reaper.JS_Zip_Entry_Info(identifier zipHandle)","eel":"int extension_api(\"JS_Zip_Entry_Info\", void* zipHandle, #name, int &index, int &isFolder, &size, &crc32)","python":"Int retval = JS_Zip_Entry_Info(void* zipHandle, char* nameOutNeedBig, int nameOutNeedBig_sz, int* indexOut, int* isFolderOut, double* sizeOut, double* crc32Out)","cpp":"int JS_Zip_Entry_Info(void* zipHandle, char* nameOutNeedBig, int nameOutNeedBig_sz, int* indexOut, int* isFolderOut, double* sizeOut, double* crc32Out)"},"title":"JS_Zip_Entry_Info","chapters":["File Management","Zip Files"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns information about the zip archive's open entry.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension","zip"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier zipHandle","description":""},{"identifier":"integer index","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Zip_Entry_OpenByIndex","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"zipHandle","type":"identifier"},{"identifier":"index","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_Zip_Entry_OpenByIndex\""},{"type_name":"void*","identifier":"zipHandle"},{"type_name":"int","identifier":"index"}]}},"requires":{"Reaper":"6.23","JS":"1.301"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_Zip_Entry_OpenByIndex(identifier zipHandle, integer index)","eel":"int extension_api(\"JS_Zip_Entry_OpenByIndex\", void* zipHandle, int index)","python":"Int retval = JS_Zip_Entry_OpenByIndex(void* zipHandle, int index)","cpp":"int JS_Zip_Entry_OpenByIndex(void* zipHandle, int index)"},"title":"JS_Zip_Entry_OpenByIndex","chapters":["File Management","Zip Files"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Opens a new entry by index in the zip archive.\n\nThis function is only valid if zip archive was opened in 'r' (readonly) mode.\n\nReturns 0 on success, negative number on error.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension","zip"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier zipHandle","description":""},{"identifier":"string entryName","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Zip_Entry_OpenByName","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"zipHandle","type":"identifier"},{"identifier":"entryName","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_Zip_Entry_OpenByName\""},{"type_name":"void*","identifier":"zipHandle"},{"identifier":"\"entryName\""}]}},"requires":{"Reaper":"6.23","JS":"1.301"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_Zip_Entry_OpenByName(identifier zipHandle, string entryName)","eel":"int extension_api(\"JS_Zip_Entry_OpenByName\", void* zipHandle, \"entryName\")","python":"Int retval = JS_Zip_Entry_OpenByName(void* zipHandle, const char* entryName)","cpp":"int JS_Zip_Entry_OpenByName(void* zipHandle, const char* entryName)"},"title":"JS_Zip_Entry_OpenByName","chapters":["File Management","Zip Files"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Opens an entry by name in the zip archive.\n\nFor zip archive opened in 'w' or 'a' mode the function will append a new entry. In readonly mode the function tries to locate an existing entry.\n\nReturns 0 on success, negative number (< 0) on error.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension","zip"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer errorNum","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Zip_ErrorString","return_values":[{"identifier":"errorStr","type":"string"}],"parameters":[{"identifier":"errorNum","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_Zip_ErrorString\""},{"type_name":"int","identifier":"errorNum"},{"identifier":"#errorStr"}]}},"requires":{"Reaper":"6.23","JS":"1.301"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string errorStr","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string errorStr = reaper.JS_Zip_ErrorString(integer errorNum)","eel":"extension_api(\"JS_Zip_ErrorString\", int errorNum, #errorStr)","python":"void void = JS_Zip_ErrorString(int errorNum, char* errorStrOut, int errorStrOut_sz)","cpp":"void JS_Zip_ErrorString(int errorNum, char* errorStrOut, int errorStrOut_sz)"},"title":"JS_Zip_ErrorString","chapters":["File Management","Zip Files"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns a descriptive string for the given error code.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension","zip"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string zipFile","description":""},{"identifier":"string outputFolder","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Zip_Extract","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"zipFile","type":"string"},{"identifier":"outputFolder","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_Zip_Extract\""},{"identifier":"\"zipFile\""},{"identifier":"\"outputFolder\""}]}},"requires":{"Reaper":"6.23","JS":"1.301"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_Zip_Extract(string zipFile, string outputFolder)","eel":"int extension_api(\"JS_Zip_Extract\", \"zipFile\", \"outputFolder\")","python":"Int retval = JS_Zip_Extract(const char* zipFile, const char* outputFolder)","cpp":"int JS_Zip_Extract(const char* zipFile, const char* outputFolder)"},"title":"JS_Zip_Extract","chapters":["File Management","Zip Files"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Extracts an existing Zip file to the specified folder.\n\nReturns the number of extracted files on success, negative number (< 0) on error.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension","zip"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier zipHandle","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Zip_ListAllEntries","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"list","type":"string"}],"parameters":[{"identifier":"zipHandle","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_Zip_ListAllEntries\""},{"type_name":"void*","identifier":"zipHandle"},{"identifier":"#list"}]}},"requires":{"Reaper":"6.23","JS":"1.301"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":""},{"identifier":"string list","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, string list = reaper.JS_Zip_ListAllEntries(identifier zipHandle)","eel":"int extension_api(\"JS_Zip_ListAllEntries\", void* zipHandle, #list)","python":"Int retval = JS_Zip_ListAllEntries(void* zipHandle, char* listOutNeedBig, int listOutNeedBig_sz)","cpp":"int JS_Zip_ListAllEntries(void* zipHandle, char* listOutNeedBig, int listOutNeedBig_sz)"},"title":"JS_Zip_ListAllEntries","chapters":["File Management","Zip Files"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the number of entries and a zero-separated and double-zero-terminated string of entry names.\n\nOn error, returns a negative number (< 0).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension","zip"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"string zipFile","description":""},{"identifier":"string mode","description":""},{"identifier":"integer compressionLevel","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Zip_Open","return_values":[{"identifier":"retval","type":"identifier"},{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"zipFile","type":"string"},{"identifier":"mode","type":"string"},{"identifier":"compressionLevel","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_Zip_Open\""},{"identifier":"\"zipFile\""},{"identifier":"\"mode\""},{"type_name":"int","identifier":"compressionLevel"},{"type_name":"int","identifier":"&retval"}]}},"requires":{"Reaper":"6.23","JS":"1.301"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier retval","description":""},{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier retval, integer retval = reaper.JS_Zip_Open(string zipFile, string mode, integer compressionLevel)","eel":"void* extension_api(\"JS_Zip_Open\", \"zipFile\", \"mode\", int compressionLevel, int &retval)","python":"void* void = JS_Zip_Open(const char* zipFile, const char* mode, int compressionLevel, int* retvalOut)","cpp":"void* JS_Zip_Open(const char* zipFile, const char* mode, int compressionLevel, int* retvalOut)"},"title":"JS_Zip_Open","chapters":["File Management","Zip Files"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension","select","folder","dialog"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string caption","description":"the captiontext for the folder-selection dialog"},{"identifier":"string initialFolder","description":"the path to the folder, which shall be highlighted initially"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Dialog_BrowseForFolder","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"folder","type":"string"}],"parameters":[{"identifier":"caption","type":"string"},{"identifier":"initialFolder","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_Dialog_BrowseForFolder\""},{"identifier":"\"caption\""},{"identifier":"\"initialFolder\""},{"identifier":"#folder"}]}},"requires":{"Reaper":"5.974","JS":"0.962"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":"0, no folder was selected(user hit cancel-button); 1, folder was selected; -1, in case of an error"},{"identifier":"string folder","description":"the path to the folder that was selected"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, string folder = reaper.JS_Dialog_BrowseForFolder(string caption, string initialFolder)","eel":"int extension_api(\"JS_Dialog_BrowseForFolder\", \"caption\", \"initialFolder\", #folder)","python":"(Int retval, String caption, String initialFolder, String folderOutNeedBig, Int folderOutNeedBig_sz) = JS_Dialog_BrowseForFolder(caption, initialFolder, folderOutNeedBig, folderOutNeedBig_sz)","cpp":"int JS_Dialog_BrowseForFolder(const char* caption, const char* initialFolder, char* folderOutNeedBig, int folderOutNeedBig_sz)"},"title":"JS_Dialog_BrowseForFolder","chapters":["User Interface","Dialogs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"retval is 1 if a folder was selected, 0 if the user canceled the dialog, and -1 if an error occurred.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension","select","select","file","filenames","path","dialog"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"string windowTitle","description":"the title of the file-selection-window"},{"identifier":"string initialFolder","description":"the initial folder opened in the file-chooser-dialog"},{"identifier":"string initialFile","description":"the default-filename already entered in the filename-entrybox"},{"identifier":"string extensionList","description":"a list of extensions that can be selected in the selection-list.\nthe list has the following structure(separate the entries with a \\0): \n      \"description of type1\\0type1\\0description of type 2\\0type2\\0\"\nthe description of type can be anything that describes the type(s), \nto define one type, write: *.ext \nto define multiple types, write: *.ext;*.ext2;*.ext3\nthe extensionList must end with a \\0"},{"identifier":"boolean allowMultiple","description":"true, allows selection of multiple files; false, allows only selection of one file"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Dialog_BrowseForOpenFiles","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"fileNames","type":"string"}],"parameters":[{"identifier":"windowTitle","type":"string"},{"identifier":"initialFolder","type":"string"},{"identifier":"initialFile","type":"string"},{"identifier":"extensionList","type":"string"},{"identifier":"allowMultiple","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_Dialog_BrowseForOpenFiles\""},{"identifier":"\"windowTitle\""},{"identifier":"\"initialFolder\""},{"identifier":"\"initialFile\""},{"identifier":"\"extensionList\""},{"type_name":"bool","identifier":"allowMultiple"},{"identifier":"#fileNames"}]}},"requires":{"Reaper":"5.974","JS":"0.986"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":"1, file was selected; 0, no file selected; -1, in case of an error"},{"identifier":"string fileNames","description":"the selected filenames.\nwhen parameter allowMultiple=false, this returnvalue holds filename with path\nwhen parameter allowMultiple=true, this returnvalue holds the path and all selected files, separated by \\0\n     path\\0filename1\\0filename2\\0filename3"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, string fileNames = reaper.JS_Dialog_BrowseForOpenFiles(string windowTitle, string initialFolder, string initialFile, string extensionList, boolean allowMultiple)","eel":"int extension_api(\"JS_Dialog_BrowseForOpenFiles\", \"windowTitle\", \"initialFolder\", \"initialFile\", \"extensionList\", bool allowMultiple, #fileNames)","python":"(Int retval, String windowTitle, String initialFolder, String initialFile, String extensionList, Boolean allowMultiple, String fileNamesOutNeedBig, Int fileNamesOutNeedBig_sz) = JS_Dialog_BrowseForOpenFiles(windowTitle, initialFolder, initialFile, extensionList, allowMultiple, fileNamesOutNeedBig, fileNamesOutNeedBig_sz)","cpp":"int JS_Dialog_BrowseForOpenFiles(const char* windowTitle, const char* initialFolder, const char* initialFile, const char* extensionList, bool allowMultiple, char* fileNamesOutNeedBig, int fileNamesOutNeedBig_sz)"},"title":"JS_Dialog_BrowseForOpenFiles","chapters":["User Interface","Dialogs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"If allowMultiple is true, multiple files may be selected. The returned string is \\0-separated, with the first substring containing the folder path and subsequent substrings containing the file names.\n* On macOS, the first substring may be empty, and each file name will then contain its entire path.\n* This function only allows selection of existing files, and does not allow creation of new files.\n\nextensionList is a string containing pairs of \\0-terminated substrings. The last substring must be terminated by two \\0 characters. Each pair defines one filter pattern:\n* The first substring in each pair describes the filter in user-readable form (for example, \"Lua script files (*.lua)\") and will be displayed in the dialog box.\n* The second substring specifies the filter that the operating system must use to search for the files (for example, \"*.txt\"; the wildcard should not be omitted). To specify multiple extensions for a single display string, use a semicolon to separate the patterns (for example, \"*.lua;*.eel\").\n\nAn example of an extensionList string:\n\"ReaScript files\\0*.lua;*.eel\\0Lua files (.lua)\\0*.lua\\0EEL files (.eel)\\0*.eel\\0\\0\".\n\nOn macOS, file dialogs do not accept empty extensionLists, nor wildcard extensions (such as \"All files\\0*.*\\0\\0\"), so each acceptable extension must be listed explicitly. On Linux and Windows, wildcard extensions are acceptable, and if the extensionList string is empty, the dialog will display a default \"All files (*.*)\" filter.\n\nretval is 1 if one or more files were selected, 0 if the user cancelled the dialog, or negative if an error occurred.\n\nDisplaying \\0-separated strings:\n* REAPER's IDE and ShowConsoleMsg only display strings up to the first \\0 byte. If multiple files were selected, only the first substring containing the path will be displayed. This is not a problem for Lua or EEL, which can access the full string beyond the first \\0 byte as usual.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension","select","select","file","filenames","path","dialog","save"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"string windowTitle","description":"the title of the file-selection-window"},{"identifier":"string initialFolder","description":"the initial folder opened in the file-chooser-dialog"},{"identifier":"string initialFile","description":"the default-filename already entered in the filename-entrybox"},{"identifier":"string extensionList","description":"a list of extensions that can be selected in the selection-list.\nthe list has the following structure(separate the entries with a \\0): \n      \"description of type1\\0type1\\0description of type 2\\0type2\\0\"\nthe description of type can be anything that describes the type(s), \nto define one type, write: *.ext \nto define multiple types, write: *.ext;*.ext2;*.ext3\nthe extensionList must end with a \\0"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_Dialog_BrowseForSaveFile","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"fileName","type":"string"}],"parameters":[{"identifier":"windowTitle","type":"string"},{"identifier":"initialFolder","type":"string"},{"identifier":"initialFile","type":"string"},{"identifier":"extensionList","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_Dialog_BrowseForSaveFile\""},{"identifier":"\"windowTitle\""},{"identifier":"\"initialFolder\""},{"identifier":"\"initialFile\""},{"identifier":"\"extensionList\""},{"identifier":"#fileName"}]}},"requires":{"Reaper":"5.974","JS":"0.986"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":"1, file was selected; 0, no file selected; -1, in case of an error"},{"identifier":"string fileNames","description":"the selected filename."}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, string fileName = reaper.JS_Dialog_BrowseForSaveFile(string windowTitle, string initialFolder, string initialFile, string extensionList)","eel":"int extension_api(\"JS_Dialog_BrowseForSaveFile\", \"windowTitle\", \"initialFolder\", \"initialFile\", \"extensionList\", #fileName)","python":"(Int retval, String windowTitle, String initialFolder, String initialFile, String extensionList, String fileNameOutNeedBig, Int fileNameOutNeedBig_sz) = JS_Dialog_BrowseForSaveFile(windowTitle, initialFolder, initialFile, extensionList, fileNameOutNeedBig, fileNameOutNeedBig_sz)","cpp":"int JS_Dialog_BrowseForSaveFile(const char* windowTitle, const char* initialFolder, const char* initialFile, const char* extensionList, char* fileNameOutNeedBig, int fileNameOutNeedBig_sz)"},"title":"JS_Dialog_BrowseForSaveFile","chapters":["User Interface","Dialogs"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Opens a file-chooser-dialog for saving operations.\n\nretval is 1 if a file was selected, 0 if the user cancelled the dialog, or negative if an error occurred.\n\nextensionList is a string containing pairs of 0-terminated substrings. The last substring must be terminated by two 0 characters. Each pair defines one filter pattern:\n* The first substring in each pair describes the filter in user-readable form (for example, \"Lua script files (*.lua)\") and will be displayed in the dialog box.\n* The second substring specifies the filter that the operating system must use to search for the files (for example, \"*.txt\"; the wildcard should not be omitted). To specify multiple extensions for a single display string, use a semicolon to separate the patterns (for example, \"*.lua;*.eel\").\n\nAn example of an extensionList string:\n\"ReaScript files\\0*.lua;*.eel\\0Lua files (.lua)\\0*.lua\\0EEL files (.eel)\\0*.eel\\0\\0\".\n\nIf the extensionList string is empty, it will display the default \"All files (*.*)\" filter.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension","listview","enumerate","selected","listview","items"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier listviewHWND","description":"the HWND of the window"},{"identifier":"integer index","description":"the index of the listitems before the next selected one"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_ListView_EnumSelItems","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"listviewHWND","type":"identifier"},{"identifier":"index","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_ListView_EnumSelItems\""},{"type_name":"void*","identifier":"listviewHWND"},{"type_name":"int","identifier":"index"}]}},"requires":{"Reaper":"5.974","JS":"0.962"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the index of the next selected list item"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_ListView_EnumSelItems(identifier listviewHWND, integer index)","eel":"int extension_api(\"JS_ListView_EnumSelItems\", void* listviewHWND, int index)","python":"Int retval = JS_ListView_EnumSelItems(void listviewHWND, Int index)","cpp":"int JS_ListView_EnumSelItems(void* listviewHWND, int index)"},"title":"JS_ListView_EnumSelItems","chapters":["User Interface","List Views"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the index of the next selected list item with index greater that the specified number. Returns -1 if no selected items left.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier listviewHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_ListView_GetFocusedItem","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"text","type":"string"}],"parameters":[{"identifier":"listviewHWND","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_ListView_GetFocusedItem\""},{"type_name":"void*","identifier":"listviewHWND"},{"identifier":"#text"}]}},"requires":{"Reaper":"5.974","JS":"0.963"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":""},{"identifier":"string text","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, string text = reaper.JS_ListView_GetFocusedItem(identifier listviewHWND)","eel":"int extension_api(\"JS_ListView_GetFocusedItem\", void* listviewHWND, #text)","python":"(Int retval, void listviewHWND, String textOut, Int textOut_sz) = JS_ListView_GetFocusedItem(listviewHWND, textOut, textOut_sz)","cpp":"int JS_ListView_GetFocusedItem(void* listviewHWND, char* textOut, int textOut_sz)"},"title":"JS_ListView_GetFocusedItem","chapters":["User Interface","List Views"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the index and text of the focused item, if any.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier listviewHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_ListView_GetHeader","return_values":[{"identifier":"index","type":"identifier"}],"parameters":[{"identifier":"listviewHWND","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"JS_ListView_GetHeader\""},{"type_name":"void*","identifier":"listviewHWND"}]}},"requires":{"Reaper":"5.974","JS":"1.310"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier index","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier index = reaper.JS_ListView_GetHeader(identifier listviewHWND)","eel":"void* extension_api(\"JS_ListView_GetHeader\", void* listviewHWND)","python":"void JS_ListView_GetHeader(void listviewHWND)","cpp":"void* JS_ListView_GetHeader(void* listviewHWND)"},"title":"JS_ListView_GetHeader","chapters":["User Interface","List Views"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the index and text of the focused item, if any.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier listviewHWND","description":""},{"identifier":"integer index","description":""},{"identifier":"integer subItem","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_ListView_GetItem","return_values":[{"identifier":"text","type":"string"},{"identifier":"state","type":"integer"}],"parameters":[{"identifier":"listviewHWND","type":"identifier"},{"identifier":"index","type":"integer"},{"identifier":"subItem","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_ListView_GetItem\""},{"type_name":"void*","identifier":"listviewHWND"},{"type_name":"int","identifier":"index"},{"type_name":"int","identifier":"subItem"},{"identifier":"#text"},{"type_name":"int","identifier":"&state"}]}},"requires":{"Reaper":"5.974","JS":"0.963"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string text","description":""},{"identifier":"integer state","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string text, integer state = reaper.JS_ListView_GetItem(identifier listviewHWND, integer index, integer subItem)","eel":"extension_api(\"JS_ListView_GetItem\", void* listviewHWND, int index, int subItem, #text, int &state)","python":"(void listviewHWND, Int index, Int subItem, String textOut, Int textOut_sz, Int stateOut) = JS_ListView_GetItem(listviewHWND, index, subItem, textOut, textOut_sz, stateOut)","cpp":"void JS_ListView_GetItem(void* listviewHWND, int index, int subItem, char* textOut, int textOut_sz, int* stateOut)"},"title":"JS_ListView_GetItem","chapters":["User Interface","List Views"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the text and state of specified item.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier listviewHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_ListView_GetItemCount","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"listviewHWND","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_ListView_GetItemCount\""},{"type_name":"void*","identifier":"listviewHWND"}]}},"requires":{"Reaper":"5.974","JS":"0.963"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_ListView_GetItemCount(identifier listviewHWND)","eel":"int extension_api(\"JS_ListView_GetItemCount\", void* listviewHWND)","python":"Int retval = JS_ListView_GetItemCount(void listviewHWND)","cpp":"int JS_ListView_GetItemCount(void* listviewHWND)"},"title":"JS_ListView_GetItemCount","chapters":["User Interface","List Views"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier listviewHWND","description":""},{"identifier":"integer index","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_ListView_GetItemRect","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"left","type":"integer"},{"identifier":"top","type":"integer"},{"identifier":"right","type":"integer"},{"identifier":"bottom","type":"integer"}],"parameters":[{"identifier":"listviewHWND","type":"identifier"},{"identifier":"index","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"JS_ListView_GetItemRect\""},{"type_name":"void*","identifier":"listviewHWND"},{"type_name":"int","identifier":"index"},{"type_name":"int","identifier":"&left"},{"type_name":"int","identifier":"&top"},{"type_name":"int","identifier":"&right"},{"type_name":"int","identifier":"&bottom"}]}},"requires":{"Reaper":"5.974","JS":"1.217"},"return_values":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer left","description":""},{"identifier":"integer top","description":""},{"identifier":"integer right","description":""},{"identifier":"integer bottom","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer left, integer top, integer right, integer bottom = reaper.JS_ListView_GetItemRect(identifier listviewHWND, integer index)","eel":"bool extension_api(\"JS_ListView_GetItemRect\", void* listviewHWND, int index, int &left, int &top, int &right, int &bottom)","python":"(Boolean retval, void listviewHWND, Int index, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = JS_ListView_GetItemRect(listviewHWND, index, leftOut, topOut, rightOut, bottomOut)","cpp":"bool JS_ListView_GetItemRect(void* listviewHWND, int index, int* leftOut, int* topOut, int* rightOut, int* bottomOut)"},"title":"JS_ListView_GetItemRect","chapters":["User Interface","List Views"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns client coordinates of the item.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier listviewHWND","description":""},{"identifier":"integer index","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_ListView_GetItemState","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"listviewHWND","type":"identifier"},{"identifier":"index","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_ListView_GetItemState\""},{"type_name":"void*","identifier":"listviewHWND"},{"type_name":"int","identifier":"index"}]}},"requires":{"Reaper":"5.974","JS":"1.301"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_ListView_GetItemState(identifier listviewHWND, integer index)","eel":"int extension_api(\"JS_ListView_GetItemState\", void* listviewHWND, int index)","python":"Int retval = JS_ListView_GetItemState(void listviewHWND, Int index)","cpp":"int JS_ListView_GetItemState(void* listviewHWND, int index)"},"title":"JS_ListView_GetItemState","chapters":["User Interface","List Views"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"State is a bitmask:\n1 = focused, 2 = selected. On Windows only, cut-and-paste marked = 4, drag-and-drop highlighted = 8.\n\nWarning: this function uses the Win32 bitmask values, which differ from the values used by WDL/swell.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier listviewHWND","description":""},{"identifier":"integer index","description":""},{"identifier":"integer subItem","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_ListView_GetItemText","return_values":[{"identifier":"text","type":"string"}],"parameters":[{"identifier":"listviewHWND","type":"identifier"},{"identifier":"index","type":"integer"},{"identifier":"subItem","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_ListView_GetItemText\""},{"type_name":"void*","identifier":"listviewHWND"},{"type_name":"int","identifier":"index"},{"type_name":"int","identifier":"subItem"},{"identifier":"#text"}]}},"requires":{"Reaper":"5.974","JS":"0.963"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string text","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string text = reaper.JS_ListView_GetItemText(identifier listviewHWND, integer index, integer subItem)","eel":"extension_api(\"JS_ListView_GetItemText\", void* listviewHWND, int index, int subItem, #text)","python":"(void listviewHWND, Int index, Int subItem, String textOut, Int textOut_sz) = JS_ListView_GetItemText(listviewHWND, index, subItem, textOut, textOut_sz)","cpp":"void JS_ListView_GetItemText(void* listviewHWND, int index, int subItem, char* textOut, int textOut_sz)"},"title":"JS_ListView_GetItemText","chapters":["User Interface","List Views"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier listviewHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_ListView_GetSelectedCount","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"listviewHWND","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_ListView_GetSelectedCount\""},{"type_name":"void*","identifier":"listviewHWND"}]}},"requires":{"Reaper":"5.974","JS":"0.963"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_ListView_GetSelectedCount(identifier listviewHWND)","eel":"int extension_api(\"JS_ListView_GetSelectedCount\", void* listviewHWND)","python":"Int retval = JS_ListView_GetSelectedCount(void listviewHWND)","cpp":"int JS_ListView_GetSelectedCount(void* listviewHWND)"},"title":"JS_ListView_GetSelectedCount","chapters":["User Interface","List Views"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier listviewHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_ListView_GetTopIndex","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"listviewHWND","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_ListView_GetTopIndex\""},{"type_name":"void*","identifier":"listviewHWND"}]}},"requires":{"Reaper":"5.974","JS":"1.217"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.JS_ListView_GetTopIndex(identifier listviewHWND)","eel":"int extension_api(\"JS_ListView_GetTopIndex\", void* listviewHWND)","python":"Int retval = JS_ListView_GetTopIndex(void listviewHWND)","cpp":"int JS_ListView_GetTopIndex(void* listviewHWND)"},"title":"JS_ListView_GetTopIndex","chapters":["User Interface","List Views"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier listviewHWND","description":""},{"identifier":"integer clientX","description":""},{"identifier":"integer clientY","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_ListView_HitTest","return_values":[{"identifier":"index","type":"integer"},{"identifier":"subItem","type":"integer"},{"identifier":"flags","type":"integer"}],"parameters":[{"identifier":"listviewHWND","type":"identifier"},{"identifier":"clientX","type":"integer"},{"identifier":"clientY","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_ListView_HitTest\""},{"type_name":"void*","identifier":"listviewHWND"},{"type_name":"int","identifier":"clientX"},{"type_name":"int","identifier":"clientY"},{"type_name":"int","identifier":"&index"},{"type_name":"int","identifier":"&subItem"},{"type_name":"int","identifier":"&flags"}]}},"requires":{"Reaper":"5.974","JS":"1.217"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer index","description":""},{"identifier":"integer subItem","description":""},{"identifier":"integer flags","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer index, integer subItem, integer flags = reaper.JS_ListView_HitTest(identifier listviewHWND, integer clientX, integer clientY)","eel":"extension_api(\"JS_ListView_HitTest\", void* listviewHWND, int clientX, int clientY, int &index, int &subItem, int &flags)","python":"(void listviewHWND, Int clientX, Int clientY, Int indexOut, Int subItemOut, Int flagsOut) = JS_ListView_HitTest(listviewHWND, clientX, clientY, indexOut, subItemOut, flagsOut)","cpp":"void JS_ListView_HitTest(void* listviewHWND, int clientX, int clientY, int* indexOut, int* subItemOut, int* flagsOut)"},"title":"JS_ListView_HitTest","chapters":["User Interface","List Views"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier listviewHWND","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_ListView_ListAllSelItems","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"items","type":"string"}],"parameters":[{"identifier":"listviewHWND","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"JS_ListView_ListAllSelItems\""},{"type_name":"void*","identifier":"listviewHWND"},{"identifier":"#items"}]}},"requires":{"Reaper":"5.974","JS":"0.963"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":""},{"identifier":"string items","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, string items = reaper.JS_ListView_ListAllSelItems(identifier listviewHWND)","eel":"int extension_api(\"JS_ListView_ListAllSelItems\", void* listviewHWND, #items)","python":"(Int retval, void listviewHWND, String itemsOutNeedBig, Int itemsOutNeedBig_sz) = JS_ListView_ListAllSelItems(listviewHWND, itemsOutNeedBig, itemsOutNeedBig_sz)","cpp":"int JS_ListView_ListAllSelItems(void* listviewHWND, char* itemsOutNeedBig, int itemsOutNeedBig_sz)"},"title":"JS_ListView_ListAllSelItems","chapters":["User Interface","List Views"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the indices of all selected items as a comma-separated list.\n\n* retval: Number of selected items found; negative or zero if an error occured.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"identifier listviewHWND","description":""},{"identifier":"integer index","description":""},{"identifier":"integer state","description":""},{"identifier":"integer mask","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_ListView_SetItemState","return_values":[],"parameters":[{"identifier":"listviewHWND","type":"identifier"},{"identifier":"index","type":"integer"},{"identifier":"state","type":"integer"},{"identifier":"mask","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_ListView_SetItemState\""},{"type_name":"void*","identifier":"listviewHWND"},{"type_name":"int","identifier":"index"},{"type_name":"int","identifier":"state"},{"type_name":"int","identifier":"mask"}]}},"requires":{"Reaper":"5.974","JS":"1.301"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_ListView_SetItemState(identifier listviewHWND, integer index, integer state, integer mask)","eel":"extension_api(\"JS_ListView_SetItemState\", void* listviewHWND, int index, int state, int mask)","python":"JS_ListView_SetItemState(void listviewHWND, Int index, Int state, Int mask)","cpp":"void JS_ListView_SetItemState(void* listviewHWND, int index, int state, int mask)"},"title":"JS_ListView_SetItemState","chapters":["User Interface","List Views"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"The mask parameter specifies the state bits that must be set, and the state parameter specifies the new values for those bits.\n\n1 = focused, 2 = selected. On Windows only, cut-and-paste marked = 4, drag-and-drop highlighted = 8.\n\nWarning: this function uses the Win32 bitmask values, which differ from the values used by WDL/swell.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"identifier listviewHWND","description":""},{"identifier":"integer index","description":""},{"identifier":"integer subItem","description":""},{"identifier":"string text","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.JS_ListView_SetItemText","return_values":[],"parameters":[{"identifier":"listviewHWND","type":"identifier"},{"identifier":"index","type":"integer"},{"identifier":"subItem","type":"integer"},{"identifier":"text","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"JS_ListView_SetItemText\""},{"type_name":"void*","identifier":"listviewHWND"},{"type_name":"int","identifier":"index"},{"type_name":"int","identifier":"subItem"},{"identifier":"\"text\""}]}},"requires":{"Reaper":"5.974","JS":"1.217"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.JS_ListView_SetItemText(identifier listviewHWND, integer index, integer subItem, string text)","eel":"extension_api(\"JS_ListView_SetItemText\", void* listviewHWND, int index, int subItem, \"text\")","python":"JS_ListView_SetItemText(void listviewHWND, Int index, Int subItem, String text)","cpp":"void JS_ListView_SetItemText(void* listviewHWND, int index, int subItem, const char* text)"},"title":"JS_ListView_SetItemText","chapters":["User Interface","List Views"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Currently, this function only accepts ASCII text.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"string filename","description":""},{"identifier":"integer numchans","description":""},{"identifier":"integer samplerate","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Xen_AudioWriter_Create","return_values":[{"identifier":"writer","type":"AudioWriter"}],"parameters":[{"identifier":"filename","type":"string"},{"identifier":"numchans","type":"integer"},{"identifier":"samplerate","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["AudioWriter"],"parameters":[{"identifier":"\"Xen_AudioWriter_Create\""},{"identifier":"\"filename\""},{"type_name":"int","identifier":"numchans"},{"type_name":"int","identifier":"samplerate"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"AudioWriter writer","description":""}],"prog_lang":"*"},"functioncall":{"lua":"AudioWriter writer = reaper.Xen_AudioWriter_Create(string filename, integer numchans, integer samplerate)","eel":"AudioWriter extension_api(\"Xen_AudioWriter_Create\", \"filename\", int numchans, int samplerate)","python":"AudioWriter retval = Xen_AudioWriter_Create(String filename, Int numchans, Int samplerate)","cpp":"AudioWriter* Xen_AudioWriter_Create(const char* filename, int numchans, int samplerate)"},"title":"Xen_AudioWriter_Create","chapters":["Audio Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Creates writer for 32 bit floating point WAV","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"AudioWriter writer","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Xen_AudioWriter_Destroy","return_values":[],"parameters":[{"identifier":"writer","type":"AudioWriter"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"Xen_AudioWriter_Destroy\""},{"type_name":"AudioWriter","identifier":"writer"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Xen_AudioWriter_Destroy(AudioWriter writer)","eel":"extension_api(\"Xen_AudioWriter_Destroy\", AudioWriter writer)","python":"Xen_AudioWriter_Destroy(AudioWriter writer)","cpp":"void Xen_AudioWriter_Destroy(AudioWriter* writer)"},"title":"Xen_AudioWriter_Destroy","chapters":["Audio Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Destroys writer","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"AudioWriter writer","description":""},{"identifier":"integer numframes","description":""},{"identifier":"identifier data","description":""},{"identifier":"integer offset","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Xen_AudioWriter_Write","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"writer","type":"AudioWriter"},{"identifier":"numframes","type":"integer"},{"identifier":"data","type":"identifier"},{"identifier":"offset","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"Xen_AudioWriter_Write\""},{"type_name":"AudioWriter","identifier":"writer"},{"type_name":"int","identifier":"numframes"},{"type_name":"void*","identifier":"data"},{"type_name":"int","identifier":"offset"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.Xen_AudioWriter_Write(AudioWriter writer, integer numframes, identifier data, integer offset)","eel":"int extension_api(\"Xen_AudioWriter_Write\", AudioWriter writer, int numframes, void* data, int offset)","python":"Int retval = Xen_AudioWriter_Write(AudioWriter writer, Int numframes, void data, Int offset)","cpp":"int Xen_AudioWriter_Write(AudioWriter* writer, int numframes, void* data, int offset)"},"title":"Xen_AudioWriter_Write","chapters":["Audio Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Write interleaved audio data to disk","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"PCM_source src","description":""},{"identifier":"identifier destbuf","description":""},{"identifier":"integer destbufoffset","description":""},{"identifier":"integer numframes","description":""},{"identifier":"integer numchans","description":""},{"identifier":"number samplerate","description":""},{"identifier":"number sourceposition","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Xen_GetMediaSourceSamples","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"src","type":"PCM_source"},{"identifier":"destbuf","type":"identifier"},{"identifier":"destbufoffset","type":"integer"},{"identifier":"numframes","type":"integer"},{"identifier":"numchans","type":"integer"},{"identifier":"samplerate","type":"number"},{"identifier":"sourceposition","type":"number"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"Xen_GetMediaSourceSamples\""},{"type_name":"PCM_source","identifier":"src"},{"type_name":"void*","identifier":"destbuf"},{"type_name":"int","identifier":"destbufoffset"},{"type_name":"int","identifier":"numframes"},{"type_name":"int","identifier":"numchans"},{"identifier":"samplerate"},{"identifier":"sourceposition"}]}},"requires":{"Reaper":"5.974","JS":"0.951"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.Xen_GetMediaSourceSamples(PCM_source src, identifier destbuf, integer destbufoffset, integer numframes, integer numchans, number samplerate, number sourceposition)","eel":"int extension_api(\"Xen_GetMediaSourceSamples\", PCM_source src, void* destbuf, int destbufoffset, int numframes, int numchans, samplerate, sourceposition)","python":"Int retval = Xen_GetMediaSourceSamples(PCM_source src, void destbuf, Int destbufoffset, Int numframes, Int numchans, Float samplerate, Float sourceposition)","cpp":"int Xen_GetMediaSourceSamples(PCM_source* src, void* destbuf, int destbufoffset, int numframes, int numchans, double samplerate, double sourceposition)"},"title":"Xen_GetMediaSourceSamples","chapters":["Audio Management","Source Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get interleaved audio data from media source","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension","audio preview"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"PCM_source source","description":"a PCM_source-created using a mediafile/item "},{"identifier":"number gain","description":"the volume of the previewed pcm_source; 0, no sound; 10, maximum volume"},{"identifier":"boolean loop","description":"true, loop the PCM_source; false, play only once"},{"identifier":"optional integer outputchanindexIn","description":"the output channel; for multichannel files, this is the first hardware-output-channel for e.g. left channel of a stereo file"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Xen_StartSourcePreview","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"source","type":"PCM_source"},{"identifier":"gain","type":"number"},{"identifier":"loop","type":"boolean"},{"isOptional":true,"type":"integer","identifier":"outputchanindexIn"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"Xen_StartSourcePreview\""},{"type_name":"PCM_source","identifier":"source"},{"identifier":"gain"},{"type_name":"bool","identifier":"loop"},{"identifier":"outputchanindexIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"5.974","JS":"0.991"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer id","description":"the id of this preview, which can be used to stop it again"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.Xen_StartSourcePreview(PCM_source source, number gain, boolean loop, optional integer outputchanindexIn)","eel":"int extension_api(\"Xen_StartSourcePreview\", PCM_source source, gain, bool loop, optional int outputchanindexIn)","python":"(Int retval, PCM_source source, Float gain, Boolean loop, Int outputchanindexInOptional) = Xen_StartSourcePreview(source, gain, loop, outputchanindexInOptional)","cpp":"int Xen_StartSourcePreview(PCM_source* source, double gain, bool loop, int* outputchanindexInOptional)"},"title":"Xen_StartSourcePreview","chapters":["Audio Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Start audio preview of a PCM\\_source, which can be created using functions like [PCM\\_Source\\_CreateFromFile](#PCM_Source_CreateFromFile)\n\nReturns id of a preview handle that can be provided to [Xen\\_StopSourcePreview](#Xen_StopSourcePreview).\n\nIf the given PCM\\_source does not belong to an existing MediaItem/Take, it will be deleted by the preview system when the preview is stopped.\n\nYou can preview more than one file at the same time.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["js-extension","audio preview"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer preview_id","description":"the id of the running preview; -1, stops all running previews"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Xen_StopSourcePreview","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"preview_id","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"Xen_StopSourcePreview\""},{"type_name":"int","identifier":"preview_id"}]}},"requires":{"Reaper":"5.974","JS":"0.986"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.Xen_StopSourcePreview(integer preview_id)","eel":"int extension_api(\"Xen_StopSourcePreview\", int preview_id)","python":"Int retval = Xen_StopSourcePreview(Int preview_id)","cpp":"int Xen_StopSourcePreview(int preview_id)"},"title":"Xen_StopSourcePreview","chapters":["Audio Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Stop audio preview. \n\nTo stop all running previews, set id=-1","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["ReaLlm"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"optional integer paramIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Llm_Do","return_values":[],"parameters":[{"isOptional":true,"type":"integer","identifier":"paramIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"Llm_Do\""},{"identifier":"paramIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.23","ReaLlm":"0.4.1"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Llm_Do(optional integer paramIn)","eel":"extension_api(\"Llm_Do\", optional int paramIn)","python":"Llm_Do(int* paramInOptional)","cpp":"void Llm_Do(int* paramInOptional)"},"title":"Llm_Do","chapters":["ReaLlm"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Called with parameter value 1 executes one ReaLlm cycle. E.g. for running ReaLlm on custom timer, or deferred. 0 or nothing performs shutdown. Disarming/disabling all monitored inputs and calling with parameter value 1 equals to shutdown.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["ReaLlm"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"string parmname","description":""},{"identifier":"string buf","description":""},{"identifier":"MediaTrack trIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Llm_Get","return_values":[{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"parmname","type":"string"},{"identifier":"buf","type":"string"},{"identifier":"trIn","type":"MediaTrack"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"Llm_Get\""},{"identifier":"\"parmname\""},{"identifier":"#buf"},{"type_name":"MediaTrack","identifier":"trIn"}]}},"requires":{"Reaper":"6.23","ReaLlm":"0.4.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string buf","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string buf = reaper.Llm_Get(string parmname, string buf, MediaTrack trIn)","eel":"extension_api(\"Llm_Get\", \"parmname\", #buf, MediaTrack trIn)","python":"void void = Llm_Get(const char* parmname, char* bufOutNeedBig, int bufOutNeedBig_sz, MediaTrack* trInOptional)","cpp":"void Llm_Get(const char* parmname, char* bufOutNeedBig, int bufOutNeedBig_sz, MediaTrack* trInOptional)"},"title":"Llm_Get","chapters":["ReaLlm"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get ReaLlm information string. Zero-based indices. Master track index -1. Optional MediaTrack* tr gets results relative to tr. Each line (newline '\\n' separated) represents entry. Tracks are separated with ';'. FX are listed after ':' separated with ','.\nGRAPH : Mixer routings as network graph in format \"node;neighborhood\\n\" where node is track, and neighborhood is group of tracks in format \"track;tr#1;tr#2...\\n\". Or as \"parent;children\\n\" where first field is parent and rest are children. Or as multiply linked list where first field is node and rest are links. E.g. \"7;1;-1;\\n\" would mean \"8th track is connected to 2nd track and Master track.\"\nPDCLATENCY : Latency in samples.\nPDCLIMIT : Limit in samples.\nREALLM or STATE : Current state of ReaLlm as approach vektors with disabled FX in format: \"begin:disabled fx,...;next:fx,...;end:fx,...;\\n.\" E.g. \"3:1,2;0;-1:0\\n\" would be: 4th track, fx#2 and #3 disabled => 1st track, nofx disabled => Master track, fx#1 disabled.\nSAFE : 'Safed' plugins as \"track#:fx#\\n\" pairs.\nVECTOR : Same as REALLM without FX information. Faster.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["ReaLlm"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string parmname","description":""},{"identifier":"string bufIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Llm_Set","return_values":[],"parameters":[{"identifier":"parmname","type":"string"},{"identifier":"bufIn","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"Llm_Set\""},{"identifier":"\"parmname\""},{"identifier":"\"bufIn\""}]}},"requires":{"Reaper":"6.23","ReaLlm":"0.4.1"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Llm_Set(string parmname, string bufIn)","eel":"extension_api(\"Llm_Set\", \"parmname\", \"bufIn\")","python":"Llm_Set(const char* parmname, const char* bufIn)","cpp":"void Llm_Set(const char* parmname, const char* bufIn)"},"title":"Llm_Set","chapters":["ReaLlm"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set ReaLlm parameters.\nPDCLIMIT : PDC latency limit in audio blocks/buffers, e.g. \"1.5\".\nMONITORINGFX : Use any non-empty string to include Monitoring FX. E.g. \"true\".\nPARAMCHANGE : Instead of bypassing, changes FX parameter between val1 (low latency) and val2 (original). Use bufIn string format 'fx_name,param_index,val1,val2'.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier comboBoxHwnd","description":""},{"identifier":"integer startId","description":""},{"identifier":"string string","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_CB_FindString","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"comboBoxHwnd","type":"identifier"},{"identifier":"startId","type":"integer"},{"identifier":"string","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_Win32_CB_FindString\""},{"type_name":"void*","identifier":"comboBoxHwnd"},{"type_name":"int","identifier":"startId"},{"identifier":"\"string\""}]}},"requires":{"Reaper":"5.974","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.BR_Win32_CB_FindString(identifier comboBoxHwnd, integer startId, string string)","eel":"int extension_api(\"BR_Win32_CB_FindString\", void* comboBoxHwnd, int startId, \"string\")","python":"Int retval = BR_Win32_CB_FindString(void comboBoxHwnd, Int startId, String string)","cpp":"int BR_Win32_CB_FindString(void* comboBoxHwnd, int startId, const char* string)"},"title":"BR_Win32_CB_FindString","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API ComboBox_FindString().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier comboBoxHwnd","description":""},{"identifier":"integer startId","description":""},{"identifier":"string string","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_CB_FindStringExact","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"comboBoxHwnd","type":"identifier"},{"identifier":"startId","type":"integer"},{"identifier":"string","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_Win32_CB_FindStringExact\""},{"type_name":"void*","identifier":"comboBoxHwnd"},{"type_name":"int","identifier":"startId"},{"identifier":"\"string\""}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.BR_Win32_CB_FindStringExact(identifier comboBoxHwnd, integer startId, string string)","eel":"int extension_api(\"BR_Win32_CB_FindStringExact\", void* comboBoxHwnd, int startId, \"string\")","python":"Int retval = BR_Win32_CB_FindStringExact(void comboBoxHwnd, Int startId, String string)","cpp":"int BR_Win32_CB_FindStringExact(void* comboBoxHwnd, int startId, const char* string)"},"title":"BR_Win32_CB_FindStringExact","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API ComboBox_FindStringExact().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier hwnd","description":""},{"identifier":"integer xIn","description":""},{"identifier":"integer yIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_ClientToScreen","return_values":[{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"}],"parameters":[{"identifier":"hwnd","type":"identifier"},{"identifier":"xIn","type":"integer"},{"identifier":"yIn","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"BR_Win32_ClientToScreen\""},{"type_name":"void*","identifier":"hwnd"},{"type_name":"int","identifier":"xIn"},{"type_name":"int","identifier":"yIn"},{"type_name":"int","identifier":"&x"},{"type_name":"int","identifier":"&y"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer x","description":""},{"identifier":"integer y","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer x, integer y = reaper.BR_Win32_ClientToScreen(identifier hwnd, integer xIn, integer yIn)","eel":"extension_api(\"BR_Win32_ClientToScreen\", void* hwnd, int xIn, int yIn, int &x, int &y)","python":"(void hwnd, Int xIn, Int yIn, Int xOut, Int yOut) = BR_Win32_ClientToScreen(hwnd, xIn, yIn, xOut, yOut)","cpp":"void BR_Win32_ClientToScreen(void* hwnd, int xIn, int yIn, int* xOut, int* yOut)"},"title":"BR_Win32_ClientToScreen","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API ClientToScreen().","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"string hwndParent","description":""},{"identifier":"string hwndChildAfter","description":""},{"identifier":"string className","description":""},{"identifier":"string windowName","description":""},{"identifier":"boolean searchClass","description":""},{"identifier":"boolean searchName","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_FindWindowEx","return_values":[{"identifier":"hwnd","type":"identifier"}],"parameters":[{"identifier":"hwndParent","type":"string"},{"identifier":"hwndChildAfter","type":"string"},{"identifier":"className","type":"string"},{"identifier":"windowName","type":"string"},{"identifier":"searchClass","type":"boolean"},{"identifier":"searchName","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"BR_Win32_FindWindowEx\""},{"identifier":"\"hwndParent\""},{"identifier":"\"hwndChildAfter\""},{"identifier":"\"className\""},{"identifier":"\"windowName\""},{"type_name":"bool","identifier":"searchClass"},{"type_name":"bool","identifier":"searchName"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier hwnd = reaper.BR_Win32_FindWindowEx(string hwndParent, string hwndChildAfter, string className, string windowName, boolean searchClass, boolean searchName)","eel":"void* extension_api(\"BR_Win32_FindWindowEx\", \"hwndParent\", \"hwndChildAfter\", \"className\", \"windowName\", bool searchClass, bool searchName)","python":"identifier hwnd = BR_Win32_FindWindowEx(String hwndParent, String hwndChildAfter, String className, String windowName, Boolean searchClass, Boolean searchName)","cpp":"void* BR_Win32_FindWindowEx(const char* hwndParent, const char* hwndChildAfter, const char* className, const char* windowName, bool searchClass, bool searchName)"},"title":"BR_Win32_FindWindowEx","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Equivalent to win32 API FindWindowEx(). Since ReaScript doesn't allow passing NULL (None in Python, nil in Lua etc...) parameters, to search by supplied class or name set searchClass and searchName accordingly. HWND parameters should be passed as either \"0\" to signify NULL or as string obtained from [BR\\_Win32_HwndToString](#BR_Win32_HwndToString).\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer lParam","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_GET_X_LPARAM","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"lParam","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_Win32_GET_X_LPARAM\""},{"type_name":"int","identifier":"lParam"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.BR_Win32_GET_X_LPARAM(integer lParam)","eel":"int extension_api(\"BR_Win32_GET_X_LPARAM\", int lParam)","python":"Int retval = BR_Win32_GET_X_LPARAM(Int lParam)","cpp":"int BR_Win32_GET_X_LPARAM(int lParam)"},"title":"BR_Win32_GET_X_LPARAM","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API GET_X_LPARAM().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer lParam","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_GET_Y_LPARAM","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"lParam","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_Win32_GET_Y_LPARAM\""},{"type_name":"int","identifier":"lParam"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.BR_Win32_GET_Y_LPARAM(integer lParam)","eel":"int extension_api(\"BR_Win32_GET_Y_LPARAM\", int lParam)","python":"Int retval = BR_Win32_GET_Y_LPARAM(Int lParam)","cpp":"int BR_Win32_GET_Y_LPARAM(int lParam)"},"title":"BR_Win32_GET_Y_LPARAM","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API GET_Y_LPARAM().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string constantName","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_GetConstant","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"constantName","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_Win32_GetConstant\""},{"identifier":"\"constantName\""}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.BR_Win32_GetConstant(string constantName)","eel":"int extension_api(\"BR_Win32_GetConstant\", \"constantName\")","python":"Int retval = BR_Win32_GetConstant(String constantName)","cpp":"int BR_Win32_GetConstant(const char* constantName)"},"title":"BR_Win32_GetConstant","chapters":["Api-Helper-Functions","Address/Datatype Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Returns various constants needed for BR_Win32 functions.\nSupported constants are:\nCB_ERR, CB_GETCOUNT, CB_GETCURSEL, CB_SETCURSEL\nEM_SETSEL\nGW_CHILD, GW_HWNDFIRST, GW_HWNDLAST, GW_HWNDNEXT, GW_HWNDPREV, GW_OWNER\nGWL_STYLE\nSW_HIDE, SW_MAXIMIZE, SW_SHOW, SW_SHOWMINIMIZED, SW_SHOWNA, SW_SHOWNOACTIVATE, SW_SHOWNORMAL\nSWP_FRAMECHANGED, SWP_FRAMECHANGED, SWP_NOMOVE, SWP_NOOWNERZORDER, SWP_NOSIZE, SWP_NOZORDER\nVK_DOWN, VK_UP\nWM_CLOSE, WM_KEYDOWN\nWS_MAXIMIZE, WS_OVERLAPPEDWINDOW\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.BR_Win32_GetCursorPos","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"BR_Win32_GetCursorPos\""},{"type_name":"int","identifier":"&x"},{"type_name":"int","identifier":"&y"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer x","description":""},{"identifier":"integer y","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer x, integer y = reaper.BR_Win32_GetCursorPos()","eel":"bool extension_api(\"BR_Win32_GetCursorPos\", int &x, int &y)","python":"(Boolean retval, Int xOut, Int yOut) = BR_Win32_GetCursorPos(xOut, yOut)","cpp":"bool BR_Win32_GetCursorPos(int* xOut, int* yOut)"},"title":"BR_Win32_GetCursorPos","chapters":["User Interface","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API GetCursorPos().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.BR_Win32_GetFocus","return_values":[{"identifier":"hwnd_focus","type":"identifier"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"BR_Win32_GetFocus\""}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd_focus","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier hwnd_focus = reaper.BR_Win32_GetFocus()","eel":"void* extension_api(\"BR_Win32_GetFocus\")","python":"identifier hwnd_focus = BR_Win32_GetFocus()","cpp":"void* BR_Win32_GetFocus()"},"title":"BR_Win32_GetFocus","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API GetFocus().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.BR_Win32_GetForegroundWindow","return_values":[{"identifier":"hwnd_foreground","type":"identifier"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"BR_Win32_GetForegroundWindow\""}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd_foreground","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier hwnd_foreground = reaper.BR_Win32_GetForegroundWindow()","eel":"void* extension_api(\"BR_Win32_GetForegroundWindow\")","python":"identifier hwnd_foreground = BR_Win32_GetForegroundWindow()","cpp":"void* BR_Win32_GetForegroundWindow()"},"title":"BR_Win32_GetForegroundWindow","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API GetForegroundWindow().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.BR_Win32_GetMainHwnd","return_values":[{"identifier":"hwnd_main","type":"identifier"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"BR_Win32_GetMainHwnd\""}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd_main","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier hwnd_main = reaper.BR_Win32_GetMainHwnd()","eel":"void* extension_api(\"BR_Win32_GetMainHwnd\")","python":"identifier hwnd_main = BR_Win32_GetMainHwnd()","cpp":"void* BR_Win32_GetMainHwnd()"},"title":"BR_Win32_GetMainHwnd","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Alternative to [GetMainHwnd](#GetMainHwnd). REAPER seems to have problems with extensions using HWND type for exported functions so all BR_Win32 functions use void* instead of HWND type\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.BR_Win32_GetMixerHwnd","return_values":[{"identifier":"retval","type":"identifier"},{"identifier":"isDocked","type":"boolean"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"BR_Win32_GetMixerHwnd\""},{"type_name":"bool","identifier":"&isDocked"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier retval","description":""},{"identifier":"boolean isDocked","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier retval, boolean isDocked = reaper.BR_Win32_GetMixerHwnd()","eel":"void* extension_api(\"BR_Win32_GetMixerHwnd\", bool &isDocked)","python":"(void retval, Boolean isDockedOut) = BR_Win32_GetMixerHwnd(isDockedOut)","cpp":"void* BR_Win32_GetMixerHwnd(bool* isDockedOut)"},"title":"BR_Win32_GetMixerHwnd","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Get mixer window HWND. isDockedOut will be set to true if mixer is docked\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"boolean workingAreaOnly","description":""},{"identifier":"integer leftIn","description":""},{"identifier":"integer topIn","description":""},{"identifier":"integer rightIn","description":""},{"identifier":"integer bottomIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_GetMonitorRectFromRect","return_values":[{"identifier":"left","type":"integer"},{"identifier":"top","type":"integer"},{"identifier":"right","type":"integer"},{"identifier":"bottom","type":"integer"}],"parameters":[{"identifier":"workingAreaOnly","type":"boolean"},{"identifier":"leftIn","type":"integer"},{"identifier":"topIn","type":"integer"},{"identifier":"rightIn","type":"integer"},{"identifier":"bottomIn","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"BR_Win32_GetMonitorRectFromRect\""},{"type_name":"bool","identifier":"workingAreaOnly"},{"type_name":"int","identifier":"leftIn"},{"type_name":"int","identifier":"topIn"},{"type_name":"int","identifier":"rightIn"},{"type_name":"int","identifier":"bottomIn"},{"type_name":"int","identifier":"&left"},{"type_name":"int","identifier":"&top"},{"type_name":"int","identifier":"&right"},{"type_name":"int","identifier":"&bottom"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"integer left","description":""},{"identifier":"integer top","description":""},{"identifier":"integer right","description":""},{"identifier":"integer bottom","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer left, integer top, integer right, integer bottom = reaper.BR_Win32_GetMonitorRectFromRect(boolean workingAreaOnly, integer leftIn, integer topIn, integer rightIn, integer bottomIn)","eel":"extension_api(\"BR_Win32_GetMonitorRectFromRect\", bool workingAreaOnly, int leftIn, int topIn, int rightIn, int bottomIn, int &left, int &top, int &right, int &bottom)","python":"(Boolean workingAreaOnly, Int leftIn, Int topIn, Int rightIn, Int bottomIn, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = BR_Win32_GetMonitorRectFromRect(workingAreaOnly, leftIn, topIn, rightIn, bottomIn, leftOut, topOut, rightOut, bottomOut)","cpp":"void BR_Win32_GetMonitorRectFromRect(bool workingAreaOnly, int leftIn, int topIn, int rightIn, int bottomIn, int* leftOut, int* topOut, int* rightOut, int* bottomOut)"},"title":"BR_Win32_GetMonitorRectFromRect","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Get coordinates for screen which is nearest to supplied coordinates. Pass workingAreaOnly as true to get screen coordinates excluding taskbar (or menu bar on OSX).\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_GetParent","return_values":[{"identifier":"hwnd_parent","type":"identifier"}],"parameters":[{"identifier":"hwnd","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"BR_Win32_GetParent\""},{"type_name":"void*","identifier":"hwnd"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd_parent","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier hwnd_parent = reaper.BR_Win32_GetParent(identifier hwnd)","eel":"void* extension_api(\"BR_Win32_GetParent\", void* hwnd)","python":"identifier hwnd_parent = BR_Win32_GetParent(void hwnd)","cpp":"void* BR_Win32_GetParent(void* hwnd)"},"title":"BR_Win32_GetParent","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API GetParent().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier hwnd","description":""},{"identifier":"integer cmd","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_GetWindow","return_values":[{"identifier":"hwnd","type":"identifier"}],"parameters":[{"identifier":"hwnd","type":"identifier"},{"identifier":"cmd","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"BR_Win32_GetWindow\""},{"type_name":"void*","identifier":"hwnd"},{"type_name":"int","identifier":"cmd"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier hwnd = reaper.BR_Win32_GetWindow(identifier hwnd, integer cmd)","eel":"void* extension_api(\"BR_Win32_GetWindow\", void* hwnd, int cmd)","python":"identifier hwnd = BR_Win32_GetWindow(void hwnd, Int cmd)","cpp":"void* BR_Win32_GetWindow(void* hwnd, int cmd)"},"title":"BR_Win32_GetWindow","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API GetWindow().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier hwnd","description":""},{"identifier":"integer index","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_GetWindowLong","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"hwnd","type":"identifier"},{"identifier":"index","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_Win32_GetWindowLong\""},{"type_name":"void*","identifier":"hwnd"},{"type_name":"int","identifier":"index"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.BR_Win32_GetWindowLong(identifier hwnd, integer index)","eel":"int extension_api(\"BR_Win32_GetWindowLong\", void* hwnd, int index)","python":"Int retval = BR_Win32_GetWindowLong(void hwnd, Int index)","cpp":"int BR_Win32_GetWindowLong(void* hwnd, int index)"},"title":"BR_Win32_GetWindowLong","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API GetWindowLong().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_GetWindowRect","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"left","type":"integer"},{"identifier":"top","type":"integer"},{"identifier":"right","type":"integer"},{"identifier":"bottom","type":"integer"}],"parameters":[{"identifier":"hwnd","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"BR_Win32_GetWindowRect\""},{"type_name":"void*","identifier":"hwnd"},{"type_name":"int","identifier":"&left"},{"type_name":"int","identifier":"&top"},{"type_name":"int","identifier":"&right"},{"type_name":"int","identifier":"&bottom"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer left","description":""},{"identifier":"integer top","description":""},{"identifier":"integer right","description":""},{"identifier":"integer bottom","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer left, integer top, integer right, integer bottom = reaper.BR_Win32_GetWindowRect(identifier hwnd)","eel":"bool extension_api(\"BR_Win32_GetWindowRect\", void* hwnd, int &left, int &top, int &right, int &bottom)","python":"(Boolean retval, void hwnd, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = BR_Win32_GetWindowRect(hwnd, leftOut, topOut, rightOut, bottomOut)","cpp":"bool BR_Win32_GetWindowRect(void* hwnd, int* leftOut, int* topOut, int* rightOut, int* bottomOut)"},"title":"BR_Win32_GetWindowRect","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API GetWindowRect().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_GetWindowText","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"text","type":"string"}],"parameters":[{"identifier":"hwnd","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_Win32_GetWindowText\""},{"type_name":"void*","identifier":"hwnd"},{"identifier":"#text"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":""},{"identifier":"string text","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, string text = reaper.BR_Win32_GetWindowText(identifier hwnd)","eel":"int extension_api(\"BR_Win32_GetWindowText\", void* hwnd, #text)","python":"(Int retval, void hwnd, String textOut, Int textOut_sz) = BR_Win32_GetWindowText(hwnd, textOut, textOut_sz)","cpp":"int BR_Win32_GetWindowText(void* hwnd, char* textOut, int textOut_sz)"},"title":"BR_Win32_GetWindowText","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API GetWindowText().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer value","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_HIBYTE","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"value","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_Win32_HIBYTE\""},{"type_name":"int","identifier":"value"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.BR_Win32_HIBYTE(integer value)","eel":"int extension_api(\"BR_Win32_HIBYTE\", int value)","python":"Int retval = BR_Win32_HIBYTE(Int value)","cpp":"int BR_Win32_HIBYTE(int value)"},"title":"BR_Win32_HIBYTE","chapters":["Api-Helper-Functions","Address/Datatype Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API HIBYTE().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer value","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_HIWORD","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"value","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_Win32_HIWORD\""},{"type_name":"int","identifier":"value"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.BR_Win32_HIWORD(integer value)","eel":"int extension_api(\"BR_Win32_HIWORD\", int value)","python":"Int retval = BR_Win32_HIWORD(Int value)","cpp":"int BR_Win32_HIWORD(int value)"},"title":"BR_Win32_HIWORD","chapters":["Api-Helper-Functions","Address/Datatype Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API HIWORD().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_HwndToString","return_values":[{"identifier":"hwndstring","type":"string"}],"parameters":[{"identifier":"hwnd","type":"identifier"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"BR_Win32_HwndToString\""},{"type_name":"void*","identifier":"hwnd"},{"identifier":"#string"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string hwndstring","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string hwndstring = reaper.BR_Win32_HwndToString(identifier hwnd)","eel":"extension_api(\"BR_Win32_HwndToString\", void* hwnd, #string)","python":"(void hwnd, String stringOut, Int stringOut_sz) = BR_Win32_HwndToString(hwnd, stringOut, stringOut_sz)","cpp":"void BR_Win32_HwndToString(void* hwnd, char* stringOut, int stringOut_sz)"},"title":"BR_Win32_HwndToString","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Convert HWND to string. To convert string back to HWND, see [BR\\_Win32_StringToHwnd](#BR_Win32_StringToHwnd).\n\nA way to share a hwnd via extstate, which only allows strings, not binary objects.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_IsWindow","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"hwnd","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"BR_Win32_IsWindow\""},{"type_name":"void*","identifier":"hwnd"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.BR_Win32_IsWindow(identifier hwnd)","eel":"bool extension_api(\"BR_Win32_IsWindow\", void* hwnd)","python":"Boolean retval = BR_Win32_IsWindow(void hwnd)","cpp":"bool BR_Win32_IsWindow(void* hwnd)"},"title":"BR_Win32_IsWindow","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API IsWindow().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_IsWindowVisible","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"hwnd","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"BR_Win32_IsWindowVisible\""},{"type_name":"void*","identifier":"hwnd"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.BR_Win32_IsWindowVisible(identifier hwnd)","eel":"bool extension_api(\"BR_Win32_IsWindowVisible\", void* hwnd)","python":"Boolean retval = BR_Win32_IsWindowVisible(void hwnd)","cpp":"bool BR_Win32_IsWindowVisible(void* hwnd)"},"title":"BR_Win32_IsWindowVisible","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API IsWindowVisible().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer value","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_LOBYTE","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"value","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_Win32_LOBYTE\""},{"type_name":"int","identifier":"value"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.BR_Win32_LOBYTE(integer value)","eel":"int extension_api(\"BR_Win32_LOBYTE\", int value)","python":"Int retval = BR_Win32_LOBYTE(Int value)","cpp":"int BR_Win32_LOBYTE(int value)"},"title":"BR_Win32_LOBYTE","chapters":["Api-Helper-Functions","Address/Datatype Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API LOBYTE().\n\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer value","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_LOWORD","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"value","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_Win32_LOWORD\""},{"type_name":"int","identifier":"value"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.BR_Win32_LOWORD(integer value)","eel":"int extension_api(\"BR_Win32_LOWORD\", int value)","python":"Int retval = BR_Win32_LOWORD(Int value)","cpp":"int BR_Win32_LOWORD(int value)"},"title":"BR_Win32_LOWORD","chapters":["Api-Helper-Functions","Address/Datatype Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API LOWORD().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer low","description":""},{"identifier":"integer high","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_MAKELONG","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"low","type":"integer"},{"identifier":"high","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_Win32_MAKELONG\""},{"type_name":"int","identifier":"low"},{"type_name":"int","identifier":"high"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.BR_Win32_MAKELONG(integer low, integer high)","eel":"int extension_api(\"BR_Win32_MAKELONG\", int low, int high)","python":"Int retval = BR_Win32_MAKELONG(Int low, Int high)","cpp":"int BR_Win32_MAKELONG(int low, int high)"},"title":"BR_Win32_MAKELONG","chapters":["Api-Helper-Functions","Address/Datatype Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API MAKELONG().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer low","description":""},{"identifier":"integer high","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_MAKELPARAM","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"low","type":"integer"},{"identifier":"high","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_Win32_MAKELPARAM\""},{"type_name":"int","identifier":"low"},{"type_name":"int","identifier":"high"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.BR_Win32_MAKELPARAM(integer low, integer high)","eel":"int extension_api(\"BR_Win32_MAKELPARAM\", int low, int high)","python":"Int retval = BR_Win32_MAKELPARAM(Int low, Int high)","cpp":"int BR_Win32_MAKELPARAM(int low, int high)"},"title":"BR_Win32_MAKELPARAM","chapters":["Api-Helper-Functions","Address/Datatype Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API MAKELPARAM().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer low","description":""},{"identifier":"integer high","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_MAKELRESULT","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"low","type":"integer"},{"identifier":"high","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_Win32_MAKELRESULT\""},{"type_name":"int","identifier":"low"},{"type_name":"int","identifier":"high"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.BR_Win32_MAKELRESULT(integer low, integer high)","eel":"int extension_api(\"BR_Win32_MAKELRESULT\", int low, int high)","python":"Int retval = BR_Win32_MAKELRESULT(Int low, Int high)","cpp":"int BR_Win32_MAKELRESULT(int low, int high)"},"title":"BR_Win32_MAKELRESULT","chapters":["Api-Helper-Functions","Address/Datatype Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API MAKELRESULT().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer low","description":""},{"identifier":"integer high","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_MAKEWORD","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"low","type":"integer"},{"identifier":"high","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_Win32_MAKEWORD\""},{"type_name":"int","identifier":"low"},{"type_name":"int","identifier":"high"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.BR_Win32_MAKEWORD(integer low, integer high)","eel":"int extension_api(\"BR_Win32_MAKEWORD\", int low, int high)","python":"Int retval = BR_Win32_MAKEWORD(Int low, Int high)","cpp":"int BR_Win32_MAKEWORD(int low, int high)"},"title":"BR_Win32_MAKEWORD","chapters":["Api-Helper-Functions","Address/Datatype Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API MAKEWORD().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer low","description":""},{"identifier":"integer high","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_MAKEWPARAM","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"low","type":"integer"},{"identifier":"high","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_Win32_MAKEWPARAM\""},{"type_name":"int","identifier":"low"},{"type_name":"int","identifier":"high"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.BR_Win32_MAKEWPARAM(integer low, integer high)","eel":"int extension_api(\"BR_Win32_MAKEWPARAM\", int low, int high)","python":"Int retval = BR_Win32_MAKEWPARAM(Int low, Int high)","cpp":"int BR_Win32_MAKEWPARAM(int low, int high)"},"title":"BR_Win32_MAKEWPARAM","chapters":["Api-Helper-Functions","Address/Datatype Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API MAKEWPARAM().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.BR_Win32_MIDIEditor_GetActive","return_values":[{"identifier":"hwnd_active_midi_ed","type":"identifier"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"BR_Win32_MIDIEditor_GetActive\""}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd_active_midi_ed","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier hwnd_active_midi_ed = reaper.BR_Win32_MIDIEditor_GetActive()","eel":"void* extension_api(\"BR_Win32_MIDIEditor_GetActive\")","python":"identifier hwnd_active_midi_ed = BR_Win32_MIDIEditor_GetActive()","cpp":"void* BR_Win32_MIDIEditor_GetActive()"},"title":"BR_Win32_MIDIEditor_GetActive","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Alternative to [MIDIEditor\\_GetActive](#MIDIEditor_GetActive). REAPER seems to have problems with extensions using HWND type for exported functions so all BR\\_Win32 functions use void* instead of HWND type.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier hwnd","description":""},{"identifier":"integer xIn","description":""},{"identifier":"integer yIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_ScreenToClient","return_values":[{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"}],"parameters":[{"identifier":"hwnd","type":"identifier"},{"identifier":"xIn","type":"integer"},{"identifier":"yIn","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"BR_Win32_ScreenToClient\""},{"type_name":"void*","identifier":"hwnd"},{"type_name":"int","identifier":"xIn"},{"type_name":"int","identifier":"yIn"},{"type_name":"int","identifier":"&x"},{"type_name":"int","identifier":"&y"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer x","description":""},{"identifier":"integer y","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer x, integer y = reaper.BR_Win32_ScreenToClient(identifier hwnd, integer xIn, integer yIn)","eel":"extension_api(\"BR_Win32_ScreenToClient\", void* hwnd, int xIn, int yIn, int &x, int &y)","python":"(void hwnd, Int xIn, Int yIn, Int xOut, Int yOut) = BR_Win32_ScreenToClient(hwnd, xIn, yIn, xOut, yOut)","cpp":"void BR_Win32_ScreenToClient(void* hwnd, int xIn, int yIn, int* xOut, int* yOut)"},"title":"BR_Win32_ScreenToClient","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API ClientToScreen().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"identifier hwnd","description":""},{"identifier":"integer msg","description":""},{"identifier":"integer lParam","description":""},{"identifier":"integer wParam","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_SendMessage","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"hwnd","type":"identifier"},{"identifier":"msg","type":"integer"},{"identifier":"lParam","type":"integer"},{"identifier":"wParam","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_Win32_SendMessage\""},{"type_name":"void*","identifier":"hwnd"},{"type_name":"int","identifier":"msg"},{"type_name":"int","identifier":"lParam"},{"type_name":"int","identifier":"wParam"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.BR_Win32_SendMessage(identifier hwnd, integer msg, integer lParam, integer wParam)","eel":"int extension_api(\"BR_Win32_SendMessage\", void* hwnd, int msg, int lParam, int wParam)","python":"Int retval = BR_Win32_SendMessage(void hwnd, Int msg, Int lParam, Int wParam)","cpp":"int BR_Win32_SendMessage(void* hwnd, int msg, int lParam, int wParam)"},"title":"BR_Win32_SendMessage","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API SendMessage().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_SetFocus","return_values":[{"identifier":"hwnd_focus","type":"identifier"}],"parameters":[{"identifier":"hwnd","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"BR_Win32_SetFocus\""},{"type_name":"void*","identifier":"hwnd"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd_focus","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier hwnd_focus = reaper.BR_Win32_SetFocus(identifier hwnd)","eel":"void* extension_api(\"BR_Win32_SetFocus\", void* hwnd)","python":"identifier hwnd_focus = BR_Win32_SetFocus(void hwnd)","cpp":"void* BR_Win32_SetFocus(void* hwnd)"},"title":"BR_Win32_SetFocus","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API SetFocus().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_SetForegroundWindow","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"hwnd","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_Win32_SetForegroundWindow\""},{"type_name":"void*","identifier":"hwnd"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.BR_Win32_SetForegroundWindow(identifier hwnd)","eel":"int extension_api(\"BR_Win32_SetForegroundWindow\", void* hwnd)","python":"Int retval = BR_Win32_SetForegroundWindow(void hwnd)","cpp":"int BR_Win32_SetForegroundWindow(void* hwnd)"},"title":"BR_Win32_SetForegroundWindow","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API SetForegroundWindow().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"identifier hwnd","description":""},{"identifier":"integer index","description":""},{"identifier":"integer newLong","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_SetWindowLong","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"hwnd","type":"identifier"},{"identifier":"index","type":"integer"},{"identifier":"newLong","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"BR_Win32_SetWindowLong\""},{"type_name":"void*","identifier":"hwnd"},{"type_name":"int","identifier":"index"},{"type_name":"int","identifier":"newLong"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.BR_Win32_SetWindowLong(identifier hwnd, integer index, integer newLong)","eel":"int extension_api(\"BR_Win32_SetWindowLong\", void* hwnd, int index, int newLong)","python":"Int retval = BR_Win32_SetWindowLong(void hwnd, Int index, Int newLong)","cpp":"int BR_Win32_SetWindowLong(void* hwnd, int index, int newLong)"},"title":"BR_Win32_SetWindowLong","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API SetWindowLong().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"identifier hwnd","description":""},{"identifier":"string hwndInsertAfter","description":""},{"identifier":"integer x","description":""},{"identifier":"integer y","description":""},{"identifier":"integer width","description":""},{"identifier":"integer height","description":""},{"identifier":"integer flags","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_SetWindowPos","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"hwnd","type":"identifier"},{"identifier":"hwndInsertAfter","type":"string"},{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"},{"identifier":"width","type":"integer"},{"identifier":"height","type":"integer"},{"identifier":"flags","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"BR_Win32_SetWindowPos\""},{"type_name":"void*","identifier":"hwnd"},{"identifier":"\"hwndInsertAfter\""},{"type_name":"int","identifier":"x"},{"type_name":"int","identifier":"y"},{"type_name":"int","identifier":"width"},{"type_name":"int","identifier":"height"},{"type_name":"int","identifier":"flags"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.BR_Win32_SetWindowPos(identifier hwnd, string hwndInsertAfter, integer x, integer y, integer width, integer height, integer flags)","eel":"bool extension_api(\"BR_Win32_SetWindowPos\", void* hwnd, \"hwndInsertAfter\", int x, int y, int width, int height, int flags)","python":"Boolean retval = BR_Win32_SetWindowPos(void hwnd, String hwndInsertAfter, Int x, Int y, Int width, Int height, Int flags)","cpp":"bool BR_Win32_SetWindowPos(void* hwnd, const char* hwndInsertAfter, int x, int y, int width, int height, int flags)"},"title":"BR_Win32_SetWindowPos","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Equivalent to win32 API SetWindowPos().\nhwndInsertAfter may be a string: \"HWND\\_BOTTOM\", \"HWND\\_NOTOPMOST\", \"HWND\\_TOP\", \"HWND\\_TOPMOST\" or a string obtained with [BR\\_Win32_HwndToString](#BR_Win32_HwndToString).\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier hwnd","description":""},{"identifier":"integer cmdShow","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_ShowWindow","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"hwnd","type":"identifier"},{"identifier":"cmdShow","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"BR_Win32_ShowWindow\""},{"type_name":"void*","identifier":"hwnd"},{"type_name":"int","identifier":"cmdShow"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.BR_Win32_ShowWindow(identifier hwnd, integer cmdShow)","eel":"bool extension_api(\"BR_Win32_ShowWindow\", void* hwnd, int cmdShow)","python":"Boolean retval = BR_Win32_ShowWindow(void hwnd, Int cmdShow)","cpp":"bool BR_Win32_ShowWindow(void* hwnd, int cmdShow)"},"title":"BR_Win32_ShowWindow","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API ShowWindow().\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string string","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_StringToHwnd","return_values":[{"identifier":"hwnd","type":"identifier"}],"parameters":[{"identifier":"string","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"BR_Win32_StringToHwnd\""},{"identifier":"\"string\""}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd","description":""}],"prog_lang":"*"},"functioncall":{"lua":"identifier hwnd = reaper.BR_Win32_StringToHwnd(string string)","eel":"void* extension_api(\"BR_Win32_StringToHwnd\", \"string\")","python":"identifier hwnd = BR_Win32_StringToHwnd(String string)","cpp":"void* BR_Win32_StringToHwnd(const char* string)"},"title":"BR_Win32_StringToHwnd","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"[BR] Convert string to HWND. To convert HWND back to string, see [BR\\_Win32\\_HwndToString](BR_Win32_HwndToString).\n\nA way to share a hwnd via extstate, which only allows strings, not binary objects.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer x","description":"x-coordinate of the point to look for possible hwnd"},{"identifier":"integer y","description":"y-coordinate of the point to look for possible hwnd"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.BR_Win32_WindowFromPoint","return_values":[{"identifier":"hwnd_point","type":"identifier"}],"parameters":[{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["void*"],"parameters":[{"identifier":"\"BR_Win32_WindowFromPoint\""},{"type_name":"int","identifier":"x"},{"type_name":"int","identifier":"y"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"identifier hwnd_point","description":"the hwnd at x and y-coordinates"}],"prog_lang":"*"},"functioncall":{"lua":"identifier hwnd_point = reaper.BR_Win32_WindowFromPoint(integer x, integer y)","eel":"void* extension_api(\"BR_Win32_WindowFromPoint\", int x, int y)","python":"identifier hwnd_point = BR_Win32_WindowFromPoint(Int x, Int y)","cpp":"void* BR_Win32_WindowFromPoint(int x, int y)"},"title":"BR_Win32_WindowFromPoint","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"[BR] Equivalent to win32 API WindowFromPoint().","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws","audio preview"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PCM_source src","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_CreatePreview","return_values":[{"identifier":"retval","type":"CF_Preview"}],"parameters":[{"identifier":"source","type":"PCM_source"}]},"eel":{"method_name":"extension_api","return_values":["CF_Preview"],"parameters":[{"identifier":"\"CF_CreatePreview\""},{"type_name":"PCM_source","identifier":"source"}]}},"requires":{"Reaper":"5.965","SWS":"2.13.2.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"CF_Preview retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"CF_Preview retval = reaper.CF_CreatePreview(PCM_source source)","eel":"CF_Preview extension_api(\"CF_CreatePreview\", PCM_source source)","python":"CF_Preview CF_CreatePreview(PCM_source source)","cpp":"CF_Preview* CF_CreatePreview(PCM_source* source)"},"title":"CF_CreatePreview","chapters":["Audio Management","Source Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Create a new preview object. Does not take ownership of the source (don't forget to destroy it unless it came from a take!). See CF_Preview_Play and the others CF_Preview_* functions.\n\nThe preview object is automatically destroyed at the end of a defer cycle if at least one of these conditions are met:\n- playback finished\n- playback was not started using CF_Preview_Play\n- the output track no longer exists","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"PCM_source src","description":""},{"identifier":"integer index","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_EnumMediaSourceCues","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"time","type":"number"},{"identifier":"endTime","type":"number"},{"identifier":"isRegion","type":"boolean"},{"identifier":"name","type":"string"},{"identifier":"isChapter","type":"boolean"}],"parameters":[{"identifier":"src","type":"PCM_source"},{"identifier":"index","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"CF_EnumMediaSourceCues\""},{"type_name":"PCM_source","identifier":"src"},{"type_name":"int","identifier":"index"},{"identifier":"&time"},{"identifier":"&endTime"},{"type_name":"bool","identifier":"&isRegion"},{"identifier":"#name"},{"type_name":"bool","identifier":"&isChapter"}]}},"requires":{"Reaper":"5.965","SWS":"2.13.0.0"},"return_values":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"integer retval","description":""},{"identifier":"number time","description":""},{"identifier":"number endTime","description":""},{"identifier":"boolean isRegion","description":""},{"identifier":"string name","description":""},{"identifier":"boolean isChapter","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, number time, number endTime, boolean isRegion, string name, boolean isChapter = reaper.CF_EnumMediaSourceCues(PCM_source src, integer index)","eel":"int extension_api(\"CF_EnumMediaSourceCues\", PCM_source src, int index, &time, &endTime, bool &isRegion, #name, bool &isChapter)","python":"(Int retval, PCM_source src, Int index, Float timeOut, Float endTimeOut, Boolean isRegionOut, String nameOut, Int nameOut_sz, Boolean isChapterOut) = CF_EnumMediaSourceCues(src, index, timeOut, endTimeOut, isRegionOut, nameOut, nameOut_sz, isChapterOut)","cpp":"int CF_EnumMediaSourceCues(PCM_source* src, int index, double* timeOut, double* endTimeOut, bool* isRegionOut, char* nameOut, int nameOut_sz, bool* isChapterOut)"},"title":"CF_EnumMediaSourceCues","chapters":["Audio Management","Source Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Enumerate the source's media cues. Returns the next index or 0 when finished.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"FxChain hwnd","description":""},{"identifier":"integer index","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_EnumSelectedFX","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"hwnd","type":"FxChain"},{"identifier":"index","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"CF_EnumSelectedFX\""},{"type_name":"FxChain","identifier":"hwnd"},{"type_name":"int","identifier":"index"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.CF_EnumSelectedFX(FxChain hwnd, integer index)","eel":"int extension_api(\"CF_EnumSelectedFX\", FxChain hwnd, int index)","python":"Int retval = CF_EnumSelectedFX(FxChain hwnd, Int index)","cpp":"int CF_EnumSelectedFX(FxChain* hwnd, int index)"},"title":"CF_EnumSelectedFX","chapters":["FX Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Return the index of the next selected effect in the given FX chain. Start index should be -1. Returns -1 if there are no more selected effects.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer section","description":""},{"identifier":"integer index","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_EnumerateActions","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"name","type":"string"}],"parameters":[{"identifier":"section","type":"integer"},{"identifier":"index","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"CF_EnumerateActions\""},{"type_name":"int","identifier":"section"},{"type_name":"int","identifier":"index"},{"identifier":"#name"}]}},"requires":{"Reaper":"5.965","SWS":"2.13.2.0"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":""},{"identifier":"string name","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, string name = reaper.CF_EnumerateActions(integer section, integer index)","eel":"int extension_api(\"CF_EnumerateActions\", int section, int index, #name)","python":"(Int retval, Int section, Int index, String nameOut, Int nameOut_sz) = CF_EnumerateActions(section, index, nameOut, nameOut_sz)","cpp":"int CF_EnumerateActions(int section, int index, char* nameOut, int nameOut_sz)"},"title":"CF_EnumerateActions","chapters":["Api-Helper-Functions","Actions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Deprecated, see kbd_enumerateActions (v6.71+). \n\nWrapper for the unexposed kbd_enumerateActions API function.\nMain=0, Main (alt recording)=100, MIDI Editor=32060, MIDI Event List Editor=32061, MIDI Inline Editor=32062, Media Explorer=32063","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"PCM_source src","description":""},{"identifier":"string fn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_ExportMediaSource","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"src","type":"PCM_source"},{"identifier":"fn","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"CF_ExportMediaSource\""},{"type_name":"PCM_source","identifier":"src"},{"identifier":"\"fn\""}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.CF_ExportMediaSource(PCM_source src, string fn)","eel":"bool extension_api(\"CF_ExportMediaSource\", PCM_source src, \"fn\")","python":"Boolean retval = CF_ExportMediaSource(PCM_source src, String fn)","cpp":"bool CF_ExportMediaSource(PCM_source* src, const char* fn)"},"title":"CF_ExportMediaSource","chapters":["Audio Management","Source Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Export the source to the given file (MIDI only).\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer section","description":""},{"identifier":"integer command","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_GetCommandText","return_values":[{"identifier":"str","type":"string"}],"parameters":[{"identifier":"section","type":"integer"},{"identifier":"command","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"CF_GetCommandText\""},{"identifier":"#retval"},{"type_name":"int","identifier":"section"},{"type_name":"int","identifier":"command"}]}},"requires":{"Reaper":"5.965","SWS":"2.13.2.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string str","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string str = reaper.CF_GetCommandText(integer section, integer command)","eel":"bool extension_api(\"CF_GetCommandText\", #retval, int section, int command)","python":"String retval = CF_GetCommandText(Int section, Int command)","cpp":"const char* CF_GetCommandText(int section, int command)"},"title":"CF_GetCommandText","chapters":["Api-Helper-Functions","Actions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Deprecated, see kbd_getTextFromCmd (v6.71+). \n\nWrapper for the unexposed kbd_getTextFromCmd API function. \n\nSee CF_EnumerateActions for common section IDs.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.CF_GetFocusedFXChain","return_values":[{"identifier":"hwnd","type":"FxChain"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["FxChain"],"parameters":[{"identifier":"\"CF_GetFocusedFXChain\""}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"FxChain hwnd","description":""}],"prog_lang":"*"},"functioncall":{"lua":"FxChain hwnd = reaper.CF_GetFocusedFXChain()","eel":"FxChain extension_api(\"CF_GetFocusedFXChain\")","python":"FXChain retval = CF_GetFocusedFXChain()","cpp":"FxChain* CF_GetFocusedFXChain()"},"title":"CF_GetFocusedFXChain","chapters":["FX Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Return a handle to the currently focused FX chain window.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PCM_source src","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_GetMediaSourceBitDepth","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"src","type":"PCM_source"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"CF_GetMediaSourceBitDepth\""},{"type_name":"PCM_source","identifier":"src"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.CF_GetMediaSourceBitDepth(PCM_source src)","eel":"int extension_api(\"CF_GetMediaSourceBitDepth\", PCM_source src)","python":"Int retval = CF_GetMediaSourceBitDepth(PCM_source src)","cpp":"int CF_GetMediaSourceBitDepth(PCM_source* src)"},"title":"CF_GetMediaSourceBitDepth","chapters":["Audio Management","Source Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the bit depth if available (0 otherwise).\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PCM_source src","description":"the PCM-source, whose bitrate you want to query"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_GetMediaSourceBitRate","return_values":[{"identifier":"bitrate","type":"number"}],"parameters":[{"identifier":"src","type":"PCM_source"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"CF_GetMediaSourceBitRate\""},{"type_name":"PCM_source","identifier":"src"}]}},"requires":{"Reaper":"5.965","SWS":"2.13.0.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number bitrate","description":"the bitrate of the pcm-source"}],"prog_lang":"*"},"functioncall":{"lua":"number bitrate = reaper.CF_GetMediaSourceBitRate(PCM_source src)","eel":"double extension_api(\"CF_GetMediaSourceBitRate\", PCM_source src)","python":"Float retval = CF_GetMediaSourceBitRate(PCM_source src)","cpp":"double CF_GetMediaSourceBitRate(PCM_source* src)"},"title":"CF_GetMediaSourceBitRate","chapters":["Audio Management","Source Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the bit rate for WAVE (wav, aif) and streaming/variable formats (mp3, ogg, opus). \n\nREAPER v6.19 or later is required for non-WAVE formats.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"PCM_source src","description":""},{"identifier":"string name","description":""},{"identifier":"string out","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_GetMediaSourceMetadata","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"out","type":"string"}],"parameters":[{"identifier":"src","type":"PCM_source"},{"identifier":"name","type":"string"},{"identifier":"out","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"CF_GetMediaSourceMetadata\""},{"type_name":"PCM_source","identifier":"src"},{"identifier":"\"name\""},{"identifier":"#out"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string out","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string out = reaper.CF_GetMediaSourceMetadata(PCM_source src, string name, string out)","eel":"bool extension_api(\"CF_GetMediaSourceMetadata\", PCM_source src, \"name\", #out)","python":"(Boolean retval, PCM_source src, String name, String out, Int out_sz) = CF_GetMediaSourceMetadata(src, name, out, out_sz)","cpp":"bool CF_GetMediaSourceMetadata(PCM_source* src, const char* name, char* out, int out_sz)"},"title":"CF_GetMediaSourceMetadata","chapters":["Audio Management","Source Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get the value of the given metadata field (eg. DESC, ORIG, ORIGREF, DATE, TIME, UMI, CODINGHISTORY for BWF).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PCM_source src","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_GetMediaSourceOnline","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"src","type":"PCM_source"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"CF_GetMediaSourceOnline\""},{"type_name":"PCM_source","identifier":"src"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.CF_GetMediaSourceOnline(PCM_source src)","eel":"bool extension_api(\"CF_GetMediaSourceOnline\", PCM_source src)","python":"Boolean retval = CF_GetMediaSourceOnline(PCM_source src)","cpp":"bool CF_GetMediaSourceOnline(PCM_source* src)"},"title":"CF_GetMediaSourceOnline","chapters":["Audio Management","Source Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Returns the online/offline status of the given source.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PCM_source src","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_GetMediaSourceRPP","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"fn","type":"string"}],"parameters":[{"identifier":"src","type":"PCM_source"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"CF_GetMediaSourceRPP\""},{"type_name":"PCM_source","identifier":"src"},{"identifier":"#fn"}]}},"requires":{"Reaper":"5.965","SWS":"2.12.1.1"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string fn","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string fn = reaper.CF_GetMediaSourceRPP(PCM_source src)","eel":"bool extension_api(\"CF_GetMediaSourceRPP\", PCM_source src, #fn)","python":"(Boolean retval, PCM_source src, String fnOut, Int fnOut_sz) = CF_GetMediaSourceRPP(src, fnOut, fnOut_sz)","cpp":"bool CF_GetMediaSourceRPP(PCM_source* src, char* fnOut, int fnOut_sz)"},"title":"CF_GetMediaSourceRPP","chapters":["Audio Management","Source Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get the project associated with this source (BWF, subproject...).\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.CF_GetSWSVersion","return_values":[{"identifier":"version","type":"string"}],"parameters":[]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"CF_GetSWSVersion\""},{"identifier":"#version"}]}},"requires":{"Reaper":"5.965","SWS":"2.12.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string version","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string version = reaper.CF_GetSWSVersion()","eel":"extension_api(\"CF_GetSWSVersion\", #version)","python":"(String versionOut, Int versionOut_sz) = CF_GetSWSVersion(versionOut, versionOut_sz)","cpp":"void CF_GetSWSVersion(char* versionOut, int versionOut_sz)"},"title":"CF_GetSWSVersion","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Return the current SWS version number.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem_Take take","description":"the take, whose FXChain-window-handler you want to get"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_GetTakeFXChain","return_values":[{"identifier":"hwnd","type":"FxChain"}],"parameters":[{"identifier":"take","type":"MediaItem_Take"}]},"eel":{"method_name":"extension_api","return_values":["FxChain"],"parameters":[{"identifier":"\"CF_GetTakeFXChain\""},{"type_name":"MediaItem_Take","identifier":"take"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"FxChain hwnd","description":"the hwnd-window-handler of the FX-chain of the item"}],"prog_lang":"*"},"functioncall":{"lua":"FxChain hwnd = reaper.CF_GetTakeFXChain(MediaItem_Take take)","eel":"FxChain extension_api(\"CF_GetTakeFXChain\", MediaItem_Take take)","python":"FXChain retval = CF_GetTakeFXChain(MediaItem_Take take)","cpp":"FxChain* CF_GetTakeFXChain(MediaItem_Take* take)"},"title":"CF_GetTakeFXChain","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Return a handle to the given take FX chain window. HACK: This temporarily renames the take in order to disambiguate the take FX chain window from similarily named takes.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack track","description":"the track, whose FXChain-window-handler you want to get"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_GetTrackFXChain","return_values":[{"identifier":"hwnd","type":"FxChain"}],"parameters":[{"identifier":"track","type":"MediaTrack"}]},"eel":{"method_name":"extension_api","return_values":["FxChain"],"parameters":[{"identifier":"\"CF_GetTrackFXChain\""},{"type_name":"MediaTrack","identifier":"track"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"FxChain hwnd","description":"the hwnd-window-handler of the FX-chain of the track"}],"prog_lang":"*"},"functioncall":{"lua":"FxChain hwnd = reaper.CF_GetTrackFXChain(MediaTrack track)","eel":"FxChain extension_api(\"CF_GetTrackFXChain\", MediaTrack track)","python":"FXChain retval = CF_GetTrackFXChain(MediaTrack track)","cpp":"FxChain* CF_GetTrackFXChain(MediaTrack* track)"},"title":"CF_GetTrackFXChain","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Return a handle to the given track FX chain window.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ReaProject project","description":"the project, whose fxchain you want to get"},{"identifier":"MediaTrack track","description":"the track, whose fxchain you want to get"},{"identifier":"boolean wantInputChain","description":"true, get the fxchain of the monitoring fx; false, get the fxchain of a track"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_GetTrackFXChainEx","return_values":[{"identifier":"fxchain","type":"FxChain"}],"parameters":[{"identifier":"project","type":"ReaProject"},{"identifier":"track","type":"MediaTrack"},{"identifier":"wantInputChain","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["FxChain"],"parameters":[{"identifier":"\"CF_GetTrackFXChainEx\""},{"type_name":"ReaProject","identifier":"project"},{"type_name":"MediaTrack","identifier":"track"},{"type_name":"bool","identifier":"wantInputChain"}]}},"requires":{"Reaper":"5.965","SWS":"2.13.0.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"FxChain fxchain","description":"the fxchain you requested"}],"prog_lang":"*"},"functioncall":{"lua":"FxChain fxchain = reaper.CF_GetTrackFXChainEx(ReaProject project, MediaTrack track, boolean wantInputChain)","eel":"FxChain extension_api(\"CF_GetTrackFXChainEx\", ReaProject project, MediaTrack track, bool wantInputChain)","python":"FXChain retval = CF_GetTrackFXChainEx(ReaProject project, MediaTrack track, Boolean wantInputChain)","cpp":"FxChain* CF_GetTrackFXChainEx(ReaProject* project, MediaTrack* track, bool wantInputChain)"},"title":"CF_GetTrackFXChainEx","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Return a handle to the given track FX chain window. Set wantInputChain to get the track's input/monitoring FX chain.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string file","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_LocateInExplorer","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"file","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"CF_LocateInExplorer\""},{"identifier":"\"file\""}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.CF_LocateInExplorer(string file)","eel":"bool extension_api(\"CF_LocateInExplorer\", \"file\")","python":"Boolean retval = CF_LocateInExplorer(String file)","cpp":"bool CF_LocateInExplorer(const char* file)"},"title":"CF_LocateInExplorer","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Select the given file in explorer/finder.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"PCM_source section","description":""},{"identifier":"PCM_source source","description":""},{"identifier":"number offset","description":""},{"identifier":"number length","description":""},{"identifier":"boolean reverse","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_PCM_Source_SetSectionInfo","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"section","type":"PCM_source"},{"identifier":"source","type":"PCM_source"},{"identifier":"offset","type":"number"},{"identifier":"length","type":"number"},{"identifier":"reverse","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"CF_PCM_Source_SetSectionInfo\""},{"type_name":"PCM_source","identifier":"section"},{"type_name":"PCM_source","identifier":"source"},{"identifier":"offset"},{"identifier":"length"},{"type_name":"bool","identifier":"reverse"}]}},"requires":{"Reaper":"5.965","SWS":"2.13.2.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.CF_PCM_Source_SetSectionInfo(PCM_source section, PCM_source source, number offset, number length, boolean reverse)","eel":"bool extension_api(\"CF_PCM_Source_SetSectionInfo\", PCM_source section, PCM_source source, offset, length, bool reverse)","python":"Boolean CF_PCM_Source_SetSectionInfo(PCM_source section, PCM_source source, Float offset, Float length, Boolean reverse)","cpp":"bool CF_PCM_Source_SetSectionInfo(PCM_source* section, PCM_source* source, double offset, double length, bool reverse)"},"title":"CF_PCM_Source_SetSectionInfo","chapters":["Audio Management","Source Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Give a section source created using PCM_Source_CreateFromType(\"SECTION\"). Offset and length are ignored if 0. Negative length to subtract from the total length of the source.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"CF_Preview preview","description":""},{"identifier":"integer channel","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_Preview_GetPeak","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"peakvol","type":"number"}],"parameters":[{"identifier":"preview","type":"CF_Preview"},{"identifier":"channel","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"CF_Preview_GetPeak\""},{"type_name":"CF_Preview","identifier":"preview"},{"type_name":"int","identifier":"channel"},{"identifier":"&peakvol"}]}},"requires":{"Reaper":"5.965","SWS":"2.13.2.0"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number peakvol","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number peakvol = reaper.CF_Preview_GetPeak(CF_Preview preview, integer channel)","eel":"bool extension_api(\"CF_Preview_GetPeak\", CF_Preview preview, int channel, &peakvol)","python":"(Boolean retval, CF_Preview preview, Int channel, Float peakvolOut) = CF_Preview_GetPeak(preview, channel, peakvolOut)","cpp":"bool CF_Preview_GetPeak(CF_Preview* preview, int channel, double* peakvolOut)"},"title":"CF_Preview_GetPeak","chapters":["Audio Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Read peak volume for channel 0 or 1. Only available when outputting to a hardware output (not through a track).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"CF_Preview preview","description":""},{"identifier":"integer channel","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_Preview_GetValue","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"value","type":"number"}],"parameters":[{"identifier":"preview","type":"CF_Preview"},{"identifier":"name","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"CF_Preview_GetValue\""},{"type_name":"CF_Preview","identifier":"preview"},{"identifier":"\"name\""},{"identifier":"&value"}]}},"requires":{"Reaper":"5.965","SWS":"2.13.2.0"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number peakvol","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number value = reaper.CF_Preview_GetValue(CF_Preview preview, string name)","eel":"bool extension_api(\"CF_Preview_GetValue\", CF_Preview preview, \"name\", &value)","python":"(Boolean retval, CF_Preview preview, String name, Float valueOut) = CF_Preview_GetValue(preview, name, valueOut)","cpp":"bool CF_Preview_GetValue(CF_Preview* preview, const char* name, double* valueOut)"},"title":"CF_Preview_GetValue","chapters":["Audio Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Supported attributes:\n\nB_LOOP seek to the beginning when reaching the end of the source\nB_PPITCH preserve pitch when changing playback rate\nD_FADEINLEN lenght in seconds of playback fade in\nD_FADEOUTLEN lenght in seconds of playback fade out\nD_LENGTH (read only) length of the source * playback rate\nD_MEASUREALIGN >0 = wait until the next bar before starting playback (note: this causes playback to silently continue when project is paused and previewing through a track)\nD_PAN playback pan\nD_PITCH pitch adjustment in semitones\nD_PLAYRATE playback rate\nD_POSITION current playback position\nD_VOLUME playback volume\nI_OUTCHAN first hardware output channel (&1024=mono, reads -1 when playing through a track, see CF_Preview_SetOutputTrack)\nI_PITCHMODE highest 16 bits=pitch shift mode (see EnumPitchShiftModes), lower 16 bits=pitch shift submode (see EnumPitchShiftSubModes)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"CF_Preview preview","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_Preview_Play","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"preview","type":"CF_Preview"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"CF_Preview_Play\""},{"type_name":"CF_Preview","identifier":"preview"}]}},"requires":{"Reaper":"5.965","SWS":"2.13.2.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.CF_Preview_Play(CF_Preview preview)","eel":"bool extension_api(\"CF_Preview_Play\", CF_Preview preview)","python":"Boolean CF_Preview_Play(CF_Preview preview)","cpp":"bool CF_Preview_Play(CF_Preview preview)"},"title":"CF_Preview_Play","chapters":["Audio Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Start playback of the configured preview object.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"CF_Preview preview","description":""},{"identifier":"ReaProject project","description":""},{"identifier":"MediaTrack track","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_Preview_SetOutputTrack","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"preview","type":"CF_Preview"},{"identifier":"project","type":"ReaProject"},{"identifier":"track","type":"MediaTrack"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"CF_Preview_SetOutputTrack\""},{"type_name":"CF_Preview","identifier":"preview"},{"type_name":"ReaProject","identifier":"project"},{"type_name":"MediaTrack","identifier":"track"}]}},"requires":{"Reaper":"5.965","SWS":"2.13.2.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.CF_Preview_SetOutputTrack(CF_Preview preview, ReaProject project, MediaTrack track)","eel":"bool extension_api(\"CF_Preview_SetOutputTrack\", CF_Preview preview, ReaProject project, MediaTrack track)","python":"Boolean CF_Preview_SetOutputTrack(CF_Preview preview, ReaProject project, MediaTrack track)","cpp":"bool CF_Preview_SetOutputTrack(CF_Preview* preview, ReaProject* project, MediaTrack* track)"},"title":"CF_Preview_SetOutputTrack","chapters":["Audio Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"CF_Preview preview","description":""},{"identifier":"string name","description":""},{"identifier":"number newValue","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_Preview_SetValue","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"preview","type":"CF_Preview"},{"identifier":"name","type":"string"},{"identifier":"newValue","type":"number"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"CF_Preview_SetValue\""},{"type_name":"CF_Preview","identifier":"preview"},{"identifier":"\"name\""},{"identifier":"newValue"}]}},"requires":{"Reaper":"5.965","SWS":"2.13.2.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.CF_Preview_SetValue(CF_Preview preview, string name, number newValue)","eel":"bool extension_api(\"CF_Preview_SetValue\", CF_Preview preview, \"name\", newValue)","python":"Boolean CF_Preview_SetValue(CF_Preview preview, String name, Float newValue)","cpp":"bool CF_Preview_SetValue(CF_Preview* preview, const char* name, double newValue)"},"title":"CF_Preview_SetValue","chapters":["Audio Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"See CF_Preview_GetValue.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"CF_Preview preview","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_Preview_Stop","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"preview","type":"CF_Preview"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"CF_Preview_Stop\""},{"type_name":"CF_Preview","identifier":"preview"}]}},"requires":{"Reaper":"5.965","SWS":"2.13.2.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.CF_Preview_Stop(CF_Preview preview)","eel":"bool extension_api(\"CF_Preview_Stop\", CF_Preview preview)","python":"Boolean CF_Preview_Stop(CF_Preview preview)","cpp":"bool CF_Preview_Stop(CF_Preview* preview)"},"title":"CF_Preview_Stop","chapters":["Audio Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Stop and destroy a preview object.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.CF_Preview_StopAll","return_values":[],"parameters":[]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"CF_Preview_StopAll\""}]}},"requires":{"Reaper":"5.965","SWS":"2.13.2.0"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CF_Preview_StopAll()","eel":"extension_api(\"CF_Preview_StopAll\")","python":"CF_Preview_StopAll()","cpp":"void CF_Preview_StopAll()"},"title":"CF_Preview_StopAll","chapters":["Audio Management","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Stop and destroy all currently active preview objects.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":"the track, whose active trackfx you want to set"},{"identifier":"integer index","description":"the index of the fx, which you want to activate"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_SelectTrackFX","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"index","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"CF_SelectTrackFX\""},{"type_name":"MediaTrack","identifier":"track"},{"type_name":"int","identifier":"index"}]}},"requires":{"Reaper":"5.965","SWS":"2.12.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, setting was successful; false, setting was unsuccessful"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.CF_SelectTrackFX(MediaTrack track, integer index)","eel":"bool extension_api(\"CF_SelectTrackFX\", MediaTrack track, int index)","python":"Boolean retval = CF_SelectTrackFX(MediaTrack track, Int index)","cpp":"bool CF_SelectTrackFX(MediaTrack* track, int index)"},"title":"CF_SelectTrackFX","chapters":["FX Management","Track FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Set which track effect is active in the track's FX chain. The FX chain window does not have to be open.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"PCM_source src","description":""},{"identifier":"boolean set","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_SetMediaSourceOnline","return_values":[],"parameters":[{"identifier":"src","type":"PCM_source"},{"identifier":"set","type":"boolean"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"CF_SetMediaSourceOnline\""},{"type_name":"PCM_source","identifier":"src"},{"type_name":"bool","identifier":"set"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.CF_SetMediaSourceOnline(PCM_source src, boolean set)","eel":"extension_api(\"CF_SetMediaSourceOnline\", PCM_source src, bool set)","python":"CF_SetMediaSourceOnline(PCM_source src, Boolean set)","cpp":"void CF_SetMediaSourceOnline(PCM_source* src, bool set)"},"title":"CF_SetMediaSourceOnline","chapters":["Audio Management","Source Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Set the online/offline status of the given source (closes files when set=false).\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string file","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.CF_ShellExecute","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"file","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"CF_ShellExecute\""},{"identifier":"\"file\""}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.CF_ShellExecute(string file)","eel":"bool extension_api(\"CF_ShellExecute\", \"file\")","python":"Boolean retval = CF_ShellExecute(String file)","cpp":"bool CF_ShellExecute(const char* file)"},"title":"CF_ShellExecute","chapters":["Api-Helper-Functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Open the given file or URL in the default application. See also [CF\\_LocateInExplorer](#CF_LocateInExplorer).\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"MediaItem item","description":""},{"identifier":"number windowSize","description":""},{"identifier":"identifier reaper.array_peaks","description":""},{"identifier":"identifier reaper.array_peakpositions","description":""},{"identifier":"identifier reaper.array_RMSs","description":""},{"identifier":"identifier reaper.array_RMSpositions","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.NF_AnalyzeMediaItemPeakAndRMS","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"item","type":"MediaItem"},{"identifier":"windowSize","type":"number"},{"identifier":"reaper.array_peaks","type":"identifier"},{"identifier":"reaper.array_peakpositions","type":"identifier"},{"identifier":"reaper.array_RMSs","type":"identifier"},{"identifier":"reaper.array_RMSpositions","type":"identifier"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"NF_AnalyzeMediaItemPeakAndRMS\""},{"type_name":"MediaItem","identifier":"item"},{"identifier":"windowSize"},{"type_name":"void*","identifier":"reaper.array_peaks"},{"type_name":"void*","identifier":"reaper.array_peakpositions"},{"type_name":"void*","identifier":"reaper.array_RMSs"},{"type_name":"void*","identifier":"reaper.array_RMSpositions"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.NF_AnalyzeMediaItemPeakAndRMS(MediaItem item, number windowSize, identifier reaper.array_peaks, identifier reaper.array_peakpositions, identifier reaper.array_RMSs, identifier reaper.array_RMSpositions)","eel":"bool extension_api(\"NF_AnalyzeMediaItemPeakAndRMS\", MediaItem item, windowSize, void* reaper.array_peaks, void* reaper.array_peakpositions, void* reaper.array_RMSs, void* reaper.array_RMSpositions)","python":"Boolean retval = NF_AnalyzeMediaItemPeakAndRMS(MediaItem item, Float windowSize, void reaper.array_peaks, void reaper.array_peakpositions, void reaper.array_RMSs, void reaper.array_RMSpositions)","cpp":"bool NF_AnalyzeMediaItemPeakAndRMS(MediaItem* item, double windowSize, void* reaper.array_peaks, void* reaper.array_peakpositions, void* reaper.array_RMSs, void* reaper.array_RMSpositions)"},"title":"NF_AnalyzeMediaItemPeakAndRMS","chapters":["Mediaitem Management","Normalizing/Loudness"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"This function combines all other NF\\_Peak/RMS functions in a single one and additionally returns peak RMS positions.  \n\n[Lua example code here](https://forum.cockos.com/showpost.php?p=2050961&postcount=6). \n\nNote: It's recommended to use this function with ReaScript/Lua as it provides reaper.array objects. \nIf using this function with other scripting languages, you must provide arrays in the [reaper.array format](https://forum.cockos.com/showpost.php?p=2039829&postcount=2).\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaItem item","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.NF_GetMediaItemMaxPeakAndMaxPeakPos","return_values":[{"identifier":"retval","type":"number"},{"identifier":"maxPeakPos","type":"number"}],"parameters":[{"identifier":"item","type":"MediaItem"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"NF_GetMediaItemMaxPeakAndMaxPeakPos\""},{"type_name":"MediaItem","identifier":"item"},{"identifier":"&maxPeakPos"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number retval","description":""},{"identifier":"number maxPeakPos","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval, number maxPeakPos = reaper.NF_GetMediaItemMaxPeakAndMaxPeakPos(MediaItem item)","eel":"double extension_api(\"NF_GetMediaItemMaxPeakAndMaxPeakPos\", MediaItem item, &maxPeakPos)","python":"(Float retval, MediaItem item, Float maxPeakPosOut) = NF_GetMediaItemMaxPeakAndMaxPeakPos(item, maxPeakPosOut)","cpp":"double NF_GetMediaItemMaxPeakAndMaxPeakPos(MediaItem* item, double* maxPeakPosOut)"},"title":"NF_GetMediaItemMaxPeakAndMaxPeakPos","chapters":["Mediaitem Management","Normalizing/Loudness"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"See [NF\\_GetMediaItemMaxPeak](#NF_GetMediaItemMaxPeak), additionally returns maxPeakPos (relative to item position).\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer markerRegionIdx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.NF_GetSWSMarkerRegionSub","return_values":[{"identifier":"subtitle","type":"string"}],"parameters":[{"identifier":"markerRegionIdx","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"NF_GetSWSMarkerRegionSub\""},{"identifier":"#retval"},{"type_name":"int","identifier":"markerRegionIdx"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string subtitle","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string subtitle = reaper.NF_GetSWSMarkerRegionSub(integer markerRegionIdx)","eel":"bool extension_api(\"NF_GetSWSMarkerRegionSub\", #retval, int markerRegionIdx)","python":"String retval = NF_GetSWSMarkerRegionSub(Int markerRegionIdx)","cpp":"const char* NF_GetSWSMarkerRegionSub(int markerRegionIdx)"},"title":"NF_GetSWSMarkerRegionSub","chapters":["Marker Management","Project Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Returns SWS/S&M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to [EnumProjectMarkers](#EnumProjectMarkers) (not displayed marker/region index).  \nReturns empty string if marker/region with specified index not found or marker/region subtitle not set.  \n\n[Lua code example can be found here](https://github.com/ReaTeam/ReaScripts-Templates/blob/master/Markers%20and%20Regions/NF_Get%20SWS%20markers%20and%20regions%20notes.lua)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MediaTrack track","description":"the track, whose SWS-tracknotes you want to get"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.NF_GetSWSTrackNotes","return_values":[{"identifier":"tracknotes","type":"string"}],"parameters":[{"identifier":"track","type":"MediaTrack"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"NF_GetSWSTrackNotes\""},{"identifier":"#retval"},{"type_name":"MediaTrack","identifier":"track"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string tracknotes","description":"the stored notes"}],"prog_lang":"*"},"functioncall":{"lua":"string tracknotes = reaper.NF_GetSWSTrackNotes(MediaTrack track)","eel":"bool extension_api(\"NF_GetSWSTrackNotes\", #retval, MediaTrack track)","python":"String retval = NF_GetSWSTrackNotes(MediaTrack track)","cpp":"const char* NF_GetSWSTrackNotes(MediaTrack* track)"},"title":"NF_GetSWSTrackNotes","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get the SWS tracknotes.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.NF_GetSWS_RMSoptions","return_values":[{"identifier":"target","type":"number"},{"identifier":"windowSize","type":"number"}],"parameters":[]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"NF_GetSWS_RMSoptions\""},{"identifier":"&target"},{"identifier":"&windowSize"}]}},"requires":{"Reaper":"5.965","SWS":"2.12.0"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number target","description":""},{"identifier":"number windowSize","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number target, number windowSize = reaper.NF_GetSWS_RMSoptions()","eel":"extension_api(\"NF_GetSWS_RMSoptions\", &target, &windowSize)","python":"(Float targetOut, Float windowSizeOut) = NF_GetSWS_RMSoptions(targetOut, windowSizeOut)","cpp":"void NF_GetSWS_RMSoptions(double* targetOut, double* windowSizeOut)"},"title":"NF_GetSWS_RMSoptions","chapters":["Configuration Settings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Get SWS analysis/normalize options. See [NF\\_SetSWS\\_RMSoptions](#NF_SetSWS_RMSoptions).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string markerRegionSub","description":""},{"identifier":"integer markerRegionIdx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.NF_SetSWSMarkerRegionSub","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"markerRegionSub","type":"string"},{"identifier":"markerRegionIdx","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"NF_SetSWSMarkerRegionSub\""},{"identifier":"\"markerRegionSub\""},{"type_name":"int","identifier":"markerRegionIdx"}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.NF_SetSWSMarkerRegionSub(string markerRegionSub, integer markerRegionIdx)","eel":"bool extension_api(\"NF_SetSWSMarkerRegionSub\", \"markerRegionSub\", int markerRegionIdx)","python":"Boolean retval = NF_SetSWSMarkerRegionSub(String markerRegionSub, Int markerRegionIdx)","cpp":"bool NF_SetSWSMarkerRegionSub(const char* markerRegionSub, int markerRegionIdx)"},"title":"NF_SetSWSMarkerRegionSub","chapters":["Marker Management","Project Markers"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Set SWS/S&M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to [EnumProjectMarkers](#EnumProjectMarkers)(not displayed marker/region index).  \nReturns true if subtitle is set successfully (i.e. marker/region with specified index is present in project). \n\n[Lua code example can be found here](https://github.com/ReaTeam/ReaScripts-Templates/blob/master/Markers%20and%20Regions/NF_Get%20SWS%20markers%20and%20regions%20notes.lua\")","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack track","description":""},{"identifier":"string str","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.NF_SetSWSTrackNotes","return_values":[],"parameters":[{"identifier":"track","type":"MediaTrack"},{"identifier":"str","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"NF_SetSWSTrackNotes\""},{"type_name":"MediaTrack","identifier":"track"},{"identifier":"\"str\""}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.NF_SetSWSTrackNotes(MediaTrack track, string str)","eel":"extension_api(\"NF_SetSWSTrackNotes\", MediaTrack track, \"str\")","python":"NF_SetSWSTrackNotes(MediaTrack track, String str)","cpp":"void NF_SetSWSTrackNotes(MediaTrack* track, const char* str)"},"title":"NF_SetSWSTrackNotes","chapters":["Track Management","Track States"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number targetLevel","description":""},{"identifier":"number windowSize","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.NF_SetSWS_RMSoptions","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"targetLevel","type":"number"},{"identifier":"windowSize","type":"number"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"NF_SetSWS_RMSoptions\""},{"identifier":"targetLevel"},{"identifier":"windowSize"}]}},"requires":{"Reaper":"5.965","SWS":"2.12.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.NF_SetSWS_RMSoptions(number targetLevel, number windowSize)","eel":"bool extension_api(\"NF_SetSWS_RMSoptions\", targetLevel, windowSize)","python":"Boolean retval = NF_SetSWS_RMSoptions(Float targetLevel, Float windowSize)","cpp":"bool NF_SetSWS_RMSoptions(double targetLevel, double windowSize)"},"title":"NF_SetSWS_RMSoptions","chapters":["Configuration Settings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Set SWS analysis/normalize options (same as running action 'SWS: Set RMS analysis/normalize options'). targetLevel: target RMS normalize level (dB), windowSize: window size for peak RMS (sec.)\n\nSee [NF\\_GetSWS\\_RMSoptions](#NF_GetSWS_RMSoptions).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem item","description":"the MediaItem, whose modulename of an effect you want to receive"},{"identifier":"integer fx","description":"the index of the fx(with 0 for the first), whose modulename you want to receive"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.NF_TakeFX_GetModuleName","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"name","type":"string"}],"parameters":[{"identifier":"item","type":"MediaItem"},{"identifier":"fx","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"NF_TakeFX_GetModuleName\""},{"type_name":"MediaItem","identifier":"item"},{"type_name":"int","identifier":"fx"},{"type_name":"#","identifier":"name"},{"type_name":"int","identifier":"name"}]}},"requires":{"Reaper":"5.965","SWS":"2.11.0"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, modulename could be retrieved; false, modulename couldn't be retrieved(e.g. no such fx)"},{"identifier":"string name","description":"the name of the module"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string name = reaper.NF_TakeFX_GetModuleName(MediaItem item, integer fx)","eel":"bool extension_api(\"NF_TakeFX_GetModuleName\", MediaItem item, int fx, # name, int name)","python":"(Boolean retval, MediaItem item, Int fx, String nameOut, Int nameOutSz) = NF_TakeFX_GetModuleName(item, fx, nameOut, nameOutSz)","cpp":"bool NF_TakeFX_GetModuleName(MediaItem* item, int fx, char* nameOut, int nameOutSz)"},"title":"NF_TakeFX_GetModuleName","chapters":["FX Management","Take FX"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Deprecated.\nRetrieves the name of the module of a takefx from a MediaItem.\n\nSee [BR\\_TrackFX\\_GetFXModuleName](#BR_TrackFX_GetFXModuleName). fx: counted consecutively across all takes (zero-based).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.NF_UpdateSWSMarkerRegionSubWindow","return_values":[],"parameters":[]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"NF_UpdateSWSMarkerRegionSubWindow\""}]}},"requires":{"Reaper":"5.965","SWS":"2.10.0.1"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.NF_UpdateSWSMarkerRegionSubWindow()","eel":"extension_api(\"NF_UpdateSWSMarkerRegionSubWindow\")","python":"NF_UpdateSWSMarkerRegionSubWindow()","cpp":"void NF_UpdateSWSMarkerRegionSubWindow()"},"title":"NF_UpdateSWSMarkerRegionSubWindow","chapters":["User Interface","Window Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Redraw the Notes window (call if you've changed a subtitle via [NF\\_SetSWSMarkerRegionSub](#NF_SetSWSMarkerRegionSub) which is currently displayed in the Notes window and you want to appear the new subtitle immediately.)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["sws"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer nIndex","description":"the value to query, i.e.:\n5, width of window-borders\n7, thickness of a frame around the perimeter of a window with caption but not resizeable\n10, width of \"thumb box\" in a horizontal scroll bar\n11, default icon width\n13, width of the cursor in pixels\n16, x-width of fullscreen\n21, width of arrow of the horizontal-scrollbar\n36, width of the rectangle, within double-clicks are detected\n43, number of mousebuttons or zero, if no mouse is installed\n45, width of a 3d-border\n56, flags how system arranges minimized windows\n67, (0, normal boot; 1, Fail-safe boot; 2, Fail-safe with network boot)\n68, the width of the area, that detects a mouse-drag\n80, number of display monitors\n83, width of left and right edges of focus rectangle drawn by DrawFocusRect-Win32-function\n0x2003, slate state of laptop; 0, slate mode; non-zero, otherwise\netc."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.NF_Win32_GetSystemMetrics","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"nIndex","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"NF_Win32_GetSystemMetrics\""},{"type_name":"int","identifier":"nIndex"}]}},"requires":{"Reaper":"5.965","SWS":"2.12.0"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the returned value"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.NF_Win32_GetSystemMetrics(integer nIndex)","eel":"int extension_api(\"NF_Win32_GetSystemMetrics\", int nIndex)","python":"Int retval = NF_Win32_GetSystemMetrics(Int nIndex)","cpp":"int NF_Win32_GetSystemMetrics(int nIndex)"},"title":"NF_Win32_GetSystemMetrics","chapters":["User Interface","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Equivalent to win32 API GetSystemMetrics(). \n\nNote: Only SM_C[XY]SCREEN, SM_C[XY][HV]SCROLL and SM_CYMENU are currently supported on macOS and Linux as of REAPER 6.68. \n\nCheck the SWELL source code for up-to-date support information (swell-wnd.mm, swell-wnd-generic.cpp).\n\nsee: https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-getsystemmetrics.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","math"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"float abs_value","description":"the absolute-value of value"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"abs_value","return_values":["float"],"parameters":[{"type_name":"float","identifier":"value"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"float abs_value = abs(float value)"},"title":"abs","chapters":["EEL-only functions","Math"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the absolute value of the parameter.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","math"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"float value","description":"the value, that you want to convert into arc-cosine"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"arc_cos","return_values":["float"],"parameters":[{"type_name":"float","identifier":"value"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"float arc_cos","description":"the arc-cosine-value in radians"}],"prog_lang":"*"},"functioncall":{"eel":"float arc_cos = acos(float value)"},"title":"acos","chapters":["EEL-only functions","Math"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"eel","markup_type":"plaintext","description":"Returns the arc cosine of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","math"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"float value","description":"the value, that you want to convert to arc-sine"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"arc_sine","return_values":["float"],"parameters":[{"type_name":"float","identifier":"value"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"float arc_sine","description":"the arc-sine-value in radians of value"}],"prog_lang":"*"},"functioncall":{"eel":"float arc_sine = asin(float value)"},"title":"asin","chapters":["EEL-only functions","Math"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the arc sine of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","math"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"float value","description":"the value, that you want to convert to arc-tan"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"arc_tan","return_values":["float"],"parameters":[{"identifier":"value"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"float arc_tan","description":"the arc-tan-value in radians of value"}],"prog_lang":"*"},"functioncall":{"eel":"float arc_tan = atan(value)"},"title":"atan","chapters":["EEL-only functions","Math"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the arc tangent of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","math"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"float numerator","description":"the numerator to calculate the arc-tangent"},{"identifier":"float denominator","description":"the denominator to calculate the arc-tangent"}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["atan2"],"parameters":[{"identifier":"numerator"},{"identifier":"denominator"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"float arc_tangent","description":"the arc-tangent "}],"prog_lang":"*"},"functioncall":{"eel":"atan2(numerator,denominator)"},"title":"atan2","chapters":["EEL-only functions","Math"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the arc tangent of the numerator divided by the denominator, allowing the denominator to be 0, and using their signs to produce a more meaningful result.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","misc","exit code"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string code","description":"the code to be run. You can also add a regular functioncall into this string, like \"main()\", if there's a main-function in the script"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"retval","return_values":["float"],"parameters":[{"type_name":"string","identifier":"code"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"float retval = atexit(string code)"},"title":"atexit","chapters":["EEL-only functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","math"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"float value","description":"the value to round"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"round_val","return_values":["float"],"parameters":[{"type_name":"float","identifier":"value"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"float round_val","description":"the rounded value to the next highest integer"}],"prog_lang":"*"},"functioncall":{"eel":"float round_val = ceil(float value)"},"title":"ceil","chapters":["EEL-only functions","Math"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the value rounded to the next highest integer (ceil(3.1)==4, ceil(-3.9)==-3).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","math"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"float dest","description":""},{"identifier":"float src","description":""},{"identifier":"float size","description":""}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"convolved_val","return_values":["float"],"parameters":[{"type_name":"float","identifier":"dest"},{"type_name":"float","identifier":"src"},{"type_name":"float","identifier":"size"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"float convolved_val","description":""}],"prog_lang":"*"},"functioncall":{"eel":"float convolved_val = convolve_c(float dest, float src, float size)"},"title":"convolve_c","chapters":["EEL-only functions","Math"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Multiplies each of size complex pairs in dest by the complex pairs in src. Often used for convolution.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","math"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"float angle","description":"the angle to convert into cosine"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"cos","return_values":["float"],"parameters":[{"type_name":"float","identifier":"angle"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"float cos","description":"the cosine value in radians"}],"prog_lang":"*"},"functioncall":{"eel":"float cos = cos(float angle)"},"title":"cos","chapters":["EEL-only functions","Math"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"eel","markup_type":"plaintext","description":"Returns the cosine of the angle specified (specified in radians).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","misc","defer","background script"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string code","description":"the code to be run. You can also add a regular functioncall into this string, like \"main()\", if there's a main-function in the script"}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["defer"],"parameters":[{"type_name":"string","identifier":"\"code\""}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"defer(string \"code\")"},"title":"defer","chapters":["EEL-only functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().\nNote that no undo point will be automatically created when the script finishes, unless you create it explicitly.\n\nEach function called by defer can only be deferred once per defer-cycle(unlike in Lua, where you can have one function deferred multiple times).\n\nUnlike \"normal\" loops, defer allows looped code to run in the background without blocking Reaper's user interface.\nThat way, scripts, who need longer time to run, can be made possible.\n\nExample:\nthe following example allows adding a to variable A with each defer-cycle.\n<pre><code>\nfunction main()(\n  A=A+1;\n  defer(\"main()\");\n);\n\nmain();\n</code></pre>","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","misc","eval code","load code","files"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string code","description":"the code to be executed"}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["eval"],"parameters":[{"identifier":"code"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"eval(code)"},"title":"eval","chapters":["EEL-only functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"eel","markup_type":"plaintext","description":"Executes code passed in. Code can use functions, but functions created in code can't be used elsewhere.\n\nAllows loading code from files and executing it","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","math"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"float exponent","description":"the exponent to use for raise"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"e_pow","return_values":["float"],"parameters":[{"type_name":"float","identifier":"exponent"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"float e_pow","description":"the number e raised to parameter-th power"}],"prog_lang":"*"},"functioncall":{"eel":"float e_pow = exp(float exponent)"},"title":"exp","chapters":["EEL-only functions","Math"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"eel","markup_type":"plaintext","description":"Returns the number e ($e, approximately 2.718) raised to the parameter-th power. This function is significantly faster than pow() or the ^ operator.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","misc","call","extension","function"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string functionname","description":"the name of the function to run"},{"identifier":"various parameters...","description":"the parameters used by functionname"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"retval","return_values":["various"],"parameters":[{"type_name":"string","identifier":"function_name["},{"identifier":"...]"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"various retval","description":"the return value of functionname, can be of numerous datatypes, refer to the docs of functionname"}],"prog_lang":"*"},"functioncall":{"eel":"various retval = extension_api(string function_name[,...])"},"title":"extension_api","chapters":["EEL-only functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Used to call functions exported by extension plugins. The first parameter must be the exported function name, then its own parameters (as if the function was called directly).\n\nWill return the returnvalue of the function called.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","file management"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"filehandler fp","description":"the handler of the opened file"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"retval","return_values":["integer"],"parameters":[{"type_name":"filehandler","identifier":"fp"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"0, closing was successful; -1, closing was unsuccessful"}],"prog_lang":"*"},"functioncall":{"eel":"integer retval = fclose(filehandler fp)"},"title":"fclose","chapters":["EEL-only functions","File Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Closes a file previously opened with fopen().","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","file management"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"filehandler fp","description":"the handler of the opened file"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"retval","return_values":["integer"],"parameters":[{"type_name":"filehandler","identifier":"fp"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer rteval","description":"0, file is not at the end of a file; nonzero, it is at the end of the file"}],"prog_lang":"*"},"functioncall":{"eel":"integer retval = feof(filehandler fp)"},"title":"feof","chapters":["EEL-only functions","File Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns nonzero if the file fp is at the end of file.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","file management"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"filehandler fp","description":"the handler of the file"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"retval","return_values":["integer"],"parameters":[{"type_name":"filehandler","identifier":"fp"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"-1, couldn't flush file; 0, flushing was successful"}],"prog_lang":"*"},"functioncall":{"eel":"integer retval = fflush(filehandler fp)"},"title":"fflush","chapters":["EEL-only functions","File Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"If file fp is open for writing, flushes out any buffered data to disk.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","math"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"data buffer","description":""},{"identifier":"integer size","description":""}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"retval","return_values":["float"],"parameters":[{"type_name":"data","identifier":"buffer"},{"type_name":"integer","identifier":"size"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"float retval","description":""}],"prog_lang":"*"},"functioncall":{"eel":"float retval = fft(data buffer, integer size)"},"title":"fft","chapters":["EEL-only functions","Math"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Performs a FFT on the data in the local memory buffer at the offset specified by the first parameter. The size of the FFT is specified by the second parameter, which must be 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, or 32768. The outputs are permuted, so if you plan to use them in-order, call fft_permute(buffer, size) before and fft_ipermute(buffer,size) after your in-order use. Your inputs or outputs will need to be scaled down by 1/size, if used.\nNote that fft()/ifft() require real / imaginary input pairs, so a 256 point FFT actually works with 512 items.\nNote that fft()/ifft() must NOT cross a 65,536 item boundary, so be sure to specify the offset accordingly.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","math"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"data buffer","description":""},{"identifier":"integer size","description":""}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"retval","return_values":["float"],"parameters":[{"type_name":"data","identifier":"buffer"},{"type_name":"integer","identifier":"size"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"float retval","description":""}],"prog_lang":"*"},"functioncall":{"eel":"float retval = fft_ipermute(data buffer, integer size)"},"title":"fft_ipermute","chapters":["EEL-only functions","Math"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Permute the input for ifft(), taking bands from in-order to the order ifft() requires. See [fft()](#eel_fft) for more information.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","math","permutation","permute"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"data buffer","description":""},{"identifier":"integer size","description":""}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"retval","return_values":["float"],"parameters":[{"type_name":"data","identifier":"buffer"},{"type_name":"integer","identifier":"size"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"float retval","description":""}],"prog_lang":"*"},"functioncall":{"eel":"float retval = fft_permute(data buffer, integer size)"},"title":"fft_permute","chapters":["EEL-only functions","Math"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Permute the output of fft() to have bands in-order. See [fft()](#eel_fft) for more information.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","math","fft","fourier transformation"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"data buffer","description":""},{"identifier":"integer size","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["fft_real"],"parameters":[{"type_name":"data","identifier":"buffer"},{"type_name":"integer","identifier":"size"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"fft_real(data buffer, integer size)"},"title":"fft_real","chapters":["EEL-only functions","Math"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Performs an FFT, but takes size input samples and produces size/2 complex output pairs. Usually used along with fft_permute(size/2). Inputs/outputs will need to be scaled by 0.5/size.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","file management"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"filehandler fp","description":"the handler to the file "}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"character","return_values":["integer"],"parameters":[{"type_name":"filehandler","identifier":"fp"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer character","description":"a character read from the file; -1, if end of file"}],"prog_lang":"*"},"functioncall":{"eel":"integer character = fgetc(filehandler fp)"},"title":"fgetc","chapters":["EEL-only functions","File Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Reads a character from file fp, returns -1 if EOF.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","file management"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"filehandler fp","description":"the handler of the file"},{"identifier":"string #str","description":"the returned string "}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"length","return_values":["integer"],"parameters":[{"type_name":"filehandler","identifier":"fp"},{"type_name":"string","identifier":"#str"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer length","description":"the length of the line read from file."}],"prog_lang":"*"},"functioncall":{"eel":"integer length = fgets(filehandler fp, string #str)"},"title":"fgets","chapters":["EEL-only functions","File Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Reads a line from file fp into #str. Returns length of #str read.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","math"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"float value","description":"the value to be rounded"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"rounded_value","return_values":["integer"],"parameters":[{"type_name":"float","identifier":"value"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer rounded_value","description":"the rounded value to the next lowest integer"}],"prog_lang":"*"},"functioncall":{"eel":"integer rounded_value = floor(float value)"},"title":"floor","chapters":["EEL-only functions","Math"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the value rounded to the next lowest integer (floor(3.9)==3, floor(-3.1)==-4).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","file management"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string fn","description":"the filename to be opened"},{"identifier":"string mode","description":"the opening mode\n\"r\" read,\n\"rb\", read binary\n\"w\", write\n\"wb\", write binary"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"fp","return_values":["filehandler"],"parameters":[{"type_name":"string","identifier":"fn"},{"type_name":"string","identifier":"mode"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"filehandler fp","description":"the filehandler of the opened file; 0, if file couldn't be opened"}],"prog_lang":"*"},"functioncall":{"eel":"filehandler fp = fopen(string fn, string mode)"},"title":"fopen","chapters":["EEL-only functions","File Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Opens a file \"fn\" with mode \"mode\". For read, use \"r\" or \"rb\", write \"w\" or \"wb\". Returns a positive integer on success.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","file management"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"filehandler fp","description":""},{"identifier":"string format","description":"a string to format"},{"identifier":"various [...]","description":""}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"length","return_values":["integer"],"parameters":[{"type_name":"filehandler","identifier":"fp"},{"type_name":"string","identifier":"format["},{"type_name":"various","identifier":"...]"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer length","description":"the length of the written string"}],"prog_lang":"*"},"functioncall":{"eel":"integer length = fprintf(filehandler fp, string format[, various ...])"},"title":"fprintf","chapters":["EEL-only functions","File Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Formats a string and writes it to file fp. For more information on format specifiers, see [sprintf()](#eel_sprintf). Returns bytes written to file.\n\n  * %% = %  \n  * %s = string from parameter  \n  * %d = parameter as integer  \n  * %i = parameter as integer  \n  * %u = parameter as unsigned integer  \n  * %x = parameter as hex (lowercase) integer  \n  * %X = parameter as hex (uppercase) integer  \n  * %c = parameter as character  \n  * %f = parameter as floating point  \n  * %e = parameter as floating point (scientific notation, lowercase)  \n  * %E = parameter as floating point (scientific notation, uppercase)  \n  * %g = parameter as floating point (shortest representation, lowercase)  \n  * %G = parameter as floating point (shortest representation, uppercase)  \n\nMany standard C printf() modifiers can be used, including:\n\n  * %.10s = string, but only print up to 10 characters  \n  * %-10s = string, left justified to 10 characters  \n  * %10s = string, right justified to 10 characters  \n  * %+f = floating point, always show sign  \n  * %.4f = floating point, minimum of 4 digits after decimal point  \n  * %10d = integer, minimum of 10 digits (space padded)  \n  * %010f = integer, minimum of 10 digits (zero padded)  \n\nValues for format specifiers can be specified as additional parameters to fprintf, or within {} in the format specifier (such as %{varname}d, in that case a global variable is always used).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","file management"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"filehandler fp","description":"the handler of the file"},{"identifier":"string #str","description":"the string read from the file"},{"identifier":"integer length","description":"the length you want to read from the file"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"read_length","return_values":["integer"],"parameters":[{"type_name":"filehandler","identifier":"fp"},{"type_name":"string","identifier":"#str"},{"type_name":"integer","identifier":"length"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer read_length","description":"the length of the returned string(might be less than parameter length)"}],"prog_lang":"*"},"functioncall":{"eel":"integer read_length = fread(filehandler fp, string #str, integer length)"},"title":"fread","chapters":["EEL-only functions","File Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Reads from file fp into #str, up to length bytes. Returns actual length read, or negative if error.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","memory management"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"float address","description":""}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"retval","return_values":["float"],"parameters":[{"type_name":"float","identifier":"address"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"float retval","description":""}],"prog_lang":"*"},"functioncall":{"eel":"float retval = freembuf(float address)"},"title":"freembuf","chapters":["EEL-only functions","Memory Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Hints the runtime that memory above the address specified may no longer be used. The runtime may, at its leisure, choose to lose the contents of memory above the address specified.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","file management"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"filehandler fp","description":""},{"identifier":"integer offset","description":""},{"identifier":"integer whence","description":""}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"retval","return_values":["integer"],"parameters":[{"type_name":"filehandler","identifier":"fp"},{"type_name":"integer","identifier":"offset"},{"type_name":"integer","identifier":"whence"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"-1, if seek isn't possible;"}],"prog_lang":"*"},"functioncall":{"eel":"integer retval = fseek(filehandler fp, integer offset, integer whence)"},"title":"fseek","chapters":["EEL-only functions","File Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Seeks file fp, offset bytes from whence reference. Whence negative specifies start of file, positive whence specifies end of file, and zero whence specifies current file position.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","file management"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"filehandler fp","description":"the handler of the file"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"fposition","return_values":["integer"],"parameters":[{"type_name":"filehandler","identifier":"fp"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer fposition","description":"the current position within the opened file"}],"prog_lang":"*"},"functioncall":{"eel":"integer fposition = ftell(filehandler fp)"},"title":"ftell","chapters":["EEL-only functions","File Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the current file position.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","file management"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"filehandler fp","description":"the handler of the file"},{"identifier":"string #str","description":"the string to write into the file"},{"identifier":"integer len","description":"the number of bytes to write to the file; 0, to write entire string"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"length","return_values":["integer"],"parameters":[{"type_name":"filehandler","identifier":"fp"},{"type_name":"string","identifier":"#str"},{"type_name":"integer","identifier":"len"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer length","description":"the number of written bytes"}],"prog_lang":"*"},"functioncall":{"eel":"integer length = fwrite(filehandler fp, string #str, integer len)"},"title":"fwrite","chapters":["EEL-only functions","File Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Writes up to len characters of #str to file fp. If len is less than 1, the full contents of #str will be written. Returns the number of bytes written to file.\n\nUse fflush(fp) to write all data from the cache into the file.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","misc","get action context","midi value","osc","section","filename","scriptfilename","commandid"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"string #filename","description":"the filename plus path of the script"},{"identifier":"integer sectionID","description":"the section \n0, Main\n100, Main (alt recording) \n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"},{"identifier":"integer cmdID","description":"the command id of the script"},{"identifier":"integer mode","description":"-1, if script isn't run by shortcut; 55953, if script is run by shortcut"},{"identifier":"integer resolution","description":"-1, if script isn't run by shortcut; resolution of OSC(14 bit)/MIDI(7 bit)"},{"identifier":"integer val","description":"the value sent by MIDI or OSC"},{"identifier":"string contextstr","description":"the shortcut, that ran this action, more info in the description"}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["get_action_context"],"parameters":[{"type_name":"string","identifier":"#filename"},{"type_name":"integer","identifier":"sectionID"},{"type_name":"integer","identifier":"cmdID"},{"type_name":"integer","identifier":"mode"},{"type_name":"integer","identifier":"resolution"},{"type_name":"integer","identifier":"val"},{"type_name":"string","identifier":"contextstr"}]}},"requires":{"Reaper":"6.71"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"get_action_context(string #filename, integer sectionID, integer cmdID, integer mode, integer resolution, integer val, string contextstr)"},"title":"get_action_context","chapters":["EEL-only functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Queries contextual information about the script, typically MIDI/OSC input values.\nReturns true if a new value has been updated.\nval will be set to a relative or absolute value depending on mode (=0: absolute mode, >0: relative modes). resolution=127 for 7-bit resolution, =16383 for 14-bit resolution.\nNotes: sectionID, and cmdID will be set to -1 if the script is not part of the action list. mode, resolution and val will be set to -1 if the script was not triggered via MIDI/OSC.\n\nFor relative mode bindings, calling get_action_context() will return the accumulated relative value in decoded form (not 65 or 63, but +1/-1 etc), and clear the internal state. So if you call it multiple times, the first one will return the accumulated value, and the second will always return 0.\n\ncontextstr may be empty or one of:\n\nmidi:XX[:YY] (one or two bytes hex)\n[wheel|hwheel|mtvert|mthorz|mtzoom|mtrot|mediakbd]:flags\nkey:flags:keycode\nosc:/msg[:f=FloatValue|:s=StringValue]\nKBD_OnMainActionEx\n(flags may include V=virtkey, S=shift, A=alt/option, C=control/command, W=win/control)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions","variables","gfx-variables"],"params":{"param_count":0,"entries":[]},"signatures":[],"requires":{"Reaper":"6.43"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx VARIABLES"},"title":"gfx_variables","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"The following global variables are special and will be used by the graphics system:\n\n   * gfx_r - current red component (0..1) used by drawing operations.\n   * gfx_g - current green component (0..1) used by drawing operations.\n   * gfx_b - current blue component (0..1) used by drawing operations.\n   * gfx_a2 - current alpha component (0..1) used by drawing operations when writing solid colors (normally ignored but useful when creating transparent images).\n   * gfx_a - alpha for drawing (1=normal).\n   * gfx_mode - blend mode for drawing. Set mode to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx_a to negative and use gfx_mode as additive). Add 2.0 to disable source alpha for gfx_blit(). Add 4.0 to disable filtering for gfx_blit().\n   * gfx_w - width of the UI framebuffer.\n   * gfx_h - height of the UI framebuffer.\n   * gfx_x - current graphics position X. Some drawing functions use as start position and update.\n   * gfx_y - current graphics position Y. Some drawing functions use as start position and update.\n   * gfx_clear - if greater than -1.0, framebuffer will be cleared to that color. the color for this one is packed RGB (0..255), i.e. red+green*256+blue*65536. The default is 0 (black).\n   * gfx_dest - destination for drawing operations, -1 is main framebuffer, set to 0..1024-1 to have drawing operations go to an offscreen buffer (or loaded image).\n   * gfx_texth - the (READ-ONLY) height of a line of text in the current font. Do not modify this variable.\n   * gfx_ext_retina - to support hidpi/retina, callers should set to 1.0 on initialization, this value will be updated to value greater than 1.0 (such as 2.0) if retina/hidpi. On macOS gfx_w/gfx_h/etc will be doubled, but on other systems gfx_w/gfx_h will remain the same and gfx_ext_retina is a scaling hint for drawing.\n   * mouse_x - current X coordinate of the mouse relative to the graphics window.\n   * mouse_y - current Y coordinate of the mouse relative to the graphics window.\n   * mouse_wheel - wheel position, will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it.\n   * mouse_hwheel - horizontal wheel positions, will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it.\n   * mouse_cap - a bitfield of mouse and keyboard modifier state:\n        1: left mouse button\n        2: right mouse button\n        4: Control key\n        8: Shift key\n        16: Alt key\n        32: Windows key\n        64: middle mouse button\n\n    Note: Mousebuttons will be returned after gfx_init(), the other keyboard-modifier only when using gfx_getchar()!","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"integer x","description":"x position of the center of the circle"},{"identifier":"integer y","description":"y position of the center of the circle"},{"identifier":"integer r","description":"the radius of the circle"},{"identifier":"float ang1","description":"the beginning of the circle in radians; meant for partial circles; 0-6.28"},{"identifier":"float ang2","description":"the end of the circle in radians; meant for partial circles; 0-6.28"},{"identifier":"optional float antialias","description":"<=0.5, antialias off; >0.5, antialias on"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"retval","return_values":["integer"],"parameters":[{"type_name":"integer","identifier":"x"},{"type_name":"integer","identifier":"y"},{"type_name":"integer","identifier":"r"},{"type_name":"float","identifier":"ang1"},{"type_name":"float","identifier":"ang2["},{"identifier":"antialias]","modifier":"optional","type_name":"float"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"usually 0"}],"prog_lang":"*"},"functioncall":{"eel":"integer retval = gfx_arc(integer x, integer y, integer r, float ang1, float ang2[, optional float antialias])"},"title":"gfx_arc","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draws an arc of the circle centered at x,y, with ang1/ang2 being specified in radians.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":13,"entries":[{"identifier":"integer source","description":"the source-image/framebuffer to blit; -1 to 1023; -1 for the currently displayed framebuffer."},{"identifier":"float scale","description":"the scale-factor; 1, for normal size; smaller or bigger than 1 make image smaller or bigger\nhas no effect, when destx, desty, destw, desth are given"},{"identifier":"float rotation","description":"the rotation-factor; 0 to 6.28; 3.14 for 180 degrees."},{"identifier":"optional float srcx","description":"the x-coordinate-offset in the source-image"},{"identifier":"optional float srcy","description":"the y-coordinate-offset in the source-image"},{"identifier":"optional float srcw","description":"the width-offset in the source-image"},{"identifier":"optional float srch","description":"the height-offset in the source-image"},{"identifier":"optional integer destx","description":"the x-coordinate of the blitting destination"},{"identifier":"optional integer desty","description":"the y-coordinate of the blitting destination"},{"identifier":"optional integer destw","description":"the width of the blitting destination; may lead to stretched images"},{"identifier":"optional integer desth","description":"the height of the blitting destination; may lead to stretched images"},{"identifier":"optional float rotxoffs","description":"influences rotation"},{"identifier":"optional float rotyoffs","description":"influences rotation"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"src","return_values":["integer"],"parameters":[{"type_name":"integer","identifier":"source"},{"type_name":"float","identifier":"scale"},{"type_name":"float","identifier":"rotation["},{"identifier":"srcx","modifier":"optional","type_name":"float"},{"identifier":"srcy","modifier":"optional","type_name":"float"},{"identifier":"srcw","modifier":"optional","type_name":"float"},{"identifier":"srch","modifier":"optional","type_name":"float"},{"identifier":"destx","modifier":"optional","type_name":"integer"},{"identifier":"desty","modifier":"optional","type_name":"integer"},{"identifier":"destw","modifier":"optional","type_name":"integer"},{"identifier":"desth","modifier":"optional","type_name":"integer"},{"identifier":"rotxoffs","modifier":"optional","type_name":"float"},{"identifier":"rotyoffs]","modifier":"optional","type_name":"float"}]}},"requires":{"Reaper":"6.46"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer src","description":"the blitted source"}],"prog_lang":"*"},"functioncall":{"eel":"integer src = gfx_blit(integer source, float scale, float rotation[, optional float srcx, optional float srcy, optional float srcw, optional float srch, optional integer destx, optional integer desty, optional integer destw, optional integer desth, optional float rotxoffs, optional float rotyoffs])"},"title":"gfx_blit","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Copies from source (-1 = main framebuffer, or an image from gfx_loadimg() etc), using current opacity and copy mode (set with gfx_a, gfx_mode).\n\nIf destx/desty are not specified, gfx_x/gfx_y will be used as the destination position.\n\nscale (1.0 is unscaled) will be used only if destw/desth are not specified.\n\nrotation is an angle in radians\n\nsrcx/srcy/srcw/srch specify the source rectangle (if omitted srcw/srch default to image size)\n\ndestx/desty/destw/desth specify destination rectangle (if not specified destw/desth default to srcw/srch * scale).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer source","description":""},{"identifier":"array coordinatelist","description":""},{"identifier":"float rotation","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["gfx_blitext"],"parameters":[{"type_name":"integer","identifier":"source"},{"type_name":"array","identifier":"coordinatelist"},{"type_name":"integer","identifier":"rotation"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx_blitext(integer source, array coordinatelist, integer rotation)"},"title":"gfx_blitext","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Deprecated, use gfx_blit instead.\n\nNote: the naming of the function might be misleading, as it has nothing to do with blitting of text, but rather is called Blit Ext.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer x","description":"x position of the other edge of the blur-region"},{"identifier":"integer y","description":"y position of the other edge of the blur-region"}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["gfx_blurto"],"parameters":[{"type_name":"integer","identifier":"x"},{"type_name":"integer","identifier":"y"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx_blurto(integer x, integer y)"},"title":"gfx_blurto","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Blurs the region of the screen between gfx_x,gfx_y and x,y, and updates gfx_x,gfx_y to x,y.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"integer x","description":"x position of center of the circle"},{"identifier":"integer y","description":"y position of center of the circle"},{"identifier":"float r","description":"radius of the circle"},{"identifier":"float fill","description":"<=0.5, circle is not filled; >0.5, circle is filled"},{"identifier":"float antialias","description":"<=0.5, circle is not antialiased; >0.5, circle is antialiased"}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["gfx_circle"],"parameters":[{"type_name":"integer","identifier":"x"},{"type_name":"integer","identifier":"y"},{"type_name":"float","identifier":"r["},{"type_name":"float","identifier":"fill"},{"type_name":"float","identifier":"antialias]"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx_circle(integer x, integer y, float r[, float fill, float antialias])"},"title":"gfx_circle","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draws a circle, optionally filling/antialiasing","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer x","description":"the x coordinate within(!) the gfx_init()-window, that shall be converted to screen-coordinates"},{"identifier":"integer y","description":"the y coordinate within(!) the gfx_init()-window, that shall be converted to screen-coordinates "}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["gfx_clienttoscreen"],"parameters":[{"type_name":"integer","identifier":"x"},{"type_name":"integer","identifier":"y"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx_clienttoscreen(integer x, integer y)"},"title":"gfx_clienttoscreen","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Converts client coordinates x,y to screen coordinates.\n\nUse variables for x and y, as the returned values will be put back into them:\n<pre><code>\n    gfx_init(\"\"); // open window\n    x=10; // the client x-coordinate\n    y=20; // the client y-coordinate\n\n    gfx_clienttoscreen(x,y); // x and y hold now the converted screen-coordinates\n</code></pre>","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":16,"entries":[{"identifier":"integer srcimg","description":"image - the image to blit"},{"identifier":"integer srcs","description":"positiondeltaX - the delta of the x-position of the image within the blitted area in pixels(useful default: 0)"},{"identifier":"integer srct","description":"positiondeltaY - the delta of the y-position of the image within the blitted area in pixels(useful default: 0)"},{"identifier":"integer srcw","description":"unknown - (useful default: 0)"},{"identifier":"integer srch","description":"unknown - (useful default: 0)"},{"identifier":"float destx","description":"positiondeltaX - the delta of the x-position of the blitted area in pixels(useful default: 0)"},{"identifier":"float desty","description":"positiondeltaY - the delta of the y-position of the blitted area in pixels(useful default: 0)"},{"identifier":"float destw","description":"blitsizeX - the x-size of the blitted area in pixels; the deltaimage might be cropped, if it exceeds this size(useful default: width of the image)"},{"identifier":"float desth","description":"blitsizeY - the y-size of the blitted area in pixels; the deltaimage might be cropped, if it exceeds this size(useful default: height of the image)"},{"identifier":"float dsdx","description":"stretchfactorX, the lower, the more stretched is the image(minimum 0; 1 for full size); limited by blitsizeX(useful default: 1)"},{"identifier":"float dtdx","description":"deltaY: the delta of the right side of the image, related to the left side of the image; positive, right is moved up; negative, right is moved down; this delta is linear(useful default: 0)"},{"identifier":"float dsdy","description":"deltaX: the delta of the bottom side of the image, related to the top side of the image; positive, bottom is moved left; negative, bottom is moved right; this delta is linear(useful default: 0)"},{"identifier":"float dtdy","description":"stretchfactorY, the lower, the more stretched is the image(minimum 0; 1 for full size); limited by blitsizeY(useful default: 1)"},{"identifier":"float dsdxdy","description":"deltacurvedY: the delta of the right side of the image, related to the left side of the image; positive, right is moved up; negative, right is moved down; this delta \"curves\" the delta via a bezier(useful default: 0)"},{"identifier":"float dtdxdy","description":"deltacurvedX: the delta of the bottom side of the image, related to the top side of the image; positive, bottom is moved left; negative, bottom is moved right; this delta \"curves\" the delta via a bezier(useful default: 0)"},{"identifier":"optional float usecliprect","description":"can be set to 0 or 1(useful default: 0)"}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["gfx_deltablit"],"parameters":[{"type_name":"integer","identifier":"srcimg"},{"type_name":"integer","identifier":"srcs"},{"type_name":"integer","identifier":"srct"},{"type_name":"integer","identifier":"srcw"},{"type_name":"integer","identifier":"srch"},{"type_name":"float","identifier":"destx"},{"type_name":"float","identifier":"desty"},{"type_name":"float","identifier":"destw"},{"type_name":"float","identifier":"desth"},{"type_name":"float","identifier":"dsdx"},{"type_name":"float","identifier":"dtdx"},{"type_name":"float","identifier":"dsdy"},{"type_name":"float","identifier":"dtdy"},{"type_name":"float","identifier":"dsdxdy"},{"type_name":"float","identifier":"dtdxdy["},{"identifier":"usecliprect=1]","modifier":"optional","type_name":"integer"}]}},"requires":{"Reaper":"5.95"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx_deltablit(integer srcimg, integer srcs, integer srct, integer srcw, integer srch, float destx, float desty, float destw, float desth, float dsdx, float dtdx, float dsdy, float dtdy, float dsdxdy, float dtdxdy[,optional integer usecliprect=1])"},"title":"gfx_deltablit","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Blits from srcimg(srcs,srct,srcw,srch) to destination (destx,desty,destw,desth). Source texture coordinates are s/t, dsdx represents the change in s coordinate for each x pixel, dtdy represents the change in t coordinate for each y pixel, etc. dsdxdy represents the change in dsdx for each line. If usecliprect is specified and 0, then srcw/srch are ignored.\n\nThis function allows you to manipulate the image, which you want to blit, by transforming, moving or cropping it.\n\nTo do rotation, you can manipulate dtdx and dsdy together.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"integer v","description":"-1, query only docking-state; 0 and higher, set state of the window to docked"},{"identifier":"optional integer wx","description":"will hold window-x-position"},{"identifier":"optional integer wy","description":"will hold window-y-position"},{"identifier":"optional integer ww","description":"will hold window-width            "},{"identifier":"optional integer wh","description":"will hold window-height"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"dockstate","return_values":["integer"],"parameters":[{"type_name":"integer","identifier":"v["},{"identifier":"wx","modifier":"optional","type_name":"integer"},{"identifier":"wy","modifier":"optional","type_name":"integer"},{"identifier":"ww","modifier":"optional","type_name":"integer"},{"identifier":"wh]","modifier":"optional","type_name":"integer"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer dockstate","description":"the new/queried dockstate"}],"prog_lang":"*"},"functioncall":{"eel":"integer dockstate = gfx_dock(integer v[, optional integer wx, optional integer wy, optional integer ww, optional integer wh])"},"title":"gfx_dock","chapters":["EEL-only functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Call with v=-1 to query docked state, otherwise v>=0 to set docked state. State is &1 if docked, second byte is docker index (or last docker index if undocked). If wx-wh are specified, they will be filled with the undocked window position/size","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer char","description":"the numeric ASCII-representation of the character to be drawn"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"retval","return_values":["integer"],"parameters":[{"type_name":"integer","identifier":"char"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the ASCII-representation of the shown character"}],"prog_lang":"*"},"functioncall":{"eel":"integer retval = gfx_drawchar(integer char)"},"title":"gfx_drawchar","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draws the character (can be a numeric ASCII code as well), to gfx_x, gfx_y, and moves gfx_x over by the size of the character.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"double n","description":"the number to draw"},{"identifier":"double n_digits","description":"the number of shown digits; double values will be rounded"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"retval","return_values":["double"],"parameters":[{"type_name":"double","identifier":"n"},{"type_name":"double","identifier":"n_digits"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"double retval","description":"the number of parameter n"}],"prog_lang":"*"},"functioncall":{"eel":"double retval = gfx_drawnumber(double n, double n_digits)"},"title":"gfx_drawnumber","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draws the number n with ndigits of precision to gfx_x, gfx_y, and updates gfx_x to the right side of the drawing. The text height is gfx_texth.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"string str","description":"the string to draw"},{"identifier":"optional integer flags","description":"the flags to adjust the text-alignement"},{"identifier":"optional integer right","description":"clip text at x-pixels from gfx_x"},{"identifier":"optional integer bottom","description":"clip text at y-pixels from gfx_y "}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"retval","return_values":["integer"],"parameters":[{"type_name":"string","identifier":"str"},{"identifier":"flags","modifier":"optional","type_name":"integer"},{"identifier":"right","modifier":"optional","type_name":"integer"},{"identifier":"bottom","modifier":"optional","type_name":"integer"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"2000000, no string is drawn; 2000001, string is drawn"}],"prog_lang":"*"},"functioncall":{"eel":"integer retval = gfx_drawstr(string str, optional integer flags, optional integer right, optional integer bottom)"},"title":"gfx_drawstr","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Draws a string at gfx\\_x, gfx\\_y, and updates gfx\\_x/gfx\\_y so that subsequent draws will occur in a similar place.\n\n\\* If flags, right ,bottom passed in:\n\\* flags&1: center horizontally\n\\* flags&2: right justify\n\\* flags&4: center vertically\n\\* flags&8: bottom justify\n\\* flags&256: ignore right/bottom, otherwise text is clipped to (gfx\\_x, gfx\\_y, right, bottom)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer char","description":"if you want to get only a certain character-key, pass the ASCII-code for the character into this parameter"},{"identifier":"integer unicode_char","description":"the unicode-charactercode"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"typed_character","return_values":["integer"],"parameters":[{"identifier":"char","modifier":"optional","type_name":"integer"},{"identifier":"unicode_char","modifier":"optional","type_name":"integer"}]}},"requires":{"Reaper":"6.74"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer typed_character","description":"the character that has been typed; -1, if no window is open"}],"prog_lang":"*"},"functioncall":{"eel":"integer typed_character = gfx_getchar(optional integer char, optional integer unicode_char)"},"title":"gfx_getchar","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"If char is 0 or omitted, returns a character from the keyboard queue, or 0 if no character is available, or -1 if the graphics window is not open. If char is specified and nonzero, that character's status will be checked, and the function will return greater than 0 if it is pressed.\n\nCommon values are standard ASCII, such as 'a', 'A', '=' and '1', but for many keys multi-byte values are used, including 'home', 'up', 'down', 'left', 'rght', 'f1'.. 'f12', 'pgup', 'pgdn', 'ins', and 'del'. \n\nShortcuts with scope \"Global + textfields\" will still run the associated action, scope of \"Normal\" or \"Global\" will not.\n\nModified and special keys can also be returned, including:\n\n\\* Ctrl/Cmd+A..Ctrl+Z as 1..26\n\\* Ctrl/Cmd+Alt+A..Z as 257..282\n\\* Alt+A..Z as 'A'+256..'Z'+256\n\\* 27 for ESC\n\\* 13 for Enter\n\\* ' ' for space\n\nIf the user typed in multiple characters, the character queue will hold them. So calling gfx_getchar multiple times, until it returns 0 or -1 will give you all typed keys.\n\nTyped characters between 256 and 1024(maybe higher?) seem to hint at multibyte-unicode characters. That means, you need to take the next character-value in the character-queue into consideration as well to get the current unicode-character!\n\nIf unichar is specified, it will be set to the unicode value of the key if available (and the return value may be the unicode value or a raw key value as described above, depending). If unichar is not specified, unicode codepoints greater than 255 will be returned as 'u'<<24 + value\n\nNote that calling gfx\\_getchar() at least once causes mouse\\_cap to reflect keyboard modifiers even when the mouse is not captured.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"optional string #str","description":"this variable will hold the font-face after calling gfx_getfont"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"font_index","return_values":["integer"],"parameters":[{"identifier":"#str","modifier":"optional","type_name":"string"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer font_index","description":"the index of the currently used font"}],"prog_lang":"*"},"functioncall":{"eel":"integer font_index = gfx_getfont(optional string #str)"},"title":"gfx_getfont","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns current font index. If a string is passed, it will receive the actual font face used by this font, if available.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer image","description":"the image, whose dimensions you want to retrieve"},{"identifier":"integer w","description":"will hold the width of the image"},{"identifier":"integer h","description":"will hold the height of the image"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"retval","return_values":["integer"],"parameters":[{"type_name":"integer","identifier":"image"},{"type_name":"integer","identifier":"w"},{"type_name":"integer","identifier":"h"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the image-index"}],"prog_lang":"*"},"functioncall":{"eel":"integer retval = gfx_getimgdim(integer image, integer w, integer h)"},"title":"gfx_getimgdim","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Retrieves the dimensions of image (representing a filename: index number) into w and h. Sets these values to 0 if an image failed loading (or if the filename index is invalid).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer r","description":"will hold the red-color-value, a value between 0 to 1"},{"identifier":"integer g","description":"will hold the green-color-value, a value between 0 to 1"},{"identifier":"integer b","description":"will hold the blue-color-value, a value between 0 to 1"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"red_value","return_values":["integer"],"parameters":[{"type_name":"integer","identifier":"r"},{"type_name":"integer","identifier":"g"},{"type_name":"integer","identifier":"b"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"integer red_value = gfx_getpixel(integer r, integer g, integer b)"},"title":"gfx_getpixel","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Gets the value of the pixel at gfx_x,gfx_y into r,g,b. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":16,"entries":[{"identifier":"integer x","description":""},{"identifier":"integer y","description":""},{"identifier":"integer w","description":""},{"identifier":"integer h","description":""},{"identifier":"double r","description":""},{"identifier":"double g","description":""},{"identifier":"double b","description":""},{"identifier":"double a","description":""},{"identifier":"optional double drdx","description":""},{"identifier":"optional double dgdx","description":""},{"identifier":"optional double dbdx","description":""},{"identifier":"optional double dadx","description":""},{"identifier":"optional double drdy","description":""},{"identifier":"optional double dgdy","description":""},{"identifier":"optional double dbdy","description":""},{"identifier":"optional double dady","description":""}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"retval","return_values":["integer"],"parameters":[{"type_name":"integer","identifier":"x"},{"type_name":"integer","identifier":"y"},{"type_name":"integer","identifier":"w"},{"type_name":"integer","identifier":"h"},{"type_name":"double","identifier":"r"},{"type_name":"double","identifier":"g"},{"type_name":"double","identifier":"b"},{"type_name":"double","identifier":"a"},{"identifier":"drdx","modifier":"optional","type_name":"double"},{"identifier":"dgdx","modifier":"optional","type_name":"double"},{"identifier":"dbdx","modifier":"optional","type_name":"double"},{"identifier":"dadx","modifier":"optional","type_name":"double"},{"identifier":"drdy","modifier":"optional","type_name":"double"},{"identifier":"dgdy","modifier":"optional","type_name":"double"},{"identifier":"dbdy","modifier":"optional","type_name":"double"},{"identifier":"dady","modifier":"optional","type_name":"double"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"eel":"integer retval = gfx_gradrect(integer x, integer y, integer w, integer h, double r, double g, double b, double a, optional double drdx, optional double dgdx, optional double dbdx, optional double dadx, optional double drdy, optional double dgdy, optional double dbdy, optional double dady)"},"title":"gfx_gradrect","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Fills a gradient rectangle with the color and alpha specified. drdx-dadx reflect the adjustment (per-pixel) applied for each pixel moved to the right, drdy-dady are the adjustment applied for each pixel moved toward the bottom. Normally drdx=adjustamount/w, drdy=adjustamount/h, etc.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"string name","description":"the name of the window; \"\" to alter position/size of already opened window"},{"identifier":"optional integer width","description":"the width of the window(default=640)"},{"identifier":"optional integer height","description":"the height of the window(default=400)"},{"identifier":"optional integer dockstate","description":"the dockstate of the window; 1, docked; 0, undocked(default undocked=0)"},{"identifier":"optional integer xpos","description":"the x-position of the window(default: 0)"},{"identifier":"optional integer ypos","description":"the y-position of the window(default: 0)"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"retval","return_values":["integer"],"parameters":[{"type_name":"string","identifier":"name"},{"identifier":"width","modifier":"optional","type_name":"integer"},{"identifier":"height","modifier":"optional","type_name":"integer"},{"identifier":"dockstate","modifier":"optional","type_name":"integer"},{"identifier":"xpos","modifier":"optional","type_name":"integer"},{"identifier":"ypos","modifier":"optional","type_name":"integer"}]}},"requires":{"Reaper":"6.40"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"integer retval = gfx_init(string name, optional integer width, optional integer height, optional integer dockstate, optional integer xpos, optional integer ypos)"},"title":"gfx_init","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Initializes the graphics window with title name. Suggested width and height can be specified.\n\nOnce the graphics window is open, [gfx\\_update()](#eel_gfx_update) should be called periodically. \n\nTo resize/reposition the window, call gfx_init again and pass an empty string as name-parameter.\n\nTo retitle the window, run gfx_init again with the new title as parameter name.\n\nTo get the current window-states, dimensions, etc, you can use [gfx_dock](#eel_gfx_dock).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"integer x","description":"the x-position of starting-point"},{"identifier":"integer y","description":"the y-position of starting-point"},{"identifier":"integer x2","description":"the x-position of ending-point"},{"identifier":"integer y2","description":"the y-position of ending-point"},{"identifier":"optional float aa","description":"0.5 and higher or not specified, antialias; lower than 0.5, not antialiased"}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["gfx_line"],"parameters":[{"type_name":"integer","identifier":"x"},{"type_name":"integer","identifier":"y"},{"type_name":"integer","identifier":"x2"},{"type_name":"integer","identifier":"y2"},{"identifier":"aa","modifier":"optional","type_name":"float"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx_line(integer x, integer y, integer x2, integer y2, optional float aa)"},"title":"gfx_line","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draws a line from x,y to x2,y2, and if aa is not specified or 0.5 or greater, it will be antialiased.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"x","description":""},{"identifier":"y","description":""},{"identifier":"aa","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["gfx_lineto"],"parameters":[{"identifier":"x"},{"identifier":"y["},{"identifier":"aa]"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx_lineto(x,y[,aa])"},"title":"gfx_lineto","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draws a line from gfx_x,gfx_y to x,y. If aa is 0.5 or greater, then antialiasing is used. Updates gfx_x and gfx_y to x,y.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"image","description":""},{"identifier":"filename","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["gfx_loadimg"],"parameters":[{"identifier":"image"},{"identifier":"filename"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx_loadimg(image,filename)"},"title":"gfx_loadimg","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Load image from filename into slot 0..1024-1 specified by image. Returns the image index if success, otherwise -1 if failure. The image will be resized to the dimensions of the image file. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"character","description":"a character, whose dimensions you want to know"},{"identifier":"w","description":"the width of this character"},{"identifier":"h","description":"the height if this character"}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["gfx_measurechar"],"parameters":[{"identifier":"character"},{"identifier":"&w"},{"identifier":"&h"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx_measurechar(character,&w,&h)"},"title":"gfx_measurechar","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Measures the drawing dimensions of a character with the current font (as set by [gfx.setfont](#lua_gfx.setfont)). Returns width and height of character.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions",""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"str","description":""},{"identifier":"w","description":""},{"identifier":"h","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["gfx_measurestr"],"parameters":[{"identifier":"str"},{"identifier":"&w"},{"identifier":"&h"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx_measurestr(str,&w,&h)"},"title":"gfx_measurestr","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Measures the drawing dimensions of a string with the current font (as set by gfx_setfont). ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":12,"entries":[{"identifier":"x","description":""},{"identifier":"y","description":""},{"identifier":"w","description":""},{"identifier":"h","description":""},{"identifier":"mul_r","description":""},{"identifier":"mul_g","description":""},{"identifier":"mul_b","description":""},{"identifier":"mul_a","description":""},{"identifier":"add_r","description":""},{"identifier":"add_g","description":""},{"identifier":"add_b","description":""},{"identifier":"add_a","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["gfx_muladdrect"],"parameters":[{"identifier":"x"},{"identifier":"y"},{"identifier":"w"},{"identifier":"h"},{"identifier":"mul_r"},{"identifier":"mul_g"},{"identifier":"mul_b["},{"identifier":"mul_a"},{"identifier":"add_r"},{"identifier":"add_g"},{"identifier":"add_b"},{"identifier":"add_a]"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx_muladdrect(x,y,w,h,mul_r,mul_g,mul_b[,mul_a,add_r,add_g,add_b,add_a])"},"title":"gfx_muladdrect","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Multiplies each pixel by mul_* and adds add_*, and updates in-place. Useful for changing brightness/contrast, or other effects.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"format","description":""},{"identifier":"...","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["gfx_printf"],"parameters":[{"identifier":"format["},{"identifier":"...]"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx_printf(format[, ...])"},"title":"gfx_printf","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Formats and draws a string at gfx\\_x, gfx\\_y, and updates gfx\\_x/gfx\\_y accordingly (the latter only if the formatted string contains newline). For more information on format strings, see [sprintf()](#eel_sprintf)\n\n  * %% = %  \n  * %s = string from parameter  \n  * %d = parameter as integer  \n  * %i = parameter as integer  \n  * %u = parameter as unsigned integer  \n  * %x = parameter as hex (lowercase) integer  \n  * %X = parameter as hex (uppercase) integer  \n  * %c = parameter as character  \n  * %f = parameter as floating point  \n  * %e = parameter as floating point (scientific notation, lowercase)  \n  * %E = parameter as floating point (scientific notation, uppercase)  \n  * %g = parameter as floating point (shortest representation, lowercase)  \n  * %G = parameter as floating point (shortest representation, uppercase)  \n\nMany standard C printf() modifiers can be used, including:\n\n  * %.10s = string, but only print up to 10 characters  \n  * %-10s = string, left justified to 10 characters  \n  * %10s = string, right justified to 10 characters  \n  * %+f = floating point, always show sign  \n  * %.4f = floating point, minimum of 4 digits after decimal point  \n  * %10d = integer, minimum of 10 digits (space padded)  \n  * %010f = integer, minimum of 10 digits (zero padded)  \n\nValues for format specifiers can be specified as additional parameters to gfx_printf, or within {} in the format specifier (such as %{varname}d, in that case a global variable is always used).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"param_count":0,"entries":[]},"signatures":{"eel":{"return_values":["gfx_quit"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx_quit()"},"title":"gfx_quit","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Closes the graphics window.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"x","description":""},{"identifier":"y","description":""},{"identifier":"w","description":""},{"identifier":"h","description":""},{"identifier":"filled","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["gfx_rect"],"parameters":[{"identifier":"x"},{"identifier":"y"},{"identifier":"w"},{"identifier":"h["},{"identifier":"filled]"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx_rect(x,y,w,h[,filled])"},"title":"gfx_rect","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Fills a rectangle at x,y,w,h pixels in dimension, filled by default. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"x","description":""},{"identifier":"y","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["gfx_rectto"],"parameters":[{"identifier":"x"},{"identifier":"y"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx_rectto(x,y)"},"title":"gfx_rectto","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Fills a rectangle from gfx_x,gfx_y to x,y. Updates gfx_x,gfx_y to x,y. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"x","description":""},{"identifier":"y","description":""},{"identifier":"w","description":""},{"identifier":"h","description":""},{"identifier":"radius","description":""},{"identifier":"antialias","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["gfx_roundrect"],"parameters":[{"identifier":"x"},{"identifier":"y"},{"identifier":"w"},{"identifier":"h"},{"identifier":"radius["},{"identifier":"antialias]"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx_roundrect(x,y,w,h,radius[,antialias])"},"title":"gfx_roundrect","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draws a rectangle with rounded corners. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"x","description":""},{"identifier":"y","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["gfx_screentoclient"],"parameters":[{"identifier":"x"},{"identifier":"y"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx_screentoclient(x,y)"},"title":"gfx_screentoclient","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Converts screen coordinates x,y to client coordinates.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"r","description":""},{"identifier":"g","description":""},{"identifier":"b","description":""},{"identifier":"a","description":""},{"identifier":"mode","description":""},{"identifier":"dest","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["gfx_set"],"parameters":[{"identifier":"r["},{"identifier":"g"},{"identifier":"b"},{"identifier":"a2"},{"identifier":"mode"},{"identifier":"dest]"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx_set(r[,g,b,a2,mode,dest])"},"title":"gfx_set","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sets gfx_r/gfx_g/gfx_b/gfx_a2/gfx_mode, sets gfx_dest if final parameter specified","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"resource_id","description":""},{"identifier":"custom_cursor_name","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["gfx_setcursor"],"parameters":[{"identifier":"resource_id"},{"identifier":"custom_cursor_name"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx_setcursor(resource_id,custom_cursor_name)"},"title":"gfx_setcursor","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sets the mouse cursor. resource_id is a value like 32512 (for an arrow cursor), custom_cursor_name is a string like \"arrow\" (for the REAPER custom arrow cursor). resource_id must be nonzero, but custom_cursor_name is optional.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["dragndrop","drop","file","filename","window","gfx","window","eel"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer idx","description":"the indexnumber for a filename, that has been dropped into a gfx_init()-window.\n0, the first file; 1, the second file; 2, the third file, etc.\n-1, clears the filelist."}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"retval","return_values":["integer"],"parameters":[{"type_name":"integer","identifier":"idx["},{"type_name":"string","identifier":"#filename]"}]}},"requires":{"Reaper":"6.69"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":"0, if droppped-filename with indexnumber idx doesn't exist; 1, if it exists; hints, if you already read all dropped filenames."},{"identifier":"string filename","description":"the filename of dropped-file with indexnumber idx; when starting with @fx: it is an fx dropped"}],"prog_lang":"*"},"functioncall":{"eel":"integer retval = gfx_getdropfile(integer idx[, string #filename])"},"title":"eel_getdropfile","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns filenames, drag'n'dropped into a window created by gfx_init().\nUse idx to get a specific filename, that has been dropped into the gfx_init()-window.\n\nWhen returned filename starts with @fx: it is an fx dropped.\n\nDoes NOT support mediaitems/takes or other Reaper-objects!\n\nIt MUST be called BEFORE calling gfx_update, as gfx_update flushes the filelist accessible with gfx_getdropfile.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"idx","description":"the font-id; idx=0 for default bitmapped font, no configuration is possible for this font.\nidx=1..16 for a configurable font"},{"identifier":"fontface","description":"the name of the font, like \"arial\""},{"identifier":"sz","description":"the size of the font (8-100)"},{"identifier":"flags","description":"flags, how to render the text; values are repeating every 256 numbers\na multibyte character, which can include 'i' for italics, 'u' for underline, or 'b' for bold. \nThese flags may or may not be supported depending on the font and OS. \n66 and 98, Bold (B), (b)\n73 and 105, italic (I), (i)\n79 and 111, white outline (O), (o)\n82 and 114, reduced(halfbright) (R), (r)\n83 and 115, sharpen (S), (s)\n85 and 117, underline (U), (u)\n86 and 118, inVerse (V), (v)"}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["gfx_setfont"],"parameters":[{"identifier":"idx["},{"identifier":"fontface"},{"identifier":"sz"},{"identifier":"flags]"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx_setfont(idx[,fontface, sz, flags])"},"title":"gfx_setfont","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Can select a font and optionally configure it. \n\nAfter calling gfx_setfont(), gfx_texth may be updated to reflect the new average line height.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"image","description":""},{"identifier":"w","description":""},{"identifier":"h","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["gfx_setimgdim"],"parameters":[{"identifier":"image"},{"identifier":"w"},{"identifier":"h"}]}},"requires":{"Reaper":"6.14"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx_setimgdim(image,w,h)"},"title":"gfx_setimgdim","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Resize image referenced by index 0..1024-1, width and height must be 0-8192. The contents of the image will be undefined after the resize.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"r","description":""},{"identifier":"g","description":""},{"identifier":"b","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["gfx_setpixel"],"parameters":[{"identifier":"r"},{"identifier":"g"},{"identifier":"b"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx_setpixel(r,g,b)"},"title":"gfx_setpixel","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Writes a pixel of r,g,b to gfx_x,gfx_y.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"menu_string","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["gfx_showmenu"],"parameters":[{"identifier":"menu_string"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx_showmenu(menu_string)"},"title":"gfx_showmenu","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Shows a popup menu at gfx_x,gfx_y. \nstr is a list of fields separated by | characters. Each field represents a menu item.\nFields can start with special characters:\n\n# : grayed out\n! : checked\n> : this menu item shows a submenu\n< : last item in the current submenu\n& : before a character makes it underlined as the quick-access-character for this menu-item\n\nAn empty field will appear as a separator in the menu. gfx_showmenu returns 0 if the user selected nothing from the menu, 1 if the first field is selected, etc.\nExample:\n\ngfx_showmenu(\"first item, followed by separator||!second item, checked|>third item which spawns a submenu|#first item in submenu, grayed out|<second and last item in submenu|fourth item in top menu\")\nNote: It skips submenus and separators in the selection-number, so a if menu_string=\"Entry1||<Entry two|Entry three\" will only return 1 for entry1 and 2 for Entry three but nothing for <Entry and ||.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"srcimg","description":""},{"identifier":"destx","description":""},{"identifier":"desty","description":""},{"identifier":"destw","description":""},{"identifier":"desth","description":""},{"identifier":"div_w","description":""},{"identifier":"div_h","description":""},{"identifier":"table","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["gfx_transformblit"],"parameters":[{"identifier":"srcimg"},{"identifier":"destx"},{"identifier":"desty"},{"identifier":"destw"},{"identifier":"desth"},{"identifier":"div_w"},{"identifier":"div_h"},{"identifier":"table"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx_transformblit(srcimg,destx,desty,destw,desth,div_w,div_h,table)"},"title":"gfx_transformblit","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Blits to destination at (destx,desty), size (destw,desth). div_w and div_h should be 2..64, and table should point to a table of 2*div_w*div_h values (this table must not cross a 65536 item boundary). Each pair in the table represents a S,T coordinate in the source image, and the table is treated as a left-right, top-bottom list of texture coordinates, which will then be rendered to the destination.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"markup_type":"plaintext","param_count":9,"entries":[{"identifier":"x1","description":""},{"identifier":"y1","description":""},{"identifier":"x2","description":""},{"identifier":"y2","description":""},{"identifier":"x3","description":""},{"identifier":"y3","description":""},{"identifier":"x4","description":""},{"identifier":"y4","description":""},{"identifier":"...","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["gfx_triangle"],"parameters":[{"identifier":"x1"},{"identifier":"y1"},{"identifier":"x2"},{"identifier":"y2"},{"identifier":"x3"},{"identifier":"y3[x4"},{"identifier":"y4...]"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx_triangle(x1,y1,x2,y2,x3,y3[x4,y4...])"},"title":"gfx_triangle","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draws a filled triangle, or any convex polygon. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","gfx functions"],"params":{"param_count":0,"entries":[]},"signatures":{"eel":{"return_values":["gfx_update"],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"gfx_update()"},"title":"gfx_update","chapters":["EEL-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Updates the graphics display, if opened.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","math"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"buffer","description":""},{"identifier":"size","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["ifft"],"parameters":[{"identifier":"buffer"},{"identifier":"size"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"ifft(buffer,size)"},"title":"ifft","chapters":["EEL-only functions","Math"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Perform an inverse FFT. For more information see fft()","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","math"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"buffer","description":""},{"identifier":"size","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["ifft_real"],"parameters":[{"identifier":"buffer"},{"identifier":"size"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"ifft_real(buffer,size)"},"title":"ifft_real","chapters":["EEL-only functions","Math"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Performs an inverse FFT, but takes size/2 complex input pairs and produces size real output values. Usually used along with fft_ipermute(size/2).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","math"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"value","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["invsqrt"],"parameters":[{"identifier":"value"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"invsqrt(value)"},"title":"invsqrt","chapters":["EEL-only functions","Math"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns a fast inverse square root (1/sqrt(x)) approximation of the parameter.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","math"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"value","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["log"],"parameters":[{"identifier":"value"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"log(value)"},"title":"log","chapters":["EEL-only functions","Math"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the natural logarithm (base e) of the parameter. If the value is not greater than 0, the return value is undefined.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","math"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"value","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["log10"],"parameters":[{"identifier":"value"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"log10(value)"},"title":"log10","chapters":["EEL-only functions","Math"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the base-10 logarithm of the parameter. If the value is not greater than 0, the return value is undefined.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","misc","loop","expression","execute"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"count","description":""},{"identifier":"expression","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["loop"],"parameters":[{"identifier":"count"},{"identifier":"expression"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"loop(count,expression)"},"title":"loop","chapters":["EEL-only functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Evaluates count once, and then executes expression count, but not more than 1048576, times.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","misc","string functions","match"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"needle","description":""},{"identifier":"haystack","description":""},{"identifier":"...","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["match"],"parameters":[{"identifier":"needle"},{"identifier":"haystack["},{"identifier":"...]"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"match(needle,haystack[, ...])"},"title":"match","chapters":["EEL-only functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Searches for the first parameter in the second parameter, using a simplified regular expression syntax.\n\n* * = match 0 or more characters\n* *? = match 0 or more characters, lazy\n* + = match 1 or more characters\n* +? = match 1 or more characters, lazy\n* ? = match one character\n\nYou can also use format specifiers to match certain types of data, and optionally put that into a variable:\n\n* %s means 1 or more chars\n* %0s means 0 or more chars\n* %5s means exactly 5 chars\n* %5-s means 5 or more chars\n* %-10s means 1-10 chars\n* %3-5s means 3-5 chars\n* %0-5s means 0-5 chars\n* %x, %d, %u, and %f are available for use similarly\n* %c can be used, but can't take any length modifiers\n* Use uppercase (%S, %D, etc) for lazy matching\n\nSee also sprintf() for other notes, including specifying direct variable references via {}.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","misc","string functions","match"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"needle","description":""},{"identifier":"haystack","description":""},{"identifier":"...","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["matchi"],"parameters":[{"identifier":"needle"},{"identifier":"haystack["},{"identifier":"...]"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"matchi(needle,haystack[, ...])"},"title":"matchi","chapters":["EEL-only functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Case-insensitive version of match().","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","misc","maximum of two values"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"value","description":""},{"identifier":"value2","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["max"],"parameters":[{"identifier":"&value"},{"identifier":"&value2"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"max(&value,&value2)"},"title":"max","chapters":["EEL-only functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns (by reference) the maximum value of the two parameters. Since max() returns by reference, expressions such as max(x,y) = 5 are possible.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","memory management"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"offset","description":""},{"identifier":"...","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["mem_get_values"],"parameters":[{"identifier":"offset"},{"identifier":"..."}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"mem_get_values(offset, ...)"},"title":"mem_get_values","chapters":["EEL-only functions","Memory Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Reads values from memory starting at offset into variables specified. Slower than regular memory reads for less than a few variables, faster for more than a few. Undefined behavior if used with more than 32767 variables.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","memory management"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"buf","description":""},{"identifier":"len","description":""},{"identifier":"value","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["mem_insert_shuffle"],"parameters":[{"identifier":"buf"},{"identifier":"len"},{"identifier":"value"}]}},"requires":{"Reaper":"6.74"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"mem_insert_shuffle(buf,len,value)"},"title":"mem_insert_shuffle","chapters":["EEL-only functions","Memory Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Shuffles contents of buf right by 1, inserts value at buf[0], returns previous buf[len-1].","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","memory management"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"src1","description":""},{"identifier":"src2","description":""},{"identifier":"length","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["mem_multiply_sum"],"parameters":[{"identifier":"src1"},{"identifier":"src2"},{"identifier":"length"}]}},"requires":{"Reaper":"6.74"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"mem_multiply_sum(src1,src2,length)"},"title":"mem_multiply_sum","chapters":["EEL-only functions","Memory Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Calculates the sum of the products of values pointed to by src1 and src2. If src2 is -1, then calculates the sum of squares of src1, if -2, the sum of the absolute values of src, if -3, calculates the sum of the values of src1. Other negative values are undefined.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","memory management"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"offset","description":""},{"identifier":"...","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["mem_set_values"],"parameters":[{"identifier":"offset"},{"identifier":"..."}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"mem_set_values(offset, ...)"},"title":"mem_set_values","chapters":["EEL-only functions","Memory Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Writes values to memory starting at offset from variables specified. Slower than regular memory writes for less than a few variables, faster for more than a few. Undefined behavior if used with more than 32767 variables.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","memory management"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"dest","description":""},{"identifier":"src","description":""},{"identifier":"length","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["memcpy"],"parameters":[{"identifier":"dest"},{"identifier":"src"},{"identifier":"length"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"memcpy(dest,src,length)"},"title":"memcpy","chapters":["EEL-only functions","Memory Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Copies length items of memory from src to dest. Regions are permitted to overlap.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","memory management"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"offset","description":""},{"identifier":"value","description":""},{"identifier":"length","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["memset"],"parameters":[{"identifier":"offset"},{"identifier":"value"},{"identifier":"length"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"memset(offset,value,length)"},"title":"memset","chapters":["EEL-only functions","Memory Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sets length items of memory at offset to value.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","misc","minimum of two parameters"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"value","description":""},{"identifier":"value2","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["min"],"parameters":[{"identifier":"&value"},{"identifier":"&value2"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"min(&value,&value2)"},"title":"min","chapters":["EEL-only functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns (by reference) the minimum value of the two parameters. Since min() returns by reference, expressions such as min(x,y) = 5 are possible.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","misc","string management","print","system"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"format","description":""},{"identifier":"...","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["printf"],"parameters":[{"identifier":"format["},{"identifier":"...]"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"printf(format[, ...])"},"title":"printf","chapters":["EEL-only functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"markdown","description":"Output formatted string to system-specific destination, see [sprintf\\(\\)](#eel_sprintf) for more information\n\n  * %% = %  \n  * %s = string from parameter  \n  * %d = parameter as integer  \n  * %i = parameter as integer  \n  * %u = parameter as unsigned integer  \n  * %x = parameter as hex (lowercase) integer  \n  * %X = parameter as hex (uppercase) integer  \n  * %c = parameter as character  \n  * %f = parameter as floating point  \n  * %e = parameter as floating point (scientific notation, lowercase)  \n  * %E = parameter as floating point (scientific notation, uppercase)  \n  * %g = parameter as floating point (shortest representation, lowercase)  \n  * %G = parameter as floating point (shortest representation, uppercase)  \n\nMany standard C printf() modifiers can be used, including:\n\n  * %.10s = string, but only print up to 10 characters  \n  * %-10s = string, left justified to 10 characters  \n  * %10s = string, right justified to 10 characters  \n  * %+f = floating point, always show sign  \n  * %.4f = floating point, minimum of 4 digits after decimal point  \n  * %10d = integer, minimum of 10 digits (space padded)  \n  * %010f = integer, minimum of 10 digits (zero padded)  \n\nValues for format specifiers can be specified as additional parameters to printf, or within {} in the format specifier (such as %{varname}d, in that case a global variable is always used).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","math"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"max","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["rand"],"parameters":[{"identifier":"[max]"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"rand([max])"},"title":"rand","chapters":["EEL-only functions","Math"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns a pseudorandom real number between 0 and the parameter, inclusive. If the parameter is omitted or less than 1.0, 1.0 is used as a maximum instead.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","misc","code","defer","run loop","background scripts"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string code","description":"the code to be run. You can also add a regular functioncall into this string, like \"main()\", if there's a main-function in the script"}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["runloop"],"parameters":[{"type_name":"string","identifier":"code"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"runloop(string code)"},"title":"runloop","chapters":["EEL-only functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().\n\nNote that no undo point will be automatically created when the script finishes, unless you create it explicitly.\n\nEach function called by runloop can only be deferred once per runloop-cycle(unlike in Lua, where you can have one function deferred multiple times).\n\nUnlike \"normal\" loops, runloop allows looped code to run in the background without blocking Reaper's user interface.\nThat way, scripts, who need longer time to run, can be made possible.\n\nExample:\nthe following example allows adding a to variable A with each runloop-cycle.\n<pre><code>\nfunction main()(\n  A=A+1;\n  runloop(\"main()\");\n);\n\nmain();\n</code></pre>","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","misc","sign"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"value","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["sign"],"parameters":[{"identifier":"value"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"sign(value)"},"title":"sign","chapters":["EEL-only functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns 1.0 if the parameter is greater than 0, -1.0 if the parameter is less than 0, or 0 if the parameter is 0.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","math"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"angle","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["sin"],"parameters":[{"identifier":"angle"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"sin(angle)"},"title":"sin","chapters":["EEL-only functions","Math"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the sine of the angle specified (specified in radians -- to convert from degrees to radians, multiply by $pi/180, or 0.017453).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","misc","sleep"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ms","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["sleep"],"parameters":[{"identifier":"ms"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"sleep(ms)"},"title":"sleep","chapters":["EEL-only functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Yields the CPU for the millisecond count specified, calling Sleep() on Windows or usleep() on other platforms.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","misc","string management","format string","printf"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"#dest","description":""},{"identifier":"format","description":""},{"identifier":"...","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["sprintf"],"parameters":[{"identifier":"#dest"},{"identifier":"format["},{"identifier":"...]"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"sprintf(#dest,format[, ...])"},"title":"sprintf","chapters":["EEL-only functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Formats a string and stores it in #dest. Format specifiers begin with %, and may include:\n\n    * %% = %\n    * %s = string from parameter\n    * %d = parameter as integer\n    * %i = parameter as integer\n    * %u = parameter as unsigned integer\n    * %x = parameter as hex (lowercase) integer\n    * %X = parameter as hex (uppercase) integer\n    * %c = parameter as character\n    * %f = parameter as floating point\n    * %e = parameter as floating point (scientific notation, lowercase)\n    * %E = parameter as floating point (scientific notation, uppercase)\n    * %g = parameter as floating point (shortest representation, lowercase)\n    * %G = parameter as floating point (shortest representation, uppercase)\n\nMany standard C printf() modifiers can be used, including:\n\n    * %.10s = string, but only print up to 10 characters\n    * %-10s = string, left justified to 10 characters\n    * %10s = string, right justified to 10 characters\n    * %+f = floating point, always show sign\n    * %.4f = floating point, minimum of 4 digits after decimal point\n    * %10d = integer, minimum of 10 digits (space padded)\n    * %010f = integer, minimum of 10 digits (zero padded)\n\nValues for format specifiers can be specified as additional parameters to sprintf, or within {} in the format specifier (such as %{varname}d, in that case a global variable is always used).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","math"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"value","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["sqr"],"parameters":[{"identifier":"value"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"sqr(value)"},"title":"sqr","chapters":["EEL-only functions","Math"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the square of the parameter (similar to value*value, but only evaluating value once).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","math"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"value","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["sqrt"],"parameters":[{"identifier":"value"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"sqrt(value)"},"title":"sqrt","chapters":["EEL-only functions","Math"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the square root of the parameter. If the parameter is negative, the return value is undefined.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","stack management"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"value","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["stack_exch"],"parameters":[{"identifier":"&value"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"stack_exch(&value)"},"title":"stack_exch","chapters":["EEL-only functions","Stack Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Exchanges a value with the top of the stack, and returns a reference to the parameter (with the new value).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","stack management"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"index","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["stack_peek"],"parameters":[{"identifier":"index"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"stack_peek(index)"},"title":"stack_peek","chapters":["EEL-only functions","Stack Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns a reference to the item on the top of the stack (if index is 0), or to the Nth item on the stack if index is greater than 0. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","stack management"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"value","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["stack_pop"],"parameters":[{"identifier":"&value"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"stack_pop(&value)"},"title":"stack_pop","chapters":["EEL-only functions","Stack Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Pops a value from the user stack into value, or into a temporary buffer if value is not specified, and returns a reference to where the stack was popped. Note that no checking is done to determine if the stack is empty, and as such stack_pop() will never fail.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","stack management"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"value","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["stack_push"],"parameters":[{"identifier":"&value"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"stack_push(&value)"},"title":"stack_push","chapters":["EEL-only functions","Stack Management"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Pushes value onto the user stack, returns a reference to the parameter.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","string management","delete"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"#str","description":""},{"identifier":"pos","description":""},{"identifier":"len","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["str_delsub"],"parameters":[{"identifier":"#str"},{"identifier":"pos"},{"identifier":"len"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"str_delsub(#str,pos,len)"},"title":"str_delsub","chapters":["EEL-only functions","Strings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Deletes len characters at offset pos from #str, and returns #str.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","string management","byte at offset"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"str","description":""},{"identifier":"offset","description":""},{"identifier":"type","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["str_getchar"],"parameters":[{"identifier":"str"},{"identifier":"offset["},{"identifier":"type]"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"str_getchar(str,offset[,type])"},"title":"str_getchar","chapters":["EEL-only functions","Strings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the data at byte-offset offset of str. \nIf offset is negative, position is relative to end of string.type defaults to signed char, but can be specified to read raw binary data in other formats \n(note the single quotes, these are single/multi-byte characters):\n\n* 'c' - signed char\n* 'cu' - unsigned char\n* 's' - signed short\n* 'S' - signed short, big endian\n* 'su' - unsigned short\n* 'Su' - unsigned short, big endian\n* 'i' - signed int\n* 'I' - signed int, big endian\n* 'iu' - unsigned int\n* 'Iu' - unsigned int, big endian\n* 'f' - float\n* 'F' - float, big endian\n* 'd' - double\n* 'D' - double, big endian","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","string management","insert"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"#str","description":""},{"identifier":"srcstr","description":""},{"identifier":"pos","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["str_insert"],"parameters":[{"identifier":"#str"},{"identifier":"srcstr"},{"identifier":"pos"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"str_insert(#str,srcstr,pos)"},"title":"str_insert","chapters":["EEL-only functions","Strings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Inserts srcstr into #str at offset pos. Returns #str.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","string management","get character at offset"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"#str","description":""},{"identifier":"offset","description":""},{"identifier":"val","description":""},{"identifier":"type","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["str_setchar"],"parameters":[{"identifier":"#str"},{"identifier":"offset"},{"identifier":"val["},{"identifier":"type]"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"str_setchar(#str,offset,val[,type]))"},"title":"str_setchar","chapters":["EEL-only functions","Strings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sets value at offset offset, type optional. offset may be negative to refer to offset relative to end of string, or between 0 and length, inclusive, and if set to length it will lengthen string. See eel_str_getchar for more information on types.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","string management","set length"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"#str","description":""},{"identifier":"len","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["str_setlen"],"parameters":[{"identifier":"#str"},{"identifier":"len"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"str_setlen(#str,len)"},"title":"str_setlen","chapters":["EEL-only functions","Strings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sets length of #str (if increasing, will be space-padded), and returns #str.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","string management","append"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"#str","description":""},{"identifier":"srcstr","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["strcat"],"parameters":[{"identifier":"#str"},{"identifier":"srcstr"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"strcat(#str,srcstr)"},"title":"strcat","chapters":["EEL-only functions","Strings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Appends srcstr to #str, and returns #str","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","string management","compare"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"str","description":""},{"identifier":"str2","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["strcmp"],"parameters":[{"identifier":"str"},{"identifier":"str2"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"strcmp(str,str2)"},"title":"strcmp","chapters":["EEL-only functions","Strings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Compares strings, returning 0 if equal","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","string management","copy"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"#str","description":""},{"identifier":"srcstr","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["strcpy"],"parameters":[{"identifier":"#str"},{"identifier":"srcstr"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"strcpy(#str,srcstr)"},"title":"strcpy","chapters":["EEL-only functions","Strings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Copies the contents of srcstr to #str, and returns #str","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","string management","copy","offset"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"#str","description":""},{"identifier":"srcstr","description":""},{"identifier":"offset","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["strcpy_from"],"parameters":[{"identifier":"#str"},{"identifier":"srcstr"},{"identifier":"offset"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"strcpy_from(#str,srcstr,offset)"},"title":"strcpy_from","chapters":["EEL-only functions","Strings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Copies srcstr to #str, but starts reading srcstr at offset offset","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","string management","substring","php style"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"#str","description":""},{"identifier":"srcstr","description":""},{"identifier":"offs","description":""},{"identifier":"ml","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["strcpy_substr"],"parameters":[{"identifier":"#str"},{"identifier":"srcstr"},{"identifier":"offs"},{"identifier":"ml"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"strcpy_substr(#str,srcstr,offs,ml))"},"title":"strcpy_substr","chapters":["EEL-only functions","Strings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"PHP-style (start at offs, offs<0 means from end, ml for maxlen, ml<0 = reduce length by this amt)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","string management","comparing","ignoring case"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"str","description":""},{"identifier":"str2","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["stricmp"],"parameters":[{"identifier":"str"},{"identifier":"str2"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"stricmp(str,str2)"},"title":"stricmp","chapters":["EEL-only functions","Strings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Compares strings ignoring case, returning 0 if equal.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","string management","get length"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"str","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["strlen"],"parameters":[{"identifier":"str"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"strlen(str)"},"title":"strlen","chapters":["EEL-only functions","Strings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the length of the string passed as a parameter.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","string management","concatenate","append"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"#str","description":""},{"identifier":"srcstr","description":""},{"identifier":"maxlen","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["strncat"],"parameters":[{"identifier":"#str"},{"identifier":"srcstr"},{"identifier":"maxlen"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"strncat(#str,srcstr,maxlen)"},"title":"strncat","chapters":["EEL-only functions","Strings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Appends srcstr to #str, stopping after maxlen characters of srcstr. Returns #str.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","string management","compare"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"str","description":""},{"identifier":"str2","description":""},{"identifier":"maxlen","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["strncmp"],"parameters":[{"identifier":"str"},{"identifier":"str2"},{"identifier":"maxlen"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"strncmp(str,str2,maxlen)"},"title":"strncmp","chapters":["EEL-only functions","Strings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Compares strings giving up after maxlen characters, returning 0 if equal.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","string management","copy"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"#str","description":""},{"identifier":"srcstr","description":""},{"identifier":"maxlen","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["strncpy"],"parameters":[{"identifier":"#str"},{"identifier":"srcstr"},{"identifier":"maxlen"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"strncpy(#str,srcstr,maxlen)"},"title":"strncpy","chapters":["EEL-only functions","Strings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Copies srcstr to #str, stopping after maxlen characters. Returns #str.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","string management","compare"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"str","description":""},{"identifier":"str2","description":""},{"identifier":"maxlen","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["strnicmp"],"parameters":[{"identifier":"str"},{"identifier":"str2"},{"identifier":"maxlen"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"strnicmp(str,str2,maxlen)"},"title":"strnicmp","chapters":["EEL-only functions","Strings"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Compares strings giving up after maxlen characters, ignoring case, returning 0 if equal.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","math"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"double angle","description":"the angle in radians"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"tangent","return_values":["double"],"parameters":[{"type_name":"double","identifier":"angle"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"double tangent","description":"the tangent of the angle"}],"prog_lang":"*"},"functioncall":{"eel":"double tangent = tan(double angle)"},"title":"tan","chapters":["EEL-only functions","Math"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the tangent of the angle specified (specified in radians).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","network"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"tcp_handler connection","description":"the handler to the tcp-connection"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"retval","return_values":["integer"],"parameters":[{"type_name":"tcp_handler","identifier":"connection"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"1, closing was successful; 0, closing was unsuccessful"}],"prog_lang":"*"},"functioncall":{"eel":"integer retval = tcp_close(tcp_handler connection)"},"title":"tcp_close","chapters":["EEL-only functions","Network"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Closes a TCP connection created by tcp_listen() or tcp_connect().","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","network"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"string address","description":"the tcp-address of the connection"},{"identifier":"integer port","description":"the port of the connection"},{"identifier":"optional integer block","description":"0, non-blocking connection; unspecified, blocking connection"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"connection","return_values":["tcp_handler"],"parameters":[{"type_name":"string","identifier":"address"},{"type_name":"integer","identifier":"port["},{"identifier":"block]","modifier":"optional","type_name":"integer"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"tcp_handler connection","description":"the handler to the tcp-connection"}],"prog_lang":"*"},"functioncall":{"eel":"tcp_handler connection = tcp_connect(string address, integer port[, optional integer block])"},"title":"tcp_connect","chapters":["EEL-only functions","Network"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Create a new TCP connection to address:port. If block is specified and 0, connection will be made nonblocking. Returns TCP connection ID greater than 0 on success.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","network"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer port","description":""},{"identifier":"optional string interface","description":""},{"identifier":"optional string #ip_out","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["tcp_listen"],"parameters":[{"type_name":"integer","identifier":"port["},{"identifier":"interface","modifier":"optional","type_name":"string"},{"identifier":"#ip_out]","modifier":"optional","type_name":"string"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"tcp_listen(integer port[, optional string interface, optional string #ip_out])"},"title":"tcp_listen","chapters":["EEL-only functions","Network"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Listens on port specified. Returns less than 0 if could not listen, 0 if no new connection available, or greater than 0 (as a TCP connection ID) if a new connection was made. If a connection made and #ip_out specified, it will be set to the remote IP. interface can be empty for all interfaces, otherwise an interface IP as a string.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","network"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer port","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["tcp_listen_end"],"parameters":[{"type_name":"integer","identifier":"port"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"tcp_listen_end(integer port)"},"title":"tcp_listen_end","chapters":["EEL-only functions","Network"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Ends listening on port specified.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","network"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"tcp_handler connection","description":""},{"identifier":"string #str","description":""},{"identifier":"integer maxlen","description":""}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"retval","return_values":["integer"],"parameters":[{"type_name":"tcp_handler","identifier":"connection"},{"type_name":"string","identifier":"#str["},{"type_name":"integer","identifier":"maxlen]"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"0, receiving works; -1, receiving doesn't work"}],"prog_lang":"*"},"functioncall":{"eel":"integer retval = tcp_recv(tcp_handler connection, string #str[, integer maxlen])"},"title":"tcp_recv","chapters":["EEL-only functions","Network"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Receives data from a connection to #str. If maxlen is specified, no more than maxlen bytes will be received. If non-blocking, 0 will be returned if would block. Returns less than 0 if error.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","network"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"tcp_handler connection","description":""},{"identifier":"string str","description":""},{"identifier":"optional integer len","description":""}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["tcp_send"],"parameters":[{"type_name":"tcp_handler","identifier":"connection"},{"type_name":"string","identifier":"str["},{"identifier":"len]","modifier":"optional","type_name":"integer"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"tcp_send(tcp_handler connection, string str[, optional integer len])"},"title":"tcp_send","chapters":["EEL-only functions","Network"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sends a string to connection. Returns -1 on error, 0 if connection is non-blocking and would block, otherwise returns length sent. If len is specified and not less than 1, only the first len bytes of the string parameter will be sent.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","network"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"tcp_handlerconnection","description":"the handler to the tcp-connection"},{"identifier":"integer block","description":"0, keep block unblocked"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"retval","return_values":["integer"],"parameters":[{"identifier":"connection"},{"identifier":"block"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the new block-state"}],"prog_lang":"*"},"functioncall":{"eel":"integer retval = tcp_set_block(connection,block)"},"title":"tcp_set_block","chapters":["EEL-only functions","Network"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sets whether a connection blocks.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","misc","time","system time"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer seconds","description":"number of seconds since January 1, 1970"}],"prog_lang":"*"},"signatures":{"eel":{"return_values":["time"],"parameters":[{"identifier":"[&val]"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"time([&val])"},"title":"time","chapters":["EEL-only functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sets the parameter (or a temporary buffer if omitted) to the number of seconds since January 1, 1970, and returns a reference to that value. The granularity of the value returned is 1 second.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","misc","precise time"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"float timestamp","description":"the timestamp"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"timestamp","return_values":["float"],"parameters":[{"identifier":"[&timestamp]"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"eel":"float timestamp = time_precise([&timestamp])"},"title":"time_precise","chapters":["EEL-only functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sets the parameter (or a temporary buffer if omitted) to a system-local timestamp in seconds, and returns a reference to that value. The granularity of the value returned is system defined (but generally significantly smaller than one second).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["eel","misc","while"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"code expression","description":"the expression that needs to return true or false"}],"prog_lang":"*"},"signatures":{"eel":{"method_name":"retval","return_values":["integer"],"parameters":[{"type_name":"code","identifier":"expression"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"0"}],"prog_lang":"*"},"functioncall":{"eel":"integer retval = while(code expression)"},"title":"while","chapters":["EEL-only functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Executes expression until expression evaluates to zero, or until 1048576 iterations occur. An alternate and more useful syntax is while (expression) ( statements ), which evaluates statements after every non-zero evaluation of expression.\n<pre><code>\n    A=0; // set A to 0\n\n    // while A is still less than 10, add 1 to A\n    while(A < 10)(\n      A=A+1;\n    );\n</code></pre>","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["lua","misc","atexit","exit code"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"function function","description":"the function, with which the script shall finish"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.atexit","return_values":[],"parameters":[{"identifier":"function","type":"function"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.atexit(function function)"},"title":"atexit","chapters":["Lua-only functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code.\n\nYou can't defer this atexit-function, when it is run as exit-function, though, when it is run regularily before exiting the script.\n\nYou can define more than one atexit-function. They will be run in the order they've been registered as atexit-functions.\nFor example:\n\n    reaper.atexit(exit1)\n    reaper.atexit(exit2)\n    reaper.atexit(exit3)\n\nwill run exit1, exit2 and then exit3, when exiting the script.\n\nYou can have up to 1024 atexit-functions set in one script, no matter if its different or the same function.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"function function","description":"the function to be called, when the current defer/runloop-run has ended"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.defer","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"function","type":"function"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, node could be created; false, you tried to add more than 1024 defer-nodes in the script"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.defer(function function)"},"title":"defer","chapters":["Lua-only functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.\n\nThere can be 1024 defer-nodes running at the same time in one script, no matter if it's different functions or the same one.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.get_action_context","return_values":[{"identifier":"is_new_value","type":"boolean"},{"identifier":"filename_with_path","type":"string"},{"identifier":"sectionID","type":"integer"},{"identifier":"cmdID","type":"integer"},{"identifier":"mode","type":"integer"},{"identifier":"resolution","type":"integer"},{"identifier":"val","type":"integer"},{"identifier":"contextstr","type":"string"}],"parameters":[]}},"requires":{"Reaper":"6.71"},"return_values":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"boolean is_new_value","description":"unknown"},{"identifier":"string filename_with_path","description":"the script's own filename with path"},{"identifier":"integer sectionID","description":"the section, in which this script was called"},{"identifier":"integer cmdID","description":"the command-id associated with this script"},{"identifier":"integer mode","description":"-1, if script isn't run by shortcut; 55953, if script is run by shortcut"},{"identifier":"integer resolution","description":"-1, if script isn't run by shortcut; resolution of OSC(14 bit)/MIDI(7 bit)-shortcut"},{"identifier":"integer val","description":"-1, if script isn't run by shortcut; the value sent by OSC or MIDI"},{"identifier":"string contextstr","description":"the shortcut, that ran this action, more info in the description"}],"prog_lang":"*"},"functioncall":{"lua":"boolean is_new_value, string filename_with_path, integer sectionID, integer cmdID, integer mode, integer resolution, integer val, string contextstr = reaper.get_action_context()"},"title":"get_action_context","chapters":["Lua-only functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns contextual information about the script, typically MIDI/OSC input values.val will be set to a relative or absolute value depending on mode (=0: absolute mode, >0: relative modes). resolution=127 for 7-bit resolution, =16383 for 14-bit resolution.Notes: sectionID, and cmdID will be set to -1 if the script is not part of the action list. mode, resolution and val will be set to -1 if the script was not triggered via MIDI/OSC.\n\nFor relative mode bindings, calling get_action_context() will return the accumulated relative value in decoded form (not 65 or 63, but +1/-1 etc), and clear the internal state. So if you call it multiple times, the first one will return the accumulated value, and the second will always return 0.\n\ncontextstr may be empty or one of:\n  midi:XX[:YY] (one or two bytes hex)\n  [wheel|hwheel|mtvert|mthorz|mtzoom|mtrot|mediakbd]:flags\n  key:flags:keycode\n  osc:/msg[:f=FloatValue|:s=StringValue]\n  KBD_OnMainActionEx\n  (flags may include V=virtkey, S=shift, A=alt/option, C=control/command, W=win/control)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"return_values":[{"type":"gfx"}],"parameters":[]}},"requires":{"Reaper":"6.30"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"gfx VARIABLES"},"title":"gfx_variables","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"The following global variables are special and will be used by the graphics system:\n\n  * gfx.r - current red component (0..1) used by drawing operations.\n  * gfx.g - current green component (0..1) used by drawing operations.\n  * gfx.b - current blue component (0..1) used by drawing operations.\n  * gfx.a2 - current alpha component (0..1) used by drawing operations when writing solid colors (normally ignored but useful when creating transparent images).\n  * gfx.a - alpha for drawing (1=normal).\n  * gfx.mode - blend mode for drawing. Set mode to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx.a to negative and use gfx.mode as additive). Add 2.0 to disable source alpha for gfx.blit(). Add 4.0 to disable filtering for gfx.blit().\n  * gfx.w - width of the UI framebuffer.\n  * gfx.h - height of the UI framebuffer.\n  * gfx.x - current graphics position X. Some drawing functions use as start position and update.\n  * gfx.y - current graphics position Y. Some drawing functions use as start position and update.\n  * gfx.clear - if greater than -1.0, framebuffer will be cleared to that color. the color for this one is packed RGB (0..255), i.e. red+green*256+blue*65536. The default is 0 (black).\n  * gfx.dest - destination for drawing operations, -1 is main framebuffer, set to 0..1024-1 to have drawing operations go to an offscreen buffer (or loaded image).\n  * gfx.texth - the (READ-ONLY) height of a line of text in the current font. Do not modify this variable.\n  * gfx.ext_retina - to support hidpi/retina, callers should set to 1.0 on initialization, this value will be updated to value greater than 1.0 (such as 2.0) if retina/hidpi. On macOS gfx.w/gfx.h/etc will be doubled, but on other systems gfx.w/gfx.h will remain the same and gfx.ext_retina is a scaling hint for drawing.\n  * gfx.mouse_x - current X coordinate of the mouse relative to the graphics window.\n  * gfx.mouse_y - current Y coordinate of the mouse relative to the graphics window.\n  * gfx.mouse_wheel - wheel position, will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it.\n  * gfx.mouse_hwheel - horizontal wheel positions, will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it.\n  * gfx.mouse_cap - a bitfield of mouse and keyboard modifier state:\n        1: left mouse button\n        2: right mouse button\n        4: Control key\n        8: Shift key\n        16: Alt key\n        32: Windows key\n        64: middle mouse button\n        \nNote: Mousebuttons will be returned after gfx_init(), the other keyboard-modifier only when using gfx_getchar()!\n        ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"integer x","description":"x position of the center of the circle"},{"identifier":"integer y","description":"y position of the center of the circle"},{"identifier":"integer r","description":"the radius of the circle"},{"identifier":"number ang1","description":"the beginning of the circle in radians; meant for partial circles; 0-6.28"},{"identifier":"number ang2","description":"the end of the circle in radians; meant for partial circles; 0-6.28"},{"identifier":"optional number antialias","description":"<=0.5, antialias off; >0.5, antialias on"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.arc","return_values":[],"parameters":[{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"},{"identifier":"r","type":"integer"},{"identifier":"ang1","type":"number"},{"identifier":"ang2","type":"number"},{"isOptional":true,"type":"number","identifier":"antialias"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"gfx.arc(integer x, integer y, integer r, number ang1, number ang2, optional number antialias)"},"title":"gfx.arc","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draws an arc of the circle centered at x,y, with ang1/ang2 being specified in radians.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":13,"entries":[{"identifier":"integer source","description":"the source-image/framebuffer to blit; -1 to 1023; -1 for the currently displayed framebuffer."},{"identifier":"number scale","description":"the scale-factor; 1, for normal size; smaller or bigger than 1 make image smaller or bigger\nhas no effect, when destx, desty, destw, desth are given"},{"identifier":"number rotation","description":"the rotation-factor; 0 to 6.28; 3.14 for 180 degrees."},{"identifier":"optional number srcx","description":"the x-coordinate-offset in the source-image"},{"identifier":"optional number srcy","description":"the y-coordinate-offset in the source-image"},{"identifier":"optional number srcw","description":"the width-offset in the source-image"},{"identifier":"optional number srch","description":"the height-offset in the source-image"},{"identifier":"optional integer destx","description":"the x-coordinate of the blitting destination"},{"identifier":"optional integer desty","description":"the y-coordinate of the blitting destination"},{"identifier":"optional integer destw","description":"the width of the blitting destination; may lead to stretched images"},{"identifier":"optional integer desth","description":"the height of the blitting destination; may lead to stretched images"},{"identifier":"optional number rotxoffs","description":"influences rotation"},{"identifier":"optional number rotyoffs","description":"influences rotation"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.blit","return_values":[{"identifier":"source","type":"integer"}],"parameters":[{"identifier":"source","type":"integer"},{"identifier":"scale","type":"number"},{"identifier":"rotation","type":"number"},{"isOptional":true,"type":"number","identifier":"srcx"},{"isOptional":true,"type":"number","identifier":"srcy"},{"isOptional":true,"type":"number","identifier":"srcw"},{"isOptional":true,"type":"number","identifier":"srch"},{"isOptional":true,"type":"integer","identifier":"destx"},{"isOptional":true,"type":"integer","identifier":"desty"},{"isOptional":true,"type":"integer","identifier":"destw"},{"isOptional":true,"type":"integer","identifier":"desth"},{"isOptional":true,"type":"integer","identifier":"rotxoffs"},{"isOptional":true,"type":"integer","identifier":"rotyoffs"}]}},"requires":{"Reaper":"6.46"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"integer source = gfx.blit(integer source, number scale, number rotation, optional number srcx, optional number srcy, optional number srcw, optional number srch, optional integer destx, optional integer desty, optional integer destw, optional integer desth, optional integer rotxoffs,  optional integer rotyoffs)"},"title":"gfx.blit","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Blits(draws) the content of source-image to another source-image or an opened window.\n\nCopies from source (-1 = main framebuffer, or an image from gfx.loadimg() etc), using current opacity and copy mode (set with gfx.a, gfx.mode).\n\nIf destx/desty are not specified, gfx.x/gfx.y will be used as the destination position.\n\nscale (1.0 is unscaled) will be used only if destw/desth are not specified.\n\nrotation is an angle in radians\n\nsrcx/srcy/srcw/srch specify the source rectangle (if omitted srcw/srch default to image size)\n\ndestx/desty/destw/desth specify destination rectangle (if not specified destw/desth default to srcw/srch * scale).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer source","description":"the source of the blitted image"},{"identifier":"table coordinatelist","description":""},{"identifier":"number rotation","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.blitext","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"type":"source"},{"type":"coordinatelist"},{"type":"rotation"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":"the index of the source that got blitted"}],"prog_lang":"*"},"functioncall":{"lua":"number retval = gfx.blitext(source,coordinatelist,rotation)"},"title":"gfx.blitext","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Deprecated, use gfx.blit instead.\n\nNote: the naming of the function might be misleading, as it has nothing to do with blitting of text, but rather is called Blit Ext.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer x","description":"x position of the other edge of the blur-region"},{"identifier":"integer y","description":"y position of the other edge of the blur-region"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.blurto","return_values":[],"parameters":[{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"gfx.blurto(integer x, integer y)"},"title":"gfx.blurto","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Blurs the region of the screen between gfx.x,gfx.y and x,y, and updates gfx.x,gfx.y to x,y.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"integer x","description":"x position of center of the circle"},{"identifier":"integer y","description":"y position of center of the circle"},{"identifier":"integer r","description":"radius of the circle"},{"identifier":"optional number fill","description":"<=0.5, circle is not filled; >0.5, circle is filled"},{"identifier":"optional number antialias","description":"<=0.5, circle is not antialiased; >0.5, circle is antialiased"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.circle","return_values":[],"parameters":[{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"},{"identifier":"r","type":"integer"},{"isOptional":true,"type":"number","identifier":"fill"},{"isOptional":true,"type":"number","identifier":"antialias"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"gfx.circle(integer x, integer y, integer r, optional number fill, optional number antialias)"},"title":"gfx.circle","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draws a circle, optionally filling/antialiasing. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer x","description":"the x coordinate within(!) the gfx.init()-window, that shall be converted to screen-coordinates"},{"identifier":"integer y","description":"the y coordinate within(!) the gfx.init()-window, that shall be converted to screen-coordinates "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.clienttoscreen","return_values":[{"identifier":"convx","type":"int"},{"identifier":"convy","type":"int"}],"parameters":[{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer convx","description":"the converted coordinate in relation of the screen-viewport"},{"identifier":"integer convy","description":"the converted coordinate in relation of the screen-viewport"}],"prog_lang":"*"},"functioncall":{"lua":"int convx, int convy = gfx.clienttoscreen(integer x, integer y)"},"title":"gfx.clienttoscreen","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Converts the coordinates x,y to screen coordinates, returns those values.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":16,"entries":[{"identifier":"integer srcimg","description":"image - the image to blit"},{"identifier":"integer srcs","description":"positiondeltaX - the delta of the x-position of the image within the blitted area in pixels(useful default: 0)"},{"identifier":"integer srct","description":"positiondeltaY - the delta of the y-position of the image within the blitted area in pixels(useful default: 0)"},{"identifier":"integer srcw","description":"unknown - (useful default: 0)"},{"identifier":"integer srch","description":"unknown - (useful default: 0)"},{"identifier":"number destx","description":"positiondeltaX - the delta of the x-position of the blitted area in pixels(useful default: 0)"},{"identifier":"number desty","description":"positiondeltaY - the delta of the y-position of the blitted area in pixels(useful default: 0)"},{"identifier":"number destw","description":"blitsizeX - the x-size of the blitted area in pixels; the deltaimage might be cropped, if it exceeds this size(useful default: width of the image)"},{"identifier":"number desth","description":"blitsizeY - the y-size of the blitted area in pixels; the deltaimage might be cropped, if it exceeds this size(useful default: height of the image)"},{"identifier":"number dsdx","description":"stretchfactorX, the lower, the more stretched is the image(minimum 0; 1 for full size); limited by blitsizeX(useful default: 1)"},{"identifier":"number dtdx","description":"deltaY: the delta of the right side of the image, related to the left side of the image; positive, right is moved up; negative, right is moved down; this delta is linear(useful default: 0)"},{"identifier":"number dsdy","description":"deltaX: the delta of the bottom side of the image, related to the top side of the image; positive, bottom is moved left; negative, bottom is moved right; this delta is linear(useful default: 0)"},{"identifier":"number dtdy","description":"stretchfactorY, the lower, the more stretched is the image(minimum 0; 1 for full size); limited by blitsizeY(useful default: 1)"},{"identifier":"number dsdxdy","description":"deltacurvedY: the delta of the right side of the image, related to the left side of the image; positive, right is moved up; negative, right is moved down; this delta \"curves\" the delta via a bezier(useful default: 0)"},{"identifier":"number dtdxdy","description":"deltacurvedX: the delta of the bottom side of the image, related to the top side of the image; positive, bottom is moved left; negative, bottom is moved right; this delta \"curves\" the delta via a bezier(useful default: 0)"},{"identifier":"optional integer usecliprect","description":"can be set to 0 or 1(useful default: 0)"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.deltablit","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"srcimg","type":"integer"},{"identifier":"srcs","type":"integer"},{"identifier":"srct","type":"integer"},{"identifier":"srcw","type":"integer"},{"identifier":"srch","type":"integer"},{"identifier":"destx","type":"number"},{"identifier":"desty","type":"number"},{"identifier":"destw","type":"number"},{"identifier":"desth","type":"number"},{"identifier":"dsdx","type":"number"},{"identifier":"dtdx","type":"number"},{"identifier":"dsdy","type":"number"},{"identifier":"dtdy","type":"number"},{"identifier":"dsdxdy","type":"number"},{"identifier":"dtdxdy","type":"number"},{"isOptional":true,"type":"integer","identifier":"usecliprect"}]}},"requires":{"Reaper":"5.95"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":"unknown, usually 0"}],"prog_lang":"*"},"functioncall":{"lua":"number retval = gfx.deltablit(integer srcimg, integer srcs, integer srct, integer srcw, integer srch, number destx, number desty, number destw, number desth, number dsdx, number dtdx, number dsdy, number dtdy, number dsdxdy, number dtdxdy,optional integer usecliprect)"},"title":"gfx.deltablit","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Blits from srcimg(srcs,srct,srcw,srch) to destination (destx,desty,destw,desth). Source texture coordinates are s/t, dsdx represents the change in s coordinate for each x pixel, dtdy represents the change in t coordinate for each y pixel, etc. dsdxdy represents the change in dsdx for each line. If usecliprect is specified and 0, then srcw/srch are ignored.\n\nThis function allows you to manipulate the image, which you want to blit, by transforming, moving or cropping it.\n\nTo do rotation, you can manipulate dtdx and dsdy together.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"integer v","description":"-1, query docking-state; 0 and higher, set state of the window to docked; the bits &256, &512, &1024, &2048 set the docker-index"},{"identifier":"optional integer wx","description":"set to a number to query current-windowx-position"},{"identifier":"optional integer wy","description":"set to a number to query current-windowy-position"},{"identifier":"optional integer ww","description":"set to a number to query current-window-width"},{"identifier":"optional integer wh","description":"set to a number to query current-window-height"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.dock","return_values":[{"identifier":"querystate","type":"number"},{"isOptional":true,"type":"integer","identifier":"window_x_position"},{"isOptional":true,"type":"integer","identifier":"window_y_position"},{"isOptional":true,"type":"integer","identifier":"window_width"},{"isOptional":true,"type":"integer","identifier":"window_height"}],"parameters":[{"identifier":"v","type":"integer"},{"isOptional":true,"type":"integer","identifier":"wx"},{"isOptional":true,"type":"integer","identifier":"wy"},{"isOptional":true,"type":"integer","identifier":"ww"},{"isOptional":true,"type":"integer","identifier":"wh"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"integer querystate","description":"0 if not docked; &1 if docked;  the bits &256, &512, &1024, &2048 get the docker-index"},{"identifier":"integer window_x_position","description":"the x position of the window in pixels; only if wx~=nil"},{"identifier":"integer window_y_position","description":"the y position of the window in pixels; only if wy~=nil"},{"identifier":"integer window_width","description":"the width of the window in pixels; only if ww~=nil"},{"identifier":"integer window_height","description":"the height of the window in pixels ; only if wh~=nil"}],"prog_lang":"*"},"functioncall":{"lua":"number querystate, optional integer window_x_position, optional integer window_y_position, optional integer window_width, optional integer window_height = gfx.dock(integer v, optional integer wx, optional integer wy, optional integer ww, optional integer wh)"},"title":"gfx.dock","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Queries or sets the docking-state of the gfx.init()-window.\nCall with v=-1 to query docked state, otherwise v>=0 to set docked state. \nState is &1 if docked, second byte is docker index (or last docker index if undocked). \n\nIf you pass numbers to wx-wh, you can query window size and position additionally to the dock-state\n\nA specific docking index does not necessarily represent a specific docker, means, you can not query/set left docker top, but rather all dockers that exist in the current screenset.\nSo the first queried/set docker can be top-left-docker or the top docker or even one of the bottom dockers.\nThe order doesn't seem to make any sense. Especially with more than 16 windows docked in the current screenset.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer char","description":"the numeric ASCII-representation of the character to be drawn"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.drawchar","return_values":[{"identifier":"char","type":"integer"}],"parameters":[{"identifier":"char","type":"integer"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer char","description":"the character drawn; 0, if invalid(like strings or characters passed as parameter)"}],"prog_lang":"*"},"functioncall":{"lua":"integer char = gfx.drawchar(integer char)"},"title":"gfx.drawchar","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draws the character (can be a numeric ASCII code as well), to gfx.x, gfx.y, and moves gfx.x over by the size of the character.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number n","description":"the number to be drawn"},{"identifier":"integer ndigits","description":"the number of digits for the precision"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.drawnumber","return_values":[],"parameters":[{"identifier":"n","type":"number"},{"identifier":"ndigits","type":"integer"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"gfx.drawnumber(number n, integer ndigits)"},"title":"gfx.drawnumber","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draws the number n with ndigits of precision to gfx.x, gfx.y, and updates gfx.x to the right side of the drawing. The text height is gfx.texth.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"string str","description":"the string to be drawn into the gfx.init-window"},{"identifier":"optional integer flags","description":"influence, how the text shall be drawn\n flags&1: center horizontally\n flags&2: right justify\n flags&4: center vertically\n flags&8: bottom justify\n flags&256: ignore right/bottom, otherwise text is clipped to (gfx.x, gfx.y, right, bottom)"},{"identifier":"optional integer right","description":"if flags&256 is set, this parameter clips text on the right side in pixels"},{"identifier":"optional integer bottom","description":"if flags&256 is set, this parameter clips text on the bottom side in pixels "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.drawstr","return_values":[],"parameters":[{"identifier":"str","type":"string"},{"isOptional":true,"type":"integer","identifier":"flags"},{"isOptional":true,"type":"integer","identifier":"right"},{"isOptional":true,"type":"integer","identifier":"bottom"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"gfx.drawstr(string str, optional integer flags, optional integer right, optional integer bottom)"},"title":"gfx.drawstr","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draws a string at gfx.x, gfx.y, and updates gfx.x/gfx.y so that subsequent draws will occur in a similar place.\n\nYou can optionally set a clipping area for the text, if you set parameter flags&256 and the parameters right and bottom.\n\nOn Windows, fonts with a size > 255 may have trouble of being displayed correctly, due problems with the font-rendering and the alpha-channel. <a href=\"https://forum.cockos.com/showpost.php?p=2311977&postcount=7\">Justin's post about this.</a>\nTo overcome this, try this to disable the alpha-channel: \nBy default, gfx.blit() blits with alpha channel. You can disable this behavior by setting \"gfx.mode=2\" before calling gfx.blit().","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"optional integer character","description":"the character to check for; use 65536 to check window-state(visible, focus)\n   &1 (supported in this script), &2=window has focus, &4=window is visible"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.getchar","return_values":[{"identifier":"charactercode","type":"integer"}],"parameters":[{"isOptional":true,"type":"integer","identifier":"character"},{"isOptional":true,"type":"integer","identifier":"unicode_char"}]}},"requires":{"Reaper":"6.74"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer charactercode","description":"either the charactercode or 0 if nothing is pressed\n-1, if the gfx.init-window is closed\n\nWhen the parameter character is given and not 0, charactercode is either \n0, nothing is pressed, or\n>0, the character you want to check for is pressed."},{"identifier":"integer unicode_charactercode","description":"the charactercode of the character encoded as utf8-unicode"}],"prog_lang":"*"},"functioncall":{"lua":"integer charactercode = gfx.getchar(optional integer character, optional integer unicode_char)"},"title":"gfx.getchar","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"If char is 0 or omitted, returns a character from the keyboard queue, or 0 if no character is available, or -1 if the graphics window is not open. \n\nIf char is specified and nonzero, that character's status will be checked, and the function will return greater than 0 if it is pressed.\nCommon values are standard ASCII, such as 'a', 'A', '=' and '1', but for many keys multi-byte values are used, \nincluding 'home', 'up', 'down', 'left', 'right', 'f1'.. 'f12', 'pgup', 'pgdn', 'ins', and 'del'. \n\nShortcuts with scope \"Global + textfields\" will still run the associated action, scope of \"Normal\" or \"Global\" will not.\n\nModified and special keys can also be returned, including:  \n\n- Ctrl/Cmd+A..Ctrl+Z as 1..26  \n- Ctrl/Cmd+Alt+A..Z as 257..282  \n- Alt+A..Z as 'A'+256..'Z'+256  \n- 27 for ESC  \n- 13 for Enter  \n- ' ' for space  \n-\n- use 65536 as parameter charactercode to query special flags, returns: &1 (supported in this script), &2=window has focus, &4=window is visible  \n\nIf the user typed in multiple characters, the character queue will hold them. So calling gfx.getchar multiple times, until it returns 0 or -1 will give you all typed keys.\n\nTyped characters between 256 and 1024(maybe higher?) seem to hint at multibyte-unicode characters. \nThat means, you need to take the next character-value in the character-queue into consideration as well to get the current unicode-character!\n\nIf unichar is specified, it will be set to the unicode value of the key if available (and the return value may be the unicode value or a raw key value as described above, depending). If unichar is not specified, unicode codepoints greater than 255 will be returned as 'u'<<24 + value\n\nNote that calling gfx.getchar() at least once causes gfx.mouse_cap to reflect keyboard modifiers even when the mouse is not captured.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["dragndrop","drop","file","filename","window","gfx","window","lua"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer idx","description":"the indexnumber for a filename, that has been dropped into a gfx.init()-window.\n0, the first file; 1, the second file; 2, the third file, etc.\n-1, clears the filelist."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.getdropfile","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"filename","type":"string"}],"parameters":[{"identifier":"idx","type":"integer"}]}},"requires":{"Reaper":"6.69"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":"0, if droppped-filename with indexnumber idx doesn't exist; 1, if it exists; hints, if you already reached the last filename dropped."},{"identifier":"string filename","description":"the filename of dropped-file with indexnumber idx; if filename starts with @fx: then the filename is a dropped fx"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, string filename = gfx.getdropfile(integer idx)"},"title":"gfx.getdropfile","chapters":["Lua-only functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns filenames, drag'n'dropped into a window created by gfx.init().\nUse idx to get a specific filename, that has been dropped into the gfx.init()-window.\n\nWhen returned filename starts with @fx: it is an fx dropped.\n      \nDoes NOT support mediaitems/takes or other Reaper-objects!\n\nIt MUST be called BEFORE calling gfx.update, as gfx.update flushes the filelist accessible with gfx.getdropfile.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"gfx.getfont","return_values":[{"identifier":"fontindex","type":"integer"},{"identifier":"fontface","type":"string"}],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer fontindex","description":"the index of the font used. "},{"identifier":"string fontface","description":"the font-face(fontname) of the currently used font"}],"prog_lang":"*"},"functioncall":{"lua":"integer fontindex, string fontface = gfx.getfont()"},"title":"gfx.getfont","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns current font index, and the actual font face used by this font (if available).\n\nUse gfx.setfont to set a font for a specific index.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer handle","description":"the index of the image-handle/framebuffer to retrieve the dimensions from;-1 to 1023; -1 for the currently displayed framebuffer."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.getimgdim","return_values":[{"identifier":"w","type":"integer"},{"identifier":"h","type":"integer"}],"parameters":[{"identifier":"handle","type":"integer"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer w","description":"the width of the image-handle in pixels"},{"identifier":"integer h","description":"the height of the image-handle in pixels"}],"prog_lang":"*"},"functioncall":{"lua":"integer w, integer h = gfx.getimgdim(integer handle)"},"title":"gfx.getimgdim","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Retrieves the dimensions of an image specified by handle, returns w, h pair.\nHandle is basically a frame-buffer.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"gfx.getpixel","return_values":[{"identifier":"r","type":"integer"},{"identifier":"g","type":"integer"},{"identifier":"b","type":"integer"}],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer r","description":"the red-color-value, a value between 0 to 1"},{"identifier":"integer g","description":"the green-color-value, a value between 0 to 1"},{"identifier":"integer b","description":"the blue-color-value, a value between 0 to 1"}],"prog_lang":"*"},"functioncall":{"lua":"integer r, integer g, integer b = gfx.getpixel()"},"title":"gfx.getpixel","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns r,g,b values [0..1] of the pixel at (gfx.x,gfx.y)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":16,"entries":[{"identifier":"number x","description":""},{"identifier":"number y","description":""},{"identifier":"number w","description":""},{"identifier":"number h","description":""},{"identifier":"number r","description":""},{"identifier":"number g","description":""},{"identifier":"number b","description":""},{"identifier":"number a","description":""},{"identifier":"optional number drdx","description":""},{"identifier":"optional number dgdx","description":""},{"identifier":"optional number dbdx","description":""},{"identifier":"optional number dadx","description":""},{"identifier":"optional number drdy","description":""},{"identifier":"optional number dgdy","description":""},{"identifier":"optional number dbdy","description":""},{"identifier":"optional number dady","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.gradrect","return_values":[],"parameters":[{"identifier":"x","type":"number"},{"identifier":"y","type":"number"},{"identifier":"w","type":"number"},{"identifier":"h","type":"number"},{"identifier":"r","type":"number"},{"identifier":"g","type":"number"},{"identifier":"b","type":"number"},{"identifier":"a[","type":"number"},{"isOptional":true,"type":"number","identifier":"drdx"},{"isOptional":true,"type":"number","identifier":"dgdx"},{"isOptional":true,"type":"number","identifier":"dbdx"},{"isOptional":true,"type":"number","identifier":"dadx"},{"isOptional":true,"type":"number","identifier":"drdy"},{"isOptional":true,"type":"number","identifier":"dgdy"},{"isOptional":true,"type":"number","identifier":"dbdy"},{"isOptional":true,"type":"number","identifier":"dady]"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"gfx.gradrect(number x, number y, number w, number h, number r, number g, number b, number a[, optional number drdx, optional number dgdx, optional number dbdx, optional number dadx, optional number drdy, optional number dgdy, optional number dbdy, optional number dady])"},"title":"gfx.gradrect","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Fills a gradient rectangle with the color and alpha specified. drdx-dadx reflect the adjustment (per-pixel) applied for each pixel moved to the right, drdy-dady are the adjustment applied for each pixel moved toward the bottom. Normally drdx=adjustamount/w, drdy=adjustamount/h, etc.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"string name","description":"the name of the window, which will be shown in the title of the window"},{"identifier":"optional integer width","description":"the width of the window; minmum is 50"},{"identifier":"optional integer height","description":"the height of the window; minimum is 16"},{"identifier":"optional integer dockstate","description":"&1=0, undocked; &1=1, docked"},{"identifier":"optional integer xpos","description":"x-position of the window in pixels; minimum is -80"},{"identifier":"optional integer ypos","description":"y-position of the window in pixels; minimum is -15"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.init","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"\"name\"","type":"string"},{"isOptional":true,"type":"integer","identifier":"width"},{"isOptional":true,"type":"integer","identifier":"height"},{"isOptional":true,"type":"integer","identifier":"dockstate"},{"isOptional":true,"type":"integer","identifier":"xpos"},{"isOptional":true,"type":"integer","identifier":"ypos"}]}},"requires":{"Reaper":"6.40"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":"1.0, if window is opened"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = gfx.init(string \"name\", optional integer width, optional integer height, optional integer dockstate, optional integer xpos, optional integer ypos)"},"title":"gfx.init","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Initializes the graphics window with title name. Suggested width and height can be specified.Once the graphics window is open, gfx.update() should be called periodically. \n\nOnly one graphics-window can be opened per script! Calling gfx.ini after a window has been opened has no effect.\n\nTo resize/reposition the window, call gfx.init again and pass an empty string as name-parameter.\n\nTo retitle the window, run gfx.init again with the new title as parameter name.\n\nTo get the current window-states, dimensions, etc, you can use gfx.dock).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"integer x","description":"x-position of start of the line in pixels"},{"identifier":"integer y","description":"y-position of start of the line in pixels"},{"identifier":"integer x2","description":"x-position of the end of the line in pixels"},{"identifier":"integer y2","description":"y-position of the end of the line in pixels"},{"identifier":"optional number aa","description":"<0.5, no antialias; >=0.5, antialias"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.line","return_values":[],"parameters":[{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"},{"identifier":"x2","type":"integer"},{"identifier":"y2","type":"integer"},{"isOptional":true,"type":"number","identifier":"aa"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"gfx.line(integer x, integer y, integer x2, integer y2, optional number aa)"},"title":"gfx.line","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draws a line from x,y to x2,y2, and if aa is not specified or 0.5 or greater, it will be antialiased. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer x","description":"x-position of the end of the line in pixels"},{"identifier":"integer y","description":"y-position of the end of the line in pixels"},{"identifier":"optional number aa","description":"<0.5, no antialias; >=0.5, antialias"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.lineto","return_values":[],"parameters":[{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"},{"identifier":"aa","type":"number"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"gfx.lineto(integer x, integer y, number aa)"},"title":"gfx.lineto","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draws a line from gfx.x,gfx.y to x,y. If aa is 0.5 or greater, then antialiasing is used. Updates gfx.x and gfx.y to x,y.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer image","description":"the buffer-index(0 - 1023), in which to load the image"},{"identifier":"string filename","description":"the path+filename of the image to be loaded"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.loadimg","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"image","type":"integer"},{"identifier":"filename","type":"string"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"the image-index in case of successful loading; -1 if loading failed"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = gfx.loadimg(integer image, string filename)"},"title":"gfx.loadimg","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Load image from filename into slot 0..1024-1 specified by image. Returns the image index if success, otherwise -1 if failure. The image will be resized to the dimensions of the image file. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer char","description":"ASCII-Code of the character to measure"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.measurechar","return_values":[{"identifier":"width","type":"integer"},{"identifier":"height","type":"integer"}],"parameters":[{"identifier":"char","type":"integer"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer width","description":"the width of the character in pixels"},{"identifier":"integer height","description":"the height of the character in pixels"}],"prog_lang":"*"},"functioncall":{"lua":"integer width, integer height = gfx.measurechar(integer char)"},"title":"gfx.measurechar","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Measures the drawing dimensions of a character with the current font (as set by gfx.setfont). \n\nReturns width and height of character.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string str","description":"the string, whose drawing dimensions you want to know"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.measurestr","return_values":[{"identifier":"width","type":"integer"},{"identifier":"height","type":"integer"}],"parameters":[{"identifier":"str","type":"string"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer width","description":"the width of the drawing dimensions of str in pixels"},{"identifier":"integer height","description":"the height of the drawing dimensions of str in pixels"}],"prog_lang":"*"},"functioncall":{"lua":"integer width, integer height = gfx.measurestr(string str)"},"title":"gfx.measurestr","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Measures the drawing dimensions of a string with the current font (as set by gfx.setfont). \n\nReturns width and height of string.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":12,"entries":[{"identifier":"integer x","description":"the x-position of the rectangle in pixels, in which you want to multiply/add colorvalues to"},{"identifier":"integer y","description":"the y-position of the rectangle in pixels, in which you want to multiply/add colorvalues to"},{"identifier":"integer w","description":"the width of the rectangle in pixels, in which you want to multiply/add colorvalues to"},{"identifier":"integer h","description":"the height of the rectangle in pixels, in which you want to multiply/add colorvalues to"},{"identifier":"number mul_r","description":"the red-value to multiply by within the rectangle; 0 to 1"},{"identifier":"number mul_g","description":"the green-value to multiply by within the rectangle; 0 to 1"},{"identifier":"number mul_b","description":"the blue-value to multiply by within the rectangle; 0 to 1"},{"identifier":"optional number mul_a","description":"the alpha-value to multiply by within the rectangle; 0 to 1"},{"identifier":"optional number add_r","description":"the red-value to add by within the rectangle; 0 to 1"},{"identifier":"optional number add_g","description":"the green-value to add by within the rectangle; 0 to 1"},{"identifier":"optional number add_b","description":"the blue-value to add by within the rectangle; 0 to 1"},{"identifier":"optional number add_a","description":"the alpha-value to add by within the rectangle; 0 to 1"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.muladdrect","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"},{"identifier":"w","type":"integer"},{"identifier":"h","type":"integer"},{"identifier":"mul_r","type":"number"},{"identifier":"mul_g","type":"number"},{"identifier":"mul_b","type":"number"},{"isOptional":true,"type":"number","identifier":"mul_a"},{"isOptional":true,"type":"number","identifier":"add_r"},{"isOptional":true,"type":"number","identifier":"add_g"},{"isOptional":true,"type":"number","identifier":"add_b"},{"isOptional":true,"type":"number","identifier":"add_a"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"unknown"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = gfx.muladdrect(integer x, integer y, integer w, integer h, number mul_r, number mul_g, number mul_b, optional number mul_a, optional number add_r, optional number add_g, optional number add_b, optional number add_a)"},"title":"gfx.muladdrect","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Multiplies each pixel within the given rectangle(x,y,w,h) by the mul_*-parameters and optionally adds add_*-parameters, and updates in-place. Useful for changing brightness/contrast, or other effects.\n\nThe multiplied values usually affect only pixels, that are not black(0,0,0,0), while the added values affect all pixels.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string format","description":"the format, as which the string shall be printed(refer to the description)"},{"identifier":"various ...","description":"the value to be shown, canbe of various datatypes"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.printf","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"format[","type":"string"},{"identifier":"...]","type":"various"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":"always 0"}],"prog_lang":"*"},"functioncall":{"lua":"number retval = gfx.printf(string format[, various ...])"},"title":"gfx.printf","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Formats and draws a string at gfx.x, gfx.y, and updates gfx.x/gfx.y accordingly (the latter only if the formatted string contains newline). For more information on format strings, see sprintf()\n\n    * %% = %\n    * %s = string from parameter\n    * %d = parameter as integer\n    * %i = parameter as integer\n    * %u = parameter as unsigned integer\n    * %x = parameter as hex (lowercase) integer\n    * %X = parameter as hex (uppercase) integer\n    * %c = parameter as character\n    * %f = parameter as floating point\n    * %e = parameter as floating point (scientific notation, lowercase)\n    * %E = parameter as floating point (scientific notation, uppercase)\n    * %g = parameter as floating point (shortest representation, lowercase)\n    * %G = parameter as floating point (shortest representation, uppercase)\n\nMany standard C printf() modifiers can be used, including:\n\n    * %.10s = string, but only print up to 10 characters\n    * %-10s = string, left justified to 10 characters\n    * %10s = string, right justified to 10 characters\n    * %+f = floating point, always show sign\n    * %.4f = floating point, minimum of 4 digits after decimal point\n    * %10d = integer, minimum of 10 digits (space padded)\n    * %010f = integer, minimum of 10 digits (zero padded)\n\nValues for format specifiers can be specified as additional parameters to gfx.printf, or within {} in the format specifier (such as %{varname}d, in that case a global variable is always used).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"gfx.quit","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"unknown, usually 0"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = gfx.quit()"},"title":"gfx.quit","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Closes the graphics window.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"integer x","description":"the x-position of the upper left corner"},{"identifier":"integer y","description":"the y-position of the upper left corner"},{"identifier":"integer w","description":"the width of the rectangle; must be positive"},{"identifier":"integer h","description":"the height of the rectangle; must be positive"},{"identifier":"optional integer filled","description":"0, unfilled; 1, filled; omitted/nil, filled"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.rect","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"},{"identifier":"w","type":"integer"},{"identifier":"h","type":"integer"},{"isOptional":true,"type":"integer","identifier":"filled"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"unknown; usually 0"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = gfx.rect(integer x, integer y, integer w, integer h, optional integer filled)"},"title":"gfx.rect","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Fills a rectangle at x,y, w,h pixels in dimension, filled by default. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer x","description":"the x-coordinate, to which the rectangle shall be drawn to"},{"identifier":"integer y","description":"the y-coordinate, to which the rectangle shall be drawn to"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.rectto","return_values":[{"identifier":"x_coordinate","type":"integer"}],"parameters":[{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer x_coordinate","description":"the x-coordinate given as x-parameter; the purpose is unknown"}],"prog_lang":"*"},"functioncall":{"lua":"integer x_coordinate = gfx.rectto(integer x, integer y)"},"title":"gfx.rectto","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Fills a rectangle from gfx.x,gfx.y to x,y. Updates gfx.x,gfx.y to x,y. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"integer x","description":"the x-coordinate of the upper-left corner of the rectangle in pixels"},{"identifier":"integer y","description":"the y-coordinate of the upper-left corner of the rectangle in pixels"},{"identifier":"integer w","description":"the width of the rectangle in pixels"},{"identifier":"integer h","description":"the height of the rectangle in pixels"},{"identifier":"number radius","description":"the radius of the rounded corners of the rectangle; 0, for a normal rectangle; "},{"identifier":"number antialias","description":"0, no antialias; 1 and higher, apply antialias to the rectangle"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.roundrect","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"},{"identifier":"w","type":"integer"},{"identifier":"h","type":"integer"},{"identifier":"radius","type":"number"},{"isOptional":true,"type":"integer","identifier":"antialias"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"unknown"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = gfx.roundrect(integer x, integer y, integer w, integer h, number radius, optional integer antialias)"},"title":"gfx.roundrect","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draws a rectangle with rounded corners. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer x","description":"the x-screen-coordinate that shall be converted, in pixels"},{"identifier":"integer y","description":"the y-screen-coordinate that shall be converted, in pixels"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.screentoclient","return_values":[{"identifier":"convx","type":"integer"},{"identifier":"convy","type":"integer"}],"parameters":[{"identifier":"x","type":"integer"},{"identifier":"y","type":"integer"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer convx","description":"the x-client-coordinate, as converted from the x-screen-coordinate, in pixels"},{"identifier":"integer convy","description":"the y-client-coordinate, as converted from the y-screen-coordinate, in pixels"}],"prog_lang":"*"},"functioncall":{"lua":"integer convx, integer convy = gfx.screentoclient(integer x, integer y)"},"title":"gfx.screentoclient","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Converts the screen coordinates x,y to client coordinates, returns those values.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"number r","description":"the red-value; 0 to 1; if only parameter r is given, it's value will be used for g, b as well"},{"identifier":"optional number g","description":"the green-value; 0 to 1"},{"identifier":"optional number b","description":"the blue-value; 0 to 1"},{"identifier":"optional number a2","description":"the alpha-value; 0 to 1"},{"identifier":"optional integer mode","description":"the drawing-mode; \n Set to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx.a to negative and use gfx.mode as additive). \n Add 2.0 to disable source alpha for gfx.blit(). \n Add 4.0 to disable filtering for gfx.blit(). "},{"identifier":"optional integer dest","description":"the source-image/framebuffer to draw to; -1 to 1023; -1 for the currently displayed framebuffer."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.set","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"r","type":"number"},{"isOptional":true,"type":"number","identifier":"g"},{"isOptional":true,"type":"number","identifier":"b"},{"isOptional":true,"type":"number","identifier":"a2"},{"isOptional":true,"type":"integer","identifier":"mode"},{"isOptional":true,"type":"integer","identifier":"dest"}]}},"requires":{"Reaper":"5.97"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"unknown"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = gfx.set(number r, optional number g, optional number b, optional number a2, optional integer mode, optional integer dest)"},"title":"gfx.set","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sets color, drawing mode and optionally the drawing-image-source-destination.\nIf sets the corresponding gfx-variables.\nSets gfx.r/gfx.g/gfx.b/gfx.a2/gfx.mode sets gfx.dest if final parameter specified","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"optional integer resource_id","description":"the index of the mousecursor to be used"},{"identifier":"optional string custom_cursor_name","description":"a name of the mousecursor to be used"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.setcursor","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"isOptional":true,"type":"integer","identifier":"resource_id"},{"isOptional":true,"type":"string","identifier":"custom_cursor_name"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":"0.0, gfx-window not opened; 1.0, gfx-window opened"}],"prog_lang":"*"},"functioncall":{"lua":"number retval = gfx.setcursor(optional integer resource_id, optional string custom_cursor_name)"},"title":"gfx.setcursor","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sets the mouse cursor. resource_id is a value like 32512 (for an arrow cursor), custom_cursor_name is a string like \"arrow\" (for the REAPER custom arrow cursor). resource_id must be nonzero, but custom_cursor_name is optional.\n\nexamples for resource_id:\n    101, enter text\n    102, hourglass\n    103, cross\n    104, arrow up\n    105, arrows to left up AND right down\n    106, arrows to left down AND right up\n    107, arrows to left AND right\n    108, arrows to up AND down\n    109, arrows to up, down, left and right\n    110, stop sign\n    111, arrow with hourglass\n    112, arrow with question mark\n    113, a pen\n    114, hand with index finger pointing\n    115, a square\n    116, arrow with cd\n    \nworks only with gfx-window opened.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"integer idx","description":"the font-id; idx=0 for default bitmapped font, no configuration is possible for this font.\nidx=1..16 for a configurable font"},{"identifier":"optional string fontface","description":"the name of the font, like \"arial\""},{"identifier":"optional integer sz","description":"the size of the font (8-100)"},{"identifier":"optional integer flags","description":"flags, how to render the text; up to 4 flags can be passed at the same time\na multibyte character, which can include 'i' for italics, 'u' for underline, or 'b' for bold. \nThese flags may or may not be supported depending on the font and OS. \n  66 and 98, Bold (B), (b)\n  73 and 105, italic (I), (i)\n  79 and 111, white outline (O), (o)\n  82 and 114, blurred (R), (r)\n  83 and 115, sharpen (S), (s)\n  85 and 117, underline (U), (u)\n  86 and 118, inVerse (V), (v)\n\nTo create such a multibyte-character, assume this flag-value as a 32-bit-value.\nThe first 8 bits are the first flag, the next 8 bits are the second flag, \nthe next 8 bits are the third flag and the last 8 bits are the second flag.\nThe flagvalue(each dot is a bit): .... ....   .... ....   .... ....   .... ....\nIf you want to set it to Bold(B) and Italic(I), you use the ASCII-Codes of both(66 and 73 respectively),\ntake them apart into bits and set them in this 32-bitfield.\nThe first 8 bits will be set by the bits of ASCII-value 66(B), the second 8 bits will be set by the bits of ASCII-Value 73(I).\nThe resulting flagvalue is: 0100 0010   1001 0010   0000 0000   0000 0000\nwhich is a binary representation of the integer value 18754, which combines 66 and 73 in it."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.setfont","return_values":[],"parameters":[{"identifier":"idx","type":"integer"},{"isOptional":true,"type":"string","identifier":"fontface"},{"isOptional":true,"type":"integer","identifier":"sz"},{"isOptional":true,"type":"integer","identifier":"flags"}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"gfx.setfont(integer idx,optional string fontface, optional integer sz, optional integer flags)"},"title":"gfx.setfont","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Can select a font and optionally configure it. \n\nAfter calling gfx_setfont(), gfx_texth may be updated to reflect the new average line height.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer image","description":"the image-handle/framebuffer, whose dimensions you want to set"},{"identifier":"integer w","description":"the new width of the image-handle"},{"identifier":"integer h","description":"the new height of the image-handle"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.setimgdim","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"image","type":"integer"},{"identifier":"w","type":"integer"},{"identifier":"h","type":"integer"}]}},"requires":{"Reaper":"6.14"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"0, if image couldn't be set(e.g. no such handle exists); 1, if setting new dimensions was successful"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = gfx.setimgdim(integer image, integer w, integer h)"},"title":"gfx.setimgdim","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Resize image referenced by index 0..1024-1, width and height must be 0-8192. The contents of the image will be undefined after the resize.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"number r","description":"the red-color-value of the pixel; 0-1"},{"identifier":"number g","description":"the green-color-value of the pixel; 0-1"},{"identifier":"number b","description":"the blue-color-value of the pixel; 0-1"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.setpixel","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"r","type":"number"},{"identifier":"g","type":"number"},{"identifier":"b","type":"number"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":"1, if writing that pixel was successful; -1, is not"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = gfx.setpixel(number r, number g, number b)"},"title":"gfx.setpixel","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Writes a pixel of r,g,b to gfx.x,gfx.y.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string menu_string","description":"a string with the menu-entries; separate the entrynames with a |\n  Each menu-entry can start with special characters that influence the appearance of that entry: \n  #, item is grayed out; !, item is checked; >, this menu item shows a submenu;<, last item in the current submenu. "}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.showmenu","return_values":[{"identifier":"selection","type":"integer"}],"parameters":[{"identifier":"menu_string","type":"string"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer selection","description":"the menu-entry the user selected, with 1 for the first, 2 for the second, etc; 0, nothing was selected"}],"prog_lang":"*"},"functioncall":{"lua":"integer selection = gfx.showmenu(string menu_string)"},"title":"gfx.showmenu","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Shows a popup menu at gfx_x,gfx_y. \nstr is a list of fields separated by | characters. Each field represents a menu item.\nFields can start with special characters:\n\n# : grayed out\n! : checked\n> : this menu item shows a submenu\n< : last item in the current submenu\n& : before a character makes it underlined as the quick-access-character for this menu-item\n\nAn empty field || will appear as a separator in the menu. \n\nExample: selection = gfx.showmenu(\"first item, followed by separator||!second item, checked|>third item which spawns a submenu|#first item in submenu, grayed out|>second and last item in submenu|fourth item in top menu\")\n\ngfx.showmenu returns 0 if the user selected nothing from the menu, 1 if the first field is selected, etc.\nNote: It skips submenus and separators in the selection-number, so a if menu_string=\"Entry1||<Entry two|Entry three\" will only return 1 for entry1 and 2 for Entry three but nothing for <Entry and ||.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"integer srcimg","description":"the image-index (1 to 1024) that you want to blit into the screenbuffer -1"},{"identifier":"integer destx","description":"x position of the blit picture"},{"identifier":"integer desty","description":"y position of the blit picture"},{"identifier":"integer destw","description":"width of the blit picture"},{"identifier":"integer desth","description":"height of the blit picture"},{"identifier":"integer div_w","description":"unknown, 2 to 64; probably related to parameter table"},{"identifier":"integer div_h","description":"unknown, 2 to 64; probably related to parameter table"},{"identifier":"table table","description":"a table of the texture coordinates, with each entry being set to a pair of value, eg: 1, 0. Will be read from left to right and from top to bottom.\ntable[1]=1,2\ntable[2]=2,3\ntable[3]=3,1\nHow these values work needs more research..."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.transformblit","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"srcimg","type":"integer"},{"identifier":"destx","type":"integer"},{"identifier":"desty","type":"integer"},{"identifier":"destw","type":"integer"},{"identifier":"desth","type":"integer"},{"identifier":"div_w","type":"integer"},{"identifier":"div_h","type":"integer"},{"identifier":"table","type":"table"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = gfx.transformblit(integer srcimg, integer destx, integer desty, integer destw, integer desth, integer div_w, integer div_h, table table)"},"title":"gfx.transformblit","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Blits to destination at (destx,desty), size (destw,desth). div_w and div_h should be 2..64, and table should point to a table of 2*div_w*div_h values (table can be a regular table or (for less overhead) a reaper.array). Each pair in the table represents a S,T coordinate in the source image, and the table is treated as a left-right, top-bottom list of texture coordinates, which will then be rendered to the destination.\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":10,"entries":[{"identifier":"integer x1","description":"the x-position of the first point of the polygon"},{"identifier":"integer y1","description":"the y-position of the first point of the polygon"},{"identifier":"integer x2","description":"the x-position of the second point of the polygon"},{"identifier":"integer y2","description":"the y-position of the second point of the polygon"},{"identifier":"integer x3","description":"the x-position of the third point of the polygon"},{"identifier":"integer y3","description":"the y-position of the third point of the polygon"},{"identifier":"optional integer x4","description":"the x-position of the fourth point of the polygon"},{"identifier":"optional integer y4","description":"the y-position of the fourth point of the polygon"},{"identifier":"...","description":"..."},{"identifier":"...","description":"..."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"gfx.triangle","return_values":[],"parameters":[{"identifier":"x1","type":"integer"},{"identifier":"y1","type":"integer"},{"identifier":"x2","type":"integer"},{"identifier":"y2","type":"integer"},{"identifier":"x3","type":"integer"},{"identifier":"y3","type":"integer"},{"isOptional":true,"type":"[optional","identifier":"x4"},{"isOptional":true,"type":"integer","identifier":"y4"},{"type":"..."}]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"gfx.triangle(integer x1, integer y1, integer x2, integer y2, integer x3, integer y3, [optional integer x4, optional integer y4, ...)"},"title":"gfx.triangle","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draws a filled triangle, or any convex polygon. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["lua","shared memory","video processor","eel2","jsfx"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string sharedMemoryName","description":"the name of the shared memory"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.gmem_attach","return_values":[{"identifier":"former_attached_gmemname","type":"string"}],"parameters":[{"identifier":"sharedMemoryName","type":"string"}]}},"requires":{"Reaper":"6.20"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string former_attached_gmemname","description":"if you change the attached-gmem from one to a new one, this will hold the name of the previous attached shared memory(gmem)"}],"prog_lang":"*"},"functioncall":{"lua":"string former_attached_gmemname = reaper.gmem_attach(string sharedMemoryName)"},"title":"gmem_attach","chapters":["Lua-only functions","Global Shared Memory"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Causes gmem_read()/gmem_write() to read EEL2/JSFX/Video shared memory segment named by parameter. Set to empty string to detach. 6.20+: returns previous shared memory segment name.\n\nMust be called, before you can use a specific gmem-variable-index with gmem_write!","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["lua","shared memory","read","video processor","eel2","jsfx"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer index","description":"the index of the memory-variable to read from; index must be 0 and higher"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.gmem_read","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"index","type":"integer"}]}},"requires":{"Reaper":"5.97"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":"the stored number-value stored in gmem-variable with index"}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.gmem_read(integer index)"},"title":"gmem_read","chapters":["Lua-only functions","Global Shared Memory"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Read (number) value from shared memory attached-to by gmem_attach(). index can be [0..1<<25).\n\nreturns nil if not available","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["lua","shared memory","write","video processor","eel2","jsfx"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer index","description":"the index of the memory-variable to write to; index must be 0 and higher"},{"identifier":"number value","description":"a number, either integer or float"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.gmem_write","return_values":[],"parameters":[{"identifier":"index","type":"integer"},{"identifier":"value","type":"number"}]}},"requires":{"Reaper":"5.97"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.gmem_write(integer index, number value)"},"title":"gmem_write","chapters":["Lua-only functions","Global Shared Memory"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Write (number) value to shared memory attached-to by gmem_attach(). index can be [0..1<<25).\n\nBefore you can write into a currently unused variable with index \"index\", you must call gmem_attach first!","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"gfx.update","return_values":[],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"gfx.update()"},"title":"gfx.update","chapters":["Lua-only functions","GFX-functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Updates the graphics display, if opened","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"table|array values","description":""},{"identifier":"integer size","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.new_array","return_values":[{"identifier":"reaper_array","type":"ReaperArray"}],"parameters":[{"identifier":"values]","type":"[table|array"},{"identifier":"size]","type":"[integer"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ReaperArray reaper_array","description":""}],"prog_lang":"*"},"functioncall":{"lua":"ReaperArray reaper_array = reaper.new_array([table|array values], [integer size])"},"title":"new_array","chapters":["Lua-only functions","Reaper Arrays"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Creates a new reaper.array object of maximum and initial size size, if specified, or from the size/values of a table/array. Both size and table/array can be specified, the size parameter will override the table/array size.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"function function","description":"the function to be called"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.runloop","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"function","type":"function"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int retval","description":"true, if succeded"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.runloop(function function)"},"title":"runloop","chapters":["Lua-only functions","Misc"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"number|string value","description":""},{"identifier":"integer offset","description":""},{"identifier":"integer size","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.array","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"value","type":"[number|string"},{"identifier":"offset","type":"integer"},{"identifier":"size]","type":"integer"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = {reaper.array}.clear([number|string value, integer offset, integer size])"},"title":"{reaper.array}.clear","chapters":["Lua-only functions","Reaper Arrays"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sets the value of zero or more items in the array. If value not specified, 0.0 is used. offset is 1-based, if size omitted then the maximum amount available will be set.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"reaper.array src","description":""},{"identifier":"integer scroffs","description":""},{"identifier":"integer size","description":""},{"identifier":"integer destoffs","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.array","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"src","type":"[reaper.array"},{"identifier":"srcoffs","type":"integer"},{"identifier":"size","type":"integer"},{"identifier":"destoffs]","type":"integer"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = {reaper.array}.convolve([reaper.array src, integer srcoffs, integer size, integer destoffs])"},"title":"{reaper.array}.convolve","chapters":["Lua-only functions","Reaper Arrays"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Convolves complex value pairs from reaper.array, starting at 1-based srcoffs, reading/writing to 1-based destoffs. size is in normal items (so it must be even)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"reaper.array src","description":""},{"identifier":"integer srcoffs","description":""},{"identifier":"integer size","description":""},{"identifier":"integer destoffs","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.array","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"src","type":"[reaper.array"},{"identifier":"srcoffs","type":"integer"},{"identifier":"size","type":"integer"},{"identifier":"destoffs]","type":"integer"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = {reaper.array}.copy([reaper.array src, integer srcoffs, integer size, integer destoffs])"},"title":"{reaper.array}.copy","chapters":["Lua-only functions","Reaper Arrays"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Copies values from reaper.array or table, starting at 1-based srcoffs, writing to 1-based destoffs.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer size","description":""},{"identifier":"boolean premute","description":""},{"identifier":"integer offset","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.array","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"size[","type":"integer"},{"identifier":"permute","type":"boolean"},{"identifier":"offset]","type":"integer"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, fft was successful; false, fft was unsuccessful"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = {reaper.array}.fft(integer size[, boolean permute, integer offset])"},"title":"{reaper.array}.fft","chapters":["Lua-only functions","Reaper Arrays"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Performs a forward FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled following the FFT to be in normal order.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer size","description":""},{"identifier":"boolean premute","description":""},{"identifier":"integer offset","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.array","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"size[","type":"integer"},{"identifier":"permute","type":"boolean"},{"identifier":"offset]","type":"integer"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, fft was successful; false, fft was unsuccessful"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = {reaper.array}.fft_real(integer size[, boolean permute, integer offset])"},"title":"{reaper.array}.fft_real","chapters":["Lua-only functions","Reaper Arrays"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Performs a forward real->complex FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled following the FFT to be in normal order.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.array","return_values":[{"identifier":"size","type":"integer"}],"parameters":[]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer size","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer size = {reaper.array}.get_alloc()"},"title":"{reaper.array}.get_alloc","chapters":["Lua-only functions","Reaper Arrays"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the maximum (allocated) size of the array.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer size","description":""},{"identifier":"boolean permute","description":""},{"identifier":"integer offset","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.array","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"size[","type":"integer"},{"identifier":"permute","type":"boolean"},{"identifier":"offset]","type":"integer"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, fft was successful; false, fft was unsuccessful"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = {reaper.array}.ifft(integer size[, boolean permute, integer offset])"},"title":"{reaper.array}.ifft","chapters":["Lua-only functions","Reaper Arrays"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Performs a backwards FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled before the IFFT to be in fft-order.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer size","description":""},{"identifier":"boolean permute","description":""},{"identifier":"integer offset","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.array","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"size[","type":"integer"},{"identifier":"permute","type":"boolean"},{"identifier":"offset]","type":"integer"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, fft was successful; false, fft was unsuccessful"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = {reaper.array}.ifft_real(integer size[, boolean permute, integer offset])"},"title":"{reaper.array}.ifft_real","chapters":["Lua-only functions","Reaper Arrays"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Performs a backwards complex->real FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled before the IFFT to be in fft-order.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"{reaper.array} src","description":""},{"identifier":"integer srcoffs","description":""},{"identifier":"integer size","description":""},{"identifier":"number destoff","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.array","return_values":[{"identifier":"retvals","type":"integer"}],"parameters":[{"identifier":"src","type":"[{reaper.array}"},{"identifier":"srcoffs","type":"integer"},{"identifier":"size","type":"integer"},{"identifier":"destoffs]","type":"number"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retvals","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retvals = {reaper.array}.multiply([{reaper.array} src, integer srcoffs, integer size, number destoffs])"},"title":"{reaper.array}.multiply","chapters":["Lua-only functions","Reaper Arrays"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Multiplies values from reaper.array, starting at 1-based srcoffs, reading/writing to 1-based destoffs.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer size","description":"the new size of the table"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.array","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"type":"size"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, changing size was successful; false, changing was unsuccessful"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = {reaper.array}.resize(size)"},"title":"{reaper.array}.resize","chapters":["Lua-only functions","Reaper Arrays"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Resizes an array object to size. size must be [0..max_size].","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":[""],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer offset","description":"the first entry of the reaper.array to be included into the table"},{"identifier":"integer size","description":"the number of entries to include into the table"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.array","return_values":[{"identifier":"new_table","type":"table"}],"parameters":[{"identifier":"offset","type":"[integer"},{"identifier":"size]","type":"integer"}]}},"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"table new_table","description":"a table with the entries from the reaper.array"}],"prog_lang":"*"},"functioncall":{"lua":"table new_table = {reaper.array}.table([integer offset, integer size])"},"title":"{reaper.array}.table","chapters":["Lua-only functions","Reaper Arrays"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns a new table with values from items in the array. Offset is 1-based and if size is omitted all available values are used.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["python","atexit","code at exit"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"String code","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"python":"RPR_atexit(String code)"},"title":"atexit","chapters":["Python-only functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["python","defer","background code","background scripts"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"String code","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"python":"RPR_defer(String code)"},"title":"defer","chapters":["Python-only functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().\nNote that no undo point will be automatically created when the script finishes, unless you create it explicitly.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["python","run loop","defer","background script","background scripts"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"String code","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"python":"RPR_runloop(String code)"},"title":"runloop","chapters":["Python-only functions"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().\nNote that no undo point will be automatically created when the script finishes, unless you create it explicitly.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","sort","qsort"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"void* base","description":""},{"identifier":"size_t nmemb","description":""},{"identifier":"size_t size","description":""},{"identifier":"int *cmpfunc...","description":""},{"identifier":"void* tmpspace","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void*","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*__mergesort)(void* base, size_t nmemb, size_t size, int (*cmpfunc)(const void*,const void*), void* tmpspace)"},"title":"__mergesort","chapters":["C++-only functions","Misc"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"is a stable sorting function with an API similar to qsort().\nHOWEVER, it requires some temporary space, equal to the size of the data being sorted, so you can pass it as the last parameter,\nor NULL and it will allocate and free space internally. \n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","add","customizable","menu"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"const char* menuidstr","description":"is some unique identifying string"},{"identifier":"const char* menuname","description":"is for main menus only (displayed in a menu bar somewhere), NULL otherwise "},{"identifier":"const char* kbdsecname","description":"is the name of the KbdSectionInfo registered by this plugin, or NULL for the main actions section"},{"identifier":"bool addtomainmenu","description":"true, add to main menu; false, don't add to main menu"}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"bool retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"bool retval = (*AddCustomizableMenu)(const char* menuidstr, const char* menuname, const char* kbdsecname, bool addtomainmenu)"},"title":"AddCustomizableMenu","chapters":["C++-only functions","Menus"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Adds customizable menu.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","extension","menu","add"],"params":{"param_count":0,"entries":[]},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"bool retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"bool retval = (*AddExtensionsMainMenu)()"},"title":"AddExtensionsMainMenu","chapters":["C++-only functions","Menus"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Add an Extensions main menu, which the extension can populate/modify with plugin_register(\"hookcustommenu\")\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","plugin","register","command","actioncommandid"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"const char* name","description":""},{"identifier":"void* infostruct","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"int retval = (*plugin_register)(const char* name, void* infostruct)"},"title":"plugin_register","chapters":["C++-only functions","Misc"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"like rec->Register\n\nif you have a function called myfunction(..) that you want to expose to other extensions or plug-ins, use register(\"API_myfunction\",funcaddress), and \"-API_myfunction\" to remove.          Other extensions then use GetFunc(\"myfunction\") to get the function pointer.\n\nREAPER will also export the function address to ReaScript, so your extension could supply a Python module that provides a wrapper called RPR_myfunction(..). \nregister(\"APIdef_myfunction\",defstring) will include your function declaration and help in the auto-generated REAPER API header and ReaScript documentation.\n\ndefstring is four null-separated fields: return type, argument types, argument names, and help.\n\n   Example: double myfunction(char* str, int flag) would have defstring=\"double\\0char*,int\\0str,flag\\0help text for myfunction\"\n\nanother thing you can register is \"hookcommand\", which you pass a callback:\n\n   NON_API: bool runCommand(int command, int flag);\n            register(\"hookcommand\",runCommand);\n\nwhich returns TRUE to eat (process) the command.\n\nflag is usually 0 but can sometimes have useful info depending on the message.\n\nnote: it's OK to call Main_OnCommand() within your runCommand, however you MUST check for recursion if doing so!\nin fact, any use of this hook should benefit from a simple reentrancy test...\n\nto get notified when an action of the main section is performed, you can register \"hookpostcommand\", which you pass a callback:\n\n   NON_API: void postCommand(int command, int flag);\n            register(\"hookpostcommand\",postCommand);\n\nyou can also register \"hookcommand2\", which you pass a callback:\n\n   NON_API: bool onAction(KbdSectionInfo *sec, int command, int val, int valhw, int relmode, HWND hwnd);\n            register(\"hookcommand2\",onAction);\n\nwhich returns TRUE to eat (process) the command.\n\nval/valhw are used for actions learned with MIDI/OSC.\nval = [0..127] and valhw = -1 for MIDI CC, \nvalhw >=0 for MIDI pitch or OSC with value = (valhw|val<<7)/16383.0, \nrelmode absolute(0) or 1/2/3 for relative adjust modes\n\nyou can also register command IDs for actions, register with \"command_id\", parameter is a unique string with only A-Z, 0-9, returns command ID (or 0 if not supported/out of actions)\n\nregister(\"command_id_lookup\", unique_string) will look up the integer ID of the named action without registering the string if it doesn't already exist.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","register","hardware","hook"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"bool isAdd","description":""},{"identifier":"audio_hook_register_t* reg","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"int retval = (*Audio_RegHardwareHook)(bool isAdd, audio_hook_register_t* reg)"},"title":"Audio_RegHardwareHook","chapters":["C++-only functions","Audio"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Registers Audio Hardware-Hook.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","calculate","peaks"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"PCM_source_transfer_t* srcBlock","description":""},{"identifier":"PCM_source_peaktransfer_t* pksBlock","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"int retval = (*CalculatePeaks)(PCM_source_transfer_t* srcBlock, PCM_source_peaktransfer_t* pksBlock)"},"title":"CalculatePeaks","chapters":["C++-only functions","Audio"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Calculates Peaks.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","calculate","peaks"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"PCM_source_transfer_t* srcBlock","description":""},{"identifier":"PCM_source_peaktransfer_t* pksBlock","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"int retval = (*CalculatePeaksFloatSrcPtr)(PCM_source_transfer_t* srcBlock, PCM_source_peaktransfer_t* pksBlock)"},"title":"CalculatePeaksFloatSrcPtr","chapters":["C++-only functions","Audio"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Calculates Peaks.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","create","osc","handler","local"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"void* obj","description":""},{"identifier":"void* callback","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void*","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void* (*CreateLocalOscHandler)(void* obj, void* callback)"},"title":"CreateLocalOscHandler","chapters":["C++-only functions","OSC"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"callback is a function pointer: void (*callback)(void* obj, const char* msg, int msglen), which handles OSC messages sent from REAPER. \n\nThe function return is a local osc handler. \n\nSee SendLocalOscMessage, DestroyOscHandler.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","create","midi","input"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int dev","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"midi_Input* retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"midi_Input* retval = (*CreateMIDIInput)(int dev)"},"title":"CreateMIDIInput","chapters":["C++-only functions","Midi"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Can only reliably create midi access for devices not already opened in prefs/MIDI, suitable for control surfaces etc.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","midi","output","create"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"int dev","description":""},{"identifier":"bool streamMode","description":"true, msoffset points to a persistent variable(see msoffset100 for more details)"},{"identifier":"int* msoffset100","description":"points to a persistent variable that can change and reflects added delay to output in 100ths of a millisecond. "}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"midi_Output* retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"midi_Output* retval = (*CreateMIDIOutput)(int dev, bool streamMode, int* msoffset100)"},"title":"CreateMIDIOutput","chapters":["C++-only functions","Midi"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Can only reliably create midi access for devices not already opened in prefs/MIDI, suitable for control surfaces etc. \n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","control","surface","osc","message"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"const char* msg","description":""},{"identifier":"const float* arg","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"cpp":"void (*CSurf_OnOscControlMessage)(const char* msg, const float* arg)"},"title":"CSurf_OnOscControlMessage","chapters":["C++-only functions","OSC"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"On OSC Control Message.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","control","surface","osc","message"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"const char* msg","description":""},{"identifier":"const float* arg","description":""},{"identifier":"const char* argstr","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"6.71"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"cpp":"void (*CSurf_OnOscControlMessage2)(const char* msg, const float* arg, const char* argstr);"},"title":"CSurf_OnOscControlMessage2","chapters":["C++-only functions","OSC"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Stored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","osc","destroy","local","handler"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void* local_osc_handler","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"cpp":"void (*DestroyLocalOscHandler)(void* local_osc_handler)"},"title":"DestroyLocalOscHandler","chapters":["C++-only functions","OSC"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"See CreateLocalOscHandler, SendLocalOscMessage.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","menu","duplicate","customizeable"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"void* srcmenu","description":""},{"identifier":"void* destmenu","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"bool retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"bool retval = (*DuplicateCustomizableMenu)(void* srcmenu, void* destmenu)"},"title":"DuplicateCustomizableMenu","chapters":["C++-only functions","Menus"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Populate destmenu with all the entries and submenus found in srcmenu.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","pointer","free","heap"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void* ptr","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"cpp":"void (*FreeHeapPtr)(void* ptr)"},"title":"FreeHeapPtr","chapters":["C++-only functions","Misc"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"free heap memory returned from a Reaper API function\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","config","var","get"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"const char* name","description":""},{"identifier":"int* szOut","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void*","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void* (*get_config_var)(const char* name, int* szOut)"},"title":"get_config_var","chapters":["C++-only functions","Config Vars"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"gets config var\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","get","midi","config","var"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"const char* name","description":""},{"identifier":"int* szOut","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void*","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void* (*get_midi_config_var)(const char* name, int* szOut);"},"title":"get_midi_config_var","chapters":["C++-only functions","Config Vars"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Deprecated.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","color","theme","get"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"int idx","description":""},{"identifier":"int defval","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"INT_PTR retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"INT_PTR retval = (*GetColorTheme)(int idx, int defval)"},"title":"GetColorTheme","chapters":["C++-only functions","Theme"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Deprecated, see GetColorThemeStruct().\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","get","color","theme","struct"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int* szOut","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void*","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void* (*GetColorThemeStruct)(int* szOut)"},"title":"GetColorThemeStruct","chapters":["C++-only functions","Theme"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"returns the whole color theme (icontheme.h) and the size\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","get","context","menu"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int idx","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"HMENU retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"HMENU retval = (*GetContextMenu)(int idx)"},"title":"GetContextMenu","chapters":["C++-only functions","Menus"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"gets context menus. submenu 0:trackctl, 1:mediaitems, 2:ruler, 3:empty track area \n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","get","icon","theme","pointer"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"const char* name","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void*","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void* (*GetIconThemePointer)(const char* name)"},"title":"GetIconThemePointer","chapters":["C++-only functions","Theme"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"returns a named icontheme entry\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","get","icon","theme","pointer","dpi"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"const char* name","description":""},{"identifier":"int dpisc","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"6.02"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void*","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void* (*GetIconThemePointerForDPI)(const char* name, int dpisc);"},"title":"GetIconThemePointerForDPI","chapters":["C++-only functions","Theme"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"returns a named icontheme entry for a given DPI-scaling (256=1:1). \n\nNote: the return value should not be stored, it should be queried at each paint! \nQuerying name=NULL returns the start of the structure\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","get","icon","theme","struct"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int* szOut","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void*","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void* (*GetIconThemeStruct)(int* szOut)"},"title":"GetIconThemeStruct","chapters":["C++-only functions","Theme"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"returns a pointer to the icon theme (icontheme.h) and the size of that struct.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","peaks","bitmap"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"PCM_source_peaktransfer_t* pks","description":""},{"identifier":"double maxamp","description":""},{"identifier":"int w","description":""},{"identifier":"int h","description":""},{"identifier":"LICE_IBitmap* bmp","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void*","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void* (*GetPeaksBitmap)(PCM_source_peaktransfer_t* pks, double maxamp, int w, int h, LICE_IBitmap* bmp)"},"title":"GetPeaksBitmap","chapters":["C++-only functions","Audio"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"See note in reaper_plugin.h about PCM_source_peaktransfer_t::samplerate\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","get","preferred","diskread","mode"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"int* mode","description":""},{"identifier":"int* nb","description":""},{"identifier":"int* bs","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*GetPreferredDiskReadMode)(int* mode, int* nb, int* bs)"},"title":"GetPreferredDiskReadMode","chapters":["C++-only functions","Files"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Gets user configured preferred disk read mode. mode/nb/bs are all parameters that should be passed to WDL_FileRead, see for more information.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","get","preferred","diskread","mode","peak"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"int* mode","description":""},{"identifier":"int* nb","description":""},{"identifier":"int* bs","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*GetPreferredDiskReadModePeak)(int* mode, int* nb, int* bs)"},"title":"GetPreferredDiskReadModePeak","chapters":["C++-only functions","Files"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Gets user configured preferred disk read mode for use when building peaks. mode/nb/bs are all parameters that should be passed to WDL_FileRead, see for more information.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","get","preferred","diskwrite","mode"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"int* mode","description":""},{"identifier":"int* nb","description":""},{"identifier":"int* bs","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*GetPreferredDiskWriteMode)(int* mode, int* nb, int* bs)"},"title":"GetPreferredDiskWriteMode","chapters":["C++-only functions","Files"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Gets user configured preferred disk write mode. nb will receive two values, the initial and maximum write buffer counts. mode/nb/bs are all parameters that should be passed to WDL_FileWrite, see for more information.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","get","set","mediaitem","take","info"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItek_Take* tk","description":"a MediaItem_Take-object, that shall be altered"},{"identifier":"const char* parmname","description":"the name of the parameter to be changed\nP_TRACK : pointer to MediaTrack (read-only)\nP_ITEM : pointer to MediaItem (read-only)\nP_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old.\nGUID : GUID * : 16-byte GUID, can query or update\nP_NAME : char * to take name\nD_STARTOFFS : double *, start offset in take of item\nD_VOL : double *, take volume\nD_PAN : double *, take pan\nD_PANLAW : double *, take pan law (-1.0=default, 0.5=-6dB, 1.0=+0dB, etc)\nD_PLAYRATE : double *, take playrate (1.0=normal, 2.0=doublespeed, etc)\nD_PITCH : double *, take pitch adjust (in semitones, 0.0=normal, +12 = one octave up, etc)\nB_PPITCH, bool *, preserve pitch when changing rate\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CHANMODE, int *, channel mode (0=normal, 1=revstereo, 2=downmix, 3=l, 4=r)\nI_PITCHMODE, int *, pitch shifter mode, -1=proj default, otherwise high word=shifter low word = parameter\nI_CUSTOMCOLOR : int *, custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used (though will store the color anyway).\nIP_TAKENUMBER : int, take number within the item (read-only, returns the take number directly)"},{"identifier":"void* setNewValue","description":"the new value to be set to the parameter. See the description of parmname above for more details."}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"6.34"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void*","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void* (*GetSetMediaItemTakeInfo)(MediaItem_Take* tk, const char* parmname, void* setNewValue)"},"title":"GetSetMediaItemTakeInfo","chapters":["C++-only functions","MediaItem Take"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Gets/Sets Media Item Take-parameters. Works like GetMediaItemTakeInfo_Value and SetMediaItemTakeInfo_Value but has more parameters.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","get","set","track","parameters","info"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaTrack* tr","description":"the Mediatrack-object, that shall be modified"},{"identifier":"const char* parmname","description":"the parameter to be gotten or set"},{"identifier":"void* setNewValue","description":"the new value. See the description of parmname above for more details"}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"6.65"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void*","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void* (*GetSetMediaTrackInfo)(MediaTrack* tr, const char* parmname, void* setNewValue)"},"title":"GetSetMediaTrackInfo","chapters":["C++-only functions","Media Track"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Gets/Sets MediaTrack-parameters. Works like GetMediaTrackInfo_Value and SetMediaTrackInfo_Value but has more parameters.\n\n     -P_PARTRACK : MediaTrack * : parent track (read-only)\n     -P_PROJECT : ReaProject * : parent project (read-only)\n     -P_NAME : char * : track name (on master returns NULL)\n     -P_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)\n     -P_MCP_LAYOUT : const char * : layout name\n     -P_RAZOREDITS : const char * : list of razor edit areas, as space-separated triples of start time, end time, and envelope GUID string.\n       -Example: \"0.00 1.00 \\\"\\\" 0.00 1.00 \"{xyz-...}\"\n     -P_RAZOREDITS_EXT : const char * : list of razor edit areas, as comma-separated sets of space-separated tuples of start time, end time, optional envelope GUID string, optional fixed/fipm top y-position, optional fixed/fipm bottom y-position(fipm means fixed item positioning).\n      - Example: \"0.0 1.0,0.0 1.0 \"{xyz-...}\",1.0 2.0 \"\" 0.25 0.5\"\n     -P_TCP_LAYOUT : const char * : layout name\n     -P_EXT:xyz : char * : extension-specific persistent data\n     -P_UI_RECT:tcp.mute : char * : read-only, allows querying screen position + size of track WALTER elements (tcp.size queries screen position and size of entire TCP, etc).\n     -GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.\n     -B_MUTE : bool * : muted\n     -B_PHASE : bool * : track phase inverted\n     -B_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread playback state, read-only)\n     -IP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)\n     -I_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place\n     -I_FXEN : int * : fx enabled, 0=bypassed, !0=fx active\n     -I_RECARM : int * : record armed, 0=not record armed, 1=record armed\n     -I_RECINPUT : int * : record input, <0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.\n     -I_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace\n     -I_RECMODE_FLAGS : int * : record mode flags, &3=output recording mode (0=post fader, 1=pre-fx, 2=post-fx/pre-fader)\n     -I_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)\n     -I_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on\n     -I_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch\n     -I_NCHAN : int * : number of track channels, 2-64, even numbers only\n     -I_SELECTED : int * : track selected, 0=unselected, 1=selected\n     -I_WNDH : int * : current TCP window height in pixels including envelopes (read-only)\n     -I_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)\n     -I_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)\n     -I_MCPX : int * : current MCP X-position in pixels relative to mixer container\n     -I_MCPY : int * : current MCP Y-position in pixels relative to mixer container\n     -I_MCPW : int * : current MCP width in pixels\n     -I_MCPH : int * : current MCP height in pixels\n     -I_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\n     -I_FOLDERCOMPACT : int * : folder compacted state (only valid on folders), 0=normal, 1=small, 2=tiny children\n     -I_MIDIHWOUT : int * : track midi hardware output index, <0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)\n     -I_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX\n     -I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\n     -I_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels\n     -B_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)\n     -D_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\n     -D_PAN : double * : trim pan of track, -1..1\n     -D_WIDTH : double * : width of track, -1..1\n     -D_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6\n     -D_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6\n     -I_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan\n     -D_PANLAW : double * : pan law of track, <0=project default, 0.5=-6dB, 0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain compensation, etc\n     -I_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with deprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid taper\n     -P_ENV:<envchunkname or P_ENV:{GUID... : TrackEnvelope*, read only. chunkname can be <VOLENV, <PANENV, etc; GUID is the stringified envelope GUID.\n     -B_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)\n     -B_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)\n     -B_MAINSEND : bool * : track sends audio to parent\n     -C_MAINSEND_OFFS : char * : channel offset of track send to parent\n     -I_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes enabled (call UpdateTimeline() after changing)\n     -C_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)\n     -F_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)\n     -F_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)\n     -F_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)\n     -F_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)\n     -I_PLAY_OFFSET_FLAG : int * : track media playback offset state, &1=bypassed, &2=offset value is measured in samples (otherwise measured in seconds)\n     -D_PLAY_OFFSET : double * : track media playback offset, units depend on I_PLAY_OFFSET_FLAG\n     \nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","get","set","object","state","rppxml","statechunk"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"void* obj","description":"the object, to be modified. Can be MediaItem, TrackEnvelope, MediaTrack."},{"identifier":"const char* str","description":"supply str to set the state (returns zero); str=\"\" to get the chunk string returned "}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"char* retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"char* retval = (*GetSetObjectState)(void* obj, const char* str)"},"title":"GetSetObjectState","chapters":["C++-only functions","Misc"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"get or set the state of a {track,item,envelope} as an RPPXML chunk\nstr=\"\" to get the chunk string returned (must call FreeHeapPtr when done)\nsupply str to set the state (returns zero)\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","get","set","object","state","rppxml","statechunk"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"void* obj","description":"the object, to be modified. Can be MediaItem, TrackEnvelope, MediaTrack."},{"identifier":"const char* str","description":"supply str to set the state (returns zero); str=\"\" to get the chunk string returned (must call FreeHeapPtr when done)"},{"identifier":"bool isundo","description":"set, if the state will be used for undo purposes (which may allow REAPER to get the state more efficiently"}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"char* retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"char* retval = (*GetSetObjectState2)(void* obj, const char* str, bool isundo)"},"title":"GetSetObjectState2","chapters":["C++-only functions","Misc"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"get or set the state of a {track,item,envelope} as an RPPXML chunk\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","get","set","midi","support","file"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ReaProject* proj","description":"the project-number. 0 for the current project. "},{"identifier":"MediaTrack* track","description":"the MediaTrack-object of the track to be treated"},{"identifier":"int which","description":"thich MIDI-file to use\n0, MIDI colormap image file, \n1, MIDI bank/program select file, \n2, MIDI text string file, \n3, MIDI note mapping file. "},{"identifier":"const char* filename","description":"If fn != NULL, a new track MIDI storage file will be set; otherwise the existing track MIDI storage file will be returned."}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"6.02"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"const char* retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"const char* retval = (*GetSetTrackMIDISupportFile)(ReaProject* proj, MediaTrack* track, int which, const char* filename)"},"title":"GetSetTrackMIDISupportFile","chapters":["C++-only functions","Midi"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Get or set the filename for storage of the MIDI bank/program select file. \n\"which\" must be 1. \n\nIf fn != NULL, a new track MIDI storage file will be set; otherwise the existing track MIDI storage file will be returned. \n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","get","set","send","receive","hardware","output"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"MediaTrack* tr","description":"the MediaTrack object for the track to be gotten or set"},{"identifier":"int category","description":"<0 for receives, 0=sends, >0 for hardware outputs "},{"identifier":"int sendidx","description":"0..n (to enumerate, iterate over sendidx until it returns NULL) "},{"identifier":"const char* parmname","description":"the parameter to get/set\nP_DESTTRACK : read only, returns MediaTrack *, destination track, only applies for sends/recvs\nP_SRCTRACK : read only, returns MediaTrack *, source track, only applies for sends/recvs\nP_ENV : read only, returns TrackEnvelope *, setNewValue=<VOLENV, <PANENV, etc\nB_MUTE : returns bool *\nB_PHASE : returns bool *, true to flip phase\nB_MONO : returns bool *\nD_VOL : returns double *, 1.0 = +0dB etc\nD_PAN : returns double *, -1..+1\nD_PANLAW : returns double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\nI_SENDMODE : returns int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\nI_AUTOMODE : returns int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\nI_SRCCHAN : returns int *, index,&1024=mono, -1 for none\nI_DSTCHAN : returns int *, index, &1024=mono, otherwise stereo pair, hwout:&512=rearoute\nI_MIDIFLAGS : returns int *, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chan"},{"identifier":"void* setNewValue","description":"the new value to be set"}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void*","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void* (*GetSetTrackSendInfo)(MediaTrack* tr, int category, int sendidx, const char* parmname, void* setNewValue)"},"title":"GetSetTrackSendInfo","chapters":["C++-only functions","Routing"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Get or set send/receive/hardware output attributes.\n\nFor ReaRoute-users: the outputs are hardware outputs, but with 512 added to the destination channel index (512 is the first rearoute channel, 513 the second, etc).\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","get","set","toggle","comand","state","hooks"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaTrack* section","description":"the section, in which the action appears in\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"},{"identifier":"int command_id","description":"the command-id of the action, whose state you want"}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"int retval = (*GetToggleCommandStateThroughHooks)(KbdSectionInfo* section, int command_id)"},"title":"GetToggleCommandStateThroughHooks","chapters":["C++-only functions","Actions"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the state of an action via extension plugins' hooks.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","hires","peaks","source"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"PCM_source* src","description":""},{"identifier":"PCM_source_peaktransfer_t* block","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*HiresPeaksFromSource)(PCM_source* src, PCM_source_peaktransfer_t* block)"},"title":"HiresPeaksFromSource","chapters":["C++-only functions","Audio"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Hires peaks from source.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","realtime","audio","thread"],"params":{"param_count":0,"entries":[]},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"int retval = (*IsInRealTimeAudio)()"},"title":"IsInRealTimeAudio","chapters":["C++-only functions","Audio"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Are we in a realtime audio thread (between OnAudioBuffer calls,not in some worker/anticipative FX thread)? threadsafe\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","mediaitem","take","check","played","active","unmute"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MediaItem* item","description":"MediaItem in which the take is to be checked"},{"identifier":"MediaItem_Take* take","description":"the MediaItem_Take to be checked"}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"bool retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"bool retval = (*IsItemTakeActiveForPlayback)(MediaItem* item, MediaItem_Take* take)"},"title":"IsItemTakeActiveForPlayback","chapters":["C++-only functions","MediaItem Take"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"get whether a take will be played (active take, unmuted, etc)\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","reaper","reamote","check"],"params":{"param_count":0,"entries":[]},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"bool retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"bool retval = (*IsREAPER)()"},"title":"IsREAPER","chapters":["C++-only functions","Misc"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns true if dealing with REAPER, returns false for ReaMote, etc\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","keyname","format"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ACCEL* ac","description":""},{"identifier":"char* s","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*kbd_formatKeyName)(ACCEL* ac, char* s)"},"title":"kbd_formatKeyName","chapters":["C++-only functions","Misc"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Format keyname\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","get","key","assigned","command"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"int cmd","description":"commandid of the action"},{"identifier":"char* s","description":""},{"identifier":"KbdSectionInfo* section","description":"the section, in which the action exists\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*kbd_getCommandName)(int cmd, char* s, KbdSectionInfo* section)"},"title":"kbd_getCommandName","chapters":["C++-only functions","Actions"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Get the string of a key assigned to command \"cmd\" in a section.\nThis function is poorly named as it doesn't return the command's name, see kbd_getTextFromCmd.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","get","text","command"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"int cmd","description":""},{"identifier":"KbdSectionInfo* section","description":"the section, in which the action exists\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"const char*","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"const char* retval = (*kbd_getTextFromCmd)(int cmd, KbdSectionInfo* section)"},"title":"kbd_getTextFromCmd","chapters":["C++-only functions","Actions"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Get text from Command\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","on","midi","event"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MIDI_event_t* evt","description":"the MIDI-event"},{"identifier":"int dev_index","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*kbd_OnMidiEvent)(MIDI_event_t* evt, int dev_index)"},"title":"kbd_OnMidiEvent","chapters":["C++-only functions","Midi"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"On Midi Event. Can be called from anywhere (threadsafe)\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","on","midi","list"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"MIDI_eventlist* list","description":""},{"identifier":"int dev_index","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*kbd_OnMidiList)(MIDI_eventlist* list, int dev_index)"},"title":"kbd_OnMidiList","chapters":["C++-only functions","Midi"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"On MIDI List. Can be called from anywhere (threadsafe)\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","process","actions","menu"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"HMENU menu","description":""},{"identifier":"KbdSectionInfo* section","description":"the section, in which the action exists\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*kbd_ProcessActionsMenu)(HMENU menu, KbdSectionInfo* section)"},"title":"kbd_ProcessActionsMenu","chapters":["C++-only functions","Menus"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Process actions-menu.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","process","midi","event","action","ex"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MIDI_event_t* evt","description":""},{"identifier":"KbdSectionInfo* section","description":"the section, in which the action exists\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"},{"identifier":"HWND hwndCtx","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"bool retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"bool retval = (*kbd_processMidiEventActionEx)(MIDI_event_t* evt, KbdSectionInfo* section, HWND hwndCtx)"},"title":"kbd_processMidiEventActionEx","chapters":["C++-only functions","Actions"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Process Midi Event Action\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","reprocess","menu"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"HMENU menu","description":""},{"identifier":"KbdSectionInfo* section","description":"the section, in which the action exists\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*kbd_reprocessMenu)(HMENU menu, KbdSectionInfo* section)"},"title":"kbd_reprocessMenu","chapters":["C++-only functions","Menus"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Reprocess a menu recursively, setting key assignments to what their command IDs are mapped to.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","run","command","hooks","action","commandid","section"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"KbdSectionInfo* section","description":"the section, in which the action exists\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"},{"identifier":"int* actionCommandID","description":"the commandid-number of the action you want to run."},{"identifier":"int* val","description":""},{"identifier":"int* valhw","description":""},{"identifier":"int* relmode","description":""},{"identifier":"HWND hwnd","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"bool retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"bool retval = (*kbd_RunCommandThroughHooks)(KbdSectionInfo* section, int* actionCommandID, int* val, int* valhw, int* relmode, HWND hwnd)"},"title":"kbd_RunCommandThroughHooks","chapters":["C++-only functions","Actions"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Run command through hooks. actioncommandID may get modified.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","translate","accelerator","message","key","section","keybinding"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"HWND hwnd","description":""},{"identifier":"MSG* msg","description":""},{"identifier":"KbdSectionInfo* section","description":"the section, in which the action exists\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"int retval = (*kbd_translateAccelerator)(HWND hwnd, MSG* msg, KbdSectionInfo* section)"},"title":"kbd_translateAccelerator","chapters":["C++-only functions","Actions"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Pass in the HWND to receive commands, a MSG of a key command, and a valid section,\nand kbd_translateAccelerator() will process it looking for any keys bound to it, and send the messages off.\nReturns 1 if processed, 0 if no key binding found.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","translate","mouse","midi","message","windows"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"void* winmsg","description":""},{"identifier":"unsigned char* midimsg","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"bool retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"bool retval = (*kbd_translateMouse)(void* winmsg, unsigned char* midimsg)"},"title":"kbd_translateMouse","chapters":["C++-only functions","Misc"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"removed from API!\n\nTranslate mouse.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","destroy"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"LICE_IBitmap* bm","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE__Destroy)(LICE_IBitmap* bm)"},"title":"LICE__Destroy","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE destroy.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","font","destroy"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"LICE_IFont* font","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE__DestroyFont)(LICE_IFont* font);"},"title":"LICE__DestroyFont","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE destroy-font.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","draw","text"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"LICE_IFont* font","description":""},{"identifier":"LICE_IBitmap* bm","description":""},{"identifier":"const char* str","description":""},{"identifier":"int strcnt","description":""},{"identifier":"RECT* rect","description":""},{"identifier":"UINT dtFlags","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"int retval = (*LICE__DrawText)(LICE_IFont* font, LICE_IBitmap* bm, const char* str, int strcnt, RECT* rect, UINT dtFlags)"},"title":"LICE__DrawText","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE draw text.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","get","bits","bitmap"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"LICE_IBitmap* bm","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void*","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void* (*LICE__GetBits)(LICE_IBitmap* bm)"},"title":"LICE__GetBits","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE get bits.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","get","dc","bitmap"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"LICE_IBitmap* bm","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"HDC retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"HDC retval = (*LICE__GetDC)(LICE_IBitmap* bm)"},"title":"LICE__GetDC","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE__GetDC","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","get","height"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"LICE_IBitmap* bm","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"int retval = (*LICE__GetHeight)(LICE_IBitmap* bm)"},"title":"LICE__GetHeight","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE get height\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","get","row","span"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"LICE_IBitmap* bm","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"int retval = (*LICE__GetRowSpan)(LICE_IBitmap* bm)"},"title":"LICE__GetRowSpan","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE get row span.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","get","width"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"LICE_IBitmap* bm","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"int retval = (*LICE__GetWidth)(LICE_IBitmap* bm)"},"title":"LICE__GetWidth","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE get width.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","is","flipped"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"LICE_IBitmap* bm","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"bool retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"bool retval = (*LICE__IsFlipped)(LICE_IBitmap* bm)"},"title":"LICE__IsFlipped","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE is flipped\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","resize"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"LICE_IBitmap* bm","description":""},{"identifier":"int w","description":""},{"identifier":"int h","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"bool retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"bool retval = (*LICE__resize)(LICE_IBitmap* bm, int w, int h)"},"title":"LICE__resize","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE resize\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","set","bk","color"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"LICE_IFont* font","description":""},{"identifier":"LICE_pixel color","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"LICE_pixel retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"LICE_pixel retval = (*LICE__SetBkColor)(LICE_IFont* font, LICE_pixel color)"},"title":"LICE__SetBkColor","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE set bk color\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","translate","lice","set","from","hfont"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"LICE_IFont* font","description":"font must REMAIN valid,unless LICE_FONT_FLAG_PRECALCALL is set"},{"identifier":"HFONT hfont","description":""},{"identifier":"int flags","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE__SetFromHFont)(LICE_IFont* font, HFONT hfont, int flags)"},"title":"LICE__SetFromHFont","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE set from h-font\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","set","text","color"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"LICE_IFont* font","description":""},{"identifier":"LICE_pixel color","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"LICE_pixel retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"LICE_pixel retval = (*LICE__SetTextColor)(LICE_IFont* font, LICE_pixel color)"},"title":"LICE__SetTextColor","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE set text color\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","set","text","combine","mode"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"LICE_IFont* ifont","description":""},{"identifier":"int mode","description":""},{"identifier":"float alpha","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE__SetTextCombineMode)(LICE_IFont* ifont, int mode, float alpha)"},"title":"LICE__SetTextCombineMode","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE set text combine mode\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","arc"],"params":{"markup_type":"plaintext","param_count":10,"entries":[{"identifier":"LICE_IBitmap* dest","description":""},{"identifier":"float cx","description":""},{"identifier":"float cy","description":""},{"identifier":"float r","description":""},{"identifier":"float minAngle","description":""},{"identifier":"float maxAngle","description":""},{"identifier":"LICE_pixel color","description":""},{"identifier":"float alpha","description":""},{"identifier":"int mode","description":""},{"identifier":"bool aa","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_Arc)(LICE_IBitmap* dest, float cx, float cy, float r, float minAngle, float maxAngle, LICE_pixel color, float alpha, int mode, bool aa)"},"title":"LICE_Arc","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE arc\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","blit"],"params":{"markup_type":"plaintext","param_count":10,"entries":[{"identifier":"LICE_IBitmap* dest","description":""},{"identifier":"LICE_IBitmap* src","description":""},{"identifier":"int dstx","description":""},{"identifier":"int dsty","description":""},{"identifier":"int srcx","description":""},{"identifier":"int srcy","description":""},{"identifier":"int srcw","description":""},{"identifier":"int srch","description":""},{"identifier":"float alpha","description":""},{"identifier":"int mode","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_Blit)(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int srcx, int srcy, int srcw, int srch, float alpha, int mode)"},"title":"LICE_Blit","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE blit\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","blur"],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"LICE_IBitmap* dest","description":""},{"identifier":"LICE_IBitmap* src","description":""},{"identifier":"int dstx","description":""},{"identifier":"int dsty","description":""},{"identifier":"int srcx","description":""},{"identifier":"int srcy","description":""},{"identifier":"int srcw","description":""},{"identifier":"int srch","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_Blur)(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int srcx, int srcy, int srcw, int srch)"},"title":"LICE_Blur","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE blur\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","bordered","rect"],"params":{"markup_type":"plaintext","param_count":9,"entries":[{"identifier":"LICE_IBitmap* dest","description":""},{"identifier":"int x","description":""},{"identifier":"int y","description":""},{"identifier":"int w","description":""},{"identifier":"int h","description":""},{"identifier":"LICE_pixel bgcolor","description":""},{"identifier":"LICE_pixel fgcolor","description":""},{"identifier":"float alpha","description":""},{"identifier":"int mode","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_BorderedRect)(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel bgcolor, LICE_pixel fgcolor, float alpha, int mode)"},"title":"LICE_BorderedRect","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE bordered rect.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","circle"],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"LICE_IBitmap* dest","description":""},{"identifier":"float cx","description":""},{"identifier":"float cy","description":""},{"identifier":"float r","description":""},{"identifier":"LICE_pixel color","description":""},{"identifier":"float alpha","description":""},{"identifier":"int mode","description":""},{"identifier":"bool aa","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_Circle)(LICE_IBitmap* dest, float cx, float cy, float r, LICE_pixel color, float alpha, int mode, bool aa)"},"title":"LICE_Circle","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE circle\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","clear"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"LICE_IBitmap* dest","description":""},{"identifier":"LICE_pixel color","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_Clear)(LICE_IBitmap* dest, LICE_pixel color)"},"title":"LICE_Clear","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE clear\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","clear","rect"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"LICE_IBitmap* dest","description":""},{"identifier":"int x","description":""},{"identifier":"int y","description":""},{"identifier":"int w","description":""},{"identifier":"int h","description":""},{"identifier":"LICE_pixel mask","description":""},{"identifier":"LICE_pixel orbits","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_ClearRect)(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel mask, LICE_pixel orbits)"},"title":"LICE_ClearRect","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE clear rect\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","copy"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"LICE_IBitmap* dest","description":""},{"identifier":"LICE_IBitmap* src","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_Copy)(LICE_IBitmap* dest, LICE_IBitmap* src)"},"title":"LICE_Copy","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE copy\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","create","bitmap"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"int mode","description":""},{"identifier":"int w","description":""},{"identifier":"int h","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"LICE_IBitmap* retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"LICE_IBitmap* retval = (*LICE_CreateBitmap)(int mode, int w, int h)"},"title":"LICE_CreateBitmap","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Create a new bitmap. this is like calling new LICE_MemBitmap (mode=0) or new LICE_SysBitmap (mode=1).\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","create","font"],"params":{"param_count":0,"entries":[]},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"LICE_IFont* retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"LICE_IFont* retval = (*LICE_CreateFont)()"},"title":"LICE_CreateFont","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE create font\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","draw","char"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"LICE_IBitmap* bm","description":""},{"identifier":"int x","description":""},{"identifier":"int y","description":""},{"identifier":"char c","description":""},{"identifier":"LICE_pixel color","description":""},{"identifier":"float alpha","description":""},{"identifier":"int mode","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_DrawChar)(LICE_IBitmap* bm, int x, int y, char c, LICE_pixel color, float alpha, int mode)"},"title":"LICE_DrawChar","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE draw char\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","draw","glyph"],"params":{"markup_type":"plaintext","param_count":9,"entries":[{"identifier":"LICE_IBitmap* dest","description":""},{"identifier":"int x","description":""},{"identifier":"int y","description":""},{"identifier":"LICE_pixel color","description":""},{"identifier":"LICE_pixel_chan* alphas","description":""},{"identifier":"int glyph_w","description":""},{"identifier":"int glyph_h","description":""},{"identifier":"float alpha","description":""},{"identifier":"int mode","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_DrawGlyph)(LICE_IBitmap* dest, int x, int y, LICE_pixel color, LICE_pixel_chan* alphas, int glyph_w, int glyph_h, float alpha, int mode)"},"title":"LICE_DrawGlyph","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE draw glyph\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","draw","bezier"],"params":{"markup_type":"plaintext","param_count":14,"entries":[{"identifier":"LICE_IBitmap* dest","description":""},{"identifier":"double xstart","description":""},{"identifier":"double ystart","description":""},{"identifier":"double xctl1","description":""},{"identifier":"double yctl1","description":""},{"identifier":"double xctl2","description":""},{"identifier":"double yctl2","description":""},{"identifier":"double xend","description":""},{"identifier":"double yend","description":""},{"identifier":"LICE_pixel color","description":""},{"identifier":"float alpha","description":""},{"identifier":"int mode","description":""},{"identifier":"bool aa","description":""},{"identifier":"double tol","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.80"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_DrawCBezier)(LICE_IBitmap* dest, double xstart, double ystart, double xctl1, double yctl1, double xctl2, double yctl2, double xend, double yend, LICE_pixel color, float alpha, int mode, bool aa, double tol)"},"title":"LICE_DrawCBezier","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE Draw C Bezier\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","draw","rectangle"],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"LICE_IBitmap* dest","description":""},{"identifier":"int x","description":""},{"identifier":"int y","description":""},{"identifier":"int w","description":""},{"identifier":"int h","description":""},{"identifier":"LICE_pixel color","description":""},{"identifier":"float alpha","description":""},{"identifier":"int mode","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_DrawRect)(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel color, float alpha, int mode)"},"title":"LICE_DrawRect","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE draw rect\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","draw","text"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"LICE_IBitmap* bm","description":""},{"identifier":"int x","description":""},{"identifier":"int y","description":""},{"identifier":"const char* string","description":""},{"identifier":"LICE_pixel color","description":""},{"identifier":"float alpha","description":""},{"identifier":"int mode","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_DrawText)(LICE_IBitmap* bm, int x, int y, const char* string, LICE_pixel color, float alpha, int mode)"},"title":"LICE_DrawText","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE draw text\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","fill","bezier"],"params":{"markup_type":"plaintext","param_count":15,"entries":[{"identifier":"LICE_IBitmap* dest","description":""},{"identifier":"double xstart","description":""},{"identifier":"double ystart","description":""},{"identifier":"double xctl1","description":""},{"identifier":"double yctl1","description":""},{"identifier":"double xctl2","description":""},{"identifier":"double yctl2","description":""},{"identifier":"double xend","description":""},{"identifier":"double yend","description":""},{"identifier":"int yfill","description":""},{"identifier":"LICE_pixel color","description":""},{"identifier":"float alpha","description":""},{"identifier":"int mode","description":""},{"identifier":"bool aa","description":""},{"identifier":"double tol","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.95"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_FillCBezier)(LICE_IBitmap* dest, double xstart, double ystart, double xctl1, double yctl1, double xctl2, double yctl2, double xend, double yend, int yfill, LICE_pixel color, float alpha, int mode, bool aa, double tol);"},"title":"LICE_FillCBezier","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE Fill CBezier\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","fill","circle"],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"LICE_IBitmap* dest","description":""},{"identifier":"float cx","description":""},{"identifier":"float cy","description":""},{"identifier":"float r","description":""},{"identifier":"LICE_pixel color","description":""},{"identifier":"float alpha","description":""},{"identifier":"int mode","description":""},{"identifier":"bool aa","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_FillCircle)(LICE_IBitmap* dest, float cx, float cy, float r, LICE_pixel color, float alpha, int mode, bool aa)"},"title":"LICE_FillCircle","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE fill circle\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","fill","convex","polygon"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"LICE_IBitmap* dest","description":""},{"identifier":"int* x","description":""},{"identifier":"int* y","description":""},{"identifier":"int npoints","description":""},{"identifier":"LICE_pixel color","description":""},{"identifier":"float alpha","description":""},{"identifier":"int mode","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_FillConvexPolygon)(LICE_IBitmap* dest, int* x, int* y, int npoints, LICE_pixel color, float alpha, int mode)"},"title":"LICE_FillConvexPolygon","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE fill convex polygon\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","fill","rect"],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"LICE_IBitmap* dest","description":""},{"identifier":"int x","description":""},{"identifier":"int y","description":""},{"identifier":"int w","description":""},{"identifier":"int h","description":""},{"identifier":"LICE_pixel color","description":""},{"identifier":"float alpha","description":""},{"identifier":"int mode","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_FillRect)(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel color, float alpha, int mode)"},"title":"LICE_FillRect","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE fill rect\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","fill","trapezoid"],"params":{"markup_type":"plaintext","param_count":10,"entries":[{"identifier":"LICE_IBitmap* dest","description":""},{"identifier":"int x1a","description":""},{"identifier":"int x1b","description":""},{"identifier":"int y1","description":""},{"identifier":"int x2a","description":""},{"identifier":"int x2b","description":""},{"identifier":"int y2","description":""},{"identifier":"LICE_pixel color","description":""},{"identifier":"float alpha","description":""},{"identifier":"int mode","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_FillTrapezoid)(LICE_IBitmap* dest, int x1a, int x1b, int y1, int x2a, int x2b, int y2, LICE_pixel color, float alpha, int mode)"},"title":"LICE_FillTrapezoid","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE fill trapezoid\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","fill","triangle"],"params":{"markup_type":"plaintext","param_count":10,"entries":[{"identifier":"LICE_IBitmap* dest","description":""},{"identifier":"int x1","description":""},{"identifier":"int y1","description":""},{"identifier":"int x2","description":""},{"identifier":"int y2","description":""},{"identifier":"int x3","description":""},{"identifier":"int y3","description":""},{"identifier":"LICE_pixel color","description":""},{"identifier":"float alpha","description":""},{"identifier":"int mode","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_FillTriangle)(LICE_IBitmap* dest, int x1, int y1, int x2, int y2, int x3, int y3, LICE_pixel color, float alpha, int mode)"},"title":"LICE_FillTriangle","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE fill triangle\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","get","pixel"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"LICE_IBitmap* bm","description":""},{"identifier":"int x","description":""},{"identifier":"int y","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"LICE_pixel retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"LICE_pixel retval = (*LICE_GetPixel)(LICE_IBitmap* bm, int x, int y)"},"title":"LICE_GetPixel","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE get pixel\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","grad","rectangle"],"params":{"markup_type":"plaintext","param_count":18,"entries":[{"identifier":"LICE_IBitmap* dest","description":""},{"identifier":"int dstx","description":""},{"identifier":"int dsty","description":""},{"identifier":"int dstw","description":""},{"identifier":"int dsth","description":""},{"identifier":"float ir","description":""},{"identifier":"float ig","description":""},{"identifier":"float ib","description":""},{"identifier":"float ia","description":""},{"identifier":"float drdx","description":""},{"identifier":"float dgdx","description":""},{"identifier":"float dbdx","description":""},{"identifier":"float dadx","description":""},{"identifier":"float drdy","description":""},{"identifier":"float dgdy","description":""},{"identifier":"float dbdy","description":""},{"identifier":"float dady","description":""},{"identifier":"int mode","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_GradRect)(LICE_IBitmap* dest, int dstx, int dsty, int dstw, int dsth, float ir, float ig, float ib, float ia, float drdx, float dgdx, float dbdx, float dadx, float drdy, float dgdy, float dbdy, float dady, int mode)"},"title":"LICE_GradRect","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE grad rect\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","line"],"params":{"markup_type":"plaintext","param_count":9,"entries":[{"identifier":"LICE_IBitmap* dest","description":""},{"identifier":"float x1","description":""},{"identifier":"float y1","description":""},{"identifier":"float x2","description":""},{"identifier":"float y2","description":""},{"identifier":"LICE_pixel color","description":""},{"identifier":"float alpha","description":""},{"identifier":"int mode","description":""},{"identifier":"bool aa","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_Line)(LICE_IBitmap* dest, float x1, float y1, float x2, float y2, LICE_pixel color, float alpha, int mode, bool aa)"},"title":"LICE_Line","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE line\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","line","int"],"params":{"markup_type":"plaintext","param_count":9,"entries":[{"identifier":"LICE_IBitmap* dest","description":""},{"identifier":"int x1","description":""},{"identifier":"int y1","description":""},{"identifier":"int x2","description":""},{"identifier":"int y2","description":""},{"identifier":"LICE_pixel color","description":""},{"identifier":"float alpha","description":""},{"identifier":"int mode","description":""},{"identifier":"bool aa","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_LineInt)(LICE_IBitmap* dest, int x1, int y1, int x2, int y2, LICE_pixel color, float alpha, int mode, bool aa)"},"title":"LICE_LineInt","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE line int\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","load","png","file","graphic"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"const char* filename","description":""},{"identifier":"Lice_IBitmap* bmp","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"LICE_IBitmap* retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"LICE_IBitmap* retval = (*LICE_LoadPNG)(const char* filename, LICE_IBitmap* bmp)"},"title":"LICE_LoadPNG","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE load png\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","load","png","resource","hinstance"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"HINSTANCE hInst","description":""},{"identifier":"int resid","description":""},{"identifier":"LICE_IBitmap* bmp","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"LICE_IBitmap* retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"LICE_IBitmap* retval = (*LICE_LoadPNGFromResource)(HINSTANCE hInst, int resid, LICE_IBitmap* bmp)"},"title":"LICE_LoadPNGFromResource","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE load png from resource\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","measure","text"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"const char* string","description":""},{"identifier":"int* w","description":""},{"identifier":"int* h","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_MeasureText)(const char* string, int* w, int* h)"},"title":"LICE_MeasureText","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE measure text\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","multiply","add","rectangle"],"params":{"markup_type":"plaintext","param_count":13,"entries":[{"identifier":"LICE_IBitmap* dest","description":""},{"identifier":"int x","description":""},{"identifier":"int y","description":""},{"identifier":"int w","description":""},{"identifier":"int h","description":""},{"identifier":"float rsc","description":""},{"identifier":"float gsc","description":""},{"identifier":"float bsc","description":""},{"identifier":"float asc","description":""},{"identifier":"float radd","description":""},{"identifier":"float gadd","description":""},{"identifier":"float badd","description":""},{"identifier":"float aadd","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_MultiplyAddRect)(LICE_IBitmap* dest, int x, int y, int w, int h, float rsc, float gsc, float bsc, float asc, float radd, float gadd, float badd, float aadd)"},"title":"LICE_MultiplyAddRect","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE multiplay add rect\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","put","pixel"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"LICE_IBitmap* bm","description":""},{"identifier":"int x","description":""},{"identifier":"int y","description":""},{"identifier":"LICE_pixel color","description":""},{"identifier":"float alpha","description":""},{"identifier":"int mode","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_PutPixel)(LICE_IBitmap* bm, int x, int y, LICE_pixel color, float alpha, int mode)"},"title":"LICE_PutPixel","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE put pixel\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","rotate","blit"],"params":{"markup_type":"plaintext","param_count":16,"entries":[{"identifier":"LICE_IBitmap* dest","description":""},{"identifier":"LICE_IBitmap* src","description":""},{"identifier":"int dstx","description":""},{"identifier":"int dsty","description":""},{"identifier":"int dstw","description":""},{"identifier":"int dsth","description":""},{"identifier":"float srcx","description":""},{"identifier":"float srcy","description":""},{"identifier":"float srcw","description":""},{"identifier":"float srch","description":""},{"identifier":"float angle","description":""},{"identifier":"bool cliptosourcerect","description":""},{"identifier":"float alpha","description":""},{"identifier":"int mode","description":""},{"identifier":"float rotxcent","description":""},{"identifier":"float rotycent","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_RotatedBlit)(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int dstw, int dsth, float srcx, float srcy, float srcw, float srch, float angle, bool cliptosourcerect, float alpha, int mode, float rotxcent, float rotycent)"},"title":"LICE_RotatedBlit","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE rotate blit. These coordinates are offset from the center of the image,in source pixel coordinates.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","round","rectangle"],"params":{"markup_type":"plaintext","param_count":10,"entries":[{"identifier":"LICE_IBitmap* drawbm","description":""},{"identifier":"float xpos","description":""},{"identifier":"float ypos","description":""},{"identifier":"float w","description":""},{"identifier":"float h","description":""},{"identifier":"int cornerradius","description":""},{"identifier":"LICE_pixel col","description":""},{"identifier":"float alpha","description":""},{"identifier":"int mode","description":""},{"identifier":"bool aa","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_RoundRect)(LICE_IBitmap* drawbm, float xpos, float ypos, float w, float h, int cornerradius, LICE_pixel col, float alpha, int mode, bool aa)"},"title":"LICE_RoundRect","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE round rect\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","scaled","blit"],"params":{"markup_type":"plaintext","param_count":12,"entries":[{"identifier":"LICE_IBitmap* dest","description":""},{"identifier":"LICE_IBitmap* src","description":""},{"identifier":"int dstx","description":""},{"identifier":"int dsty","description":""},{"identifier":"int dstw","description":""},{"identifier":"int dsth","description":""},{"identifier":"float srcx","description":""},{"identifier":"float srcy","description":""},{"identifier":"float srcw","description":""},{"identifier":"float srch","description":""},{"identifier":"float alpha","description":""},{"identifier":"int mode","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_ScaledBlit)(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int dstw, int dsth, float srcx, float srcy, float srcw, float srch, float alpha, int mode)"},"title":"LICE_ScaledBlit","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE scaled blit.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","simple","fill"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"LICE_IBitmap* dest","description":""},{"identifier":"int x","description":""},{"identifier":"int y","description":""},{"identifier":"LICE_pixel newcolor","description":""},{"identifier":"LICE_pixel comparemask","description":""},{"identifier":"LICE_pixel keepmask","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_SimpleFill)(LICE_IBitmap* dest, int x, int y, LICE_pixel newcolor, LICE_pixel comparemask, LICE_pixel keepmask)"},"title":"LICE_SimpleFill","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE simple fill\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","lice","thick","line"],"params":{"markup_type":"plaintext","param_count":9,"entries":[{"identifier":"LICE_IBitmap* dest","description":""},{"identifier":"double x1","description":""},{"identifier":"double y1","description":""},{"identifier":"double x2","description":""},{"identifier":"double y2","description":""},{"identifier":"LICE_pixel color","description":""},{"identifier":"float alpha","description":""},{"identifier":"int mode","description":""},{"identifier":"int wid","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"6.48"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*LICE_ThickFLine)(LICE_IBitmap* dest, double x1, double y1, double x2, double y2, LICE_pixel color, float alpha, int mode, int wid);"},"title":"LICE_ThickFLine","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"LICE simple fill\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","pcm","source","create"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ISimpleMediaDecoder* dec","description":""},{"identifier":"const char* fn","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PCM_source* retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"PCM_source* retval = (*PCM_Source_CreateFromSimple)(ISimpleMediaDecoder* dec, const char* fn)"},"title":"PCM_Source_CreateFromSimple","chapters":["C++-only functions","Audio"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"PCM_Source create from simple\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","peak","build","create"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"PCM_source* src","description":""},{"identifier":"const char* fn","description":""},{"identifier":"int srate","description":""},{"identifier":"int nch","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"REAPER_PeakBuild_Interface*  retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"REAPER_PeakBuild_Interface* retval = (*PeakBuild_Create)(PCM_source* src, const char* fn, int srate, int nch)"},"title":"PeakBuild_Create","chapters":["C++-only functions","Audio"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Peak build create\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","peak","ex","create"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"PCM_source* src","description":""},{"identifier":"const char* fn","description":""},{"identifier":"int srate","description":""},{"identifier":"int nch","description":""},{"identifier":"int flags","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"REAPER_PeakBuild_Interface* retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"REAPER_PeakBuild_Interface* retval = (*PeakBuild_CreateEx)(PCM_source* src, const char* fn, int srate, int nch, int flags)"},"title":"PeakBuild_CreateEx","chapters":["C++-only functions","Audio"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Peakbuild create-ex. flags&1 for FP support\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","peak","create","get"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"const char* fn","description":""},{"identifier":"int srate","description":""},{"identifier":"int nch","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"REAPER_PeakGet_Interface* retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"REAPER_PeakGet_Interface* retval =(*PeakGet_Create)(const char* fn, int srate, int nch)"},"title":"PeakGet_Create","chapters":["C++-only functions","Audio"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Peak get create.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","play","preview"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"preview_register_t* preview","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"int retval = (*PlayPreview)(preview_register_t* preview)"},"title":"PlayPreview","chapters":["C++-only functions","Preview"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Play preview. Return nonzero on success.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","play","preview","ex"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"preview_register_t* preview","description":""},{"identifier":"int bufflags","description":""},{"identifier":"double measure_align","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"6.19"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"int retval = (*PlayPreviewEx)(preview_register_t* preview, int bufflags, double measure_align)"},"title":"PlayPreviewEx","chapters":["C++-only functions","Preview"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"return nonzero on success. \n\nBufflags:\n&1 = buffer source, \n&2 = treat length changes in source as varispeed and adjust internal state accordingly if buffering.\n\nmeasure_align<0=play immediately, >0=align playback with measure start\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","play","track","preview"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"preview_register_t* preview","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"int retval = (*PlayTrackPreview)(preview_register_t* preview)"},"title":"PlayTrackPreview","chapters":["C++-only functions","Preview"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Play track preview. Returns nonzero on success,in these,m_out_chan is a track index (0-n).\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","play","track","preview"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject* proj","description":"the project-number. 0 for the current project. "},{"identifier":"preview_register_t* preview","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"int retval = (*PlayTrackPreview2)(ReaProject* proj, preview_register_t* preview)"},"title":"PlayTrackPreview2","chapters":["C++-only functions","Preview"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Play track preview. Return nonzero on success,in these,m_out_chan is a track index (0-n).\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","play","track","preview","ex"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ReaProject* proj","description":"the project-number. 0 for the current project. "},{"identifier":"preview_register_t* preview","description":""},{"identifier":"int flags","description":""},{"identifier":"double measure_align","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"6.19"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"int retval = (*PlayTrackPreview2Ex)(ReaProject* proj, preview_register_t* preview, int flags, double measure_align)"},"title":"PlayTrackPreview2Ex","chapters":["C++-only functions","Preview"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"return nonzero on success,in these,m_out_chan is a track index (0-n). for flags see PlayPreviewEx bufflags\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","plugin","get","api"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"const char* name","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void*","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void* (*plugin_getapi)(const char* name)"},"title":"plugin_getapi","chapters":["C++-only functions","Misc"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Plugin get api.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","get","filter","list","plugin"],"params":{"param_count":0,"entries":[]},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"const char* retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"const char* retval (*plugin_getFilterList)()"},"title":"plugin_getFilterList","chapters":["C++-only functions","Misc"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Plugin get filter list. Returns a double-NULL terminated list of importable media files, suitable for passing to GetOpenFileName() etc. Includes *.* (All files).\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","plugin","get","importable","project","filter","list","file"],"params":{"param_count":0,"entries":[]},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"const char* retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"const char* retval = (*plugin_getImportableProjectFilterList)()"},"title":"plugin_getImportableProjectFilterList","chapters":["C++-only functions","Misc"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Plugin get importable project filter list. Returns a double-NULL terminated list of importable project files, suitable for passing to GetOpenFileName() etc. Includes *.* (All files). \n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","project","config","var","addr"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ReaProject* proj","description":"the project-number. 0 for the current project. "},{"identifier":"int idx","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void*","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void* (*projectconfig_var_addr)(ReaProject* proj, int idx)"},"title":"projectconfig_var_addr","chapters":["C++-only functions","Config Vars"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Project config var addr.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","project","config","var","getoffs","offset"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"const char* name","description":""},{"identifier":"int* szOut","description":"size of the object"}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"int retval = (*projectconfig_var_getoffs)(const char* name, int* szOut)"},"title":"projectconfig_var_getoffs","chapters":["C++-only functions","Config Vars"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns offset to pass to projectconfig_var_addr() to get project-config var of name. szout gets size of object.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","realloc","clear","buffer","register"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int tok","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"6.68"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*realloc_cmd_clear)(int tok)"},"title":"realloc_cmd_clear","chapters":["C++-only functions","Config Vars"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"clears a buffer/buffer-size registration added with realloc_cmd_register_buf, and clears any later registrations, frees any allocated buffers. call after values are read from any registered pointers etc.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","realloc","buffer","register"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"char** ptr","description":""},{"identifier":"int* ptr_size","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"6.68"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"int (*realloc_cmd_register_buf)(char** ptr, int* ptr_size)"},"title":"realloc_cmd_register_buf","chapters":["C++-only functions","Config Vars"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"clears a buffer/buffer-size registration added with realloc_cmd_register_buf, and clears any later registrations, frees any allocated buffers. call after values are read from any registered pointers etc.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","reaper","pitch","shift","api"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int version","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"IReaperPitchShift* retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"IReaperPitchShift* retval = (*ReaperGetPitchShiftAPI)(int version)"},"title":"ReaperGetPitchShiftAPI","chapters":["C++-only functions","Misc"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"version must be REAPER_PITCHSHIFT_API_VER\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","resampler","create","interface"],"params":{"param_count":0,"entries":[]},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"REAPER_Resample_Interface* retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"REAPER_Resample_Interface* retval = (*Resampler_Create)()"},"title":"Resampler_Create","chapters":["C++-only functions","Misc"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Resampler create\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","resampler","create","interface"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"ReaProject* project","description":""},{"identifier":"const char* path","description":""},{"identifier":"const char* pattern","description":""},{"identifier":"char* targets","description":""},{"identifier":"int targets_sz","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"6.26"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"int retval = (*ResolveRenderPattern)(ReaProject* project, const char* path, const char* pattern, char* targets, int targets_sz)"},"title":"ResolveRenderPattern","chapters":["C++-only functions","Misc"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Resolve a wildcard pattern into a set of nul-separated, double-nul terminated render target filenames. Returns the length of the string buffer needed for the returned file list. Call with path=NULL to suppress filtering out illegal pathnames, call with targets=NULL to get just the string buffer length.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","screenset","register"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"char* id","description":""},{"identifier":"void* callbackFunc","description":""},{"identifier":"void* param","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*screenset_register)(char* id, void* callbackFunc, void* param)"},"title":"screenset_register","chapters":["C++-only functions","Screensets"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Screenset register.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","screenset","register","new"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"char* id","description":""},{"identifier":"screensetNewCallbackFunc callbackFunc","description":""},{"identifier":"void* param","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*screenset_registerNew)(char* id, screensetNewCallbackFunc callbackFunc, void* param)"},"title":"screenset_registerNew","chapters":["C++-only functions","Screensets"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Screenset register new.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","screenset","unregister"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"char* id","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*screenset_unregister)(char* id)"},"title":"screenset_unregister","chapters":["C++-only functions","Screensets"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Screenset unregister.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","screenset","unregister","param"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void* param","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*screenset_unregisterByParam)(void* param)"},"title":"screenset_unregisterByParam","chapters":["C++-only functions","Screensets"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Screenset unregister by param\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","screenset","update","focus"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"HWND prevWin","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*screenset_updateLastFocus)(HWND prevWin)"},"title":"screenset_updateLastFocus","chapters":["C++-only functions","Screensets"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"screenset_updateLastFocus\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","set","render","error"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"const char* errorstr","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*SetRenderLastError)(const char* errorstr)"},"title":"SetRenderLastError","chapters":["C++-only functions","Misc"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Set render last error.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","stop","preview"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"preview_register_t* preview","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"int retval = (*StopPreview)(preview_register_t* preview)"},"title":"StopPreview","chapters":["C++-only functions","Preview"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Stop preview.\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","stop","track","preview"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"preview_register_t* preview","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"int retval = (*StopTrackPreview)(preview_register_t* preview)"},"title":"StopTrackPreview","chapters":["C++-only functions","Preview"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Stop track preview. Return nonzero on success.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","stop","track","preview","ex"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"void* ReaProject","description":"the project-number. 0 for the current project. "},{"identifier":"preview_register_t* preview","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"int retval = (*StopTrackPreview2)(ReaProject* proj, preview_register_t* preview)"},"title":"StopTrackPreview2","chapters":["C++-only functions","Preview"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Stop track preview2.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","update","disk","counters","statistics","bytes","transferred"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"int readamt","description":""},{"identifier":"int writeamt","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"6.13"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*update_disk_counters)(int readamt, int writeamt)"},"title":"update_disk_counters","chapters":["C++-only functions","Files"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Updates disk I/O statistics with bytes transferred since last call. \nNotify REAPER of a write error by calling with readamt=0, writeamt=-101010110 for unknown or -101010111 for disk full\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","set","error"],"params":{"markup_type":"plaintext","param_count":12,"entries":[{"identifier":"LICE_IBitmap* dest","description":""},{"identifier":"WDL_VirtualWnd_BGCfg* src","description":""},{"identifier":"int destx","description":""},{"identifier":"int desty","description":""},{"identifier":"int destw","description":""},{"identifier":"int desth","description":""},{"identifier":"int clipx","description":""},{"identifier":"int clipy","description":""},{"identifier":"int clipw","description":""},{"identifier":"int cliph","description":""},{"identifier":"float alpha","description":""},{"identifier":"int mode","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"bool retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"bool retval = (*WDL_VirtualWnd_ScaledBlitBG)(LICE_IBitmap* dest, WDL_VirtualWnd_BGCfg* src, int destx, int desty, int destw, int desth, int clipx, int clipy, int clipw, int cliph, float alpha, int mode)"},"title":"WDL_VirtualWnd_ScaledBlitBG","chapters":["C++-only functions","GFX"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"WDL virtualwnd scale blit bg.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","mediaitem","parameters","get","set","info"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"MediaItem* item","description":"a MediaItem-object"},{"identifier":"const char* parmname","description":"the parameter to be gotten/set\nP_TRACK : MediaTrack * (read only)\nB_MUTE : bool * to muted state\nB_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.\nC_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.\nB_LOOPSRC : bool * to loop source\nB_ALLTAKESPLAY : bool * to all takes play\nB_UISEL : bool * to ui selected\nC_BEATATTACHMODE : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsosonly\nC_LOCK : char * to one char of lock flags (&1 is locked, currently)\nD_VOL : double *, take volume (negative if take polarity is flipped)\nD_POSITION : double * of item position (seconds)\nD_LENGTH : double * of item length (seconds)\nD_SNAPOFFSET : double * of item snap offset (seconds)\nD_FADEINLEN : double * of item fade in length (manual, seconds)\nD_FADEOUTLEN : double * of item fade out length (manual, seconds)\nD_FADEINDIR : double * of item fade in curve [-1; 1]\nD_FADEOUTDIR : double * of item fade out curve [-1; 1]\nD_FADEINLEN_AUTO : double * of item autofade in length (seconds, -1 for no autofade set)\nD_FADEOUTLEN_AUTO : double * of item autofade out length (seconds, -1 for no autofade set)\nC_FADEINSHAPE : int * to fadein shape, 0=linear, ...\nC_FADEOUTSHAPE : int * to fadeout shape\nI_GROUPID : int * to group ID (0 = no group)\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_LASTY : int * to last y position in track (readonly)\nI_LASTH : int * to last height in track (readonly)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used (though will store the color anyway).\nI_CURTAKE : int * to active take\nIP_ITEMNUMBER : int, item number within the track (read-only, returns the item number directly)\nF_FREEMODE_Y : float * to free mode y position (0..1)\nF_FREEMODE_H : float * to free mode height (0..1)\nP_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)"},{"identifier":"void* setNewValue","description":"the new value to be set, refer description of parmname for the values"}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"6.34"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void*","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void* (*GetSetMediaItemInfo)(MediaItem* item, const char* parmname, void* setNewValue)"},"title":"GetSetMediaItemInfo","chapters":["C++-only functions","MediaItems"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Get/Set Media Item Info\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","get","toggle","command","state","section","commandid"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"KbdSectionInfo* section","description":"the section, in which the action exists\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"},{"identifier":"int command_id","description":"the command-id of the command, whose toggle-state you want"}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"int retval = (*GetToggleCommandState2)(KbdSectionInfo* section, int command_id)"},"title":"GetToggleCommandState2","chapters":["C++-only functions","Actions"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Get Toggle Command State 2\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","get","track","info","flag"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"INT_PTR track","description":"track index, -1=master, 0..n, or cast a MediaTrack* to int "},{"identifier":"int* flags","description":"if flags is non-NULL, will be set to:\n&1, folder\n&2, selected\n&4, has fx enabled\n&8, muted\n&16, soloed\n&32, SIP'd (with &16)\n&64, rec armed"}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"const char* retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"const char* retval = (*GetTrackInfo)(INT_PTR track, int* flags)"},"title":"GetTrackInfo","chapters":["C++-only functions","Media Track"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Gets track info (returns name).\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","midi","command","value","relmode","main","action"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"int cmd","description":""},{"identifier":"int val","description":"val=[0..127] and valhw=-1 (midi CC)"},{"identifier":"int valhw","description":"valhw >=0 (midi pitch (valhw | val<<7))"},{"identifier":"int relmode","description":"relmode absolute (0) or 1/2/3 for relative adjust modes"},{"identifier":"HWND hwnd","description":""},{"identifier":"ReaProject* proj","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"int retval = (*KBD_OnMainActionEx)(int cmd, int val, int valhw, int relmode, HWND hwnd, ReaProject* proj)"},"title":"KBD_OnMainActionEx","chapters":["C++-only functions","Actions"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"val/valhw are used for midi stuff.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","midi","event","list","create"],"params":{"param_count":0,"entries":[]},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MIDI_eventlist* retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"MIDI_eventlist* retval = (*MIDI_eventlist_Create)()"},"title":"MIDI_eventlist_Create","chapters":["C++-only functions","Midi"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Create a MIDI_eventlist object. The returned object must be deleted with MIDI_eventlist_destroy.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","midi","event","list","destroy"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"MIDI_eventlist* evtlist","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*MIDI_eventlist_Destroy)(MIDI_eventlist* evtlist)"},"title":"MIDI_eventlist_Destroy","chapters":["C++-only functions","Midi"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Destroy a MIDI_eventlist object that was created using MIDI_eventlist_Create.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","pcm","sink","create","filename"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"const char* filename","description":""},{"identifier":"const char* cfg","description":""},{"identifier":"int cfg_sz","description":""},{"identifier":"int nch","description":""},{"identifier":"int srate","description":""},{"identifier":"bool buildpeaks","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PCM_sink* retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"PCM_sink* retval = (*PCM_Sink_Create)(const char* filename, const char* cfg, int cfg_sz, int nch, int srate, bool buildpeaks)"},"title":"PCM_Sink_Create","chapters":["C++-only functions","Audio"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"PCM sink create\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","pcm","sink","create","filename","ex"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"ReaProject* proj","description":"the project-number. 0 for the current project. "},{"identifier":"const char* filename","description":""},{"identifier":"const char* cfg","description":""},{"identifier":"int cfg_sz","description":""},{"identifier":"int nch","description":""},{"identifier":"int srate","description":""},{"identifier":"bool buildpeaks","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PCM_sink* retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"PCM_sink* retval = (*PCM_Sink_CreateEx)(ReaProject* proj, const char* filename, const char* cfg, int cfg_sz, int nch, int srate, bool buildpeaks)"},"title":"PCM_Sink_CreateEx","chapters":["C++-only functions","Audio"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"PCM sink create ex.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","pcm","sink","create","midi","filename"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"const char* filename","description":""},{"identifier":"const char* cfg","description":""},{"identifier":"int cfg_sz","description":""},{"identifier":"double bpm","description":""},{"identifier":"int div","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PCM_sink* retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"PCM_sink* retval = (*PCM_Sink_CreateMIDIFile)(const char* filename, const char* cfg, int cfg_sz, double bpm, int div)"},"title":"PCM_Sink_CreateMIDIFile","chapters":["C++-only functions","Midi"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"PCM sink create MIDI file.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","pcm","sink","create","midi","filename","ex"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"ReaProject* proj","description":"the project-number. 0 for the current project. "},{"identifier":"const char* filename","description":""},{"identifier":"const char* cfg","description":""},{"identifier":"int cfg_sz","description":""},{"identifier":"double bpm","description":""},{"identifier":"int div","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PCM_sink* retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"PCM_sink* retval = (*PCM_Sink_CreateMIDIFileEx)(ReaProject* proj, const char* filename, const char* cfg, int cfg_sz, double bpm, int div)"},"title":"PCM_Sink_CreateMIDIFileEx","chapters":["C++-only functions","Midi"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"PCM sink create MIDI file ex\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","send","local","osc","message"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"void* local_osc_handler","description":""},{"identifier":"const char* msg","description":""},{"identifier":"int msglen","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"void","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"void (*SendLocalOscMessage)(void* local_osc_handler, const char* msg, int msglen)"},"title":"SendLocalOscMessage","chapters":["C++-only functions","OSC"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Send local Osc message.\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","pitch","shift","sub","mode","menu"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"HWND hwnd","description":""},{"identifier":"int x","description":""},{"identifier":"int y","description":""},{"identifier":"int mode","description":""},{"identifier":"int submode_sel","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"int retval = (*PitchShiftSubModeMenu)(HWND hwnd, int x, int y, int mode, int submode_sel)"},"title":"PitchShiftSubModeMenu","chapters":["C++-only functions","Misc"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"menu to select/modify pitch shifter submode, returns new value (or old value if no item selected)\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","check","function","plugin","api"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"const char *","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.62"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"int retval","description":"0, if a function exists"}],"prog_lang":"*"},"functioncall":{"cpp":"int retval = REAPERAPI_LoadAPI(void *(*getAPI)(const char *))"},"title":"REAPERAPI_LoadAPI","chapters":["C++-only functions","Misc"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"Checks, whether a certain Reaper-API-function exists.\n\nBecause the API is dynamic, callers should never assume a function exists.\nCheck that a non-NULL function pointer was returned before using it (unless\nloaded functions are verified using REAPERAPI_LoadAPI(), see note below).\n\n  1) most source files should just #include \"reaper_plugin_functions.h\" as is.\n  2) one file should #define REAPERAPI_IMPLEMENT before including this file.\n  3) the plug-in should call REAPERAPI_LoadAPI(rec->GetFunc) from REAPER_PLUGIN_ENTRYPOINT\n     and check the return value for errors (REAPERAPI_LoadAPI will return 0 on success).\n     \nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["cpp","check","function","plugin","api"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"char** ptr","description":""},{"identifier":"int* ptr_size","description":""},{"identifier":"int new_size","description":""}],"prog_lang":"*"},"signatures":[],"requires":{"Reaper":"5.965"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"cpp":"bool retval = (*realloc_cmd_ptr)(char** ptr, int* ptr_size, int new_size)"},"title":"realloc_cmd_ptr","chapters":["C++-only functions","Misc"],"source_document":"reaper_plugin.h","description":{"prog_lang":"","markup_type":"plaintext","description":"special use for NeedBig script API functions - reallocates a NeedBig buffer and updates its size, returns false on error\n\nStored in reaper_plugin_functions.h","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reapack","show","about","install","package"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PackageEntry entry","description":"the installed Reapack-package, whose about dialog you want to show"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ReaPack_AboutInstalledPackage","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"entry","type":"PackageEntry"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ReaPack_AboutInstalledPackage\""},{"type_name":"PackageEntry","identifier":"entry"}]}},"requires":{"Reaper":"5.965","ReaPack":"1.2.2"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, if the dialog is shown"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.ReaPack_AboutInstalledPackage(PackageEntry entry)","eel":"bool extension_api(\"ReaPack_AboutInstalledPackage\", PackageEntry entry)","python":"Boolean retval = ReaPack_AboutInstalledPackage(PackageEntry entry)","cpp":"bool ReaPack_AboutInstalledPackage(PackageEntry* entry)"},"title":"ReaPack_AboutInstalledPackage(ReaPack)","chapters":["ReaPack"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Show the about dialog of the given package entry.\nThe repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.\n\nsee ReaPack_GetOwner to get this parameter","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reapack","show","about","repository"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string repoName","description":"the repository, whose about-dialog you would love to have"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ReaPack_AboutRepository","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"repoName","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ReaPack_AboutRepository\""},{"identifier":"\"repoName\""}]}},"requires":{"Reaper":"5.965","ReaPack":"1.2.2"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, if the dialog is shown"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.ReaPack_AboutRepository(string repoName)","eel":"bool extension_api(\"ReaPack_AboutRepository\", \"repoName\")","python":"Boolean retval = ReaPack_AboutRepository(String repoName)","cpp":"bool ReaPack_AboutRepository(const char* repoName)"},"title":"ReaPack_AboutRepository(ReaPack)","chapters":["ReaPack"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Show the about dialog of the given repository. Returns true if the repository exists in the user configuration.\nThe repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reapack","add","set","repository"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"string name","description":"the name of the package"},{"identifier":"string url","description":"the url to the repository's xml-file; set nil to keep the current one"},{"identifier":"boolean enable","description":"set this repo as enabled in the GUI of ReaPack, so synchronizing is possible"},{"identifier":"integer autoInstall","description":"shall this repository automatically installed, when synchronizing and an update is available?\n   0, don't autoinstall new packages when synchronizing\n   1, autoinstall new packages when synchronizing\n   2, use user-settings"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ReaPack_AddSetRepository","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"error","type":"string"}],"parameters":[{"identifier":"name","type":"string"},{"identifier":"url","type":"string"},{"identifier":"enable","type":"boolean"},{"identifier":"autoInstall","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ReaPack_AddSetRepository\""},{"identifier":"\"name\""},{"identifier":"\"url\""},{"type_name":"bool","identifier":"enable"},{"type_name":"int","identifier":"autoInstall"},{"identifier":"#error"}]}},"requires":{"Reaper":"5.965","ReaPack":"1.2.2"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":"true, if the repo has been added"},{"identifier":"string error","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string error = reaper.ReaPack_AddSetRepository(string name, string url, boolean enable, integer autoInstall)","eel":"bool extension_api(\"ReaPack_AddSetRepository\", \"name\", \"url\", bool enable, int autoInstall, #error)","python":"(Boolean retval, String name, String url, Boolean enable, Int autoInstall, String errorOut, Int errorOut_sz) = ReaPack_AddSetRepository(name, url, enable, autoInstall, errorOut, errorOut_sz)","cpp":"bool ReaPack_AddSetRepository(const char* name, const char* url, bool enable, int autoInstall, char* errorOut, int errorOut_sz)"},"title":"ReaPack_AddSetRepository(ReaPack)","chapters":["ReaPack"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Add or modify a repository. Set url to nullptr (or empty string in Lua) to keep the existing URL. \n\nCall ReaPack_ProcessQueue(true) when done to process the new list and update the GUI.\n\nautoInstall: usually set to 2 (obey user setting).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reapack","browse","packages"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string filter","description":"the filter to be applied in the package browser. Only packages that feature words included in this filter will be shown."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ReaPack_BrowsePackages","return_values":[],"parameters":[{"identifier":"filter","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ReaPack_BrowsePackages\""},{"identifier":"\"filter\""}]}},"requires":{"Reaper":"5.965","ReaPack":"1.2.2"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ReaPack_BrowsePackages(string filter)","eel":"extension_api(\"ReaPack_BrowsePackages\", \"filter\")","python":"ReaPack_BrowsePackages(String filter)","cpp":"void ReaPack_BrowsePackages(const char* filter)"},"title":"ReaPack_BrowsePackages(ReaPack)","chapters":["ReaPack"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Opens the package browser with the given filter string.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reapack","compare","versionnumber"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string ver1","description":"a first versionnumber to compare; must start with a number/digit"},{"identifier":"string ver2","description":"a second versionnumber to compare; must start with a number/digit"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ReaPack_CompareVersions","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"error","type":"string"}],"parameters":[{"identifier":"ver1","type":"string"},{"identifier":"ver2","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ReaPack_CompareVersions\""},{"identifier":"\"ver1\""},{"identifier":"\"ver2\""},{"identifier":"#error"}]}},"requires":{"Reaper":"5.965","ReaPack":"1.2.2"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer retval","description":"-1, ver1<ver2\n0, ver1 = ver2\n1, ver1>ver2"},{"identifier":"string error","description":"the errormessage, if comparing the parameters ver1 and ver2 is impossible"}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, string error = reaper.ReaPack_CompareVersions(string ver1, string ver2)","eel":"int extension_api(\"ReaPack_CompareVersions\", \"ver1\", \"ver2\", #error)","python":"(Int retval, String ver1, String ver2, String errorOut, Int errorOut_sz) = ReaPack_CompareVersions(ver1, ver2, errorOut, errorOut_sz)","cpp":"int ReaPack_CompareVersions(const char* ver1, const char* ver2, char* errorOut, int errorOut_sz)"},"title":"ReaPack_CompareVersions(ReaPack)","chapters":["ReaPack"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Compares two versionnumbers. Versionnumbers must start with a number/digit, or they can't be compared.\nReturns 0 if both versions are equal, a positive value if ver1 is higher than ver2 and a negative value otherwise.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reapack","enumerate","installed files","packageentry","package"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"PackageEntry entry","description":"the installed Reapack-package, whose file you want to enumerate"},{"identifier":"integer index","description":"the index of the file of this ReaPack-package with 0 for the first file"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ReaPack_EnumOwnedFiles","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"path","type":"string"},{"identifier":"sections","type":"integer"},{"identifier":"type","type":"integer"}],"parameters":[{"identifier":"entry","type":"PackageEntry"},{"identifier":"index","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ReaPack_EnumOwnedFiles\""},{"type_name":"PackageEntry","identifier":"entry"},{"type_name":"int","identifier":"index"},{"identifier":"#path"},{"type_name":"int","identifier":"&sections"},{"type_name":"int","identifier":"&type"}]}},"requires":{"Reaper":"5.965","ReaPack":"1.2.2"},"return_values":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"boolean retval","description":"true, if more files exist; false, if this is the last/only file"},{"identifier":"string path","description":"the path and filename of the installed file"},{"identifier":"integer sections","description":"the section(s), in which this file is installed; it is an integer bitfield\n  0=not in action list\n  &1=main\n  &2=midi editor\n  &4=midi inline editor"},{"identifier":"integer type","description":"the type of the extension, in which this file exists\n  1, script \n  2, extension\n  3, effect \n  4, data \n  5, theme\n  6, langpack \n  7, webinterface"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string path, integer sections, integer type = reaper.ReaPack_EnumOwnedFiles(PackageEntry entry, integer index)","eel":"bool extension_api(\"ReaPack_EnumOwnedFiles\", PackageEntry entry, int index, #path, int &sections, int &type)","python":"(Boolean retval, PackageEntry entry, Int index, String pathOut, Int pathOut_sz, Int sectionsOut, Int typeOut) = ReaPack_EnumOwnedFiles(entry, index, pathOut, pathOut_sz, sectionsOut, typeOut)","cpp":"bool ReaPack_EnumOwnedFiles(PackageEntry* entry, int index, char* pathOut, int pathOut_sz, int* sectionsOut, int* typeOut)"},"title":"ReaPack_EnumOwnedFiles(ReaPack)","chapters":["ReaPack"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Enumerate the files owned by the given package. Returns false when there is no more data.\n\n   sections: 0=not in action list, &1=main, &2=midi editor, &4=midi inline editor\n   type: see ReaPack_GetEntryInfo.\n\n   see ReaPack_GetOwner to get the value for the parameter entry\n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reapack","enumerate","free","ressources","packageentry","package"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PackageEntry entry","description":"the installed Reapack-package, whose ressources you want to free"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ReaPack_FreeEntry","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"entry","type":"PackageEntry"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ReaPack_FreeEntry\""},{"type_name":"PackageEntry","identifier":"entry"}]}},"requires":{"Reaper":"5.965","ReaPack":"1.2.2"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":"true, if freeing was successful; false, if no"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.ReaPack_FreeEntry(PackageEntry entry)","eel":"bool extension_api(\"ReaPack_FreeEntry\", PackageEntry entry)","python":"Boolean retval = ReaPack_FreeEntry(PackageEntry entry)","cpp":"bool ReaPack_FreeEntry(PackageEntry* entry)"},"title":"ReaPack_FreeEntry(ReaPack)","chapters":["ReaPack"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Free resources allocated for the given package entry. \n\nMust be used to free PackageEntry-objects created by ReaPack_GetOwner.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reapack","get","entry","info","packageentry","package"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"PackageEntry entry","description":"the installed Reapack-package, whose package-infos you want"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ReaPack_GetEntryInfo","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"repo","type":"string"},{"identifier":"cat","type":"string"},{"identifier":"pkg","type":"string"},{"identifier":"desc","type":"string"},{"identifier":"type","type":"integer"},{"identifier":"ver","type":"string"},{"identifier":"author","type":"string"},{"identifier":"flags","type":"integer"},{"identifier":"fileCount","type":"integer"}],"parameters":[{"identifier":"entry","type":"PackageEntry"}]},"eel":{"method_name":"ReaPack_GetEntryInfo","return_values":["bool"],"parameters":[{"type_name":"PackageEntry","identifier":"entry"},{"identifier":"#repo"},{"identifier":"#cat"},{"identifier":"#pkg"},{"identifier":"#desc"},{"type_name":"int","identifier":"&type"},{"identifier":"#ver"},{"identifier":"#author"},{"type_name":"int","identifier":"&flags"},{"type_name":"int","identifier":"&fileCount"}]}},"requires":{"Reaper":"5.965","ReaPack":"1.2.4"},"return_values":{"markup_type":"plaintext","param_count":10,"entries":[{"identifier":"boolean retval","description":"true, if getting the info worked"},{"identifier":"string repo","description":"the name of the repository"},{"identifier":"string cat","description":"the category of this package"},{"identifier":"string pkg","description":"the package-name of this package"},{"identifier":"string desc","description":"the description of this package"},{"identifier":"integer type","description":"the type of this package\n 1, script\n 2, extension\n 3, effect\n 4, data\n 5, theme\n 6, langpack\n 7, webinterface"},{"identifier":"string ver","description":"the currently installed version of this package"},{"identifier":"string author","description":"the author of this package"},{"identifier":"integer flags","description":"the pinned-status of this package\n&1=Pinned\n&2=BleedingEdge"},{"identifier":"integer fileCount","description":"the number of files of this package"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string repo, string cat, string pkg, string desc, integer type, string ver, string author, integer flags, integer fileCount = reaper.ReaPack_GetEntryInfo(PackageEntry entry)","eel":"bool ReaPack_GetEntryInfo(PackageEntry entry, #repo, #cat, #pkg, #desc, int &type, #ver, #author, int &flags, int &fileCount)","python":"(Boolean retval, PackageEntry entry, String repoOut, Int repoOut_sz, String catOut, Int catOut_sz, String pkgOut, Int pkgOut_sz, String descOut, Int descOut_sz, Int typeOut, String verOut, Int verOut_sz, String authorOut, Int authorOut_sz, Int flagsOut, Int fileCountOut) = ReaPack_GetEntryInfo(entry, repoOut, repoOut_sz, catOut, catOut_sz, pkgOut, pkgOut_sz, descOut, descOut_sz, typeOut, verOut, verOut_sz, authorOut, authorOut_sz, flagsOut, fileCountOut)","cpp":"bool ReaPack_GetEntryInfo(PackageEntry* entry, char* repoOut, int repoOut_sz, char* catOut, int catOut_sz, char* pkgOut, int pkgOut_sz, char* descOut, int descOut_sz, int* typeOut, char* verOut, int verOut_sz, char* authorOut, int authorOut_sz, int* flagsOut, int* fileCountOut)"},"title":"ReaPack_GetEntryInfo(ReaPack)","chapters":["ReaPack"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get the repository name, category, package name, package description, package type, the currently installed version, author name, flags (&1=Pinned, &2=BleedingEdge) and how many files are owned by the given package entry.\n\nsee ReaPack_GetOwner to get value for parameter entry","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reapack","get","owner","filename","packageentry","package"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string fn","description":"filename with path to a file, of which you want to know, whose package owns it"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ReaPack_GetOwner","return_values":[{"identifier":"retval","type":"PackageEntry"},{"identifier":"error","type":"string"}],"parameters":[{"identifier":"fn","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["PackageEntry"],"parameters":[{"identifier":"\"ReaPack_GetOwner\""},{"identifier":"\"fn\""},{"identifier":"#error"}]}},"requires":{"Reaper":"5.965","ReaPack":"1.2.2"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"PackageEntry retval","description":"the installed Reapack-package, who is owner of this file"},{"identifier":"string error","description":"an errormessage, if the file is not part of a ReaPack-package"}],"prog_lang":"*"},"functioncall":{"lua":"PackageEntry retval, string error = reaper.ReaPack_GetOwner(string fn)","eel":"PackageEntry extension_api(\"ReaPack_GetOwner\", \"fn\", #error)","python":"(PackageEntry retval, String fn, String errorOut, Int errorOut_sz) = ReaPack_GetOwner(fn, errorOut, errorOut_sz)","cpp":"PackageEntry* ReaPack_GetOwner(const char* fn, char* errorOut, int errorOut_sz)"},"title":"ReaPack_GetOwner(ReaPack)","chapters":["ReaPack"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns the package entry owning the given file.\nDelete the returned object from memory after use with ReaPack_FreeEntry.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reapack","get","repository","url"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string name","description":"the name of the ReaPack package, whose repository you want to have"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ReaPack_GetRepositoryInfo","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"url","type":"string"},{"identifier":"enabled","type":"boolean"},{"identifier":"autoInstall","type":"integer"}],"parameters":[{"identifier":"name","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ReaPack_GetRepositoryInfo\""},{"identifier":"\"name\""},{"identifier":"#url"},{"type_name":"bool","identifier":"&enabled"},{"type_name":"int","identifier":"&autoInstall"}]}},"requires":{"Reaper":"5.965","ReaPack":"1.2.2"},"return_values":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"boolean retval","description":"true, such a repository exists; false, it does not exist"},{"identifier":"string url","description":"the url of the repository"},{"identifier":"boolean enabled","description":"true, the repository is enabled for installing/syncing; false, if not"},{"identifier":"integer autoInstall","description":"shall this repository be automatically installed when syncing?\n0, manual \n1, when synchronizing\n2, obey user setting"}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string url, boolean enabled, integer autoInstall = reaper.ReaPack_GetRepositoryInfo(string name)","eel":"bool extension_api(\"ReaPack_GetRepositoryInfo\", \"name\", #url, bool &enabled, int &autoInstall)","python":"(Boolean retval, String name, String urlOut, Int urlOut_sz, Boolean enabledOut, Int autoInstallOut) = ReaPack_GetRepositoryInfo(name, urlOut, urlOut_sz, enabledOut, autoInstallOut)","cpp":"bool ReaPack_GetRepositoryInfo(const char* name, char* urlOut, int urlOut_sz, bool* enabledOut, int* autoInstallOut)"},"title":"ReaPack_GetRepositoryInfo(ReaPack)","chapters":["ReaPack"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Get the infos of the given repository.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reapack","process","queue","refresh ui"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean refreshUI","description":"true, refreshes the UI of the ReaPack-user-interface; false, doesn't update the UI"}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ReaPack_ProcessQueue","return_values":[],"parameters":[{"identifier":"refreshUI","type":"boolean"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ReaPack_ProcessQueue\""},{"type_name":"bool","identifier":"refreshUI"}]}},"requires":{"Reaper":"5.965","ReaPack":"1.2.2"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ReaPack_ProcessQueue(boolean refreshUI)","eel":"extension_api(\"ReaPack_ProcessQueue\", bool refreshUI)","python":"ReaPack_ProcessQueue(Boolean refreshUI)","cpp":"void ReaPack_ProcessQueue(bool refreshUI)"},"title":"ReaPack_ProcessQueue(ReaPack)","chapters":["ReaPack"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"*","markup_type":"plaintext","description":"Run pending operations and save the configuration file. If refreshUI is true the browser and manager windows are guaranteed to be refreshed (otherwise it depends on which operations are in the queue).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["osara","output","message"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string message","description":"the message, that shall be output to the screen-reader."}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.osara_outputMessage","return_values":[],"parameters":[{"identifier":"message","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"osara_outputMessage\""},{"identifier":"\"message\""}]}},"requires":{"Osara":"2021","Reaper":"5.979"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.osara_outputMessage(string message)","eel":"extension_api(\"osara_outputMessage\", \"message\")","python":"osara_outputMessage(String message)","cpp":"void osara_outputMessage(const char* message)"},"title":"osara_outputMessage","chapters":["Osara"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Output a message to screen readers.\nThis should only be used in consultation with screen reader users. Note that this may not work on Windows when certain GUI controls have focus such as list boxes and trees.\n\nKeep it short and to the point.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["peloreaper","get","metadata","wav"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"PCM_Source src","description":""},{"identifier":"string metaType","description":""},{"identifier":"string buf","description":""},{"identifier":"integer bufSize","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.RDNA_GetMediaSourceMetadata","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"src","type":"PCM_source"},{"identifier":"metaType","type":"string"},{"identifier":"key","type":"string"},{"identifier":"buf","type":"string"},{"identifier":"bufSize","type":"integer"}]}},"requires":{"PeloReaper":"2023.02.19","Reaper":"5.70"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string buf = reaper.RDNA_GetMediaSourceMetadata(PCM_source src, string metaType, string key, string buf, integer bufSize)","python":"(Boolean retval, PCM_source src, String metaType, String key, String bufOut, Int bufSize) = RDNA_GetMediaSourceMetadata(src, metaType, key, bufOut, bufSize)","cpp":"bool RDNA_GetMediaSourceMetadata(PCM_source* src, const char* metaType, const char* key, char* bufOut, int bufSize)/functioncall>\n        <functioncall prog_lang=\"eel\">bool RDNA_GetMediaSourceMetadata(PCM_source src, \"metaType\", \"key\", #buf, int bufSize)"},"title":"RDNA_GetMediaSourceMetadata","chapters":["PeloReaper"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get the value of metadata from media source(.wav only). metaType=BWF,IXML,INFO,CART, key=MetadataID(eg.INAM,IART,... of INFO)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reafab"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"optional string idStringIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Fab_Clear","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"isOptional":true,"type":"string","identifier":"idStringIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"Fab_Clear\""},{"type_name":"optional","identifier":"\"idStringIn\""}]}},"requires":{"Reaper":"6.23","ReaFab":"0.3.10"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.Fab_Clear(optional string idStringIn)","eel":"bool extension_api(\"Fab_Clear\", optional \"idStringIn\")","python":"BoolFab_Clear(const char* idStringInOptional)","cpp":"bool Fab_Clear(const char* idStringInOptional)"},"title":"Fab_Clear","chapters":["ReaFab"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Clears ReaFab control map, optionally based on matching idString. Returns true on success.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reafab"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer command","description":""},{"identifier":"integer val","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Fab_Do","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"command","type":"integer"},{"identifier":"val","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"Fab_Do\""},{"type_name":"int","identifier":"command"},{"type_name":"int","identifier":"val"}]}},"requires":{"Reaper":"6.23","ReaFab":"0.3.10"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.Fab_Do(integer command, integer val)","eel":"bool extension_api(\"Fab_Do\", int command, int val)","python":"BoolFab_Do(int command, int val)","cpp":"bool Fab_Do(int command, int val)"},"title":"Fab_Do","chapters":["ReaFab"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Runs ReaFab actions/commands. First parameter (command) is ReaFab command number, e.g. 3 for 3rd encoder rotation. Second parameter (val) is MIDI CC Relative value. Value 1 is increment of 1, 127 is decrement of 1. 2 is inc 2, 126 is dec 2 and so on. For button press (commands 9-32) a value of 127 is recommended.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reafab"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.Fab_Dump","return_values":[],"parameters":[]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"Fab_Dump\""}]}},"requires":{"Reaper":"6.23","ReaFab":"0.3.10"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.Fab_Dump()","eel":"extension_api(\"Fab_Dump\")","python":"Fab_Dump()","cpp":"void Fab_Dump()"},"title":"Fab_Dump","chapters":["ReaFab"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Dumps current control mapping into .lua file under ResourcePath/Scripts/reafab_dump-timestamp.lua","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reafab"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer command","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Fab_Get","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"fx","type":"integer"},{"identifier":"param","type":"integer"}],"parameters":[{"identifier":"command","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"Fab_Get\""},{"type_name":"int","identifier":"command"},{"type_name":"int","identifier":"&amp;fx"},{"type_name":"int","identifier":"&amp;param"}]}},"requires":{"Reaper":"6.23","ReaFab":"0.3.10"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer fx","description":""},{"identifier":"integer param","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer fx, integer param = reaper.Fab_Get(integer command)","eel":"bool extension_api(\"Fab_Get\", int command, int &amp;fx, int &amp;param)","python":"BoolFab_Get(int command, int* fxOut, int* paramOut)","cpp":"bool Fab_Get(int command, int* fxOut, int* paramOut)"},"title":"Fab_Get","chapters":["ReaFab"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns target FX and parameter index for given ReaFab command in context of selected track and ReaFab FX index. Valid command range 1 ... 24. Returns false if no such command mapping is found. Returns param index -1 for ReaFab internal band change command.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reafab"],"params":{"markup_type":"plaintext","param_count":9,"entries":[{"identifier":"string fxId","description":""},{"identifier":"integer command","description":""},{"identifier":"string paramId","description":""},{"identifier":"integer control","description":""},{"identifier":"optional integer bandsIn","description":""},{"identifier":"optional number stepIn","description":""},{"identifier":"optional number accelIn","description":""},{"identifier":"optional number minvalIn","description":""},{"identifier":"optional number maxvalIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.Fab_Map","return_values":[{"identifier":"retval","type":"boolean"}],"parameters":[{"identifier":"fxId","type":"string"},{"identifier":"command","type":"integer"},{"identifier":"paramId","type":"string"},{"identifier":"control","type":"integer"},{"isOptional":true,"type":"integer","identifier":"bandsIn"},{"isOptional":true,"type":"number","identifier":"stepIn"},{"isOptional":true,"type":"number","identifier":"accelIn"},{"isOptional":true,"type":"number","identifier":"minvalIn"},{"isOptional":true,"type":"number","identifier":"maxvalIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"Fab_Map\""},{"identifier":"\"fxId\""},{"type_name":"int","identifier":"command"},{"identifier":"\"paramId\""},{"type_name":"int","identifier":"control"},{"identifier":"bandsIn","modifier":"optional","type_name":"int"},{"type_name":"optional","identifier":"stepIn"},{"type_name":"optional","identifier":"accelIn"},{"type_name":"optional","identifier":"minvalIn"},{"type_name":"optional","identifier":"maxvalIn"}]}},"requires":{"Reaper":"6.23","ReaFab":"0.3.10"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval = reaper.Fab_Map(string fxId, integer command, string paramId, integer control, optional integer bandsIn, optional number stepIn, optional number accelIn, optional number minvalIn, optional number maxvalIn)","eel":"bool extension_api(\"Fab_Map\", \"fxId\", int command, \"paramId\", int control, optional int bandsIn, optional stepIn, optional accelIn, optional minvalIn, optional maxvalIn)","python":"BoolFab_Map(const char* fxId, int command, const char* paramId, int control, int* bandsInOptional, double* stepInOptional, double* accelInOptional, double* minvalInOptional, double* maxvalInOptional)","cpp":"bool Fab_Map(const char* fxId, int command, const char* paramId, int control, int* bandsInOptional, double* stepInOptional, double* accelInOptional, double* minvalInOptional, double* maxvalInOptional)"},"title":"Fab_Map","chapters":["ReaFab"],"source_document":"Reaper_Api_Documentation.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Creates control mapping for ReaFab command.\nfxId e.g. \"ReaComp\".\ncommand 1-8 for encoders, 9-24 for buttons.\nparamId e.g. \"Ratio\".\ncontrol 1 = direct, 2 = band selector, 3 = cycle, 4 = invert, 5 = force toggle, 6 = force range, 7 = 5 and 6, 8 = force continuous.\nbands define, if target fx has multiple identical target bands. In this case, paramId must include 00 placeholder, e.g. \"Band 00 Gain\".\nstep overrides built-in default step of ~0.001 for continuous parameters.\naccel overrides built-in default control acceleration step of 1.0.\nminval &amp; maxval override default detected target param value range.\nPrefixing paramId with \"-\" reverses direction; useful for creating separate next/previous mappings for bands or list type value navigation.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string type","description":""},{"identifier":"string payload","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_AcceptDragDropPayload","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"payload","type":"string"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"type","type":"string"},{"identifier":"payload","type":"string"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_AcceptDragDropPayload\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"type\""},{"identifier":"#payload"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string payload","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string payload = reaper.ImGui_AcceptDragDropPayload(ImGui_Context ctx, string type, string payload, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_AcceptDragDropPayload\", ImGui_Context ctx, \"type\", #payload, optional int flagsIn)","python":"bool ImGui_AcceptDragDropPayload(ImGui_Context* ctx, const char* type, char* payloadOutNeedBig, int payloadOutNeedBig_sz, int* flagsInOptional)","cpp":"bool ImGui_AcceptDragDropPayload(ImGui_Context* ctx, const char* type, char* payloadOutNeedBig, int payloadOutNeedBig_sz, int* flagsInOptional)"},"title":"ImGui_AcceptDragDropPayload","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Accept contents of a given type. If DragDropFlags_AcceptBeforeDelivery is set\nyou can peek into the payload before the mouse button is released.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer count","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_AcceptDragDropPayloadFiles","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"count","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"count","type":"integer"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_AcceptDragDropPayloadFiles\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"&amp;count"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer count","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer count = reaper.ImGui_AcceptDragDropPayloadFiles(ImGui_Context ctx, integer count, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_AcceptDragDropPayloadFiles\", ImGui_Context ctx, int &amp;count, optional int flagsIn)","python":"bool ImGui_AcceptDragDropPayloadFiles(ImGui_Context* ctx, int* countOut, int* flagsInOptional)","cpp":"bool ImGui_AcceptDragDropPayloadFiles(ImGui_Context* ctx, int* countOut, int* flagsInOptional)"},"title":"ImGui_AcceptDragDropPayloadFiles","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Accept a list of dropped files. See AcceptDragDropPayload and GetDragDropPayloadFile.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer rgb","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_AcceptDragDropPayloadRGB","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"rgb","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"rgb","type":"integer"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_AcceptDragDropPayloadRGB\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"&amp;rgb"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer rgb","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer rgb = reaper.ImGui_AcceptDragDropPayloadRGB(ImGui_Context ctx, integer rgb, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_AcceptDragDropPayloadRGB\", ImGui_Context ctx, int &amp;rgb, optional int flagsIn)","python":"bool ImGui_AcceptDragDropPayloadRGB(ImGui_Context* ctx, int* rgbOut, int* flagsInOptional)","cpp":"bool ImGui_AcceptDragDropPayloadRGB(ImGui_Context* ctx, int* rgbOut, int* flagsInOptional)"},"title":"ImGui_AcceptDragDropPayloadRGB","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Accept a RGB color. See AcceptDragDropPayload.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer rgba","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_AcceptDragDropPayloadRGBA","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"rgba","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"rgba","type":"integer"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_AcceptDragDropPayloadRGBA\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"&amp;rgba"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer rgba","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer rgba = reaper.ImGui_AcceptDragDropPayloadRGBA(ImGui_Context ctx, integer rgba, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_AcceptDragDropPayloadRGBA\", ImGui_Context ctx, int &amp;rgba, optional int flagsIn)","python":"bool ImGui_AcceptDragDropPayloadRGBA(ImGui_Context* ctx, int* rgbaOut, int* flagsInOptional)","cpp":"bool ImGui_AcceptDragDropPayloadRGBA(ImGui_Context* ctx, int* rgbaOut, int* flagsInOptional)"},"title":"ImGui_AcceptDragDropPayloadRGBA","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Accept a RGBA color. See AcceptDragDropPayload.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_AlignTextToFramePadding","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_AlignTextToFramePadding\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_AlignTextToFramePadding(ImGui_Context ctx)","eel":"extension_api(\"ImGui_AlignTextToFramePadding\", ImGui_Context ctx)","python":"void ImGui_AlignTextToFramePadding(ImGui_Context* ctx)","cpp":"void ImGui_AlignTextToFramePadding(ImGui_Context* ctx)"},"title":"ImGui_AlignTextToFramePadding","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Vertically align upcoming text baseline to StyleVar_FramePadding.y so that it\nwill align properly to regularly framed items (call if you have text on a line\nbefore a framed item).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string str_id","description":""},{"identifier":"integer dir","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_ArrowButton","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"str_id","type":"string"},{"identifier":"dir","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_ArrowButton\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"str_id\""},{"type_name":"int","identifier":"dir"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_ArrowButton(ImGui_Context ctx, string str_id, integer dir)","eel":"bool extension_api(\"ImGui_ArrowButton\", ImGui_Context ctx, \"str_id\", int dir)","python":"bool ImGui_ArrowButton(ImGui_Context* ctx, const char* str_id, int dir)","cpp":"bool ImGui_ArrowButton(ImGui_Context* ctx, const char* str_id, int dir)"},"title":"ImGui_ArrowButton","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Square button with an arrow shape. 'dir' is one of the Dir_* values","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctxImGui_Resource obj","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Attach","return_values":[],"parameters":[{"isOptional":true,"type":"ImGui_Context","identifier":"obj"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_Attach\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"ImGui_Resource","identifier":"obj"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_Attach(ImGui_Context ctxImGui_Resource obj)","eel":"extension_api(\"ImGui_Attach\", ImGui_Context ctx, ImGui_Resource obj)","python":"void ImGui_Attach(ImGui_Context* ctx, ImGui_Resource* obj)","cpp":"void ImGui_Attach(ImGui_Context* ctx, ImGui_Resource* obj)"},"title":"ImGui_Attach","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Link the object's lifetime to the given context.\nObjects can be draw list splitters, fonts, images, list clippers, etc.\nCall Detach to let the object be garbage-collected after unuse again.\n\nList clipper objects may only be attached to the context they were created for.\n\nFonts are (currently) a special case: they must be attached to the context\nbefore usage. Furthermore, fonts may only be attached or detached immediately\nafter the context is created or before any other function calls modifying the\ncontext per defer cycle. See \"limitations\" in the font API documentation.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string name","description":""},{"identifier":"optional boolean p_open","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Begin","return_values":[{"identifier":"retval","type":"boolean"},{"isOptional":true,"type":"boolean","identifier":"p_open"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"name","type":"string"},{"isOptional":true,"type":"boolean","identifier":"p_open"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_Begin\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"name\""},{"identifier":"&amp;p_open","modifier":"optional","type_name":"bool"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"optional boolean p_open","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, optional boolean p_open = reaper.ImGui_Begin(ImGui_Context ctx, string name, optional boolean p_open, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_Begin\", ImGui_Context ctx, \"name\", optional bool &amp;p_open, optional int flagsIn)","python":"bool ImGui_Begin(ImGui_Context* ctx, const char* name, bool* p_openInOutOptional, int* flagsInOptional)","cpp":"bool ImGui_Begin(ImGui_Context* ctx, const char* name, bool* p_openInOutOptional, int* flagsInOptional)"},"title":"ImGui_Begin","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Push window to the stack and start appending to it.\n\n- Passing true to 'p_open' shows a window-closing widget in the upper-right\n  corner of the window, which clicking will set the boolean to false when returned.\n- You may append multiple times to the same window during the same frame by\n  calling Begin()/End() pairs multiple times. Some information such as 'flags'\n  or 'p_open' will only be considered by the first call to Begin().\n- Begin() return false to indicate the window is collapsed or fully clipped,\n  so you may early out and omit submitting anything to the window.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string str_id","description":""},{"identifier":"optional number size_wIn","description":""},{"identifier":"optional number size_hIn","description":""},{"identifier":"optional boolean borderIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_BeginChild","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"str_id","type":"string"},{"isOptional":true,"type":"number","identifier":"size_wIn"},{"isOptional":true,"type":"number","identifier":"size_hIn"},{"isOptional":true,"type":"boolean","identifier":"borderIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_BeginChild\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"str_id\""},{"type_name":"optional","identifier":"size_wIn"},{"type_name":"optional","identifier":"size_hIn"},{"identifier":"borderIn","modifier":"optional","type_name":"bool"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_BeginChild(ImGui_Context ctx, string str_id, optional number size_wIn, optional number size_hIn, optional boolean borderIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_BeginChild\", ImGui_Context ctx, \"str_id\", optional size_wIn, optional size_hIn, optional bool borderIn, optional int flagsIn)","python":"bool ImGui_BeginChild(ImGui_Context* ctx, const char* str_id, double* size_wInOptional, double* size_hInOptional, bool* borderInOptional, int* flagsInOptional)","cpp":"bool ImGui_BeginChild(ImGui_Context* ctx, const char* str_id, double* size_wInOptional, double* size_hInOptional, bool* borderInOptional, int* flagsInOptional)"},"title":"ImGui_BeginChild","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"For each independent axis of 'size':\n- \\&gt; 0.0: fixed size\n- = 0.0: use remaining host window size\n- &lt; 0.0: use remaining window size minus abs(size)\n(Each axis can use a different mode, e.g. size = 0x400.)\n\nReturns false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting anything to the window.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string str_id","description":""},{"identifier":"number size_w","description":""},{"identifier":"number size_h","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_BeginChildFrame","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"str_id","type":"string"},{"identifier":"size_w","type":"number"},{"identifier":"size_h","type":"number"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_BeginChildFrame\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"str_id\""},{"identifier":"size_w"},{"identifier":"size_h"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_BeginChildFrame(ImGui_Context ctx, string str_id, number size_w, number size_h, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_BeginChildFrame\", ImGui_Context ctx, \"str_id\", size_w, size_h, optional int flagsIn)","python":"bool ImGui_BeginChildFrame(ImGui_Context* ctx, const char* str_id, double size_w, double size_h, int* flagsInOptional)","cpp":"bool ImGui_BeginChildFrame(ImGui_Context* ctx, const char* str_id, double size_w, double size_h, int* flagsInOptional)"},"title":"ImGui_BeginChildFrame","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Helper to create a child window / scrolling region that looks like a normal\nwidget frame. See BeginChild.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"string preview_value","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_BeginCombo","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"preview_value","type":"string"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_BeginCombo\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"identifier":"\"preview_value\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_BeginCombo(ImGui_Context ctx, string label, string preview_value, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_BeginCombo\", ImGui_Context ctx, \"label\", \"preview_value\", optional int flagsIn)","python":"bool ImGui_BeginCombo(ImGui_Context* ctx, const char* label, const char* preview_value, int* flagsInOptional)","cpp":"bool ImGui_BeginCombo(ImGui_Context* ctx, const char* label, const char* preview_value, int* flagsInOptional)"},"title":"ImGui_BeginCombo","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"The BeginCombo/EndCombo API allows you to manage your contents and selection\nstate however you want it, by creating e.g. Selectable items.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional boolean disabledIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_BeginDisabled","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"boolean","identifier":"disabledIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_BeginDisabled\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"disabledIn","modifier":"optional","type_name":"bool"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_BeginDisabled(ImGui_Context ctx, optional boolean disabledIn)","eel":"extension_api(\"ImGui_BeginDisabled\", ImGui_Context ctx, optional bool disabledIn)","python":"void ImGui_BeginDisabled(ImGui_Context* ctx, bool* disabledInOptional)","cpp":"void ImGui_BeginDisabled(ImGui_Context* ctx, bool* disabledInOptional)"},"title":"ImGui_BeginDisabled","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable all user interactions and dim items visuals\n(applying StyleVar_DisabledAlpha over current colors).\n\nBeginDisabled(false) essentially does nothing useful but is provided to\nfacilitate use of boolean expressions.\nIf you can avoid calling BeginDisabled(false)/EndDisabled() best to avoid it.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_BeginDragDropSource","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_BeginDragDropSource\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_BeginDragDropSource(ImGui_Context ctx, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_BeginDragDropSource\", ImGui_Context ctx, optional int flagsIn)","python":"bool ImGui_BeginDragDropSource(ImGui_Context* ctx, int* flagsInOptional)","cpp":"bool ImGui_BeginDragDropSource(ImGui_Context* ctx, int* flagsInOptional)"},"title":"ImGui_BeginDragDropSource","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Call after submitting an item which may be dragged. when this return true,\nyou can call SetDragDropPayload() + EndDragDropSource()\n\nIf you stop calling BeginDragDropSource() the payload is preserved however\nit won't have a preview tooltip (we currently display a fallback \"...\" tooltip\nas replacement).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_BeginDragDropTarget","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_BeginDragDropTarget\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_BeginDragDropTarget(ImGui_Context ctx)","eel":"bool extension_api(\"ImGui_BeginDragDropTarget\", ImGui_Context ctx)","python":"bool ImGui_BeginDragDropTarget(ImGui_Context* ctx)","cpp":"bool ImGui_BeginDragDropTarget(ImGui_Context* ctx)"},"title":"ImGui_BeginDragDropTarget","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Call after submitting an item that may receive a payload.\nIf this returns true, you can call AcceptDragDropPayload + EndDragDropTarget.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_BeginGroup","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_BeginGroup\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_BeginGroup(ImGui_Context ctx)","eel":"extension_api(\"ImGui_BeginGroup\", ImGui_Context ctx)","python":"void ImGui_BeginGroup(ImGui_Context* ctx)","cpp":"void ImGui_BeginGroup(ImGui_Context* ctx)"},"title":"ImGui_BeginGroup","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Lock horizontal starting position. See EndGroup.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"optional number size_wIn","description":""},{"identifier":"optional number size_hIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_BeginListBox","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"isOptional":true,"type":"number","identifier":"size_wIn"},{"isOptional":true,"type":"number","identifier":"size_hIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_BeginListBox\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"optional","identifier":"size_wIn"},{"type_name":"optional","identifier":"size_hIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_BeginListBox(ImGui_Context ctx, string label, optional number size_wIn, optional number size_hIn)","eel":"bool extension_api(\"ImGui_BeginListBox\", ImGui_Context ctx, \"label\", optional size_wIn, optional size_hIn)","python":"bool ImGui_BeginListBox(ImGui_Context* ctx, const char* label, double* size_wInOptional, double* size_hInOptional)","cpp":"bool ImGui_BeginListBox(ImGui_Context* ctx, const char* label, double* size_wInOptional, double* size_hInOptional)"},"title":"ImGui_BeginListBox","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Open a framed scrolling region. This is essentially a thin wrapper to using\nBeginChild/EndChild with some stylistic changes.\n\nThe BeginListBox/EndListBox API allows you to manage your contents and selection\nstate however you want it, by creating e.g. Selectable or any items.\n\n- Choose frame width:\n  - width  &gt; 0.0: custom\n  - width  &lt; 0.0 or -FLT_MIN: right-align\n  - width  = 0.0 (default): use current ItemWidth\n- Choose frame height:\n  - height &gt; 0.0: custom\n  - height &lt; 0.0 or -FLT_MIN: bottom-align\n  - height = 0.0 (default): arbitrary default height which can fit ~7 items\n\nSee EndListBox.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"optional boolean enabledIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_BeginMenu","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"isOptional":true,"type":"boolean","identifier":"enabledIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_BeginMenu\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"identifier":"enabledIn","modifier":"optional","type_name":"bool"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_BeginMenu(ImGui_Context ctx, string label, optional boolean enabledIn)","eel":"bool extension_api(\"ImGui_BeginMenu\", ImGui_Context ctx, \"label\", optional bool enabledIn)","python":"bool ImGui_BeginMenu(ImGui_Context* ctx, const char* label, bool* enabledInOptional)","cpp":"bool ImGui_BeginMenu(ImGui_Context* ctx, const char* label, bool* enabledInOptional)"},"title":"ImGui_BeginMenu","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Create a sub-menu entry. only call EndMenu if this returns true!","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_BeginMenuBar","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_BeginMenuBar\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_BeginMenuBar(ImGui_Context ctx)","eel":"bool extension_api(\"ImGui_BeginMenuBar\", ImGui_Context ctx)","python":"bool ImGui_BeginMenuBar(ImGui_Context* ctx)","cpp":"bool ImGui_BeginMenuBar(ImGui_Context* ctx)"},"title":"ImGui_BeginMenuBar","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Append to menu-bar of current window (requires WindowFlags_MenuBar flag set\non parent window). See EndMenuBar.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string str_id","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_BeginPopup","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"str_id","type":"string"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_BeginPopup\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"str_id\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_BeginPopup(ImGui_Context ctx, string str_id, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_BeginPopup\", ImGui_Context ctx, \"str_id\", optional int flagsIn)","python":"bool ImGui_BeginPopup(ImGui_Context* ctx, const char* str_id, int* flagsInOptional)","cpp":"bool ImGui_BeginPopup(ImGui_Context* ctx, const char* str_id, int* flagsInOptional)"},"title":"ImGui_BeginPopup","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Query popup state, if open start appending into the window. Call EndPopup\nafterwards. WindowFlags* are forwarded to the window.\n\nReturn true if the popup is open, and you can start outputting to it.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional string str_idIn","description":""},{"identifier":"optional integer popup_flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_BeginPopupContextItem","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"string","identifier":"str_idIn"},{"isOptional":true,"type":"integer","identifier":"popup_flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_BeginPopupContextItem\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"optional","identifier":"\"str_idIn\""},{"identifier":"popup_flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_BeginPopupContextItem(ImGui_Context ctx, optional string str_idIn, optional integer popup_flagsIn)","eel":"bool extension_api(\"ImGui_BeginPopupContextItem\", ImGui_Context ctx, optional \"str_idIn\", optional int popup_flagsIn)","python":"bool ImGui_BeginPopupContextItem(ImGui_Context* ctx, const char* str_idInOptional, int* popup_flagsInOptional)","cpp":"bool ImGui_BeginPopupContextItem(ImGui_Context* ctx, const char* str_idInOptional, int* popup_flagsInOptional)"},"title":"ImGui_BeginPopupContextItem","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"This is a helper to handle the simplest case of associating one named popup\nto one given widget. You can pass a nil str_id to use the identifier of the last\nitem. This is essentially the same as calling OpenPopupOnItemClick + BeginPopup\nbut written to avoid computing the ID twice because BeginPopupContext*\nfunctions may be called very frequently.\n\nIf you want to use that on a non-interactive item such as Text you need to pass\nin an explicit ID here.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional string str_idIn","description":""},{"identifier":"optional integer popup_flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_BeginPopupContextWindow","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"string","identifier":"str_idIn"},{"isOptional":true,"type":"integer","identifier":"popup_flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_BeginPopupContextWindow\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"optional","identifier":"\"str_idIn\""},{"identifier":"popup_flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_BeginPopupContextWindow(ImGui_Context ctx, optional string str_idIn, optional integer popup_flagsIn)","eel":"bool extension_api(\"ImGui_BeginPopupContextWindow\", ImGui_Context ctx, optional \"str_idIn\", optional int popup_flagsIn)","python":"bool ImGui_BeginPopupContextWindow(ImGui_Context* ctx, const char* str_idInOptional, int* popup_flagsInOptional)","cpp":"bool ImGui_BeginPopupContextWindow(ImGui_Context* ctx, const char* str_idInOptional, int* popup_flagsInOptional)"},"title":"ImGui_BeginPopupContextWindow","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Open+begin popup when clicked on current window.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string name","description":""},{"identifier":"optional boolean p_open","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_BeginPopupModal","return_values":[{"identifier":"retval","type":"boolean"},{"isOptional":true,"type":"boolean","identifier":"p_open"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"name","type":"string"},{"isOptional":true,"type":"boolean","identifier":"p_open"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_BeginPopupModal\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"name\""},{"identifier":"&amp;p_open","modifier":"optional","type_name":"bool"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"optional boolean p_open","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, optional boolean p_open = reaper.ImGui_BeginPopupModal(ImGui_Context ctx, string name, optional boolean p_open, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_BeginPopupModal\", ImGui_Context ctx, \"name\", optional bool &amp;p_open, optional int flagsIn)","python":"bool ImGui_BeginPopupModal(ImGui_Context* ctx, const char* name, bool* p_openInOutOptional, int* flagsInOptional)","cpp":"bool ImGui_BeginPopupModal(ImGui_Context* ctx, const char* name, bool* p_openInOutOptional, int* flagsInOptional)"},"title":"ImGui_BeginPopupModal","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Block every interaction behind the window, cannot be closed by user, add a\ndimming background, has a title bar. Return true if the modal is open, and you\ncan start outputting to it. See BeginPopup.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string str_id","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_BeginTabBar","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"str_id","type":"string"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_BeginTabBar\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"str_id\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_BeginTabBar(ImGui_Context ctx, string str_id, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_BeginTabBar\", ImGui_Context ctx, \"str_id\", optional int flagsIn)","python":"bool ImGui_BeginTabBar(ImGui_Context* ctx, const char* str_id, int* flagsInOptional)","cpp":"bool ImGui_BeginTabBar(ImGui_Context* ctx, const char* str_id, int* flagsInOptional)"},"title":"ImGui_BeginTabBar","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Create and append into a TabBar.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"optional boolean p_open","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_BeginTabItem","return_values":[{"identifier":"retval","type":"boolean"},{"isOptional":true,"type":"boolean","identifier":"p_open"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"isOptional":true,"type":"boolean","identifier":"p_open"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_BeginTabItem\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"identifier":"&amp;p_open","modifier":"optional","type_name":"bool"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"optional boolean p_open","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, optional boolean p_open = reaper.ImGui_BeginTabItem(ImGui_Context ctx, string label, optional boolean p_open, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_BeginTabItem\", ImGui_Context ctx, \"label\", optional bool &amp;p_open, optional int flagsIn)","python":"bool ImGui_BeginTabItem(ImGui_Context* ctx, const char* label, bool* p_openInOutOptional, int* flagsInOptional)","cpp":"bool ImGui_BeginTabItem(ImGui_Context* ctx, const char* label, bool* p_openInOutOptional, int* flagsInOptional)"},"title":"ImGui_BeginTabItem","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Create a Tab. Returns true if the Tab is selected.\nSet 'p_open' to true to enable the close button.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string str_id","description":""},{"identifier":"integer column","description":""},{"identifier":"optional integer flagsIn","description":""},{"identifier":"optional number outer_size_wIn","description":""},{"identifier":"optional number outer_size_hIn","description":""},{"identifier":"optional number inner_widthIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_BeginTable","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"str_id","type":"string"},{"identifier":"column","type":"integer"},{"isOptional":true,"type":"integer","identifier":"flagsIn"},{"isOptional":true,"type":"number","identifier":"outer_size_wIn"},{"isOptional":true,"type":"number","identifier":"outer_size_hIn"},{"isOptional":true,"type":"number","identifier":"inner_widthIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_BeginTable\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"str_id\""},{"type_name":"int","identifier":"column"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"},{"type_name":"optional","identifier":"outer_size_wIn"},{"type_name":"optional","identifier":"outer_size_hIn"},{"type_name":"optional","identifier":"inner_widthIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_BeginTable(ImGui_Context ctx, string str_id, integer column, optional integer flagsIn, optional number outer_size_wIn, optional number outer_size_hIn, optional number inner_widthIn)","eel":"bool extension_api(\"ImGui_BeginTable\", ImGui_Context ctx, \"str_id\", int column, optional int flagsIn, optional outer_size_wIn, optional outer_size_hIn, optional inner_widthIn)","python":"bool ImGui_BeginTable(ImGui_Context* ctx, const char* str_id, int column, int* flagsInOptional, double* outer_size_wInOptional, double* outer_size_hInOptional, double* inner_widthInOptional)","cpp":"bool ImGui_BeginTable(ImGui_Context* ctx, const char* str_id, int column, int* flagsInOptional, double* outer_size_wInOptional, double* outer_size_hInOptional, double* inner_widthInOptional)"},"title":"ImGui_BeginTable","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_BeginTooltip","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_BeginTooltip\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_BeginTooltip(ImGui_Context ctx)","eel":"bool extension_api(\"ImGui_BeginTooltip\", ImGui_Context ctx)","python":"bool ImGui_BeginTooltip(ImGui_Context* ctx)","cpp":"bool ImGui_BeginTooltip(ImGui_Context* ctx)"},"title":"ImGui_BeginTooltip","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Begin/append a tooltip window.\nTo create full-featured tooltip (with any kind of items).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Bullet","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_Bullet\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_Bullet(ImGui_Context ctx)","eel":"extension_api(\"ImGui_Bullet\", ImGui_Context ctx)","python":"void ImGui_Bullet(ImGui_Context* ctx)","cpp":"void ImGui_Bullet(ImGui_Context* ctx)"},"title":"ImGui_Bullet","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draw a small circle + keep the cursor on the same line.\nAdvance cursor x position by GetTreeNodeToLabelSpacing,\nsame distance that TreeNode uses.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string text","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_BulletText","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"text","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_BulletText\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"text\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_BulletText(ImGui_Context ctx, string text)","eel":"extension_api(\"ImGui_BulletText\", ImGui_Context ctx, \"text\")","python":"void ImGui_BulletText(ImGui_Context* ctx, const char* text)","cpp":"void ImGui_BulletText(ImGui_Context* ctx, const char* text)"},"title":"ImGui_BulletText","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Shortcut for Bullet + Text.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"optional number size_wIn","description":""},{"identifier":"optional number size_hIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Button","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"isOptional":true,"type":"number","identifier":"size_wIn"},{"isOptional":true,"type":"number","identifier":"size_hIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_Button\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"optional","identifier":"size_wIn"},{"type_name":"optional","identifier":"size_hIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_Button(ImGui_Context ctx, string label, optional number size_wIn, optional number size_hIn)","eel":"bool extension_api(\"ImGui_Button\", ImGui_Context ctx, \"label\", optional size_wIn, optional size_hIn)","python":"bool ImGui_Button(ImGui_Context* ctx, const char* label, double* size_wInOptional, double* size_hInOptional)","cpp":"bool ImGui_Button(ImGui_Context* ctx, const char* label, double* size_wInOptional, double* size_hInOptional)"},"title":"ImGui_Button","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ButtonFlags_MouseButtonLeft","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ButtonFlags_MouseButtonLeft\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.ImGui_ButtonFlags_MouseButtonLeft()","eel":"int extension_api(\"ImGui_ButtonFlags_MouseButtonLeft\")","python":"int ImGui_ButtonFlags_MouseButtonLeft()","cpp":"int ImGui_ButtonFlags_MouseButtonLeft()"},"title":"ImGui_ButtonFlags_MouseButtonLeft","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"React on left mouse button (default).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ButtonFlags_MouseButtonMiddle","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ButtonFlags_MouseButtonMiddle\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.ImGui_ButtonFlags_MouseButtonMiddle()","eel":"int extension_api(\"ImGui_ButtonFlags_MouseButtonMiddle\")","python":"int ImGui_ButtonFlags_MouseButtonMiddle()","cpp":"int ImGui_ButtonFlags_MouseButtonMiddle()"},"title":"ImGui_ButtonFlags_MouseButtonMiddle","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"React on center mouse button.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ButtonFlags_MouseButtonRight","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ButtonFlags_MouseButtonRight\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.ImGui_ButtonFlags_MouseButtonRight()","eel":"int extension_api(\"ImGui_ButtonFlags_MouseButtonRight\")","python":"int ImGui_ButtonFlags_MouseButtonRight()","cpp":"int ImGui_ButtonFlags_MouseButtonRight()"},"title":"ImGui_ButtonFlags_MouseButtonRight","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"React on right mouse button.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ButtonFlags_None","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ButtonFlags_None\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.ImGui_ButtonFlags_None()","eel":"int extension_api(\"ImGui_ButtonFlags_None\")","python":"int ImGui_ButtonFlags_None()","cpp":"int ImGui_ButtonFlags_None()"},"title":"ImGui_ButtonFlags_None","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_CalcItemWidth","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"ImGui_CalcItemWidth\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.ImGui_CalcItemWidth(ImGui_Context ctx)","eel":"double extension_api(\"ImGui_CalcItemWidth\", ImGui_Context ctx)","python":"double ImGui_CalcItemWidth(ImGui_Context* ctx)","cpp":"double ImGui_CalcItemWidth(ImGui_Context* ctx)"},"title":"ImGui_CalcItemWidth","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Width of item given pushed settings and current cursor position.\nNOT necessarily the width of last item unlike most 'Item' functions.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string text","description":""},{"identifier":"number w","description":""},{"identifier":"number h","description":""},{"identifier":"optional boolean hide_text_after_double_hashIn","description":""},{"identifier":"optional number wrap_widthIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_CalcTextSize","return_values":[{"identifier":"w","type":"number"},{"identifier":"h","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"text","type":"string"},{"identifier":"w","type":"number"},{"identifier":"h","type":"number"},{"isOptional":true,"type":"boolean","identifier":"hide_text_after_double_hashIn"},{"isOptional":true,"type":"number","identifier":"wrap_widthIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_CalcTextSize\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"text\""},{"identifier":"&amp;w"},{"identifier":"&amp;h"},{"identifier":"hide_text_after_double_hashIn","modifier":"optional","type_name":"bool"},{"type_name":"optional","identifier":"wrap_widthIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number w","description":""},{"identifier":"number h","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number w, number h = reaper.ImGui_CalcTextSize(ImGui_Context ctx, string text, number w, number h, optional boolean hide_text_after_double_hashIn, optional number wrap_widthIn)","eel":"extension_api(\"ImGui_CalcTextSize\", ImGui_Context ctx, \"text\", &amp;w, &amp;h, optional bool hide_text_after_double_hashIn, optional wrap_widthIn)","python":"void ImGui_CalcTextSize(ImGui_Context* ctx, const char* text, double* wOut, double* hOut, bool* hide_text_after_double_hashInOptional, double* wrap_widthInOptional)","cpp":"void ImGui_CalcTextSize(ImGui_Context* ctx, const char* text, double* wOut, double* hOut, bool* hide_text_after_double_hashInOptional, double* wrap_widthInOptional)"},"title":"ImGui_CalcTextSize","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"boolean v","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Checkbox","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v","type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_Checkbox\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"bool","identifier":"&amp;v"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"boolean v","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, boolean v = reaper.ImGui_Checkbox(ImGui_Context ctx, string label, boolean v)","eel":"bool extension_api(\"ImGui_Checkbox\", ImGui_Context ctx, \"label\", bool &amp;v)","python":"bool ImGui_Checkbox(ImGui_Context* ctx, const char* label, bool* vInOut)","cpp":"bool ImGui_Checkbox(ImGui_Context* ctx, const char* label, bool* vInOut)"},"title":"ImGui_Checkbox","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"integer flags","description":""},{"identifier":"integer flags_value","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_CheckboxFlags","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"flags","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"flags","type":"integer"},{"identifier":"flags_value","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_CheckboxFlags\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"int","identifier":"&amp;flags"},{"type_name":"int","identifier":"flags_value"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer flags","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer flags = reaper.ImGui_CheckboxFlags(ImGui_Context ctx, string label, integer flags, integer flags_value)","eel":"bool extension_api(\"ImGui_CheckboxFlags\", ImGui_Context ctx, \"label\", int &amp;flags, int flags_value)","python":"bool ImGui_CheckboxFlags(ImGui_Context* ctx, const char* label, int* flagsInOut, int flags_value)","cpp":"bool ImGui_CheckboxFlags(ImGui_Context* ctx, const char* label, int* flagsInOut, int flags_value)"},"title":"ImGui_CheckboxFlags","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_CloseCurrentPopup","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_CloseCurrentPopup\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_CloseCurrentPopup(ImGui_Context ctx)","eel":"extension_api(\"ImGui_CloseCurrentPopup\", ImGui_Context ctx)","python":"void ImGui_CloseCurrentPopup(ImGui_Context* ctx)","cpp":"void ImGui_CloseCurrentPopup(ImGui_Context* ctx)"},"title":"ImGui_CloseCurrentPopup","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Manually close the popup we have begin-ed into.\nUse inside the BeginPopup/EndPopup scope to close manually.\n\nCloseCurrentPopup() is called by default by Selectable/MenuItem when activated.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_Border","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_Border\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.ImGui_Col_Border()","eel":"int extension_api(\"ImGui_Col_Border\")","python":"int ImGui_Col_Border()","cpp":"int ImGui_Col_Border()"},"title":"ImGui_Col_Border","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_BorderShadow","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_BorderShadow\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.ImGui_Col_BorderShadow()","eel":"int extension_api(\"ImGui_Col_BorderShadow\")","python":"int ImGui_Col_BorderShadow()","cpp":"int ImGui_Col_BorderShadow()"},"title":"ImGui_Col_BorderShadow","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_Button","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_Button\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.ImGui_Col_Button()","eel":"int extension_api(\"ImGui_Col_Button\")","python":"int ImGui_Col_Button()","cpp":"int ImGui_Col_Button()"},"title":"ImGui_Col_Button","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_ButtonActive","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_ButtonActive\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.ImGui_Col_ButtonActive()","eel":"int extension_api(\"ImGui_Col_ButtonActive\")","python":"int ImGui_Col_ButtonActive()","cpp":"int ImGui_Col_ButtonActive()"},"title":"ImGui_Col_ButtonActive","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_ButtonHovered","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_ButtonHovered\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.ImGui_Col_ButtonHovered()","eel":"int extension_api(\"ImGui_Col_ButtonHovered\")","python":"int ImGui_Col_ButtonHovered()","cpp":"int ImGui_Col_ButtonHovered()"},"title":"ImGui_Col_ButtonHovered","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_CheckMark","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_CheckMark\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.ImGui_Col_CheckMark()","eel":"int extension_api(\"ImGui_Col_CheckMark\")","python":"int ImGui_Col_CheckMark()","cpp":"int ImGui_Col_CheckMark()"},"title":"ImGui_Col_CheckMark","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_ChildBg","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_ChildBg\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_ChildBg()","eel":"int extension_api(\"ImGui_Col_ChildBg\")","python":"int ImGui_Col_ChildBg()","cpp":"int ImGui_Col_ChildBg()"},"title":"ImGui_Col_ChildBg","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Background of child windows.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_DockingEmptyBg","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_DockingEmptyBg\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_DockingEmptyBg()","eel":"int extension_api(\"ImGui_Col_DockingEmptyBg\")","python":"int ImGui_Col_DockingEmptyBg()","cpp":"int ImGui_Col_DockingEmptyBg()"},"title":"ImGui_Col_DockingEmptyBg","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Background color for empty node (e.g. CentralNode with no window docked into it).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_DockingPreview","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_DockingPreview\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_DockingPreview()","eel":"int extension_api(\"ImGui_Col_DockingPreview\")","python":"int ImGui_Col_DockingPreview()","cpp":"int ImGui_Col_DockingPreview()"},"title":"ImGui_Col_DockingPreview","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Preview overlay color when about to docking something.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_DragDropTarget","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_DragDropTarget\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_DragDropTarget()","eel":"int extension_api(\"ImGui_Col_DragDropTarget\")","python":"int ImGui_Col_DragDropTarget()","cpp":"int ImGui_Col_DragDropTarget()"},"title":"ImGui_Col_DragDropTarget","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Rectangle highlighting a drop target","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_FrameBg","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_FrameBg\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_FrameBg()","eel":"int extension_api(\"ImGui_Col_FrameBg\")","python":"int ImGui_Col_FrameBg()","cpp":"int ImGui_Col_FrameBg()"},"title":"ImGui_Col_FrameBg","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Background of checkbox, radio button, plot, slider, text input.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_FrameBgActive","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_FrameBgActive\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_FrameBgActive()","eel":"int extension_api(\"ImGui_Col_FrameBgActive\")","python":"int ImGui_Col_FrameBgActive()","cpp":"int ImGui_Col_FrameBgActive()"},"title":"ImGui_Col_FrameBgActive","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_FrameBgHovered","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_FrameBgHovered\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_FrameBgHovered()","eel":"int extension_api(\"ImGui_Col_FrameBgHovered\")","python":"int ImGui_Col_FrameBgHovered()","cpp":"int ImGui_Col_FrameBgHovered()"},"title":"ImGui_Col_FrameBgHovered","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_Header","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_Header\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_Header()","eel":"int extension_api(\"ImGui_Col_Header\")","python":"int ImGui_Col_Header()","cpp":"int ImGui_Col_Header()"},"title":"ImGui_Col_Header","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Header* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_HeaderActive","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_HeaderActive\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_HeaderActive()","eel":"int extension_api(\"ImGui_Col_HeaderActive\")","python":"int ImGui_Col_HeaderActive()","cpp":"int ImGui_Col_HeaderActive()"},"title":"ImGui_Col_HeaderActive","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_HeaderHovered","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_HeaderHovered\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_HeaderHovered()","eel":"int extension_api(\"ImGui_Col_HeaderHovered\")","python":"int ImGui_Col_HeaderHovered()","cpp":"int ImGui_Col_HeaderHovered()"},"title":"ImGui_Col_HeaderHovered","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_MenuBarBg","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_MenuBarBg\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_MenuBarBg()","eel":"int extension_api(\"ImGui_Col_MenuBarBg\")","python":"int ImGui_Col_MenuBarBg()","cpp":"int ImGui_Col_MenuBarBg()"},"title":"ImGui_Col_MenuBarBg","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_ModalWindowDimBg","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_ModalWindowDimBg\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_ModalWindowDimBg()","eel":"int extension_api(\"ImGui_Col_ModalWindowDimBg\")","python":"int ImGui_Col_ModalWindowDimBg()","cpp":"int ImGui_Col_ModalWindowDimBg()"},"title":"ImGui_Col_ModalWindowDimBg","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Darken/colorize entire screen behind a modal window, when one is active.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_NavHighlight","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_NavHighlight\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_NavHighlight()","eel":"int extension_api(\"ImGui_Col_NavHighlight\")","python":"int ImGui_Col_NavHighlight()","cpp":"int ImGui_Col_NavHighlight()"},"title":"ImGui_Col_NavHighlight","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Gamepad/keyboard: current highlighted item.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_NavWindowingDimBg","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_NavWindowingDimBg\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_NavWindowingDimBg()","eel":"int extension_api(\"ImGui_Col_NavWindowingDimBg\")","python":"int ImGui_Col_NavWindowingDimBg()","cpp":"int ImGui_Col_NavWindowingDimBg()"},"title":"ImGui_Col_NavWindowingDimBg","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Darken/colorize entire screen behind the CTRL+TAB window list, when active.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_NavWindowingHighlight","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_NavWindowingHighlight\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_NavWindowingHighlight()","eel":"int extension_api(\"ImGui_Col_NavWindowingHighlight\")","python":"int ImGui_Col_NavWindowingHighlight()","cpp":"int ImGui_Col_NavWindowingHighlight()"},"title":"ImGui_Col_NavWindowingHighlight","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Highlight window when using CTRL+TAB.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_PlotHistogram","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_PlotHistogram\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_PlotHistogram()","eel":"int extension_api(\"ImGui_Col_PlotHistogram\")","python":"int ImGui_Col_PlotHistogram()","cpp":"int ImGui_Col_PlotHistogram()"},"title":"ImGui_Col_PlotHistogram","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_PlotHistogramHovered","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_PlotHistogramHovered\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_PlotHistogramHovered()","eel":"int extension_api(\"ImGui_Col_PlotHistogramHovered\")","python":"int ImGui_Col_PlotHistogramHovered()","cpp":"int ImGui_Col_PlotHistogramHovered()"},"title":"ImGui_Col_PlotHistogramHovered","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_PlotLines","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_PlotLines\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_PlotLines()","eel":"int extension_api(\"ImGui_Col_PlotLines\")","python":"int ImGui_Col_PlotLines()","cpp":"int ImGui_Col_PlotLines()"},"title":"ImGui_Col_PlotLines","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_PlotLinesHovered","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_PlotLinesHovered\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_PlotLinesHovered()","eel":"int extension_api(\"ImGui_Col_PlotLinesHovered\")","python":"int ImGui_Col_PlotLinesHovered()","cpp":"int ImGui_Col_PlotLinesHovered()"},"title":"ImGui_Col_PlotLinesHovered","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_PopupBg","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_PopupBg\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_PopupBg()","eel":"int extension_api(\"ImGui_Col_PopupBg\")","python":"int ImGui_Col_PopupBg()","cpp":"int ImGui_Col_PopupBg()"},"title":"ImGui_Col_PopupBg","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Background of popups, menus, tooltips windows.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_ResizeGrip","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_ResizeGrip\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_ResizeGrip()","eel":"int extension_api(\"ImGui_Col_ResizeGrip\")","python":"int ImGui_Col_ResizeGrip()","cpp":"int ImGui_Col_ResizeGrip()"},"title":"ImGui_Col_ResizeGrip","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Resize grip in lower-right and lower-left corners of windows.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_ResizeGripActive","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_ResizeGripActive\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_ResizeGripActive()","eel":"int extension_api(\"ImGui_Col_ResizeGripActive\")","python":"int ImGui_Col_ResizeGripActive()","cpp":"int ImGui_Col_ResizeGripActive()"},"title":"ImGui_Col_ResizeGripActive","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_ResizeGripHovered","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_ResizeGripHovered\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_ResizeGripHovered()","eel":"int extension_api(\"ImGui_Col_ResizeGripHovered\")","python":"int ImGui_Col_ResizeGripHovered()","cpp":"int ImGui_Col_ResizeGripHovered()"},"title":"ImGui_Col_ResizeGripHovered","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_ScrollbarBg","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_ScrollbarBg\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_ScrollbarBg()","eel":"int extension_api(\"ImGui_Col_ScrollbarBg\")","python":"int ImGui_Col_ScrollbarBg()","cpp":"int ImGui_Col_ScrollbarBg()"},"title":"ImGui_Col_ScrollbarBg","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_ScrollbarGrab","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_ScrollbarGrab\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_ScrollbarGrab()","eel":"int extension_api(\"ImGui_Col_ScrollbarGrab\")","python":"int ImGui_Col_ScrollbarGrab()","cpp":"int ImGui_Col_ScrollbarGrab()"},"title":"ImGui_Col_ScrollbarGrab","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_ScrollbarGrabActive","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_ScrollbarGrabActive\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_ScrollbarGrabActive()","eel":"int extension_api(\"ImGui_Col_ScrollbarGrabActive\")","python":"int ImGui_Col_ScrollbarGrabActive()","cpp":"int ImGui_Col_ScrollbarGrabActive()"},"title":"ImGui_Col_ScrollbarGrabActive","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_ScrollbarGrabHovered","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_ScrollbarGrabHovered\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_ScrollbarGrabHovered()","eel":"int extension_api(\"ImGui_Col_ScrollbarGrabHovered\")","python":"int ImGui_Col_ScrollbarGrabHovered()","cpp":"int ImGui_Col_ScrollbarGrabHovered()"},"title":"ImGui_Col_ScrollbarGrabHovered","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_Separator","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_Separator\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_Separator()","eel":"int extension_api(\"ImGui_Col_Separator\")","python":"int ImGui_Col_Separator()","cpp":"int ImGui_Col_Separator()"},"title":"ImGui_Col_Separator","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_SeparatorActive","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_SeparatorActive\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_SeparatorActive()","eel":"int extension_api(\"ImGui_Col_SeparatorActive\")","python":"int ImGui_Col_SeparatorActive()","cpp":"int ImGui_Col_SeparatorActive()"},"title":"ImGui_Col_SeparatorActive","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_SeparatorHovered","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_SeparatorHovered\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_SeparatorHovered()","eel":"int extension_api(\"ImGui_Col_SeparatorHovered\")","python":"int ImGui_Col_SeparatorHovered()","cpp":"int ImGui_Col_SeparatorHovered()"},"title":"ImGui_Col_SeparatorHovered","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_SliderGrab","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_SliderGrab\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_SliderGrab()","eel":"int extension_api(\"ImGui_Col_SliderGrab\")","python":"int ImGui_Col_SliderGrab()","cpp":"int ImGui_Col_SliderGrab()"},"title":"ImGui_Col_SliderGrab","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_SliderGrabActive","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_SliderGrabActive\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_SliderGrabActive()","eel":"int extension_api(\"ImGui_Col_SliderGrabActive\")","python":"int ImGui_Col_SliderGrabActive()","cpp":"int ImGui_Col_SliderGrabActive()"},"title":"ImGui_Col_SliderGrabActive","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_Tab","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_Tab\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_Tab()","eel":"int extension_api(\"ImGui_Col_Tab\")","python":"int ImGui_Col_Tab()","cpp":"int ImGui_Col_Tab()"},"title":"ImGui_Col_Tab","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"TabItem in a TabBar","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_TabActive","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_TabActive\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_TabActive()","eel":"int extension_api(\"ImGui_Col_TabActive\")","python":"int ImGui_Col_TabActive()","cpp":"int ImGui_Col_TabActive()"},"title":"ImGui_Col_TabActive","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_TabHovered","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_TabHovered\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_TabHovered()","eel":"int extension_api(\"ImGui_Col_TabHovered\")","python":"int ImGui_Col_TabHovered()","cpp":"int ImGui_Col_TabHovered()"},"title":"ImGui_Col_TabHovered","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_TabUnfocused","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_TabUnfocused\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_TabUnfocused()","eel":"int extension_api(\"ImGui_Col_TabUnfocused\")","python":"int ImGui_Col_TabUnfocused()","cpp":"int ImGui_Col_TabUnfocused()"},"title":"ImGui_Col_TabUnfocused","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_TabUnfocusedActive","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_TabUnfocusedActive\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_TabUnfocusedActive()","eel":"int extension_api(\"ImGui_Col_TabUnfocusedActive\")","python":"int ImGui_Col_TabUnfocusedActive()","cpp":"int ImGui_Col_TabUnfocusedActive()"},"title":"ImGui_Col_TabUnfocusedActive","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_TableBorderLight","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_TableBorderLight\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_TableBorderLight()","eel":"int extension_api(\"ImGui_Col_TableBorderLight\")","python":"int ImGui_Col_TableBorderLight()","cpp":"int ImGui_Col_TableBorderLight()"},"title":"ImGui_Col_TableBorderLight","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Table inner borders (prefer using Alpha=1.0 here).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_TableBorderStrong","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_TableBorderStrong\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_TableBorderStrong()","eel":"int extension_api(\"ImGui_Col_TableBorderStrong\")","python":"int ImGui_Col_TableBorderStrong()","cpp":"int ImGui_Col_TableBorderStrong()"},"title":"ImGui_Col_TableBorderStrong","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Table outer and header borders (prefer using Alpha=1.0 here).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_TableHeaderBg","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_TableHeaderBg\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_TableHeaderBg()","eel":"int extension_api(\"ImGui_Col_TableHeaderBg\")","python":"int ImGui_Col_TableHeaderBg()","cpp":"int ImGui_Col_TableHeaderBg()"},"title":"ImGui_Col_TableHeaderBg","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Table header background.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_TableRowBg","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_TableRowBg\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_TableRowBg()","eel":"int extension_api(\"ImGui_Col_TableRowBg\")","python":"int ImGui_Col_TableRowBg()","cpp":"int ImGui_Col_TableRowBg()"},"title":"ImGui_Col_TableRowBg","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Table row background (even rows).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_TableRowBgAlt","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_TableRowBgAlt\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_TableRowBgAlt()","eel":"int extension_api(\"ImGui_Col_TableRowBgAlt\")","python":"int ImGui_Col_TableRowBgAlt()","cpp":"int ImGui_Col_TableRowBgAlt()"},"title":"ImGui_Col_TableRowBgAlt","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Table row background (odd rows).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_Text","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_Text\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_Text()","eel":"int extension_api(\"ImGui_Col_Text\")","python":"int ImGui_Col_Text()","cpp":"int ImGui_Col_Text()"},"title":"ImGui_Col_Text","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_TextDisabled","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_TextDisabled\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_TextDisabled()","eel":"int extension_api(\"ImGui_Col_TextDisabled\")","python":"int ImGui_Col_TextDisabled()","cpp":"int ImGui_Col_TextDisabled()"},"title":"ImGui_Col_TextDisabled","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_TextSelectedBg","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_TextSelectedBg\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_TextSelectedBg()","eel":"int extension_api(\"ImGui_Col_TextSelectedBg\")","python":"int ImGui_Col_TextSelectedBg()","cpp":"int ImGui_Col_TextSelectedBg()"},"title":"ImGui_Col_TextSelectedBg","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_TitleBg","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_TitleBg\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_TitleBg()","eel":"int extension_api(\"ImGui_Col_TitleBg\")","python":"int ImGui_Col_TitleBg()","cpp":"int ImGui_Col_TitleBg()"},"title":"ImGui_Col_TitleBg","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_TitleBgActive","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_TitleBgActive\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_TitleBgActive()","eel":"int extension_api(\"ImGui_Col_TitleBgActive\")","python":"int ImGui_Col_TitleBgActive()","cpp":"int ImGui_Col_TitleBgActive()"},"title":"ImGui_Col_TitleBgActive","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_TitleBgCollapsed","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_TitleBgCollapsed\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_TitleBgCollapsed()","eel":"int extension_api(\"ImGui_Col_TitleBgCollapsed\")","python":"int ImGui_Col_TitleBgCollapsed()","cpp":"int ImGui_Col_TitleBgCollapsed()"},"title":"ImGui_Col_TitleBgCollapsed","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Col_WindowBg","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Col_WindowBg\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Col_WindowBg()","eel":"int extension_api(\"ImGui_Col_WindowBg\")","python":"int ImGui_Col_WindowBg()","cpp":"int ImGui_Col_WindowBg()"},"title":"ImGui_Col_WindowBg","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Background of normal windows. See also WindowFlags_NoBackground.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"boolean p_visible","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_CollapsingHeader","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"p_visible","type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"p_visible","type":"boolean"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_CollapsingHeader\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"bool","identifier":"&amp;p_visible"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"boolean p_visible","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, boolean p_visible = reaper.ImGui_CollapsingHeader(ImGui_Context ctx, string label, boolean p_visible, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_CollapsingHeader\", ImGui_Context ctx, \"label\", bool &amp;p_visible, optional int flagsIn)","python":"bool ImGui_CollapsingHeader(ImGui_Context* ctx, const char* label, bool* p_visibleInOut, int* flagsInOptional)","cpp":"bool ImGui_CollapsingHeader(ImGui_Context* ctx, const char* label, bool* p_visibleInOut, int* flagsInOptional)"},"title":"ImGui_CollapsingHeader","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns true when opened but do not indent nor push into the ID stack\n(because of the TreeNodeFlags_NoTreePushOnOpen flag).\n\nThis is basically the same as calling TreeNode(label, TreeNodeFlags_CollapsingHeader).\nYou can remove the _NoTreePushOnOpen flag if you want behavior closer to normal\nTreeNode.\n\nWhen 'visible' is provided: if 'true' display an additional small close button\non upper right of the header which will set the bool to false when clicked,\nif 'false' don't display the header.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string desc_id","description":""},{"identifier":"integer col_rgba","description":""},{"identifier":"optional integer flagsIn","description":""},{"identifier":"optional number size_wIn","description":""},{"identifier":"optional number size_hIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorButton","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"desc_id","type":"string"},{"identifier":"col_rgba","type":"integer"},{"isOptional":true,"type":"integer","identifier":"flagsIn"},{"isOptional":true,"type":"number","identifier":"size_wIn"},{"isOptional":true,"type":"number","identifier":"size_hIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_ColorButton\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"desc_id\""},{"type_name":"int","identifier":"col_rgba"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"},{"type_name":"optional","identifier":"size_wIn"},{"type_name":"optional","identifier":"size_hIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_ColorButton(ImGui_Context ctx, string desc_id, integer col_rgba, optional integer flagsIn, optional number size_wIn, optional number size_hIn)","eel":"bool extension_api(\"ImGui_ColorButton\", ImGui_Context ctx, \"desc_id\", int col_rgba, optional int flagsIn, optional size_wIn, optional size_hIn)","python":"bool ImGui_ColorButton(ImGui_Context* ctx, const char* desc_id, int col_rgba, int* flagsInOptional, double* size_wInOptional, double* size_hInOptional)","cpp":"bool ImGui_ColorButton(ImGui_Context* ctx, const char* desc_id, int col_rgba, int* flagsInOptional, double* size_wInOptional, double* size_hInOptional)"},"title":"ImGui_ColorButton","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Display a color square/button, hover for details, return true when pressed.\nColor is in 0xRRGGBBAA or, if ColorEditFlags_NoAlpha is set, 0xRRGGBB.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"number r","description":""},{"identifier":"number g","description":""},{"identifier":"number b","description":""},{"identifier":"number a","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorConvertDouble4ToU32","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"r","type":"number"},{"identifier":"g","type":"number"},{"identifier":"b","type":"number"},{"identifier":"a","type":"number"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ColorConvertDouble4ToU32\""},{"identifier":"r"},{"identifier":"g"},{"identifier":"b"},{"identifier":"a"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ColorConvertDouble4ToU32(number r, number g, number b, number a)","eel":"int extension_api(\"ImGui_ColorConvertDouble4ToU32\", r, g, b, a)","python":"int ImGui_ColorConvertDouble4ToU32(double r, double g, double b, double a)","cpp":"int ImGui_ColorConvertDouble4ToU32(double r, double g, double b, double a)"},"title":"ImGui_ColorConvertDouble4ToU32","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Pack 0..1 RGBA values into a 32-bit integer (0xRRGGBBAA).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"number h","description":""},{"identifier":"number s","description":""},{"identifier":"number v","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorConvertHSVtoRGB","return_values":[{"identifier":"r","type":"number"},{"identifier":"g","type":"number"},{"identifier":"b","type":"number"}],"parameters":[{"identifier":"h","type":"number"},{"identifier":"s","type":"number"},{"identifier":"v","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_ColorConvertHSVtoRGB\""},{"identifier":"h"},{"identifier":"s"},{"identifier":"v"},{"identifier":"&amp;r"},{"identifier":"&amp;g"},{"identifier":"&amp;b"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"number r","description":""},{"identifier":"number g","description":""},{"identifier":"number b","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number r, number g, number b = reaper.ImGui_ColorConvertHSVtoRGB(number h, number s, number v)","eel":"extension_api(\"ImGui_ColorConvertHSVtoRGB\", h, s, v, &amp;r, &amp;g, &amp;b)","python":"void ImGui_ColorConvertHSVtoRGB(double h, double s, double v, double* rOut, double* gOut, double* bOut)","cpp":"void ImGui_ColorConvertHSVtoRGB(double h, double s, double v, double* rOut, double* gOut, double* bOut)"},"title":"ImGui_ColorConvertHSVtoRGB","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Convert HSV values (0..1) into RGB (0..1).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer rgb","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorConvertNative","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"rgb","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ColorConvertNative\""},{"type_name":"int","identifier":"rgb"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ColorConvertNative(integer rgb)","eel":"int extension_api(\"ImGui_ColorConvertNative\", int rgb)","python":"int ImGui_ColorConvertNative(int rgb)","cpp":"int ImGui_ColorConvertNative(int rgb)"},"title":"ImGui_ColorConvertNative","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Convert a native color coming from REAPER or 0xRRGGBB to native.\nThis swaps the red and blue channels on Windows.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"number r","description":""},{"identifier":"number g","description":""},{"identifier":"number b","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorConvertRGBtoHSV","return_values":[{"identifier":"h","type":"number"},{"identifier":"s","type":"number"},{"identifier":"v","type":"number"}],"parameters":[{"identifier":"r","type":"number"},{"identifier":"g","type":"number"},{"identifier":"b","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_ColorConvertRGBtoHSV\""},{"identifier":"r"},{"identifier":"g"},{"identifier":"b"},{"identifier":"&amp;h"},{"identifier":"&amp;s"},{"identifier":"&amp;v"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"number h","description":""},{"identifier":"number s","description":""},{"identifier":"number v","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number h, number s, number v = reaper.ImGui_ColorConvertRGBtoHSV(number r, number g, number b)","eel":"extension_api(\"ImGui_ColorConvertRGBtoHSV\", r, g, b, &amp;h, &amp;s, &amp;v)","python":"void ImGui_ColorConvertRGBtoHSV(double r, double g, double b, double* hOut, double* sOut, double* vOut)","cpp":"void ImGui_ColorConvertRGBtoHSV(double r, double g, double b, double* hOut, double* sOut, double* vOut)"},"title":"ImGui_ColorConvertRGBtoHSV","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Convert RGB values (0..1) into HSV (0..1).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer rgba","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorConvertU32ToDouble4","return_values":[{"identifier":"r","type":"number"},{"identifier":"g","type":"number"},{"identifier":"b","type":"number"},{"identifier":"a","type":"number"}],"parameters":[{"identifier":"rgba","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_ColorConvertU32ToDouble4\""},{"type_name":"int","identifier":"rgba"},{"identifier":"&amp;r"},{"identifier":"&amp;g"},{"identifier":"&amp;b"},{"identifier":"&amp;a"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"number r","description":""},{"identifier":"number g","description":""},{"identifier":"number b","description":""},{"identifier":"number a","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number r, number g, number b, number a = reaper.ImGui_ColorConvertU32ToDouble4(integer rgba)","eel":"extension_api(\"ImGui_ColorConvertU32ToDouble4\", int rgba, &amp;r, &amp;g, &amp;b, &amp;a)","python":"void ImGui_ColorConvertU32ToDouble4(int rgba, double* rOut, double* gOut, double* bOut, double* aOut)","cpp":"void ImGui_ColorConvertU32ToDouble4(int rgba, double* rOut, double* gOut, double* bOut, double* aOut)"},"title":"ImGui_ColorConvertU32ToDouble4","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Unpack a 32-bit integer (0xRRGGBBAA) into separate RGBA values (0..1).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"integer col_rgb","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorEdit3","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"col_rgb","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"col_rgb","type":"integer"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_ColorEdit3\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"int","identifier":"&amp;col_rgb"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer col_rgb","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer col_rgb = reaper.ImGui_ColorEdit3(ImGui_Context ctx, string label, integer col_rgb, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_ColorEdit3\", ImGui_Context ctx, \"label\", int &amp;col_rgb, optional int flagsIn)","python":"bool ImGui_ColorEdit3(ImGui_Context* ctx, const char* label, int* col_rgbInOut, int* flagsInOptional)","cpp":"bool ImGui_ColorEdit3(ImGui_Context* ctx, const char* label, int* col_rgbInOut, int* flagsInOptional)"},"title":"ImGui_ColorEdit3","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Color is in 0xXXRRGGBB. XX is ignored and will not be modified.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"integer col_rgba","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorEdit4","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"col_rgba","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"col_rgba","type":"integer"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_ColorEdit4\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"int","identifier":"&amp;col_rgba"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer col_rgba","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer col_rgba = reaper.ImGui_ColorEdit4(ImGui_Context ctx, string label, integer col_rgba, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_ColorEdit4\", ImGui_Context ctx, \"label\", int &amp;col_rgba, optional int flagsIn)","python":"bool ImGui_ColorEdit4(ImGui_Context* ctx, const char* label, int* col_rgbaInOut, int* flagsInOptional)","cpp":"bool ImGui_ColorEdit4(ImGui_Context* ctx, const char* label, int* col_rgbaInOut, int* flagsInOptional)"},"title":"ImGui_ColorEdit4","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Color is in 0xRRGGBBAA or, if ColorEditFlags_NoAlpha is set, 0xXXRRGGBB\n(XX is ignored and will not be modified).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorEditFlags_AlphaBar","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ColorEditFlags_AlphaBar\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ColorEditFlags_AlphaBar()","eel":"int extension_api(\"ImGui_ColorEditFlags_AlphaBar\")","python":"int ImGui_ColorEditFlags_AlphaBar()","cpp":"int ImGui_ColorEditFlags_AlphaBar()"},"title":"ImGui_ColorEditFlags_AlphaBar","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"ColorEdit, ColorPicker: show vertical alpha bar/gradient in picker.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorEditFlags_AlphaPreview","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ColorEditFlags_AlphaPreview\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ColorEditFlags_AlphaPreview()","eel":"int extension_api(\"ImGui_ColorEditFlags_AlphaPreview\")","python":"int ImGui_ColorEditFlags_AlphaPreview()","cpp":"int ImGui_ColorEditFlags_AlphaPreview()"},"title":"ImGui_ColorEditFlags_AlphaPreview","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"ColorEdit, ColorPicker, ColorButton: display preview as a transparent color\n   over a checkerboard, instead of opaque.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorEditFlags_AlphaPreviewHalf","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ColorEditFlags_AlphaPreviewHalf\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ColorEditFlags_AlphaPreviewHalf()","eel":"int extension_api(\"ImGui_ColorEditFlags_AlphaPreviewHalf\")","python":"int ImGui_ColorEditFlags_AlphaPreviewHalf()","cpp":"int ImGui_ColorEditFlags_AlphaPreviewHalf()"},"title":"ImGui_ColorEditFlags_AlphaPreviewHalf","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"ColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard,\n   instead of opaque.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorEditFlags_DisplayHSV","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ColorEditFlags_DisplayHSV\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ColorEditFlags_DisplayHSV()","eel":"int extension_api(\"ImGui_ColorEditFlags_DisplayHSV\")","python":"int ImGui_ColorEditFlags_DisplayHSV()","cpp":"int ImGui_ColorEditFlags_DisplayHSV()"},"title":"ImGui_ColorEditFlags_DisplayHSV","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"ColorEdit: override _display_ type to HSV. ColorPicker:\n   select any combination using one or more of RGB/HSV/Hex.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorEditFlags_DisplayHex","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ColorEditFlags_DisplayHex\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ColorEditFlags_DisplayHex()","eel":"int extension_api(\"ImGui_ColorEditFlags_DisplayHex\")","python":"int ImGui_ColorEditFlags_DisplayHex()","cpp":"int ImGui_ColorEditFlags_DisplayHex()"},"title":"ImGui_ColorEditFlags_DisplayHex","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"ColorEdit: override _display_ type to Hex. ColorPicker:\n   select any combination using one or more of RGB/HSV/Hex.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorEditFlags_DisplayRGB","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ColorEditFlags_DisplayRGB\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ColorEditFlags_DisplayRGB()","eel":"int extension_api(\"ImGui_ColorEditFlags_DisplayRGB\")","python":"int ImGui_ColorEditFlags_DisplayRGB()","cpp":"int ImGui_ColorEditFlags_DisplayRGB()"},"title":"ImGui_ColorEditFlags_DisplayRGB","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"ColorEdit: override _display_ type to RGB. ColorPicker:\n   select any combination using one or more of RGB/HSV/Hex.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorEditFlags_Float","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ColorEditFlags_Float\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ColorEditFlags_Float()","eel":"int extension_api(\"ImGui_ColorEditFlags_Float\")","python":"int ImGui_ColorEditFlags_Float()","cpp":"int ImGui_ColorEditFlags_Float()"},"title":"ImGui_ColorEditFlags_Float","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0..1.0\n   floats instead of 0..255 integers. No round-trip of value via integers.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorEditFlags_InputHSV","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ColorEditFlags_InputHSV\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ColorEditFlags_InputHSV()","eel":"int extension_api(\"ImGui_ColorEditFlags_InputHSV\")","python":"int ImGui_ColorEditFlags_InputHSV()","cpp":"int ImGui_ColorEditFlags_InputHSV()"},"title":"ImGui_ColorEditFlags_InputHSV","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"ColorEdit, ColorPicker: input and output data in HSV format.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorEditFlags_InputRGB","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ColorEditFlags_InputRGB\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ColorEditFlags_InputRGB()","eel":"int extension_api(\"ImGui_ColorEditFlags_InputRGB\")","python":"int ImGui_ColorEditFlags_InputRGB()","cpp":"int ImGui_ColorEditFlags_InputRGB()"},"title":"ImGui_ColorEditFlags_InputRGB","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"ColorEdit, ColorPicker: input and output data in RGB format.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorEditFlags_NoAlpha","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ColorEditFlags_NoAlpha\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ColorEditFlags_NoAlpha()","eel":"int extension_api(\"ImGui_ColorEditFlags_NoAlpha\")","python":"int ImGui_ColorEditFlags_NoAlpha()","cpp":"int ImGui_ColorEditFlags_NoAlpha()"},"title":"ImGui_ColorEditFlags_NoAlpha","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"ColorEdit, ColorPicker, ColorButton: ignore Alpha component\n  (will only read 3 components from the input pointer).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorEditFlags_NoBorder","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ColorEditFlags_NoBorder\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ColorEditFlags_NoBorder()","eel":"int extension_api(\"ImGui_ColorEditFlags_NoBorder\")","python":"int ImGui_ColorEditFlags_NoBorder()","cpp":"int ImGui_ColorEditFlags_NoBorder()"},"title":"ImGui_ColorEditFlags_NoBorder","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"ColorButton: disable border (which is enforced by default).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorEditFlags_NoDragDrop","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ColorEditFlags_NoDragDrop\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ColorEditFlags_NoDragDrop()","eel":"int extension_api(\"ImGui_ColorEditFlags_NoDragDrop\")","python":"int ImGui_ColorEditFlags_NoDragDrop()","cpp":"int ImGui_ColorEditFlags_NoDragDrop()"},"title":"ImGui_ColorEditFlags_NoDragDrop","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorEditFlags_NoInputs","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ColorEditFlags_NoInputs\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ColorEditFlags_NoInputs()","eel":"int extension_api(\"ImGui_ColorEditFlags_NoInputs\")","python":"int ImGui_ColorEditFlags_NoInputs()","cpp":"int ImGui_ColorEditFlags_NoInputs()"},"title":"ImGui_ColorEditFlags_NoInputs","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"ColorEdit, ColorPicker: disable inputs sliders/text widgets\n   (e.g. to show only the small preview color square).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorEditFlags_NoLabel","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ColorEditFlags_NoLabel\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ColorEditFlags_NoLabel()","eel":"int extension_api(\"ImGui_ColorEditFlags_NoLabel\")","python":"int ImGui_ColorEditFlags_NoLabel()","cpp":"int ImGui_ColorEditFlags_NoLabel()"},"title":"ImGui_ColorEditFlags_NoLabel","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"ColorEdit, ColorPicker: disable display of inline text label\n   (the label is still forwarded to the tooltip and picker).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorEditFlags_NoOptions","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ColorEditFlags_NoOptions\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ColorEditFlags_NoOptions()","eel":"int extension_api(\"ImGui_ColorEditFlags_NoOptions\")","python":"int ImGui_ColorEditFlags_NoOptions()","cpp":"int ImGui_ColorEditFlags_NoOptions()"},"title":"ImGui_ColorEditFlags_NoOptions","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"ColorEdit: disable toggling options menu when right-clicking on inputs/small preview.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorEditFlags_NoPicker","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ColorEditFlags_NoPicker\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ColorEditFlags_NoPicker()","eel":"int extension_api(\"ImGui_ColorEditFlags_NoPicker\")","python":"int ImGui_ColorEditFlags_NoPicker()","cpp":"int ImGui_ColorEditFlags_NoPicker()"},"title":"ImGui_ColorEditFlags_NoPicker","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"ColorEdit: disable picker when clicking on color square.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorEditFlags_NoSidePreview","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ColorEditFlags_NoSidePreview\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ColorEditFlags_NoSidePreview()","eel":"int extension_api(\"ImGui_ColorEditFlags_NoSidePreview\")","python":"int ImGui_ColorEditFlags_NoSidePreview()","cpp":"int ImGui_ColorEditFlags_NoSidePreview()"},"title":"ImGui_ColorEditFlags_NoSidePreview","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"ColorPicker: disable bigger color preview on right side of the picker,\n   use small color square preview instead.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorEditFlags_NoSmallPreview","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ColorEditFlags_NoSmallPreview\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ColorEditFlags_NoSmallPreview()","eel":"int extension_api(\"ImGui_ColorEditFlags_NoSmallPreview\")","python":"int ImGui_ColorEditFlags_NoSmallPreview()","cpp":"int ImGui_ColorEditFlags_NoSmallPreview()"},"title":"ImGui_ColorEditFlags_NoSmallPreview","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"ColorEdit, ColorPicker: disable color square preview next to the inputs.\n   (e.g. to show only the inputs).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorEditFlags_NoTooltip","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ColorEditFlags_NoTooltip\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ColorEditFlags_NoTooltip()","eel":"int extension_api(\"ImGui_ColorEditFlags_NoTooltip\")","python":"int ImGui_ColorEditFlags_NoTooltip()","cpp":"int ImGui_ColorEditFlags_NoTooltip()"},"title":"ImGui_ColorEditFlags_NoTooltip","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorEditFlags_None","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ColorEditFlags_None\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ColorEditFlags_None()","eel":"int extension_api(\"ImGui_ColorEditFlags_None\")","python":"int ImGui_ColorEditFlags_None()","cpp":"int ImGui_ColorEditFlags_None()"},"title":"ImGui_ColorEditFlags_None","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorEditFlags_PickerHueBar","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ColorEditFlags_PickerHueBar\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ColorEditFlags_PickerHueBar()","eel":"int extension_api(\"ImGui_ColorEditFlags_PickerHueBar\")","python":"int ImGui_ColorEditFlags_PickerHueBar()","cpp":"int ImGui_ColorEditFlags_PickerHueBar()"},"title":"ImGui_ColorEditFlags_PickerHueBar","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"ColorPicker: bar for Hue, rectangle for Sat/Value.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorEditFlags_PickerHueWheel","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ColorEditFlags_PickerHueWheel\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ColorEditFlags_PickerHueWheel()","eel":"int extension_api(\"ImGui_ColorEditFlags_PickerHueWheel\")","python":"int ImGui_ColorEditFlags_PickerHueWheel()","cpp":"int ImGui_ColorEditFlags_PickerHueWheel()"},"title":"ImGui_ColorEditFlags_PickerHueWheel","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"ColorPicker: wheel for Hue, triangle for Sat/Value.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorEditFlags_Uint8","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ColorEditFlags_Uint8\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ColorEditFlags_Uint8()","eel":"int extension_api(\"ImGui_ColorEditFlags_Uint8\")","python":"int ImGui_ColorEditFlags_Uint8()","cpp":"int ImGui_ColorEditFlags_Uint8()"},"title":"ImGui_ColorEditFlags_Uint8","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"integer col_rgb","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorPicker3","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"col_rgb","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"col_rgb","type":"integer"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_ColorPicker3\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"int","identifier":"&amp;col_rgb"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer col_rgb","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer col_rgb = reaper.ImGui_ColorPicker3(ImGui_Context ctx, string label, integer col_rgb, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_ColorPicker3\", ImGui_Context ctx, \"label\", int &amp;col_rgb, optional int flagsIn)","python":"bool ImGui_ColorPicker3(ImGui_Context* ctx, const char* label, int* col_rgbInOut, int* flagsInOptional)","cpp":"bool ImGui_ColorPicker3(ImGui_Context* ctx, const char* label, int* col_rgbInOut, int* flagsInOptional)"},"title":"ImGui_ColorPicker3","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Color is in 0xXXRRGGBB. XX is ignored and will not be modified.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"integer col_rgba","description":""},{"identifier":"optional integer flagsIn","description":""},{"identifier":"optional integer ref_colIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_ColorPicker4","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"col_rgba","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"col_rgba","type":"integer"},{"isOptional":true,"type":"integer","identifier":"flagsIn"},{"isOptional":true,"type":"integer","identifier":"ref_colIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_ColorPicker4\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"int","identifier":"&amp;col_rgba"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"},{"identifier":"ref_colIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer col_rgba","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer col_rgba = reaper.ImGui_ColorPicker4(ImGui_Context ctx, string label, integer col_rgba, optional integer flagsIn, optional integer ref_colIn)","eel":"bool extension_api(\"ImGui_ColorPicker4\", ImGui_Context ctx, \"label\", int &amp;col_rgba, optional int flagsIn, optional int ref_colIn)","python":"bool ImGui_ColorPicker4(ImGui_Context* ctx, const char* label, int* col_rgbaInOut, int* flagsInOptional, int* ref_colInOptional)","cpp":"bool ImGui_ColorPicker4(ImGui_Context* ctx, const char* label, int* col_rgbaInOut, int* flagsInOptional, int* ref_colInOptional)"},"title":"ImGui_ColorPicker4","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"integer current_item","description":""},{"identifier":"string items","description":""},{"identifier":"optional integer popup_max_height_in_itemsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Combo","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"current_item","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"current_item","type":"integer"},{"identifier":"items","type":"string"},{"isOptional":true,"type":"integer","identifier":"popup_max_height_in_itemsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_Combo\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"int","identifier":"&amp;current_item"},{"identifier":"\"items\""},{"identifier":"popup_max_height_in_itemsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer current_item","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer current_item = reaper.ImGui_Combo(ImGui_Context ctx, string label, integer current_item, string items, optional integer popup_max_height_in_itemsIn)","eel":"bool extension_api(\"ImGui_Combo\", ImGui_Context ctx, \"label\", int &amp;current_item, \"items\", optional int popup_max_height_in_itemsIn)","python":"bool ImGui_Combo(ImGui_Context* ctx, const char* label, int* current_itemInOut, const char* items, int items_sz, int* popup_max_height_in_itemsInOptional)","cpp":"bool ImGui_Combo(ImGui_Context* ctx, const char* label, int* current_itemInOut, const char* items, int items_sz, int* popup_max_height_in_itemsInOptional)"},"title":"ImGui_Combo","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Helper over BeginCombo/EndCombo for convenience purpose. Each item must be\nnull-terminated (requires REAPER v6.44 or newer for EEL and Lua).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ComboFlags_HeightLarge","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ComboFlags_HeightLarge\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ComboFlags_HeightLarge()","eel":"int extension_api(\"ImGui_ComboFlags_HeightLarge\")","python":"int ImGui_ComboFlags_HeightLarge()","cpp":"int ImGui_ComboFlags_HeightLarge()"},"title":"ImGui_ComboFlags_HeightLarge","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Max ~20 items visible.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ComboFlags_HeightLargest","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ComboFlags_HeightLargest\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ComboFlags_HeightLargest()","eel":"int extension_api(\"ImGui_ComboFlags_HeightLargest\")","python":"int ImGui_ComboFlags_HeightLargest()","cpp":"int ImGui_ComboFlags_HeightLargest()"},"title":"ImGui_ComboFlags_HeightLargest","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"As many fitting items as possible.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ComboFlags_HeightRegular","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ComboFlags_HeightRegular\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ComboFlags_HeightRegular()","eel":"int extension_api(\"ImGui_ComboFlags_HeightRegular\")","python":"int ImGui_ComboFlags_HeightRegular()","cpp":"int ImGui_ComboFlags_HeightRegular()"},"title":"ImGui_ComboFlags_HeightRegular","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Max ~8 items visible (default).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ComboFlags_HeightSmall","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ComboFlags_HeightSmall\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ComboFlags_HeightSmall()","eel":"int extension_api(\"ImGui_ComboFlags_HeightSmall\")","python":"int ImGui_ComboFlags_HeightSmall()","cpp":"int ImGui_ComboFlags_HeightSmall()"},"title":"ImGui_ComboFlags_HeightSmall","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Max ~4 items visible. Tip: If you want your combo popup to be a specific size\nyou can use SetNextWindowSizeConstraints prior to calling BeginCombo.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ComboFlags_NoArrowButton","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ComboFlags_NoArrowButton\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ComboFlags_NoArrowButton()","eel":"int extension_api(\"ImGui_ComboFlags_NoArrowButton\")","python":"int ImGui_ComboFlags_NoArrowButton()","cpp":"int ImGui_ComboFlags_NoArrowButton()"},"title":"ImGui_ComboFlags_NoArrowButton","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Display on the preview box without the square arrow button.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ComboFlags_NoPreview","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ComboFlags_NoPreview\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ComboFlags_NoPreview()","eel":"int extension_api(\"ImGui_ComboFlags_NoPreview\")","python":"int ImGui_ComboFlags_NoPreview()","cpp":"int ImGui_ComboFlags_NoPreview()"},"title":"ImGui_ComboFlags_NoPreview","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Display only a square arrow button.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ComboFlags_None","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ComboFlags_None\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ComboFlags_None()","eel":"int extension_api(\"ImGui_ComboFlags_None\")","python":"int ImGui_ComboFlags_None()","cpp":"int ImGui_ComboFlags_None()"},"title":"ImGui_ComboFlags_None","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ComboFlags_PopupAlignLeft","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ComboFlags_PopupAlignLeft\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ComboFlags_PopupAlignLeft()","eel":"int extension_api(\"ImGui_ComboFlags_PopupAlignLeft\")","python":"int ImGui_ComboFlags_PopupAlignLeft()","cpp":"int ImGui_ComboFlags_PopupAlignLeft()"},"title":"ImGui_ComboFlags_PopupAlignLeft","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Align the popup toward the left by default.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Cond_Always","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Cond_Always\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Cond_Always()","eel":"int extension_api(\"ImGui_Cond_Always\")","python":"int ImGui_Cond_Always()","cpp":"int ImGui_Cond_Always()"},"title":"ImGui_Cond_Always","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"No condition (always set the variable).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Cond_Appearing","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Cond_Appearing\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Cond_Appearing()","eel":"int extension_api(\"ImGui_Cond_Appearing\")","python":"int ImGui_Cond_Appearing()","cpp":"int ImGui_Cond_Appearing()"},"title":"ImGui_Cond_Appearing","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set the variable if the object/window is appearing after being\n   hidden/inactive (or the first time).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Cond_FirstUseEver","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Cond_FirstUseEver\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Cond_FirstUseEver()","eel":"int extension_api(\"ImGui_Cond_FirstUseEver\")","python":"int ImGui_Cond_FirstUseEver()","cpp":"int ImGui_Cond_FirstUseEver()"},"title":"ImGui_Cond_FirstUseEver","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set the variable if the object/window has no persistently saved data\n   (no entry in .ini file).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Cond_Once","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Cond_Once\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Cond_Once()","eel":"int extension_api(\"ImGui_Cond_Once\")","python":"int ImGui_Cond_Once()","cpp":"int ImGui_Cond_Once()"},"title":"ImGui_Cond_Once","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set the variable once per runtime session (only the first call will succeed).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigFlags_DockingEnable","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigFlags_DockingEnable\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigFlags_DockingEnable()","eel":"int extension_api(\"ImGui_ConfigFlags_DockingEnable\")","python":"int ImGui_ConfigFlags_DockingEnable()","cpp":"int ImGui_ConfigFlags_DockingEnable()"},"title":"ImGui_ConfigFlags_DockingEnable","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[BETA] Enable docking functionality.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigFlags_NavEnableKeyboard","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigFlags_NavEnableKeyboard\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigFlags_NavEnableKeyboard()","eel":"int extension_api(\"ImGui_ConfigFlags_NavEnableKeyboard\")","python":"int ImGui_ConfigFlags_NavEnableKeyboard()","cpp":"int ImGui_ConfigFlags_NavEnableKeyboard()"},"title":"ImGui_ConfigFlags_NavEnableKeyboard","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Master keyboard navigation enable flag.\nEnable full Tabbing + directional arrows + space/enter to activate.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigFlags_NavEnableSetMousePos","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigFlags_NavEnableSetMousePos\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigFlags_NavEnableSetMousePos()","eel":"int extension_api(\"ImGui_ConfigFlags_NavEnableSetMousePos\")","python":"int ImGui_ConfigFlags_NavEnableSetMousePos()","cpp":"int ImGui_ConfigFlags_NavEnableSetMousePos()"},"title":"ImGui_ConfigFlags_NavEnableSetMousePos","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Instruct navigation to move the mouse cursor.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigFlags_NavNoCaptureKeyboard","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigFlags_NavNoCaptureKeyboard\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigFlags_NavNoCaptureKeyboard()","eel":"int extension_api(\"ImGui_ConfigFlags_NavNoCaptureKeyboard\")","python":"int ImGui_ConfigFlags_NavNoCaptureKeyboard()","cpp":"int ImGui_ConfigFlags_NavNoCaptureKeyboard()"},"title":"ImGui_ConfigFlags_NavNoCaptureKeyboard","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Instruct navigation to not capture global keyboard input when\n   ConfigFlags_NavEnableKeyboard is set (see SetNextFrameWantCaptureKeyboard).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigFlags_NoMouse","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigFlags_NoMouse\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigFlags_NoMouse()","eel":"int extension_api(\"ImGui_ConfigFlags_NoMouse\")","python":"int ImGui_ConfigFlags_NoMouse()","cpp":"int ImGui_ConfigFlags_NoMouse()"},"title":"ImGui_ConfigFlags_NoMouse","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Instruct imgui to ignore mouse position/buttons.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigFlags_NoMouseCursorChange","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigFlags_NoMouseCursorChange\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigFlags_NoMouseCursorChange()","eel":"int extension_api(\"ImGui_ConfigFlags_NoMouseCursorChange\")","python":"int ImGui_ConfigFlags_NoMouseCursorChange()","cpp":"int ImGui_ConfigFlags_NoMouseCursorChange()"},"title":"ImGui_ConfigFlags_NoMouseCursorChange","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Instruct backend to not alter mouse cursor shape and visibility.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigFlags_NoSavedSettings","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigFlags_NoSavedSettings\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigFlags_NoSavedSettings()","eel":"int extension_api(\"ImGui_ConfigFlags_NoSavedSettings\")","python":"int ImGui_ConfigFlags_NoSavedSettings()","cpp":"int ImGui_ConfigFlags_NoSavedSettings()"},"title":"ImGui_ConfigFlags_NoSavedSettings","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable state restoration and persistence for the whole context.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigFlags_None","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigFlags_None\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigFlags_None()","eel":"int extension_api(\"ImGui_ConfigFlags_None\")","python":"int ImGui_ConfigFlags_None()","cpp":"int ImGui_ConfigFlags_None()"},"title":"ImGui_ConfigFlags_None","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigVar_DebugBeginReturnValueLoop","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigVar_DebugBeginReturnValueLoop\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigVar_DebugBeginReturnValueLoop()","eel":"int extension_api(\"ImGui_ConfigVar_DebugBeginReturnValueLoop\")","python":"int ImGui_ConfigVar_DebugBeginReturnValueLoop()","cpp":"int ImGui_ConfigVar_DebugBeginReturnValueLoop()"},"title":"ImGui_ConfigVar_DebugBeginReturnValueLoop","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Some calls to Begin()/BeginChild() will return false.\nWill cycle through window depths then repeat. Suggested use: add\n\"SetConfigVar(ConfigVar_DebugBeginReturnValueLoop(), GetKeyMods() == Mod_Shift\"\nin your main loop then occasionally press SHIFT.\nWindows should be flickering while running.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigVar_DebugBeginReturnValueOnce","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigVar_DebugBeginReturnValueOnce\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigVar_DebugBeginReturnValueOnce()","eel":"int extension_api(\"ImGui_ConfigVar_DebugBeginReturnValueOnce\")","python":"int ImGui_ConfigVar_DebugBeginReturnValueOnce()","cpp":"int ImGui_ConfigVar_DebugBeginReturnValueOnce()"},"title":"ImGui_ConfigVar_DebugBeginReturnValueOnce","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"First-time calls to Begin()/BeginChild() will return false.\n**Needs to be set at context startup time** if you don't want to miss windows.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigVar_DockingNoSplit","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigVar_DockingNoSplit\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigVar_DockingNoSplit()","eel":"int extension_api(\"ImGui_ConfigVar_DockingNoSplit\")","python":"int ImGui_ConfigVar_DockingNoSplit()","cpp":"int ImGui_ConfigVar_DockingNoSplit()"},"title":"ImGui_ConfigVar_DockingNoSplit","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Simplified docking mode: disable window splitting, so docking is limited to\n   merging multiple windows together into tab-bars.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigVar_DockingTransparentPayload","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigVar_DockingTransparentPayload\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigVar_DockingTransparentPayload()","eel":"int extension_api(\"ImGui_ConfigVar_DockingTransparentPayload\")","python":"int ImGui_ConfigVar_DockingTransparentPayload()","cpp":"int ImGui_ConfigVar_DockingTransparentPayload()"},"title":"ImGui_ConfigVar_DockingTransparentPayload","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Make window or viewport transparent when docking and only display docking\n   boxes on the target viewport.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigVar_DockingWithShift","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigVar_DockingWithShift\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigVar_DockingWithShift()","eel":"int extension_api(\"ImGui_ConfigVar_DockingWithShift\")","python":"int ImGui_ConfigVar_DockingWithShift()","cpp":"int ImGui_ConfigVar_DockingWithShift()"},"title":"ImGui_ConfigVar_DockingWithShift","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Enable docking with holding Shift key\n   (reduce visual noise, allows dropping in wider space","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigVar_DragClickToInputText","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigVar_DragClickToInputText\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigVar_DragClickToInputText()","eel":"int extension_api(\"ImGui_ConfigVar_DragClickToInputText\")","python":"int ImGui_ConfigVar_DragClickToInputText()","cpp":"int ImGui_ConfigVar_DragClickToInputText()"},"title":"ImGui_ConfigVar_DragClickToInputText","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Enable turning Drag* widgets into text input with a simple mouse\n   click-release (without moving). Not desirable on devices without a keyboard.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigVar_Flags","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigVar_Flags\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigVar_Flags()","eel":"int extension_api(\"ImGui_ConfigVar_Flags\")","python":"int ImGui_ConfigVar_Flags()","cpp":"int ImGui_ConfigVar_Flags()"},"title":"ImGui_ConfigVar_Flags","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"ConfigFlags_*","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigVar_HoverDelayNormal","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigVar_HoverDelayNormal\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigVar_HoverDelayNormal()","eel":"int extension_api(\"ImGui_ConfigVar_HoverDelayNormal\")","python":"int ImGui_ConfigVar_HoverDelayNormal()","cpp":"int ImGui_ConfigVar_HoverDelayNormal()"},"title":"ImGui_ConfigVar_HoverDelayNormal","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Delay on hovering before IsItemHovered(HoveredFlags_DelayNormal) returns true.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigVar_HoverDelayShort","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigVar_HoverDelayShort\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigVar_HoverDelayShort()","eel":"int extension_api(\"ImGui_ConfigVar_HoverDelayShort\")","python":"int ImGui_ConfigVar_HoverDelayShort()","cpp":"int ImGui_ConfigVar_HoverDelayShort()"},"title":"ImGui_ConfigVar_HoverDelayShort","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Delay on hovering before IsItemHovered(HoveredFlags_DelayShort) returns true.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigVar_InputTextCursorBlink","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigVar_InputTextCursorBlink\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigVar_InputTextCursorBlink()","eel":"int extension_api(\"ImGui_ConfigVar_InputTextCursorBlink\")","python":"int ImGui_ConfigVar_InputTextCursorBlink()","cpp":"int ImGui_ConfigVar_InputTextCursorBlink()"},"title":"ImGui_ConfigVar_InputTextCursorBlink","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Enable blinking cursor (optional as some users consider it to be distracting).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigVar_InputTextEnterKeepActive","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigVar_InputTextEnterKeepActive\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigVar_InputTextEnterKeepActive()","eel":"int extension_api(\"ImGui_ConfigVar_InputTextEnterKeepActive\")","python":"int ImGui_ConfigVar_InputTextEnterKeepActive()","cpp":"int ImGui_ConfigVar_InputTextEnterKeepActive()"},"title":"ImGui_ConfigVar_InputTextEnterKeepActive","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Pressing Enter will keep item active and select contents (single-line only).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigVar_InputTrickleEventQueue","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigVar_InputTrickleEventQueue\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigVar_InputTrickleEventQueue()","eel":"int extension_api(\"ImGui_ConfigVar_InputTrickleEventQueue\")","python":"int ImGui_ConfigVar_InputTrickleEventQueue()","cpp":"int ImGui_ConfigVar_InputTrickleEventQueue()"},"title":"ImGui_ConfigVar_InputTrickleEventQueue","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Enable input queue trickling: some types of events submitted during the same\n   frame (e.g. button down + up) will be spread over multiple frames, improving\n   interactions with low framerates.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigVar_KeyRepeatDelay","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigVar_KeyRepeatDelay\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigVar_KeyRepeatDelay()","eel":"int extension_api(\"ImGui_ConfigVar_KeyRepeatDelay\")","python":"int ImGui_ConfigVar_KeyRepeatDelay()","cpp":"int ImGui_ConfigVar_KeyRepeatDelay()"},"title":"ImGui_ConfigVar_KeyRepeatDelay","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"When holding a key/button, time before it starts repeating, in seconds\n   (for buttons in Repeat mode, etc.).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigVar_KeyRepeatRate","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigVar_KeyRepeatRate\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigVar_KeyRepeatRate()","eel":"int extension_api(\"ImGui_ConfigVar_KeyRepeatRate\")","python":"int ImGui_ConfigVar_KeyRepeatRate()","cpp":"int ImGui_ConfigVar_KeyRepeatRate()"},"title":"ImGui_ConfigVar_KeyRepeatRate","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"When holding a key/button, rate at which it repeats, in seconds.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigVar_MacOSXBehaviors","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigVar_MacOSXBehaviors\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigVar_MacOSXBehaviors()","eel":"int extension_api(\"ImGui_ConfigVar_MacOSXBehaviors\")","python":"int ImGui_ConfigVar_MacOSXBehaviors()","cpp":"int ImGui_ConfigVar_MacOSXBehaviors()"},"title":"ImGui_ConfigVar_MacOSXBehaviors","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"OS X style: Text editing cursor movement using Alt instead of Ctrl, Shortcuts\n   using Cmd/Super instead of Ctrl, Line/Text Start and End using Cmd+Arrows\n   instead of Home/End, Double click selects by word instead of selecting whole\n   text, Multi-selection in lists uses Cmd/Super instead of Ctrl.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigVar_MouseDoubleClickMaxDist","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigVar_MouseDoubleClickMaxDist\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigVar_MouseDoubleClickMaxDist()","eel":"int extension_api(\"ImGui_ConfigVar_MouseDoubleClickMaxDist\")","python":"int ImGui_ConfigVar_MouseDoubleClickMaxDist()","cpp":"int ImGui_ConfigVar_MouseDoubleClickMaxDist()"},"title":"ImGui_ConfigVar_MouseDoubleClickMaxDist","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Distance threshold to stay in to validate a double-click, in pixels.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigVar_MouseDoubleClickTime","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigVar_MouseDoubleClickTime\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigVar_MouseDoubleClickTime()","eel":"int extension_api(\"ImGui_ConfigVar_MouseDoubleClickTime\")","python":"int ImGui_ConfigVar_MouseDoubleClickTime()","cpp":"int ImGui_ConfigVar_MouseDoubleClickTime()"},"title":"ImGui_ConfigVar_MouseDoubleClickTime","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Time for a double-click, in seconds.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigVar_MouseDragThreshold","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigVar_MouseDragThreshold\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigVar_MouseDragThreshold()","eel":"int extension_api(\"ImGui_ConfigVar_MouseDragThreshold\")","python":"int ImGui_ConfigVar_MouseDragThreshold()","cpp":"int ImGui_ConfigVar_MouseDragThreshold()"},"title":"ImGui_ConfigVar_MouseDragThreshold","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Distance threshold before considering we are dragging.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigVar_ViewportsNoDecoration","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigVar_ViewportsNoDecoration\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigVar_ViewportsNoDecoration()","eel":"int extension_api(\"ImGui_ConfigVar_ViewportsNoDecoration\")","python":"int ImGui_ConfigVar_ViewportsNoDecoration()","cpp":"int ImGui_ConfigVar_ViewportsNoDecoration()"},"title":"ImGui_ConfigVar_ViewportsNoDecoration","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable default OS window decoration. Enabling decoration can create\n   subsequent issues at OS levels (e.g. minimum window size).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigVar_WindowsMoveFromTitleBarOnly","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigVar_WindowsMoveFromTitleBarOnly\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigVar_WindowsMoveFromTitleBarOnly()","eel":"int extension_api(\"ImGui_ConfigVar_WindowsMoveFromTitleBarOnly\")","python":"int ImGui_ConfigVar_WindowsMoveFromTitleBarOnly()","cpp":"int ImGui_ConfigVar_WindowsMoveFromTitleBarOnly()"},"title":"ImGui_ConfigVar_WindowsMoveFromTitleBarOnly","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Enable allowing to move windows only when clicking on their title bar.\n   Does not apply to windows without a title bar.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_ConfigVar_WindowsResizeFromEdges","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_ConfigVar_WindowsResizeFromEdges\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_ConfigVar_WindowsResizeFromEdges()","eel":"int extension_api(\"ImGui_ConfigVar_WindowsResizeFromEdges\")","python":"int ImGui_ConfigVar_WindowsResizeFromEdges()","cpp":"int ImGui_ConfigVar_WindowsResizeFromEdges()"},"title":"ImGui_ConfigVar_WindowsResizeFromEdges","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Enable resizing of windows from their edges and from the lower-left corner.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string label","description":""},{"identifier":"optional integer config_flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_CreateContext","return_values":[{"type":"ImGui_Context"}],"parameters":[{"identifier":"label","type":"string"},{"isOptional":true,"type":"integer","identifier":"config_flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["ImGui_Context"],"parameters":[{"identifier":"\"ImGui_CreateContext\""},{"identifier":"\"label\""},{"identifier":"config_flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context","description":""}],"prog_lang":"*"},"functioncall":{"lua":"ImGui_Context reaper.ImGui_CreateContext(string label, optional integer config_flagsIn)","eel":"ImGui_Context extension_api(\"ImGui_CreateContext\", \"label\", optional int config_flagsIn)","python":"ImGui_Context* ImGui_CreateContext(const char* label, int* config_flagsInOptional)","cpp":"ImGui_Context* ImGui_CreateContext(const char* label, int* config_flagsInOptional)"},"title":"ImGui_CreateContext","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Create a new ReaImGui context.\nThe context will remain valid as long as it is used in each defer cycle.\n\nThe label is used for the tab text when windows are docked in REAPER\nand also as a unique identifier for storing settings.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_CreateDrawListSplitter","return_values":[{"type":"ImGui_DrawListSplitter"}],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"}]},"eel":{"method_name":"extension_api","return_values":["ImGui_DrawListSplitter"],"parameters":[{"identifier":"\"ImGui_CreateDrawListSplitter\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_DrawListSplitter","description":""}],"prog_lang":"*"},"functioncall":{"lua":"ImGui_DrawListSplitter reaper.ImGui_CreateDrawListSplitter(ImGui_DrawList draw_list)","eel":"ImGui_DrawListSplitter extension_api(\"ImGui_CreateDrawListSplitter\", ImGui_DrawList draw_list)","python":"ImGui_DrawListSplitter* ImGui_CreateDrawListSplitter(ImGui_DrawList* draw_list)","cpp":"ImGui_DrawListSplitter* ImGui_CreateDrawListSplitter(ImGui_DrawList* draw_list)"},"title":"ImGui_CreateDrawListSplitter","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"string family_or_file","description":""},{"identifier":"integer size","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_CreateFont","return_values":[{"type":"ImGui_Font"}],"parameters":[{"identifier":"family_or_file","type":"string"},{"identifier":"size","type":"integer"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["ImGui_Font"],"parameters":[{"identifier":"\"ImGui_CreateFont\""},{"identifier":"\"family_or_file\""},{"type_name":"int","identifier":"size"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Font","description":""}],"prog_lang":"*"},"functioncall":{"lua":"ImGui_Font reaper.ImGui_CreateFont(string family_or_file, integer size, optional integer flagsIn)","eel":"ImGui_Font extension_api(\"ImGui_CreateFont\", \"family_or_file\", int size, optional int flagsIn)","python":"ImGui_Font* ImGui_CreateFont(const char* family_or_file, int size, int* flagsInOptional)","cpp":"ImGui_Font* ImGui_CreateFont(const char* family_or_file, int size, int* flagsInOptional)"},"title":"ImGui_CreateFont","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Load a font matching a font family name or from a font file.\nThe font will remain valid while it's attached to a context. See Attach.\n\nThe family name can be an installed font or one of the generic fonts:\nsans-serif, serif, monospace, cursive, fantasy.\n\nIf 'family_or_file' specifies a path to a font file (contains a / or \\):\n- The first byte of 'flags' is used as the font index within the file\n- The font styles in 'flags' are simulated by the font renderer","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string code","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_CreateFunctionFromEEL","return_values":[{"type":"ImGui_Function"}],"parameters":[{"identifier":"code","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["ImGui_Function"],"parameters":[{"identifier":"\"ImGui_CreateFunctionFromEEL\""},{"identifier":"\"code\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Function","description":""}],"prog_lang":"*"},"functioncall":{"lua":"ImGui_Function reaper.ImGui_CreateFunctionFromEEL(string code)","eel":"ImGui_Function extension_api(\"ImGui_CreateFunctionFromEEL\", \"code\")","python":"ImGui_Function* ImGui_CreateFunctionFromEEL(const char* code)","cpp":"ImGui_Function* ImGui_CreateFunctionFromEEL(const char* code)"},"title":"ImGui_CreateFunctionFromEEL","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Compile an EEL program.\n\nStandard EEL [math](https://www.reaper.fm/sdk/js/basiccode.php#js_basicfunc)\nand [string](https://www.reaper.fm/sdk/js/strings.php#js_string_funcs)\nfunctions are available in addition to callback-specific functions\n(see InputTextCallback_*).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"string file","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_CreateImage","return_values":[{"type":"ImGui_Image"}],"parameters":[{"identifier":"file","type":"string"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["ImGui_Image"],"parameters":[{"identifier":"\"ImGui_CreateImage\""},{"identifier":"\"file\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Image","description":""}],"prog_lang":"*"},"functioncall":{"lua":"ImGui_Image reaper.ImGui_CreateImage(string file, optional integer flagsIn)","eel":"ImGui_Image extension_api(\"ImGui_CreateImage\", \"file\", optional int flagsIn)","python":"ImGui_Image* ImGui_CreateImage(const char* file, int* flagsInOptional)","cpp":"ImGui_Image* ImGui_CreateImage(const char* file, int* flagsInOptional)"},"title":"ImGui_CreateImage","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"The returned object is valid as long as it is used in each defer cycle\nunless attached to a context (see Attach).\n\n('flags' currently unused and reserved for future expansion)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string data","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_CreateImageFromMem","return_values":[{"type":"ImGui_Image"}],"parameters":[{"identifier":"data","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["ImGui_Image"],"parameters":[{"identifier":"\"ImGui_CreateImageFromMem\""},{"identifier":"\"data\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Image","description":""}],"prog_lang":"*"},"functioncall":{"lua":"ImGui_Image reaper.ImGui_CreateImageFromMem(string data)","eel":"ImGui_Image extension_api(\"ImGui_CreateImageFromMem\", \"data\")","python":"ImGui_Image* ImGui_CreateImageFromMem(const char* data, int data_sz)","cpp":"ImGui_Image* ImGui_CreateImageFromMem(const char* data, int data_sz)"},"title":"ImGui_CreateImageFromMem","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Requires REAPER v6.44 or newer for EEL and Lua. Load from a file using\nCreateImage or explicitely specify data_sz if supporting older versions.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_CreateImageSet","return_values":[{"type":"ImGui_ImageSet"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["ImGui_ImageSet"],"parameters":[{"identifier":"\"ImGui_CreateImageSet\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_ImageSet","description":""}],"prog_lang":"*"},"functioncall":{"lua":"ImGui_ImageSet  = reaper.ImGui_CreateImageSet()","eel":"ImGui_ImageSet extension_api(\"ImGui_CreateImageSet\")","python":"ImGui_ImageSet* ImGui_CreateImageSet()","cpp":"ImGui_ImageSet* ImGui_CreateImageSet()"},"title":"ImGui_CreateImageSet","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_CreateListClipper","return_values":[{"type":"ImGui_ListClipper"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["ImGui_ListClipper"],"parameters":[{"identifier":"\"ImGui_CreateListClipper\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_ListClipper","description":""}],"prog_lang":"*"},"functioncall":{"lua":"ImGui_ListClipper reaper.ImGui_CreateListClipper(ImGui_Context ctx)","eel":"ImGui_ListClipper extension_api(\"ImGui_CreateListClipper\", ImGui_Context ctx)","python":"ImGui_ListClipper* ImGui_CreateListClipper(ImGui_Context* ctx)","cpp":"ImGui_ListClipper* ImGui_CreateListClipper(ImGui_Context* ctx)"},"title":"ImGui_CreateListClipper","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"The returned clipper object is only valid for the given context and is valid\nas long as it is used in each defer cycle unless attached (see Attach).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"optional string default_filterIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_CreateTextFilter","return_values":[{"type":"ImGui_TextFilter"}],"parameters":[{"isOptional":true,"type":"string","identifier":"default_filterIn"}]},"eel":{"method_name":"extension_api","return_values":["ImGui_TextFilter"],"parameters":[{"identifier":"\"ImGui_CreateTextFilter\""},{"type_name":"optional","identifier":"\"default_filterIn\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_TextFilter","description":""}],"prog_lang":"*"},"functioncall":{"lua":"ImGui_TextFilter reaper.ImGui_CreateTextFilter(optional string default_filterIn)","eel":"ImGui_TextFilter extension_api(\"ImGui_CreateTextFilter\", optional \"default_filterIn\")","python":"ImGui_TextFilter* ImGui_CreateTextFilter(const char* default_filterInOptional)","cpp":"ImGui_TextFilter* ImGui_CreateTextFilter(const char* default_filterInOptional)"},"title":"ImGui_CreateTextFilter","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Valid while used every frame unless attached to a context (see Attach).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string text","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DebugTextEncoding","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"text","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DebugTextEncoding\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"text\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DebugTextEncoding(ImGui_Context ctx, string text)","eel":"extension_api(\"ImGui_DebugTextEncoding\", ImGui_Context ctx, \"text\")","python":"void ImGui_DebugTextEncoding(ImGui_Context* ctx, const char* text)","cpp":"void ImGui_DebugTextEncoding(ImGui_Context* ctx, const char* text)"},"title":"ImGui_DebugTextEncoding","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Helper tool to diagnose between text encoding issues and font loading issues.\nPass your UTF-8 string and verify that there are correct.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DestroyContext","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DestroyContext\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DestroyContext(ImGui_Context ctx)","eel":"extension_api(\"ImGui_DestroyContext\", ImGui_Context ctx)","python":"void ImGui_DestroyContext(ImGui_Context* ctx)","cpp":"void ImGui_DestroyContext(ImGui_Context* ctx)"},"title":"ImGui_DestroyContext","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Free the resources used by a context.\n\nCalling this function is usually not required as all ReaImGui objects are\nautomatically garbage-collected when unused.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctxImGui_Resource obj","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Detach","return_values":[],"parameters":[{"isOptional":true,"type":"ImGui_Context","identifier":"obj"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_Detach\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"ImGui_Resource","identifier":"obj"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_Detach(ImGui_Context ctxImGui_Resource obj)","eel":"extension_api(\"ImGui_Detach\", ImGui_Context ctx, ImGui_Resource obj)","python":"void ImGui_Detach(ImGui_Context* ctx, ImGui_Resource* obj)","cpp":"void ImGui_Detach(ImGui_Context* ctx, ImGui_Resource* obj)"},"title":"ImGui_Detach","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Unlink the object's lifetime. Unattached objects are automatically destroyed\nwhen left unused. You may check whether an object has been destroyed using\nValidatePtr.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Dir_Down","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Dir_Down\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Dir_Down()","eel":"int extension_api(\"ImGui_Dir_Down\")","python":"int ImGui_Dir_Down()","cpp":"int ImGui_Dir_Down()"},"title":"ImGui_Dir_Down","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Dir_Left","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Dir_Left\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Dir_Left()","eel":"int extension_api(\"ImGui_Dir_Left\")","python":"int ImGui_Dir_Left()","cpp":"int ImGui_Dir_Left()"},"title":"ImGui_Dir_Left","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Dir_None","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Dir_None\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Dir_None()","eel":"int extension_api(\"ImGui_Dir_None\")","python":"int ImGui_Dir_None()","cpp":"int ImGui_Dir_None()"},"title":"ImGui_Dir_None","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Dir_Right","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Dir_Right\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Dir_Right()","eel":"int extension_api(\"ImGui_Dir_Right\")","python":"int ImGui_Dir_Right()","cpp":"int ImGui_Dir_Right()"},"title":"ImGui_Dir_Right","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Dir_Up","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Dir_Up\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Dir_Up()","eel":"int extension_api(\"ImGui_Dir_Up\")","python":"int ImGui_Dir_Up()","cpp":"int ImGui_Dir_Up()"},"title":"ImGui_Dir_Up","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"number v","description":""},{"identifier":"optional number v_speedIn","description":""},{"identifier":"optional number v_minIn","description":""},{"identifier":"optional number v_maxIn","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DragDouble","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v","type":"number"},{"isOptional":true,"type":"number","identifier":"v_speedIn"},{"isOptional":true,"type":"number","identifier":"v_minIn"},{"isOptional":true,"type":"number","identifier":"v_maxIn"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_DragDouble\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"identifier":"&amp;v"},{"type_name":"optional","identifier":"v_speedIn"},{"type_name":"optional","identifier":"v_minIn"},{"type_name":"optional","identifier":"v_maxIn"},{"type_name":"optional","identifier":"\"formatIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number v","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number v = reaper.ImGui_DragDouble(ImGui_Context ctx, string label, number v, optional number v_speedIn, optional number v_minIn, optional number v_maxIn, optional string formatIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_DragDouble\", ImGui_Context ctx, \"label\", &amp;v, optional v_speedIn, optional v_minIn, optional v_maxIn, optional \"formatIn\", optional int flagsIn)","python":"bool ImGui_DragDouble(ImGui_Context* ctx, const char* label, double* vInOut, double* v_speedInOptional, double* v_minInOptional, double* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)","cpp":"bool ImGui_DragDouble(ImGui_Context* ctx, const char* label, double* vInOut, double* v_speedInOptional, double* v_minInOptional, double* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)"},"title":"ImGui_DragDouble","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":9,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"number v1","description":""},{"identifier":"number v2","description":""},{"identifier":"optional number v_speedIn","description":""},{"identifier":"optional number v_minIn","description":""},{"identifier":"optional number v_maxIn","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DragDouble2","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v1","type":"number"},{"identifier":"v2","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v1","type":"number"},{"identifier":"v2","type":"number"},{"isOptional":true,"type":"number","identifier":"v_speedIn"},{"isOptional":true,"type":"number","identifier":"v_minIn"},{"isOptional":true,"type":"number","identifier":"v_maxIn"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_DragDouble2\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"identifier":"&amp;v1"},{"identifier":"&amp;v2"},{"type_name":"optional","identifier":"v_speedIn"},{"type_name":"optional","identifier":"v_minIn"},{"type_name":"optional","identifier":"v_maxIn"},{"type_name":"optional","identifier":"\"formatIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number v1","description":""},{"identifier":"number v2","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number v1, number v2 = reaper.ImGui_DragDouble2(ImGui_Context ctx, string label, number v1, number v2, optional number v_speedIn, optional number v_minIn, optional number v_maxIn, optional string formatIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_DragDouble2\", ImGui_Context ctx, \"label\", &amp;v1, &amp;v2, optional v_speedIn, optional v_minIn, optional v_maxIn, optional \"formatIn\", optional int flagsIn)","python":"bool ImGui_DragDouble2(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v_speedInOptional, double* v_minInOptional, double* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)","cpp":"bool ImGui_DragDouble2(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v_speedInOptional, double* v_minInOptional, double* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)"},"title":"ImGui_DragDouble2","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":10,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"number v1","description":""},{"identifier":"number v2","description":""},{"identifier":"number v3","description":""},{"identifier":"optional number v_speedIn","description":""},{"identifier":"optional number v_minIn","description":""},{"identifier":"optional number v_maxIn","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DragDouble3","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v1","type":"number"},{"identifier":"v2","type":"number"},{"identifier":"v3","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v1","type":"number"},{"identifier":"v2","type":"number"},{"identifier":"v3","type":"number"},{"isOptional":true,"type":"number","identifier":"v_speedIn"},{"isOptional":true,"type":"number","identifier":"v_minIn"},{"isOptional":true,"type":"number","identifier":"v_maxIn"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_DragDouble3\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"identifier":"&amp;v1"},{"identifier":"&amp;v2"},{"identifier":"&amp;v3"},{"type_name":"optional","identifier":"v_speedIn"},{"type_name":"optional","identifier":"v_minIn"},{"type_name":"optional","identifier":"v_maxIn"},{"type_name":"optional","identifier":"\"formatIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number v1","description":""},{"identifier":"number v2","description":""},{"identifier":"number v3","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number v1, number v2, number v3 = reaper.ImGui_DragDouble3(ImGui_Context ctx, string label, number v1, number v2, number v3, optional number v_speedIn, optional number v_minIn, optional number v_maxIn, optional string formatIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_DragDouble3\", ImGui_Context ctx, \"label\", &amp;v1, &amp;v2, &amp;v3, optional v_speedIn, optional v_minIn, optional v_maxIn, optional \"formatIn\", optional int flagsIn)","python":"bool ImGui_DragDouble3(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double* v_speedInOptional, double* v_minInOptional, double* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)","cpp":"bool ImGui_DragDouble3(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double* v_speedInOptional, double* v_minInOptional, double* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)"},"title":"ImGui_DragDouble3","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":11,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"number v1","description":""},{"identifier":"number v2","description":""},{"identifier":"number v3","description":""},{"identifier":"number v4","description":""},{"identifier":"optional number v_speedIn","description":""},{"identifier":"optional number v_minIn","description":""},{"identifier":"optional number v_maxIn","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DragDouble4","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v1","type":"number"},{"identifier":"v2","type":"number"},{"identifier":"v3","type":"number"},{"identifier":"v4","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v1","type":"number"},{"identifier":"v2","type":"number"},{"identifier":"v3","type":"number"},{"identifier":"v4","type":"number"},{"isOptional":true,"type":"number","identifier":"v_speedIn"},{"isOptional":true,"type":"number","identifier":"v_minIn"},{"isOptional":true,"type":"number","identifier":"v_maxIn"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_DragDouble4\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"identifier":"&amp;v1"},{"identifier":"&amp;v2"},{"identifier":"&amp;v3"},{"identifier":"&amp;v4"},{"type_name":"optional","identifier":"v_speedIn"},{"type_name":"optional","identifier":"v_minIn"},{"type_name":"optional","identifier":"v_maxIn"},{"type_name":"optional","identifier":"\"formatIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number v1","description":""},{"identifier":"number v2","description":""},{"identifier":"number v3","description":""},{"identifier":"number v4","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number v1, number v2, number v3, number v4 = reaper.ImGui_DragDouble4(ImGui_Context ctx, string label, number v1, number v2, number v3, number v4, optional number v_speedIn, optional number v_minIn, optional number v_maxIn, optional string formatIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_DragDouble4\", ImGui_Context ctx, \"label\", &amp;v1, &amp;v2, &amp;v3, &amp;v4, optional v_speedIn, optional v_minIn, optional v_maxIn, optional \"formatIn\", optional int flagsIn)","python":"bool ImGui_DragDouble4(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double* v4InOut, double* v_speedInOptional, double* v_minInOptional, double* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)","cpp":"bool ImGui_DragDouble4(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double* v4InOut, double* v_speedInOptional, double* v_minInOptional, double* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)"},"title":"ImGui_DragDouble4","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string labelreaper_array values","description":""},{"identifier":"optional number speedIn","description":""},{"identifier":"optional number minIn","description":""},{"identifier":"optional number maxIn","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DragDoubleN","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"string","identifier":"values"},{"isOptional":true,"type":"number","identifier":"speedIn"},{"isOptional":true,"type":"number","identifier":"minIn"},{"isOptional":true,"type":"number","identifier":"maxIn"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_DragDoubleN\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"reaper_array","identifier":"values"},{"type_name":"optional","identifier":"speedIn"},{"type_name":"optional","identifier":"minIn"},{"type_name":"optional","identifier":"maxIn"},{"type_name":"optional","identifier":"\"formatIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_DragDoubleN(ImGui_Context ctx, string labelreaper_array values, optional number speedIn, optional number minIn, optional number maxIn, optional string formatIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_DragDoubleN\", ImGui_Context ctx, \"label\", reaper_array values, optional speedIn, optional minIn, optional maxIn, optional \"formatIn\", optional int flagsIn)","python":"bool ImGui_DragDoubleN(ImGui_Context* ctx, const char* label, reaper_array* values, double* speedInOptional, double* minInOptional, double* maxInOptional, const char* formatInOptional, int* flagsInOptional)","cpp":"bool ImGui_DragDoubleN(ImGui_Context* ctx, const char* label, reaper_array* values, double* speedInOptional, double* minInOptional, double* maxInOptional, const char* formatInOptional, int* flagsInOptional)"},"title":"ImGui_DragDoubleN","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_DragDropFlags_AcceptBeforeDelivery","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_DragDropFlags_AcceptBeforeDelivery\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_DragDropFlags_AcceptBeforeDelivery()","eel":"int extension_api(\"ImGui_DragDropFlags_AcceptBeforeDelivery\")","python":"int ImGui_DragDropFlags_AcceptBeforeDelivery()","cpp":"int ImGui_DragDropFlags_AcceptBeforeDelivery()"},"title":"ImGui_DragDropFlags_AcceptBeforeDelivery","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"AcceptDragDropPayload will returns true even before the mouse button is\n   released. You can then check GetDragDropPayload/is_delivery to test if the\n   payload needs to be delivered.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_DragDropFlags_AcceptNoDrawDefaultRect","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_DragDropFlags_AcceptNoDrawDefaultRect\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_DragDropFlags_AcceptNoDrawDefaultRect()","eel":"int extension_api(\"ImGui_DragDropFlags_AcceptNoDrawDefaultRect\")","python":"int ImGui_DragDropFlags_AcceptNoDrawDefaultRect()","cpp":"int ImGui_DragDropFlags_AcceptNoDrawDefaultRect()"},"title":"ImGui_DragDropFlags_AcceptNoDrawDefaultRect","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Do not draw the default highlight rectangle when hovering over target.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_DragDropFlags_AcceptNoPreviewTooltip","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_DragDropFlags_AcceptNoPreviewTooltip\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_DragDropFlags_AcceptNoPreviewTooltip()","eel":"int extension_api(\"ImGui_DragDropFlags_AcceptNoPreviewTooltip\")","python":"int ImGui_DragDropFlags_AcceptNoPreviewTooltip()","cpp":"int ImGui_DragDropFlags_AcceptNoPreviewTooltip()"},"title":"ImGui_DragDropFlags_AcceptNoPreviewTooltip","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_DragDropFlags_AcceptPeekOnly","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_DragDropFlags_AcceptPeekOnly\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_DragDropFlags_AcceptPeekOnly()","eel":"int extension_api(\"ImGui_DragDropFlags_AcceptPeekOnly\")","python":"int ImGui_DragDropFlags_AcceptPeekOnly()","cpp":"int ImGui_DragDropFlags_AcceptPeekOnly()"},"title":"ImGui_DragDropFlags_AcceptPeekOnly","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"For peeking ahead and inspecting the payload before delivery.\n   Equivalent to DragDropFlags_AcceptBeforeDelivery |\n   DragDropFlags_AcceptNoDrawDefaultRect.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_DragDropFlags_None","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_DragDropFlags_None\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_DragDropFlags_None()","eel":"int extension_api(\"ImGui_DragDropFlags_None\")","python":"int ImGui_DragDropFlags_None()","cpp":"int ImGui_DragDropFlags_None()"},"title":"ImGui_DragDropFlags_None","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_DragDropFlags_SourceAllowNullID","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_DragDropFlags_SourceAllowNullID\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_DragDropFlags_SourceAllowNullID()","eel":"int extension_api(\"ImGui_DragDropFlags_SourceAllowNullID\")","python":"int ImGui_DragDropFlags_SourceAllowNullID()","cpp":"int ImGui_DragDropFlags_SourceAllowNullID()"},"title":"ImGui_DragDropFlags_SourceAllowNullID","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Allow items such as Text, Image that have no unique identifier to be used as\n   drag source, by manufacturing a temporary identifier based on their\n   window-relative position. This is extremely unusual within the dear imgui\n   ecosystem and so we made it explicit.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_DragDropFlags_SourceAutoExpirePayload","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_DragDropFlags_SourceAutoExpirePayload\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_DragDropFlags_SourceAutoExpirePayload()","eel":"int extension_api(\"ImGui_DragDropFlags_SourceAutoExpirePayload\")","python":"int ImGui_DragDropFlags_SourceAutoExpirePayload()","cpp":"int ImGui_DragDropFlags_SourceAutoExpirePayload()"},"title":"ImGui_DragDropFlags_SourceAutoExpirePayload","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Automatically expire the payload if the source cease to be submitted\n   (otherwise payloads are persisting while being dragged).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_DragDropFlags_SourceExtern","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_DragDropFlags_SourceExtern\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_DragDropFlags_SourceExtern()","eel":"int extension_api(\"ImGui_DragDropFlags_SourceExtern\")","python":"int ImGui_DragDropFlags_SourceExtern()","cpp":"int ImGui_DragDropFlags_SourceExtern()"},"title":"ImGui_DragDropFlags_SourceExtern","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"External source (from outside of dear imgui), won't attempt to read current\n   item/window info. Will always return true.\n   Only one Extern source can be active simultaneously.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_DragDropFlags_SourceNoDisableHover","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_DragDropFlags_SourceNoDisableHover\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_DragDropFlags_SourceNoDisableHover()","eel":"int extension_api(\"ImGui_DragDropFlags_SourceNoDisableHover\")","python":"int ImGui_DragDropFlags_SourceNoDisableHover()","cpp":"int ImGui_DragDropFlags_SourceNoDisableHover()"},"title":"ImGui_DragDropFlags_SourceNoDisableHover","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"By default, when dragging we clear data so that IsItemHovered will return\n   false, to avoid subsequent user code submitting tooltips. This flag disables\n   this behavior so you can still call IsItemHovered on the source item.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_DragDropFlags_SourceNoHoldToOpenOthers","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_DragDropFlags_SourceNoHoldToOpenOthers\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_DragDropFlags_SourceNoHoldToOpenOthers()","eel":"int extension_api(\"ImGui_DragDropFlags_SourceNoHoldToOpenOthers\")","python":"int ImGui_DragDropFlags_SourceNoHoldToOpenOthers()","cpp":"int ImGui_DragDropFlags_SourceNoHoldToOpenOthers()"},"title":"ImGui_DragDropFlags_SourceNoHoldToOpenOthers","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable the behavior that allows to open tree nodes and collapsing header by\n   holding over them while dragging a source item.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_DragDropFlags_SourceNoPreviewTooltip","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_DragDropFlags_SourceNoPreviewTooltip\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_DragDropFlags_SourceNoPreviewTooltip()","eel":"int extension_api(\"ImGui_DragDropFlags_SourceNoPreviewTooltip\")","python":"int ImGui_DragDropFlags_SourceNoPreviewTooltip()","cpp":"int ImGui_DragDropFlags_SourceNoPreviewTooltip()"},"title":"ImGui_DragDropFlags_SourceNoPreviewTooltip","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"By default, a successful call to BeginDragDropSource opens a tooltip so you\n   can display a preview or description of the source contents.\n   This flag disables this behavior.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":10,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"number v_current_min","description":""},{"identifier":"number v_current_max","description":""},{"identifier":"optional number v_speedIn","description":""},{"identifier":"optional number v_minIn","description":""},{"identifier":"optional number v_maxIn","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional string format_maxIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DragFloatRange2","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v_current_min","type":"number"},{"identifier":"v_current_max","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v_current_min","type":"number"},{"identifier":"v_current_max","type":"number"},{"isOptional":true,"type":"number","identifier":"v_speedIn"},{"isOptional":true,"type":"number","identifier":"v_minIn"},{"isOptional":true,"type":"number","identifier":"v_maxIn"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"string","identifier":"format_maxIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_DragFloatRange2\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"identifier":"&amp;v_current_min"},{"identifier":"&amp;v_current_max"},{"type_name":"optional","identifier":"v_speedIn"},{"type_name":"optional","identifier":"v_minIn"},{"type_name":"optional","identifier":"v_maxIn"},{"type_name":"optional","identifier":"\"formatIn\""},{"type_name":"optional","identifier":"\"format_maxIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number v_current_min","description":""},{"identifier":"number v_current_max","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number v_current_min, number v_current_max = reaper.ImGui_DragFloatRange2(ImGui_Context ctx, string label, number v_current_min, number v_current_max, optional number v_speedIn, optional number v_minIn, optional number v_maxIn, optional string formatIn, optional string format_maxIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_DragFloatRange2\", ImGui_Context ctx, \"label\", &amp;v_current_min, &amp;v_current_max, optional v_speedIn, optional v_minIn, optional v_maxIn, optional \"formatIn\", optional \"format_maxIn\", optional int flagsIn)","python":"bool ImGui_DragFloatRange2(ImGui_Context* ctx, const char* label, double* v_current_minInOut, double* v_current_maxInOut, double* v_speedInOptional, double* v_minInOptional, double* v_maxInOptional, const char* formatInOptional, const char* format_maxInOptional, int* flagsInOptional)","cpp":"bool ImGui_DragFloatRange2(ImGui_Context* ctx, const char* label, double* v_current_minInOut, double* v_current_maxInOut, double* v_speedInOptional, double* v_minInOptional, double* v_maxInOptional, const char* formatInOptional, const char* format_maxInOptional, int* flagsInOptional)"},"title":"ImGui_DragFloatRange2","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"integer v","description":""},{"identifier":"optional number v_speedIn","description":""},{"identifier":"optional integer v_minIn","description":""},{"identifier":"optional integer v_maxIn","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DragInt","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v","type":"integer"},{"isOptional":true,"type":"number","identifier":"v_speedIn"},{"isOptional":true,"type":"integer","identifier":"v_minIn"},{"isOptional":true,"type":"integer","identifier":"v_maxIn"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_DragInt\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"int","identifier":"&amp;v"},{"type_name":"optional","identifier":"v_speedIn"},{"identifier":"v_minIn","modifier":"optional","type_name":"int"},{"identifier":"v_maxIn","modifier":"optional","type_name":"int"},{"type_name":"optional","identifier":"\"formatIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer v","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer v = reaper.ImGui_DragInt(ImGui_Context ctx, string label, integer v, optional number v_speedIn, optional integer v_minIn, optional integer v_maxIn, optional string formatIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_DragInt\", ImGui_Context ctx, \"label\", int &amp;v, optional v_speedIn, optional int v_minIn, optional int v_maxIn, optional \"formatIn\", optional int flagsIn)","python":"bool ImGui_DragInt(ImGui_Context* ctx, const char* label, int* vInOut, double* v_speedInOptional, int* v_minInOptional, int* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)","cpp":"bool ImGui_DragInt(ImGui_Context* ctx, const char* label, int* vInOut, double* v_speedInOptional, int* v_minInOptional, int* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)"},"title":"ImGui_DragInt","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":9,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"integer v1","description":""},{"identifier":"integer v2","description":""},{"identifier":"optional number v_speedIn","description":""},{"identifier":"optional integer v_minIn","description":""},{"identifier":"optional integer v_maxIn","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DragInt2","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v1","type":"integer"},{"identifier":"v2","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v1","type":"integer"},{"identifier":"v2","type":"integer"},{"isOptional":true,"type":"number","identifier":"v_speedIn"},{"isOptional":true,"type":"integer","identifier":"v_minIn"},{"isOptional":true,"type":"integer","identifier":"v_maxIn"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_DragInt2\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"int","identifier":"&amp;v1"},{"type_name":"int","identifier":"&amp;v2"},{"type_name":"optional","identifier":"v_speedIn"},{"identifier":"v_minIn","modifier":"optional","type_name":"int"},{"identifier":"v_maxIn","modifier":"optional","type_name":"int"},{"type_name":"optional","identifier":"\"formatIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer v1","description":""},{"identifier":"integer v2","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer v1, integer v2 = reaper.ImGui_DragInt2(ImGui_Context ctx, string label, integer v1, integer v2, optional number v_speedIn, optional integer v_minIn, optional integer v_maxIn, optional string formatIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_DragInt2\", ImGui_Context ctx, \"label\", int &amp;v1, int &amp;v2, optional v_speedIn, optional int v_minIn, optional int v_maxIn, optional \"formatIn\", optional int flagsIn)","python":"bool ImGui_DragInt2(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, double* v_speedInOptional, int* v_minInOptional, int* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)","cpp":"bool ImGui_DragInt2(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, double* v_speedInOptional, int* v_minInOptional, int* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)"},"title":"ImGui_DragInt2","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":10,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"integer v1","description":""},{"identifier":"integer v2","description":""},{"identifier":"integer v3","description":""},{"identifier":"optional number v_speedIn","description":""},{"identifier":"optional integer v_minIn","description":""},{"identifier":"optional integer v_maxIn","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DragInt3","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v1","type":"integer"},{"identifier":"v2","type":"integer"},{"identifier":"v3","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v1","type":"integer"},{"identifier":"v2","type":"integer"},{"identifier":"v3","type":"integer"},{"isOptional":true,"type":"number","identifier":"v_speedIn"},{"isOptional":true,"type":"integer","identifier":"v_minIn"},{"isOptional":true,"type":"integer","identifier":"v_maxIn"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_DragInt3\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"int","identifier":"&amp;v1"},{"type_name":"int","identifier":"&amp;v2"},{"type_name":"int","identifier":"&amp;v3"},{"type_name":"optional","identifier":"v_speedIn"},{"identifier":"v_minIn","modifier":"optional","type_name":"int"},{"identifier":"v_maxIn","modifier":"optional","type_name":"int"},{"type_name":"optional","identifier":"\"formatIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer v1","description":""},{"identifier":"integer v2","description":""},{"identifier":"integer v3","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer v1, integer v2, integer v3 = reaper.ImGui_DragInt3(ImGui_Context ctx, string label, integer v1, integer v2, integer v3, optional number v_speedIn, optional integer v_minIn, optional integer v_maxIn, optional string formatIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_DragInt3\", ImGui_Context ctx, \"label\", int &amp;v1, int &amp;v2, int &amp;v3, optional v_speedIn, optional int v_minIn, optional int v_maxIn, optional \"formatIn\", optional int flagsIn)","python":"bool ImGui_DragInt3(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, double* v_speedInOptional, int* v_minInOptional, int* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)","cpp":"bool ImGui_DragInt3(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, double* v_speedInOptional, int* v_minInOptional, int* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)"},"title":"ImGui_DragInt3","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":11,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"integer v1","description":""},{"identifier":"integer v2","description":""},{"identifier":"integer v3","description":""},{"identifier":"integer v4","description":""},{"identifier":"optional number v_speedIn","description":""},{"identifier":"optional integer v_minIn","description":""},{"identifier":"optional integer v_maxIn","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DragInt4","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v1","type":"integer"},{"identifier":"v2","type":"integer"},{"identifier":"v3","type":"integer"},{"identifier":"v4","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v1","type":"integer"},{"identifier":"v2","type":"integer"},{"identifier":"v3","type":"integer"},{"identifier":"v4","type":"integer"},{"isOptional":true,"type":"number","identifier":"v_speedIn"},{"isOptional":true,"type":"integer","identifier":"v_minIn"},{"isOptional":true,"type":"integer","identifier":"v_maxIn"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_DragInt4\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"int","identifier":"&amp;v1"},{"type_name":"int","identifier":"&amp;v2"},{"type_name":"int","identifier":"&amp;v3"},{"type_name":"int","identifier":"&amp;v4"},{"type_name":"optional","identifier":"v_speedIn"},{"identifier":"v_minIn","modifier":"optional","type_name":"int"},{"identifier":"v_maxIn","modifier":"optional","type_name":"int"},{"type_name":"optional","identifier":"\"formatIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer v1","description":""},{"identifier":"integer v2","description":""},{"identifier":"integer v3","description":""},{"identifier":"integer v4","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer v1, integer v2, integer v3, integer v4 = reaper.ImGui_DragInt4(ImGui_Context ctx, string label, integer v1, integer v2, integer v3, integer v4, optional number v_speedIn, optional integer v_minIn, optional integer v_maxIn, optional string formatIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_DragInt4\", ImGui_Context ctx, \"label\", int &amp;v1, int &amp;v2, int &amp;v3, int &amp;v4, optional v_speedIn, optional int v_minIn, optional int v_maxIn, optional \"formatIn\", optional int flagsIn)","python":"bool ImGui_DragInt4(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int* v4InOut, double* v_speedInOptional, int* v_minInOptional, int* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)","cpp":"bool ImGui_DragInt4(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int* v4InOut, double* v_speedInOptional, int* v_minInOptional, int* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)"},"title":"ImGui_DragInt4","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":10,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"integer v_current_min","description":""},{"identifier":"integer v_current_max","description":""},{"identifier":"optional number v_speedIn","description":""},{"identifier":"optional integer v_minIn","description":""},{"identifier":"optional integer v_maxIn","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional string format_maxIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DragIntRange2","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v_current_min","type":"integer"},{"identifier":"v_current_max","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v_current_min","type":"integer"},{"identifier":"v_current_max","type":"integer"},{"isOptional":true,"type":"number","identifier":"v_speedIn"},{"isOptional":true,"type":"integer","identifier":"v_minIn"},{"isOptional":true,"type":"integer","identifier":"v_maxIn"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"string","identifier":"format_maxIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_DragIntRange2\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"int","identifier":"&amp;v_current_min"},{"type_name":"int","identifier":"&amp;v_current_max"},{"type_name":"optional","identifier":"v_speedIn"},{"identifier":"v_minIn","modifier":"optional","type_name":"int"},{"identifier":"v_maxIn","modifier":"optional","type_name":"int"},{"type_name":"optional","identifier":"\"formatIn\""},{"type_name":"optional","identifier":"\"format_maxIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer v_current_min","description":""},{"identifier":"integer v_current_max","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer v_current_min, integer v_current_max = reaper.ImGui_DragIntRange2(ImGui_Context ctx, string label, integer v_current_min, integer v_current_max, optional number v_speedIn, optional integer v_minIn, optional integer v_maxIn, optional string formatIn, optional string format_maxIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_DragIntRange2\", ImGui_Context ctx, \"label\", int &amp;v_current_min, int &amp;v_current_max, optional v_speedIn, optional int v_minIn, optional int v_maxIn, optional \"formatIn\", optional \"format_maxIn\", optional int flagsIn)","python":"bool ImGui_DragIntRange2(ImGui_Context* ctx, const char* label, int* v_current_minInOut, int* v_current_maxInOut, double* v_speedInOptional, int* v_minInOptional, int* v_maxInOptional, const char* formatInOptional, const char* format_maxInOptional, int* flagsInOptional)","cpp":"bool ImGui_DragIntRange2(ImGui_Context* ctx, const char* label, int* v_current_minInOut, int* v_current_maxInOut, double* v_speedInOptional, int* v_minInOptional, int* v_maxInOptional, const char* formatInOptional, const char* format_maxInOptional, int* flagsInOptional)"},"title":"ImGui_DragIntRange2","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawFlags_Closed","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_DrawFlags_Closed\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_DrawFlags_Closed()","eel":"int extension_api(\"ImGui_DrawFlags_Closed\")","python":"int ImGui_DrawFlags_Closed()","cpp":"int ImGui_DrawFlags_Closed()"},"title":"ImGui_DrawFlags_Closed","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"DrawList_PathStroke, DrawList_AddPolyline: specify that shape should be\n   closed (Important: this is always == 1 for legacy reason).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawFlags_None","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_DrawFlags_None\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_DrawFlags_None()","eel":"int extension_api(\"ImGui_DrawFlags_None\")","python":"int ImGui_DrawFlags_None()","cpp":"int ImGui_DrawFlags_None()"},"title":"ImGui_DrawFlags_None","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawFlags_RoundCornersAll","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_DrawFlags_RoundCornersAll\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_DrawFlags_RoundCornersAll()","eel":"int extension_api(\"ImGui_DrawFlags_RoundCornersAll\")","python":"int ImGui_DrawFlags_RoundCornersAll()","cpp":"int ImGui_DrawFlags_RoundCornersAll()"},"title":"ImGui_DrawFlags_RoundCornersAll","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawFlags_RoundCornersBottom","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_DrawFlags_RoundCornersBottom\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_DrawFlags_RoundCornersBottom()","eel":"int extension_api(\"ImGui_DrawFlags_RoundCornersBottom\")","python":"int ImGui_DrawFlags_RoundCornersBottom()","cpp":"int ImGui_DrawFlags_RoundCornersBottom()"},"title":"ImGui_DrawFlags_RoundCornersBottom","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawFlags_RoundCornersBottomLeft","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_DrawFlags_RoundCornersBottomLeft\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_DrawFlags_RoundCornersBottomLeft()","eel":"int extension_api(\"ImGui_DrawFlags_RoundCornersBottomLeft\")","python":"int ImGui_DrawFlags_RoundCornersBottomLeft()","cpp":"int ImGui_DrawFlags_RoundCornersBottomLeft()"},"title":"ImGui_DrawFlags_RoundCornersBottomLeft","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding\n   bottom-left corner only (when rounding &gt; 0.0, we default to all corners).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawFlags_RoundCornersBottomRight","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_DrawFlags_RoundCornersBottomRight\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_DrawFlags_RoundCornersBottomRight()","eel":"int extension_api(\"ImGui_DrawFlags_RoundCornersBottomRight\")","python":"int ImGui_DrawFlags_RoundCornersBottomRight()","cpp":"int ImGui_DrawFlags_RoundCornersBottomRight()"},"title":"ImGui_DrawFlags_RoundCornersBottomRight","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding\n   bottom-right corner only (when rounding &gt; 0.0, we default to all corners).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawFlags_RoundCornersLeft","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_DrawFlags_RoundCornersLeft\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_DrawFlags_RoundCornersLeft()","eel":"int extension_api(\"ImGui_DrawFlags_RoundCornersLeft\")","python":"int ImGui_DrawFlags_RoundCornersLeft()","cpp":"int ImGui_DrawFlags_RoundCornersLeft()"},"title":"ImGui_DrawFlags_RoundCornersLeft","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawFlags_RoundCornersNone","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_DrawFlags_RoundCornersNone\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_DrawFlags_RoundCornersNone()","eel":"int extension_api(\"ImGui_DrawFlags_RoundCornersNone\")","python":"int ImGui_DrawFlags_RoundCornersNone()","cpp":"int ImGui_DrawFlags_RoundCornersNone()"},"title":"ImGui_DrawFlags_RoundCornersNone","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: disable rounding\n   on all corners (when rounding &gt; 0.0). This is NOT zero, NOT an implicit flag!.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawFlags_RoundCornersRight","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_DrawFlags_RoundCornersRight\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_DrawFlags_RoundCornersRight()","eel":"int extension_api(\"ImGui_DrawFlags_RoundCornersRight\")","python":"int ImGui_DrawFlags_RoundCornersRight()","cpp":"int ImGui_DrawFlags_RoundCornersRight()"},"title":"ImGui_DrawFlags_RoundCornersRight","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawFlags_RoundCornersTop","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_DrawFlags_RoundCornersTop\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_DrawFlags_RoundCornersTop()","eel":"int extension_api(\"ImGui_DrawFlags_RoundCornersTop\")","python":"int ImGui_DrawFlags_RoundCornersTop()","cpp":"int ImGui_DrawFlags_RoundCornersTop()"},"title":"ImGui_DrawFlags_RoundCornersTop","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawFlags_RoundCornersTopLeft","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_DrawFlags_RoundCornersTopLeft\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_DrawFlags_RoundCornersTopLeft()","eel":"int extension_api(\"ImGui_DrawFlags_RoundCornersTopLeft\")","python":"int ImGui_DrawFlags_RoundCornersTopLeft()","cpp":"int ImGui_DrawFlags_RoundCornersTopLeft()"},"title":"ImGui_DrawFlags_RoundCornersTopLeft","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding\n   top-left corner only (when rounding &gt; 0.0, we default to all corners).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawFlags_RoundCornersTopRight","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_DrawFlags_RoundCornersTopRight\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_DrawFlags_RoundCornersTopRight()","eel":"int extension_api(\"ImGui_DrawFlags_RoundCornersTopRight\")","python":"int ImGui_DrawFlags_RoundCornersTopRight()","cpp":"int ImGui_DrawFlags_RoundCornersTopRight()"},"title":"ImGui_DrawFlags_RoundCornersTopRight","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding\n   top-right corner only (when rounding &gt; 0.0, we default to all corners).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_DrawListSplitter splitter","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawListSplitter_Clear","return_values":[],"parameters":[{"identifier":"splitter","type":"ImGui_DrawListSplitter"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawListSplitter_Clear\""},{"type_name":"ImGui_DrawListSplitter","identifier":"splitter"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawListSplitter_Clear(ImGui_DrawListSplitter splitter)","eel":"extension_api(\"ImGui_DrawListSplitter_Clear\", ImGui_DrawListSplitter splitter)","python":"void ImGui_DrawListSplitter_Clear(ImGui_DrawListSplitter* splitter)","cpp":"void ImGui_DrawListSplitter_Clear(ImGui_DrawListSplitter* splitter)"},"title":"ImGui_DrawListSplitter_Clear","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_DrawListSplitter splitter","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawListSplitter_Merge","return_values":[],"parameters":[{"identifier":"splitter","type":"ImGui_DrawListSplitter"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawListSplitter_Merge\""},{"type_name":"ImGui_DrawListSplitter","identifier":"splitter"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawListSplitter_Merge(ImGui_DrawListSplitter splitter)","eel":"extension_api(\"ImGui_DrawListSplitter_Merge\", ImGui_DrawListSplitter splitter)","python":"void ImGui_DrawListSplitter_Merge(ImGui_DrawListSplitter* splitter)","cpp":"void ImGui_DrawListSplitter_Merge(ImGui_DrawListSplitter* splitter)"},"title":"ImGui_DrawListSplitter_Merge","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_DrawListSplitter splitter","description":""},{"identifier":"integer channel_idx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawListSplitter_SetCurrentChannel","return_values":[],"parameters":[{"identifier":"splitter","type":"ImGui_DrawListSplitter"},{"identifier":"channel_idx","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawListSplitter_SetCurrentChannel\""},{"type_name":"ImGui_DrawListSplitter","identifier":"splitter"},{"type_name":"int","identifier":"channel_idx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawListSplitter_SetCurrentChannel(ImGui_DrawListSplitter splitter, integer channel_idx)","eel":"extension_api(\"ImGui_DrawListSplitter_SetCurrentChannel\", ImGui_DrawListSplitter splitter, int channel_idx)","python":"void ImGui_DrawListSplitter_SetCurrentChannel(ImGui_DrawListSplitter* splitter, int channel_idx)","cpp":"void ImGui_DrawListSplitter_SetCurrentChannel(ImGui_DrawListSplitter* splitter, int channel_idx)"},"title":"ImGui_DrawListSplitter_SetCurrentChannel","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_DrawListSplitter splitter","description":""},{"identifier":"integer count","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawListSplitter_Split","return_values":[],"parameters":[{"identifier":"splitter","type":"ImGui_DrawListSplitter"},{"identifier":"count","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawListSplitter_Split\""},{"type_name":"ImGui_DrawListSplitter","identifier":"splitter"},{"type_name":"int","identifier":"count"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawListSplitter_Split(ImGui_DrawListSplitter splitter, integer count)","eel":"extension_api(\"ImGui_DrawListSplitter_Split\", ImGui_DrawListSplitter splitter, int count)","python":"void ImGui_DrawListSplitter_Split(ImGui_DrawListSplitter* splitter, int count)","cpp":"void ImGui_DrawListSplitter_Split(ImGui_DrawListSplitter* splitter, int count)"},"title":"ImGui_DrawListSplitter_Split","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":12,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""},{"identifier":"number p1_x","description":""},{"identifier":"number p1_y","description":""},{"identifier":"number p2_x","description":""},{"identifier":"number p2_y","description":""},{"identifier":"number p3_x","description":""},{"identifier":"number p3_y","description":""},{"identifier":"number p4_x","description":""},{"identifier":"number p4_y","description":""},{"identifier":"integer col_rgba","description":""},{"identifier":"number thickness","description":""},{"identifier":"optional integer num_segmentsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_AddBezierCubic","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"},{"identifier":"p1_x","type":"number"},{"identifier":"p1_y","type":"number"},{"identifier":"p2_x","type":"number"},{"identifier":"p2_y","type":"number"},{"identifier":"p3_x","type":"number"},{"identifier":"p3_y","type":"number"},{"identifier":"p4_x","type":"number"},{"identifier":"p4_y","type":"number"},{"identifier":"col_rgba","type":"integer"},{"identifier":"thickness","type":"number"},{"isOptional":true,"type":"integer","identifier":"num_segmentsIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_AddBezierCubic\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"identifier":"p1_x"},{"identifier":"p1_y"},{"identifier":"p2_x"},{"identifier":"p2_y"},{"identifier":"p3_x"},{"identifier":"p3_y"},{"identifier":"p4_x"},{"identifier":"p4_y"},{"type_name":"int","identifier":"col_rgba"},{"identifier":"thickness"},{"identifier":"num_segmentsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_AddBezierCubic(ImGui_DrawList draw_list, number p1_x, number p1_y, number p2_x, number p2_y, number p3_x, number p3_y, number p4_x, number p4_y, integer col_rgba, number thickness, optional integer num_segmentsIn)","eel":"extension_api(\"ImGui_DrawList_AddBezierCubic\", ImGui_DrawList draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, p4_x, p4_y, int col_rgba, thickness, optional int num_segmentsIn)","python":"void ImGui_DrawList_AddBezierCubic(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, int col_rgba, double thickness, int* num_segmentsInOptional)","cpp":"void ImGui_DrawList_AddBezierCubic(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, int col_rgba, double thickness, int* num_segmentsInOptional)"},"title":"ImGui_DrawList_AddBezierCubic","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Cubic Bezier (4 control points)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":10,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""},{"identifier":"number p1_x","description":""},{"identifier":"number p1_y","description":""},{"identifier":"number p2_x","description":""},{"identifier":"number p2_y","description":""},{"identifier":"number p3_x","description":""},{"identifier":"number p3_y","description":""},{"identifier":"integer col_rgba","description":""},{"identifier":"number thickness","description":""},{"identifier":"optional integer num_segmentsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_AddBezierQuadratic","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"},{"identifier":"p1_x","type":"number"},{"identifier":"p1_y","type":"number"},{"identifier":"p2_x","type":"number"},{"identifier":"p2_y","type":"number"},{"identifier":"p3_x","type":"number"},{"identifier":"p3_y","type":"number"},{"identifier":"col_rgba","type":"integer"},{"identifier":"thickness","type":"number"},{"isOptional":true,"type":"integer","identifier":"num_segmentsIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_AddBezierQuadratic\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"identifier":"p1_x"},{"identifier":"p1_y"},{"identifier":"p2_x"},{"identifier":"p2_y"},{"identifier":"p3_x"},{"identifier":"p3_y"},{"type_name":"int","identifier":"col_rgba"},{"identifier":"thickness"},{"identifier":"num_segmentsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_AddBezierQuadratic(ImGui_DrawList draw_list, number p1_x, number p1_y, number p2_x, number p2_y, number p3_x, number p3_y, integer col_rgba, number thickness, optional integer num_segmentsIn)","eel":"extension_api(\"ImGui_DrawList_AddBezierQuadratic\", ImGui_DrawList draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, int col_rgba, thickness, optional int num_segmentsIn)","python":"void ImGui_DrawList_AddBezierQuadratic(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, int col_rgba, double thickness, int* num_segmentsInOptional)","cpp":"void ImGui_DrawList_AddBezierQuadratic(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, int col_rgba, double thickness, int* num_segmentsInOptional)"},"title":"ImGui_DrawList_AddBezierQuadratic","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Quadratic Bezier (3 control points)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""},{"identifier":"number center_x","description":""},{"identifier":"number center_y","description":""},{"identifier":"number radius","description":""},{"identifier":"integer col_rgba","description":""},{"identifier":"optional integer num_segmentsIn","description":""},{"identifier":"optional number thicknessIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_AddCircle","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"},{"identifier":"center_x","type":"number"},{"identifier":"center_y","type":"number"},{"identifier":"radius","type":"number"},{"identifier":"col_rgba","type":"integer"},{"isOptional":true,"type":"integer","identifier":"num_segmentsIn"},{"isOptional":true,"type":"number","identifier":"thicknessIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_AddCircle\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"identifier":"center_x"},{"identifier":"center_y"},{"identifier":"radius"},{"type_name":"int","identifier":"col_rgba"},{"identifier":"num_segmentsIn","modifier":"optional","type_name":"int"},{"type_name":"optional","identifier":"thicknessIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_AddCircle(ImGui_DrawList draw_list, number center_x, number center_y, number radius, integer col_rgba, optional integer num_segmentsIn, optional number thicknessIn)","eel":"extension_api(\"ImGui_DrawList_AddCircle\", ImGui_DrawList draw_list, center_x, center_y, radius, int col_rgba, optional int num_segmentsIn, optional thicknessIn)","python":"void ImGui_DrawList_AddCircle(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int col_rgba, int* num_segmentsInOptional, double* thicknessInOptional)","cpp":"void ImGui_DrawList_AddCircle(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int col_rgba, int* num_segmentsInOptional, double* thicknessInOptional)"},"title":"ImGui_DrawList_AddCircle","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Use \"num_segments == 0\" to automatically calculate tessellation (preferred).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""},{"identifier":"number center_x","description":""},{"identifier":"number center_y","description":""},{"identifier":"number radius","description":""},{"identifier":"integer col_rgba","description":""},{"identifier":"optional integer num_segmentsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_AddCircleFilled","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"},{"identifier":"center_x","type":"number"},{"identifier":"center_y","type":"number"},{"identifier":"radius","type":"number"},{"identifier":"col_rgba","type":"integer"},{"isOptional":true,"type":"integer","identifier":"num_segmentsIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_AddCircleFilled\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"identifier":"center_x"},{"identifier":"center_y"},{"identifier":"radius"},{"type_name":"int","identifier":"col_rgba"},{"identifier":"num_segmentsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_AddCircleFilled(ImGui_DrawList draw_list, number center_x, number center_y, number radius, integer col_rgba, optional integer num_segmentsIn)","eel":"extension_api(\"ImGui_DrawList_AddCircleFilled\", ImGui_DrawList draw_list, center_x, center_y, radius, int col_rgba, optional int num_segmentsIn)","python":"void ImGui_DrawList_AddCircleFilled(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int col_rgba, int* num_segmentsInOptional)","cpp":"void ImGui_DrawList_AddCircleFilled(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int col_rgba, int* num_segmentsInOptional)"},"title":"ImGui_DrawList_AddCircleFilled","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Use \"num_segments == 0\" to automatically calculate tessellation (preferred).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_DrawList draw_listreaper_array points","description":""},{"identifier":"integer col_rgba","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_AddConvexPolyFilled","return_values":[],"parameters":[{"isOptional":true,"type":"ImGui_DrawList","identifier":"points"},{"identifier":"col_rgba","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_AddConvexPolyFilled\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"type_name":"reaper_array","identifier":"points"},{"type_name":"int","identifier":"col_rgba"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_AddConvexPolyFilled(ImGui_DrawList draw_listreaper_array points, integer col_rgba)","eel":"extension_api(\"ImGui_DrawList_AddConvexPolyFilled\", ImGui_DrawList draw_list, reaper_array points, int col_rgba)","python":"void ImGui_DrawList_AddConvexPolyFilled(ImGui_DrawList* draw_list, reaper_array* points, int col_rgba)","cpp":"void ImGui_DrawList_AddConvexPolyFilled(ImGui_DrawList* draw_list, reaper_array* points, int col_rgba)"},"title":"ImGui_DrawList_AddConvexPolyFilled","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Note: Anti-aliased filling requires points to be in clockwise order.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":10,"entries":[{"identifier":"ImGui_DrawList draw_listImGui_Image img","description":""},{"identifier":"number p_min_x","description":""},{"identifier":"number p_min_y","description":""},{"identifier":"number p_max_x","description":""},{"identifier":"number p_max_y","description":""},{"identifier":"optional number uv_min_xIn","description":""},{"identifier":"optional number uv_min_yIn","description":""},{"identifier":"optional number uv_max_xIn","description":""},{"identifier":"optional number uv_max_yIn","description":""},{"identifier":"optional integer col_rgbaIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_AddImage","return_values":[],"parameters":[{"isOptional":true,"type":"ImGui_DrawList","identifier":"img"},{"identifier":"p_min_x","type":"number"},{"identifier":"p_min_y","type":"number"},{"identifier":"p_max_x","type":"number"},{"identifier":"p_max_y","type":"number"},{"isOptional":true,"type":"number","identifier":"uv_min_xIn"},{"isOptional":true,"type":"number","identifier":"uv_min_yIn"},{"isOptional":true,"type":"number","identifier":"uv_max_xIn"},{"isOptional":true,"type":"number","identifier":"uv_max_yIn"},{"isOptional":true,"type":"integer","identifier":"col_rgbaIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_AddImage\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"type_name":"ImGui_Image","identifier":"img"},{"identifier":"p_min_x"},{"identifier":"p_min_y"},{"identifier":"p_max_x"},{"identifier":"p_max_y"},{"type_name":"optional","identifier":"uv_min_xIn"},{"type_name":"optional","identifier":"uv_min_yIn"},{"type_name":"optional","identifier":"uv_max_xIn"},{"type_name":"optional","identifier":"uv_max_yIn"},{"identifier":"col_rgbaIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_AddImage(ImGui_DrawList draw_listImGui_Image img, number p_min_x, number p_min_y, number p_max_x, number p_max_y, optional number uv_min_xIn, optional number uv_min_yIn, optional number uv_max_xIn, optional number uv_max_yIn, optional integer col_rgbaIn)","eel":"extension_api(\"ImGui_DrawList_AddImage\", ImGui_DrawList draw_list, ImGui_Image img, p_min_x, p_min_y, p_max_x, p_max_y, optional uv_min_xIn, optional uv_min_yIn, optional uv_max_xIn, optional uv_max_yIn, optional int col_rgbaIn)","python":"void ImGui_DrawList_AddImage(ImGui_DrawList* draw_list, ImGui_Image* img, double p_min_x, double p_min_y, double p_max_x, double p_max_y, double* uv_min_xInOptional, double* uv_min_yInOptional, double* uv_max_xInOptional, double* uv_max_yInOptional, int* col_rgbaInOptional)","cpp":"void ImGui_DrawList_AddImage(ImGui_DrawList* draw_list, ImGui_Image* img, double p_min_x, double p_min_y, double p_max_x, double p_max_y, double* uv_min_xInOptional, double* uv_min_yInOptional, double* uv_max_xInOptional, double* uv_max_yInOptional, int* col_rgbaInOptional)"},"title":"ImGui_DrawList_AddImage","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":18,"entries":[{"identifier":"ImGui_DrawList draw_listImGui_Image img","description":""},{"identifier":"number p1_x","description":""},{"identifier":"number p1_y","description":""},{"identifier":"number p2_x","description":""},{"identifier":"number p2_y","description":""},{"identifier":"number p3_x","description":""},{"identifier":"number p3_y","description":""},{"identifier":"number p4_x","description":""},{"identifier":"number p4_y","description":""},{"identifier":"optional number uv1_xIn","description":""},{"identifier":"optional number uv1_yIn","description":""},{"identifier":"optional number uv2_xIn","description":""},{"identifier":"optional number uv2_yIn","description":""},{"identifier":"optional number uv3_xIn","description":""},{"identifier":"optional number uv3_yIn","description":""},{"identifier":"optional number uv4_xIn","description":""},{"identifier":"optional number uv4_yIn","description":""},{"identifier":"optional integer col_rgbaIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_AddImageQuad","return_values":[],"parameters":[{"isOptional":true,"type":"ImGui_DrawList","identifier":"img"},{"identifier":"p1_x","type":"number"},{"identifier":"p1_y","type":"number"},{"identifier":"p2_x","type":"number"},{"identifier":"p2_y","type":"number"},{"identifier":"p3_x","type":"number"},{"identifier":"p3_y","type":"number"},{"identifier":"p4_x","type":"number"},{"identifier":"p4_y","type":"number"},{"isOptional":true,"type":"number","identifier":"uv1_xIn"},{"isOptional":true,"type":"number","identifier":"uv1_yIn"},{"isOptional":true,"type":"number","identifier":"uv2_xIn"},{"isOptional":true,"type":"number","identifier":"uv2_yIn"},{"isOptional":true,"type":"number","identifier":"uv3_xIn"},{"isOptional":true,"type":"number","identifier":"uv3_yIn"},{"isOptional":true,"type":"number","identifier":"uv4_xIn"},{"isOptional":true,"type":"number","identifier":"uv4_yIn"},{"isOptional":true,"type":"integer","identifier":"col_rgbaIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_AddImageQuad\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"type_name":"ImGui_Image","identifier":"img"},{"identifier":"p1_x"},{"identifier":"p1_y"},{"identifier":"p2_x"},{"identifier":"p2_y"},{"identifier":"p3_x"},{"identifier":"p3_y"},{"identifier":"p4_x"},{"identifier":"p4_y"},{"type_name":"optional","identifier":"uv1_xIn"},{"type_name":"optional","identifier":"uv1_yIn"},{"type_name":"optional","identifier":"uv2_xIn"},{"type_name":"optional","identifier":"uv2_yIn"},{"type_name":"optional","identifier":"uv3_xIn"},{"type_name":"optional","identifier":"uv3_yIn"},{"type_name":"optional","identifier":"uv4_xIn"},{"type_name":"optional","identifier":"uv4_yIn"},{"identifier":"col_rgbaIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_AddImageQuad(ImGui_DrawList draw_listImGui_Image img, number p1_x, number p1_y, number p2_x, number p2_y, number p3_x, number p3_y, number p4_x, number p4_y, optional number uv1_xIn, optional number uv1_yIn, optional number uv2_xIn, optional number uv2_yIn, optional number uv3_xIn, optional number uv3_yIn, optional number uv4_xIn, optional number uv4_yIn, optional integer col_rgbaIn)","eel":"extension_api(\"ImGui_DrawList_AddImageQuad\", ImGui_DrawList draw_list, ImGui_Image img, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, p4_x, p4_y, optional uv1_xIn, optional uv1_yIn, optional uv2_xIn, optional uv2_yIn, optional uv3_xIn, optional uv3_yIn, optional uv4_xIn, optional uv4_yIn, optional int col_rgbaIn)","python":"void ImGui_DrawList_AddImageQuad(ImGui_DrawList* draw_list, ImGui_Image* img, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, double* uv1_xInOptional, double* uv1_yInOptional, double* uv2_xInOptional, double* uv2_yInOptional, double* uv3_xInOptional, double* uv3_yInOptional, double* uv4_xInOptional, double* uv4_yInOptional, int* col_rgbaInOptional)","cpp":"void ImGui_DrawList_AddImageQuad(ImGui_DrawList* draw_list, ImGui_Image* img, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, double* uv1_xInOptional, double* uv1_yInOptional, double* uv2_xInOptional, double* uv2_yInOptional, double* uv3_xInOptional, double* uv3_yInOptional, double* uv4_xInOptional, double* uv4_yInOptional, int* col_rgbaInOptional)"},"title":"ImGui_DrawList_AddImageQuad","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":12,"entries":[{"identifier":"ImGui_DrawList draw_listImGui_Image img","description":""},{"identifier":"number p_min_x","description":""},{"identifier":"number p_min_y","description":""},{"identifier":"number p_max_x","description":""},{"identifier":"number p_max_y","description":""},{"identifier":"number uv_min_x","description":""},{"identifier":"number uv_min_y","description":""},{"identifier":"number uv_max_x","description":""},{"identifier":"number uv_max_y","description":""},{"identifier":"integer col_rgba","description":""},{"identifier":"number rounding","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_AddImageRounded","return_values":[],"parameters":[{"isOptional":true,"type":"ImGui_DrawList","identifier":"img"},{"identifier":"p_min_x","type":"number"},{"identifier":"p_min_y","type":"number"},{"identifier":"p_max_x","type":"number"},{"identifier":"p_max_y","type":"number"},{"identifier":"uv_min_x","type":"number"},{"identifier":"uv_min_y","type":"number"},{"identifier":"uv_max_x","type":"number"},{"identifier":"uv_max_y","type":"number"},{"identifier":"col_rgba","type":"integer"},{"identifier":"rounding","type":"number"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_AddImageRounded\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"type_name":"ImGui_Image","identifier":"img"},{"identifier":"p_min_x"},{"identifier":"p_min_y"},{"identifier":"p_max_x"},{"identifier":"p_max_y"},{"identifier":"uv_min_x"},{"identifier":"uv_min_y"},{"identifier":"uv_max_x"},{"identifier":"uv_max_y"},{"type_name":"int","identifier":"col_rgba"},{"identifier":"rounding"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_AddImageRounded(ImGui_DrawList draw_listImGui_Image img, number p_min_x, number p_min_y, number p_max_x, number p_max_y, number uv_min_x, number uv_min_y, number uv_max_x, number uv_max_y, integer col_rgba, number rounding, optional integer flagsIn)","eel":"extension_api(\"ImGui_DrawList_AddImageRounded\", ImGui_DrawList draw_list, ImGui_Image img, p_min_x, p_min_y, p_max_x, p_max_y, uv_min_x, uv_min_y, uv_max_x, uv_max_y, int col_rgba, rounding, optional int flagsIn)","python":"void ImGui_DrawList_AddImageRounded(ImGui_DrawList* draw_list, ImGui_Image* img, double p_min_x, double p_min_y, double p_max_x, double p_max_y, double uv_min_x, double uv_min_y, double uv_max_x, double uv_max_y, int col_rgba, double rounding, int* flagsInOptional)","cpp":"void ImGui_DrawList_AddImageRounded(ImGui_DrawList* draw_list, ImGui_Image* img, double p_min_x, double p_min_y, double p_max_x, double p_max_y, double uv_min_x, double uv_min_y, double uv_max_x, double uv_max_y, int col_rgba, double rounding, int* flagsInOptional)"},"title":"ImGui_DrawList_AddImageRounded","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""},{"identifier":"number p1_x","description":""},{"identifier":"number p1_y","description":""},{"identifier":"number p2_x","description":""},{"identifier":"number p2_y","description":""},{"identifier":"integer col_rgba","description":""},{"identifier":"optional number thicknessIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_AddLine","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"},{"identifier":"p1_x","type":"number"},{"identifier":"p1_y","type":"number"},{"identifier":"p2_x","type":"number"},{"identifier":"p2_y","type":"number"},{"identifier":"col_rgba","type":"integer"},{"isOptional":true,"type":"number","identifier":"thicknessIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_AddLine\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"identifier":"p1_x"},{"identifier":"p1_y"},{"identifier":"p2_x"},{"identifier":"p2_y"},{"type_name":"int","identifier":"col_rgba"},{"type_name":"optional","identifier":"thicknessIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_AddLine(ImGui_DrawList draw_list, number p1_x, number p1_y, number p2_x, number p2_y, integer col_rgba, optional number thicknessIn)","eel":"extension_api(\"ImGui_DrawList_AddLine\", ImGui_DrawList draw_list, p1_x, p1_y, p2_x, p2_y, int col_rgba, optional thicknessIn)","python":"void ImGui_DrawList_AddLine(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, int col_rgba, double* thicknessInOptional)","cpp":"void ImGui_DrawList_AddLine(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, int col_rgba, double* thicknessInOptional)"},"title":"ImGui_DrawList_AddLine","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""},{"identifier":"number center_x","description":""},{"identifier":"number center_y","description":""},{"identifier":"number radius","description":""},{"identifier":"integer col_rgba","description":""},{"identifier":"integer num_segments","description":""},{"identifier":"optional number thicknessIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_AddNgon","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"},{"identifier":"center_x","type":"number"},{"identifier":"center_y","type":"number"},{"identifier":"radius","type":"number"},{"identifier":"col_rgba","type":"integer"},{"identifier":"num_segments","type":"integer"},{"isOptional":true,"type":"number","identifier":"thicknessIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_AddNgon\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"identifier":"center_x"},{"identifier":"center_y"},{"identifier":"radius"},{"type_name":"int","identifier":"col_rgba"},{"type_name":"int","identifier":"num_segments"},{"type_name":"optional","identifier":"thicknessIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_AddNgon(ImGui_DrawList draw_list, number center_x, number center_y, number radius, integer col_rgba, integer num_segments, optional number thicknessIn)","eel":"extension_api(\"ImGui_DrawList_AddNgon\", ImGui_DrawList draw_list, center_x, center_y, radius, int col_rgba, int num_segments, optional thicknessIn)","python":"void ImGui_DrawList_AddNgon(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int col_rgba, int num_segments, double* thicknessInOptional)","cpp":"void ImGui_DrawList_AddNgon(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int col_rgba, int num_segments, double* thicknessInOptional)"},"title":"ImGui_DrawList_AddNgon","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""},{"identifier":"number center_x","description":""},{"identifier":"number center_y","description":""},{"identifier":"number radius","description":""},{"identifier":"integer col_rgba","description":""},{"identifier":"integer num_segments","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_AddNgonFilled","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"},{"identifier":"center_x","type":"number"},{"identifier":"center_y","type":"number"},{"identifier":"radius","type":"number"},{"identifier":"col_rgba","type":"integer"},{"identifier":"num_segments","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_AddNgonFilled\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"identifier":"center_x"},{"identifier":"center_y"},{"identifier":"radius"},{"type_name":"int","identifier":"col_rgba"},{"type_name":"int","identifier":"num_segments"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_AddNgonFilled(ImGui_DrawList draw_list, number center_x, number center_y, number radius, integer col_rgba, integer num_segments)","eel":"extension_api(\"ImGui_DrawList_AddNgonFilled\", ImGui_DrawList draw_list, center_x, center_y, radius, int col_rgba, int num_segments)","python":"void ImGui_DrawList_AddNgonFilled(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int col_rgba, int num_segments)","cpp":"void ImGui_DrawList_AddNgonFilled(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int col_rgba, int num_segments)"},"title":"ImGui_DrawList_AddNgonFilled","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ImGui_DrawList draw_listreaper_array points","description":""},{"identifier":"integer col_rgba","description":""},{"identifier":"integer flags","description":""},{"identifier":"number thickness","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_AddPolyline","return_values":[],"parameters":[{"isOptional":true,"type":"ImGui_DrawList","identifier":"points"},{"identifier":"col_rgba","type":"integer"},{"identifier":"flags","type":"integer"},{"identifier":"thickness","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_AddPolyline\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"type_name":"reaper_array","identifier":"points"},{"type_name":"int","identifier":"col_rgba"},{"type_name":"int","identifier":"flags"},{"identifier":"thickness"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_AddPolyline(ImGui_DrawList draw_listreaper_array points, integer col_rgba, integer flags, number thickness)","eel":"extension_api(\"ImGui_DrawList_AddPolyline\", ImGui_DrawList draw_list, reaper_array points, int col_rgba, int flags, thickness)","python":"void ImGui_DrawList_AddPolyline(ImGui_DrawList* draw_list, reaper_array* points, int col_rgba, int flags, double thickness)","cpp":"void ImGui_DrawList_AddPolyline(ImGui_DrawList* draw_list, reaper_array* points, int col_rgba, int flags, double thickness)"},"title":"ImGui_DrawList_AddPolyline","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Points is a list of x,y coordinates.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":11,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""},{"identifier":"number p1_x","description":""},{"identifier":"number p1_y","description":""},{"identifier":"number p2_x","description":""},{"identifier":"number p2_y","description":""},{"identifier":"number p3_x","description":""},{"identifier":"number p3_y","description":""},{"identifier":"number p4_x","description":""},{"identifier":"number p4_y","description":""},{"identifier":"integer col_rgba","description":""},{"identifier":"optional number thicknessIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_AddQuad","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"},{"identifier":"p1_x","type":"number"},{"identifier":"p1_y","type":"number"},{"identifier":"p2_x","type":"number"},{"identifier":"p2_y","type":"number"},{"identifier":"p3_x","type":"number"},{"identifier":"p3_y","type":"number"},{"identifier":"p4_x","type":"number"},{"identifier":"p4_y","type":"number"},{"identifier":"col_rgba","type":"integer"},{"isOptional":true,"type":"number","identifier":"thicknessIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_AddQuad\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"identifier":"p1_x"},{"identifier":"p1_y"},{"identifier":"p2_x"},{"identifier":"p2_y"},{"identifier":"p3_x"},{"identifier":"p3_y"},{"identifier":"p4_x"},{"identifier":"p4_y"},{"type_name":"int","identifier":"col_rgba"},{"type_name":"optional","identifier":"thicknessIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_AddQuad(ImGui_DrawList draw_list, number p1_x, number p1_y, number p2_x, number p2_y, number p3_x, number p3_y, number p4_x, number p4_y, integer col_rgba, optional number thicknessIn)","eel":"extension_api(\"ImGui_DrawList_AddQuad\", ImGui_DrawList draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, p4_x, p4_y, int col_rgba, optional thicknessIn)","python":"void ImGui_DrawList_AddQuad(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, int col_rgba, double* thicknessInOptional)","cpp":"void ImGui_DrawList_AddQuad(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, int col_rgba, double* thicknessInOptional)"},"title":"ImGui_DrawList_AddQuad","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":10,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""},{"identifier":"number p1_x","description":""},{"identifier":"number p1_y","description":""},{"identifier":"number p2_x","description":""},{"identifier":"number p2_y","description":""},{"identifier":"number p3_x","description":""},{"identifier":"number p3_y","description":""},{"identifier":"number p4_x","description":""},{"identifier":"number p4_y","description":""},{"identifier":"integer col_rgba","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_AddQuadFilled","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"},{"identifier":"p1_x","type":"number"},{"identifier":"p1_y","type":"number"},{"identifier":"p2_x","type":"number"},{"identifier":"p2_y","type":"number"},{"identifier":"p3_x","type":"number"},{"identifier":"p3_y","type":"number"},{"identifier":"p4_x","type":"number"},{"identifier":"p4_y","type":"number"},{"identifier":"col_rgba","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_AddQuadFilled\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"identifier":"p1_x"},{"identifier":"p1_y"},{"identifier":"p2_x"},{"identifier":"p2_y"},{"identifier":"p3_x"},{"identifier":"p3_y"},{"identifier":"p4_x"},{"identifier":"p4_y"},{"type_name":"int","identifier":"col_rgba"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_AddQuadFilled(ImGui_DrawList draw_list, number p1_x, number p1_y, number p2_x, number p2_y, number p3_x, number p3_y, number p4_x, number p4_y, integer col_rgba)","eel":"extension_api(\"ImGui_DrawList_AddQuadFilled\", ImGui_DrawList draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, p4_x, p4_y, int col_rgba)","python":"void ImGui_DrawList_AddQuadFilled(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, int col_rgba)","cpp":"void ImGui_DrawList_AddQuadFilled(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, int col_rgba)"},"title":"ImGui_DrawList_AddQuadFilled","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":9,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""},{"identifier":"number p_min_x","description":""},{"identifier":"number p_min_y","description":""},{"identifier":"number p_max_x","description":""},{"identifier":"number p_max_y","description":""},{"identifier":"integer col_rgba","description":""},{"identifier":"optional number roundingIn","description":""},{"identifier":"optional integer flagsIn","description":""},{"identifier":"optional number thicknessIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_AddRect","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"},{"identifier":"p_min_x","type":"number"},{"identifier":"p_min_y","type":"number"},{"identifier":"p_max_x","type":"number"},{"identifier":"p_max_y","type":"number"},{"identifier":"col_rgba","type":"integer"},{"isOptional":true,"type":"number","identifier":"roundingIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"},{"isOptional":true,"type":"number","identifier":"thicknessIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_AddRect\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"identifier":"p_min_x"},{"identifier":"p_min_y"},{"identifier":"p_max_x"},{"identifier":"p_max_y"},{"type_name":"int","identifier":"col_rgba"},{"type_name":"optional","identifier":"roundingIn"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"},{"type_name":"optional","identifier":"thicknessIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_AddRect(ImGui_DrawList draw_list, number p_min_x, number p_min_y, number p_max_x, number p_max_y, integer col_rgba, optional number roundingIn, optional integer flagsIn, optional number thicknessIn)","eel":"extension_api(\"ImGui_DrawList_AddRect\", ImGui_DrawList draw_list, p_min_x, p_min_y, p_max_x, p_max_y, int col_rgba, optional roundingIn, optional int flagsIn, optional thicknessIn)","python":"void ImGui_DrawList_AddRect(ImGui_DrawList* draw_list, double p_min_x, double p_min_y, double p_max_x, double p_max_y, int col_rgba, double* roundingInOptional, int* flagsInOptional, double* thicknessInOptional)","cpp":"void ImGui_DrawList_AddRect(ImGui_DrawList* draw_list, double p_min_x, double p_min_y, double p_max_x, double p_max_y, int col_rgba, double* roundingInOptional, int* flagsInOptional, double* thicknessInOptional)"},"title":"ImGui_DrawList_AddRect","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""},{"identifier":"number p_min_x","description":""},{"identifier":"number p_min_y","description":""},{"identifier":"number p_max_x","description":""},{"identifier":"number p_max_y","description":""},{"identifier":"integer col_rgba","description":""},{"identifier":"optional number roundingIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_AddRectFilled","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"},{"identifier":"p_min_x","type":"number"},{"identifier":"p_min_y","type":"number"},{"identifier":"p_max_x","type":"number"},{"identifier":"p_max_y","type":"number"},{"identifier":"col_rgba","type":"integer"},{"isOptional":true,"type":"number","identifier":"roundingIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_AddRectFilled\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"identifier":"p_min_x"},{"identifier":"p_min_y"},{"identifier":"p_max_x"},{"identifier":"p_max_y"},{"type_name":"int","identifier":"col_rgba"},{"type_name":"optional","identifier":"roundingIn"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_AddRectFilled(ImGui_DrawList draw_list, number p_min_x, number p_min_y, number p_max_x, number p_max_y, integer col_rgba, optional number roundingIn, optional integer flagsIn)","eel":"extension_api(\"ImGui_DrawList_AddRectFilled\", ImGui_DrawList draw_list, p_min_x, p_min_y, p_max_x, p_max_y, int col_rgba, optional roundingIn, optional int flagsIn)","python":"void ImGui_DrawList_AddRectFilled(ImGui_DrawList* draw_list, double p_min_x, double p_min_y, double p_max_x, double p_max_y, int col_rgba, double* roundingInOptional, int* flagsInOptional)","cpp":"void ImGui_DrawList_AddRectFilled(ImGui_DrawList* draw_list, double p_min_x, double p_min_y, double p_max_x, double p_max_y, int col_rgba, double* roundingInOptional, int* flagsInOptional)"},"title":"ImGui_DrawList_AddRectFilled","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":9,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""},{"identifier":"number p_min_x","description":""},{"identifier":"number p_min_y","description":""},{"identifier":"number p_max_x","description":""},{"identifier":"number p_max_y","description":""},{"identifier":"integer col_upr_left","description":""},{"identifier":"integer col_upr_right","description":""},{"identifier":"integer col_bot_right","description":""},{"identifier":"integer col_bot_left","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_AddRectFilledMultiColor","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"},{"identifier":"p_min_x","type":"number"},{"identifier":"p_min_y","type":"number"},{"identifier":"p_max_x","type":"number"},{"identifier":"p_max_y","type":"number"},{"identifier":"col_upr_left","type":"integer"},{"identifier":"col_upr_right","type":"integer"},{"identifier":"col_bot_right","type":"integer"},{"identifier":"col_bot_left","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_AddRectFilledMultiColor\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"identifier":"p_min_x"},{"identifier":"p_min_y"},{"identifier":"p_max_x"},{"identifier":"p_max_y"},{"type_name":"int","identifier":"col_upr_left"},{"type_name":"int","identifier":"col_upr_right"},{"type_name":"int","identifier":"col_bot_right"},{"type_name":"int","identifier":"col_bot_left"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_AddRectFilledMultiColor(ImGui_DrawList draw_list, number p_min_x, number p_min_y, number p_max_x, number p_max_y, integer col_upr_left, integer col_upr_right, integer col_bot_right, integer col_bot_left)","eel":"extension_api(\"ImGui_DrawList_AddRectFilledMultiColor\", ImGui_DrawList draw_list, p_min_x, p_min_y, p_max_x, p_max_y, int col_upr_left, int col_upr_right, int col_bot_right, int col_bot_left)","python":"void ImGui_DrawList_AddRectFilledMultiColor(ImGui_DrawList* draw_list, double p_min_x, double p_min_y, double p_max_x, double p_max_y, int col_upr_left, int col_upr_right, int col_bot_right, int col_bot_left)","cpp":"void ImGui_DrawList_AddRectFilledMultiColor(ImGui_DrawList* draw_list, double p_min_x, double p_min_y, double p_max_x, double p_max_y, int col_upr_left, int col_upr_right, int col_bot_right, int col_bot_left)"},"title":"ImGui_DrawList_AddRectFilledMultiColor","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""},{"identifier":"number x","description":""},{"identifier":"number y","description":""},{"identifier":"integer col_rgba","description":""},{"identifier":"string text","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_AddText","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"},{"identifier":"x","type":"number"},{"identifier":"y","type":"number"},{"identifier":"col_rgba","type":"integer"},{"identifier":"text","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_AddText\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"identifier":"x"},{"identifier":"y"},{"type_name":"int","identifier":"col_rgba"},{"identifier":"\"text\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_AddText(ImGui_DrawList draw_list, number x, number y, integer col_rgba, string text)","eel":"extension_api(\"ImGui_DrawList_AddText\", ImGui_DrawList draw_list, x, y, int col_rgba, \"text\")","python":"void ImGui_DrawList_AddText(ImGui_DrawList* draw_list, double x, double y, int col_rgba, const char* text)","cpp":"void ImGui_DrawList_AddText(ImGui_DrawList* draw_list, double x, double y, int col_rgba, const char* text)"},"title":"ImGui_DrawList_AddText","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":11,"entries":[{"identifier":"ImGui_DrawList draw_listImGui_Font font","description":""},{"identifier":"number font_size","description":""},{"identifier":"number pos_x","description":""},{"identifier":"number pos_y","description":""},{"identifier":"integer col_rgba","description":""},{"identifier":"string text","description":""},{"identifier":"optional number wrap_widthIn","description":""},{"identifier":"optional number cpu_fine_clip_rect_xIn","description":""},{"identifier":"optional number cpu_fine_clip_rect_yIn","description":""},{"identifier":"optional number cpu_fine_clip_rect_wIn","description":""},{"identifier":"optional number cpu_fine_clip_rect_hIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_AddTextEx","return_values":[],"parameters":[{"isOptional":true,"type":"ImGui_DrawList","identifier":"font"},{"identifier":"font_size","type":"number"},{"identifier":"pos_x","type":"number"},{"identifier":"pos_y","type":"number"},{"identifier":"col_rgba","type":"integer"},{"identifier":"text","type":"string"},{"isOptional":true,"type":"number","identifier":"wrap_widthIn"},{"isOptional":true,"type":"number","identifier":"cpu_fine_clip_rect_xIn"},{"isOptional":true,"type":"number","identifier":"cpu_fine_clip_rect_yIn"},{"isOptional":true,"type":"number","identifier":"cpu_fine_clip_rect_wIn"},{"isOptional":true,"type":"number","identifier":"cpu_fine_clip_rect_hIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_AddTextEx\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"type_name":"ImGui_Font","identifier":"font"},{"identifier":"font_size"},{"identifier":"pos_x"},{"identifier":"pos_y"},{"type_name":"int","identifier":"col_rgba"},{"identifier":"\"text\""},{"type_name":"optional","identifier":"wrap_widthIn"},{"type_name":"optional","identifier":"cpu_fine_clip_rect_xIn"},{"type_name":"optional","identifier":"cpu_fine_clip_rect_yIn"},{"type_name":"optional","identifier":"cpu_fine_clip_rect_wIn"},{"type_name":"optional","identifier":"cpu_fine_clip_rect_hIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_AddTextEx(ImGui_DrawList draw_listImGui_Font font, number font_size, number pos_x, number pos_y, integer col_rgba, string text, optional number wrap_widthIn, optional number cpu_fine_clip_rect_xIn, optional number cpu_fine_clip_rect_yIn, optional number cpu_fine_clip_rect_wIn, optional number cpu_fine_clip_rect_hIn)","eel":"extension_api(\"ImGui_DrawList_AddTextEx\", ImGui_DrawList draw_list, ImGui_Font font, font_size, pos_x, pos_y, int col_rgba, \"text\", optional wrap_widthIn, optional cpu_fine_clip_rect_xIn, optional cpu_fine_clip_rect_yIn, optional cpu_fine_clip_rect_wIn, optional cpu_fine_clip_rect_hIn)","python":"void ImGui_DrawList_AddTextEx(ImGui_DrawList* draw_list, ImGui_Font* font, double font_size, double pos_x, double pos_y, int col_rgba, const char* text, double* wrap_widthInOptional, double* cpu_fine_clip_rect_xInOptional, double* cpu_fine_clip_rect_yInOptional, double* cpu_fine_clip_rect_wInOptional, double* cpu_fine_clip_rect_hInOptional)","cpp":"void ImGui_DrawList_AddTextEx(ImGui_DrawList* draw_list, ImGui_Font* font, double font_size, double pos_x, double pos_y, int col_rgba, const char* text, double* wrap_widthInOptional, double* cpu_fine_clip_rect_xInOptional, double* cpu_fine_clip_rect_yInOptional, double* cpu_fine_clip_rect_wInOptional, double* cpu_fine_clip_rect_hInOptional)"},"title":"ImGui_DrawList_AddTextEx","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"The last pushed font is used if font is nil.\nThe size of the last pushed font is used if font_size is 0.\ncpu_fine_clip_rect_* only takes effect if all four are non-nil.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":9,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""},{"identifier":"number p1_x","description":""},{"identifier":"number p1_y","description":""},{"identifier":"number p2_x","description":""},{"identifier":"number p2_y","description":""},{"identifier":"number p3_x","description":""},{"identifier":"number p3_y","description":""},{"identifier":"integer col_rgba","description":""},{"identifier":"optional number thicknessIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_AddTriangle","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"},{"identifier":"p1_x","type":"number"},{"identifier":"p1_y","type":"number"},{"identifier":"p2_x","type":"number"},{"identifier":"p2_y","type":"number"},{"identifier":"p3_x","type":"number"},{"identifier":"p3_y","type":"number"},{"identifier":"col_rgba","type":"integer"},{"isOptional":true,"type":"number","identifier":"thicknessIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_AddTriangle\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"identifier":"p1_x"},{"identifier":"p1_y"},{"identifier":"p2_x"},{"identifier":"p2_y"},{"identifier":"p3_x"},{"identifier":"p3_y"},{"type_name":"int","identifier":"col_rgba"},{"type_name":"optional","identifier":"thicknessIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_AddTriangle(ImGui_DrawList draw_list, number p1_x, number p1_y, number p2_x, number p2_y, number p3_x, number p3_y, integer col_rgba, optional number thicknessIn)","eel":"extension_api(\"ImGui_DrawList_AddTriangle\", ImGui_DrawList draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, int col_rgba, optional thicknessIn)","python":"void ImGui_DrawList_AddTriangle(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, int col_rgba, double* thicknessInOptional)","cpp":"void ImGui_DrawList_AddTriangle(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, int col_rgba, double* thicknessInOptional)"},"title":"ImGui_DrawList_AddTriangle","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""},{"identifier":"number p1_x","description":""},{"identifier":"number p1_y","description":""},{"identifier":"number p2_x","description":""},{"identifier":"number p2_y","description":""},{"identifier":"number p3_x","description":""},{"identifier":"number p3_y","description":""},{"identifier":"integer col_rgba","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_AddTriangleFilled","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"},{"identifier":"p1_x","type":"number"},{"identifier":"p1_y","type":"number"},{"identifier":"p2_x","type":"number"},{"identifier":"p2_y","type":"number"},{"identifier":"p3_x","type":"number"},{"identifier":"p3_y","type":"number"},{"identifier":"col_rgba","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_AddTriangleFilled\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"identifier":"p1_x"},{"identifier":"p1_y"},{"identifier":"p2_x"},{"identifier":"p2_y"},{"identifier":"p3_x"},{"identifier":"p3_y"},{"type_name":"int","identifier":"col_rgba"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_AddTriangleFilled(ImGui_DrawList draw_list, number p1_x, number p1_y, number p2_x, number p2_y, number p3_x, number p3_y, integer col_rgba)","eel":"extension_api(\"ImGui_DrawList_AddTriangleFilled\", ImGui_DrawList draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, int col_rgba)","python":"void ImGui_DrawList_AddTriangleFilled(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, int col_rgba)","cpp":"void ImGui_DrawList_AddTriangleFilled(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, int col_rgba)"},"title":"ImGui_DrawList_AddTriangleFilled","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""},{"identifier":"number center_x","description":""},{"identifier":"number center_y","description":""},{"identifier":"number radius","description":""},{"identifier":"number a_min","description":""},{"identifier":"number a_max","description":""},{"identifier":"optional integer num_segmentsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_PathArcTo","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"},{"identifier":"center_x","type":"number"},{"identifier":"center_y","type":"number"},{"identifier":"radius","type":"number"},{"identifier":"a_min","type":"number"},{"identifier":"a_max","type":"number"},{"isOptional":true,"type":"integer","identifier":"num_segmentsIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_PathArcTo\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"identifier":"center_x"},{"identifier":"center_y"},{"identifier":"radius"},{"identifier":"a_min"},{"identifier":"a_max"},{"identifier":"num_segmentsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_PathArcTo(ImGui_DrawList draw_list, number center_x, number center_y, number radius, number a_min, number a_max, optional integer num_segmentsIn)","eel":"extension_api(\"ImGui_DrawList_PathArcTo\", ImGui_DrawList draw_list, center_x, center_y, radius, a_min, a_max, optional int num_segmentsIn)","python":"void ImGui_DrawList_PathArcTo(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, double a_min, double a_max, int* num_segmentsInOptional)","cpp":"void ImGui_DrawList_PathArcTo(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, double a_min, double a_max, int* num_segmentsInOptional)"},"title":"ImGui_DrawList_PathArcTo","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""},{"identifier":"number center_x","description":""},{"identifier":"number center_y","description":""},{"identifier":"number radius","description":""},{"identifier":"integer a_min_of_12","description":""},{"identifier":"integer a_max_of_12","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_PathArcToFast","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"},{"identifier":"center_x","type":"number"},{"identifier":"center_y","type":"number"},{"identifier":"radius","type":"number"},{"identifier":"a_min_of_12","type":"integer"},{"identifier":"a_max_of_12","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_PathArcToFast\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"identifier":"center_x"},{"identifier":"center_y"},{"identifier":"radius"},{"type_name":"int","identifier":"a_min_of_12"},{"type_name":"int","identifier":"a_max_of_12"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_PathArcToFast(ImGui_DrawList draw_list, number center_x, number center_y, number radius, integer a_min_of_12, integer a_max_of_12)","eel":"extension_api(\"ImGui_DrawList_PathArcToFast\", ImGui_DrawList draw_list, center_x, center_y, radius, int a_min_of_12, int a_max_of_12)","python":"void ImGui_DrawList_PathArcToFast(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int a_min_of_12, int a_max_of_12)","cpp":"void ImGui_DrawList_PathArcToFast(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int a_min_of_12, int a_max_of_12)"},"title":"ImGui_DrawList_PathArcToFast","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Use precomputed angles for a 12 steps circle.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""},{"identifier":"number p2_x","description":""},{"identifier":"number p2_y","description":""},{"identifier":"number p3_x","description":""},{"identifier":"number p3_y","description":""},{"identifier":"number p4_x","description":""},{"identifier":"number p4_y","description":""},{"identifier":"optional integer num_segmentsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_PathBezierCubicCurveTo","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"},{"identifier":"p2_x","type":"number"},{"identifier":"p2_y","type":"number"},{"identifier":"p3_x","type":"number"},{"identifier":"p3_y","type":"number"},{"identifier":"p4_x","type":"number"},{"identifier":"p4_y","type":"number"},{"isOptional":true,"type":"integer","identifier":"num_segmentsIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_PathBezierCubicCurveTo\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"identifier":"p2_x"},{"identifier":"p2_y"},{"identifier":"p3_x"},{"identifier":"p3_y"},{"identifier":"p4_x"},{"identifier":"p4_y"},{"identifier":"num_segmentsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_PathBezierCubicCurveTo(ImGui_DrawList draw_list, number p2_x, number p2_y, number p3_x, number p3_y, number p4_x, number p4_y, optional integer num_segmentsIn)","eel":"extension_api(\"ImGui_DrawList_PathBezierCubicCurveTo\", ImGui_DrawList draw_list, p2_x, p2_y, p3_x, p3_y, p4_x, p4_y, optional int num_segmentsIn)","python":"void ImGui_DrawList_PathBezierCubicCurveTo(ImGui_DrawList* draw_list, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, int* num_segmentsInOptional)","cpp":"void ImGui_DrawList_PathBezierCubicCurveTo(ImGui_DrawList* draw_list, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, int* num_segmentsInOptional)"},"title":"ImGui_DrawList_PathBezierCubicCurveTo","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Cubic Bezier (4 control points)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""},{"identifier":"number p2_x","description":""},{"identifier":"number p2_y","description":""},{"identifier":"number p3_x","description":""},{"identifier":"number p3_y","description":""},{"identifier":"optional integer num_segmentsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_PathBezierQuadraticCurveTo","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"},{"identifier":"p2_x","type":"number"},{"identifier":"p2_y","type":"number"},{"identifier":"p3_x","type":"number"},{"identifier":"p3_y","type":"number"},{"isOptional":true,"type":"integer","identifier":"num_segmentsIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_PathBezierQuadraticCurveTo\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"identifier":"p2_x"},{"identifier":"p2_y"},{"identifier":"p3_x"},{"identifier":"p3_y"},{"identifier":"num_segmentsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_PathBezierQuadraticCurveTo(ImGui_DrawList draw_list, number p2_x, number p2_y, number p3_x, number p3_y, optional integer num_segmentsIn)","eel":"extension_api(\"ImGui_DrawList_PathBezierQuadraticCurveTo\", ImGui_DrawList draw_list, p2_x, p2_y, p3_x, p3_y, optional int num_segmentsIn)","python":"void ImGui_DrawList_PathBezierQuadraticCurveTo(ImGui_DrawList* draw_list, double p2_x, double p2_y, double p3_x, double p3_y, int* num_segmentsInOptional)","cpp":"void ImGui_DrawList_PathBezierQuadraticCurveTo(ImGui_DrawList* draw_list, double p2_x, double p2_y, double p3_x, double p3_y, int* num_segmentsInOptional)"},"title":"ImGui_DrawList_PathBezierQuadraticCurveTo","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Quadratic Bezier (3 control points)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_PathClear","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_PathClear\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_PathClear(ImGui_DrawList draw_list)","eel":"extension_api(\"ImGui_DrawList_PathClear\", ImGui_DrawList draw_list)","python":"void ImGui_DrawList_PathClear(ImGui_DrawList* draw_list)","cpp":"void ImGui_DrawList_PathClear(ImGui_DrawList* draw_list)"},"title":"ImGui_DrawList_PathClear","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""},{"identifier":"integer col_rgba","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_PathFillConvex","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"},{"identifier":"col_rgba","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_PathFillConvex\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"type_name":"int","identifier":"col_rgba"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_PathFillConvex(ImGui_DrawList draw_list, integer col_rgba)","eel":"extension_api(\"ImGui_DrawList_PathFillConvex\", ImGui_DrawList draw_list, int col_rgba)","python":"void ImGui_DrawList_PathFillConvex(ImGui_DrawList* draw_list, int col_rgba)","cpp":"void ImGui_DrawList_PathFillConvex(ImGui_DrawList* draw_list, int col_rgba)"},"title":"ImGui_DrawList_PathFillConvex","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Note: Anti-aliased filling requires points to be in clockwise order.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""},{"identifier":"number pos_x","description":""},{"identifier":"number pos_y","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_PathLineTo","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"},{"identifier":"pos_x","type":"number"},{"identifier":"pos_y","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_PathLineTo\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"identifier":"pos_x"},{"identifier":"pos_y"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_PathLineTo(ImGui_DrawList draw_list, number pos_x, number pos_y)","eel":"extension_api(\"ImGui_DrawList_PathLineTo\", ImGui_DrawList draw_list, pos_x, pos_y)","python":"void ImGui_DrawList_PathLineTo(ImGui_DrawList* draw_list, double pos_x, double pos_y)","cpp":"void ImGui_DrawList_PathLineTo(ImGui_DrawList* draw_list, double pos_x, double pos_y)"},"title":"ImGui_DrawList_PathLineTo","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""},{"identifier":"number rect_min_x","description":""},{"identifier":"number rect_min_y","description":""},{"identifier":"number rect_max_x","description":""},{"identifier":"number rect_max_y","description":""},{"identifier":"optional number roundingIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_PathRect","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"},{"identifier":"rect_min_x","type":"number"},{"identifier":"rect_min_y","type":"number"},{"identifier":"rect_max_x","type":"number"},{"identifier":"rect_max_y","type":"number"},{"isOptional":true,"type":"number","identifier":"roundingIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_PathRect\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"identifier":"rect_min_x"},{"identifier":"rect_min_y"},{"identifier":"rect_max_x"},{"identifier":"rect_max_y"},{"type_name":"optional","identifier":"roundingIn"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_PathRect(ImGui_DrawList draw_list, number rect_min_x, number rect_min_y, number rect_max_x, number rect_max_y, optional number roundingIn, optional integer flagsIn)","eel":"extension_api(\"ImGui_DrawList_PathRect\", ImGui_DrawList draw_list, rect_min_x, rect_min_y, rect_max_x, rect_max_y, optional roundingIn, optional int flagsIn)","python":"void ImGui_DrawList_PathRect(ImGui_DrawList* draw_list, double rect_min_x, double rect_min_y, double rect_max_x, double rect_max_y, double* roundingInOptional, int* flagsInOptional)","cpp":"void ImGui_DrawList_PathRect(ImGui_DrawList* draw_list, double rect_min_x, double rect_min_y, double rect_max_x, double rect_max_y, double* roundingInOptional, int* flagsInOptional)"},"title":"ImGui_DrawList_PathRect","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""},{"identifier":"integer col_rgba","description":""},{"identifier":"optional integer flagsIn","description":""},{"identifier":"optional number thicknessIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_PathStroke","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"},{"identifier":"col_rgba","type":"integer"},{"isOptional":true,"type":"integer","identifier":"flagsIn"},{"isOptional":true,"type":"number","identifier":"thicknessIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_PathStroke\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"type_name":"int","identifier":"col_rgba"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"},{"type_name":"optional","identifier":"thicknessIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_PathStroke(ImGui_DrawList draw_list, integer col_rgba, optional integer flagsIn, optional number thicknessIn)","eel":"extension_api(\"ImGui_DrawList_PathStroke\", ImGui_DrawList draw_list, int col_rgba, optional int flagsIn, optional thicknessIn)","python":"void ImGui_DrawList_PathStroke(ImGui_DrawList* draw_list, int col_rgba, int* flagsInOptional, double* thicknessInOptional)","cpp":"void ImGui_DrawList_PathStroke(ImGui_DrawList* draw_list, int col_rgba, int* flagsInOptional, double* thicknessInOptional)"},"title":"ImGui_DrawList_PathStroke","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_PopClipRect","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_PopClipRect\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_PopClipRect(ImGui_DrawList draw_list)","eel":"extension_api(\"ImGui_DrawList_PopClipRect\", ImGui_DrawList draw_list)","python":"void ImGui_DrawList_PopClipRect(ImGui_DrawList* draw_list)","cpp":"void ImGui_DrawList_PopClipRect(ImGui_DrawList* draw_list)"},"title":"ImGui_DrawList_PopClipRect","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"See DrawList_PushClipRect","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""},{"identifier":"number clip_rect_min_x","description":""},{"identifier":"number clip_rect_min_y","description":""},{"identifier":"number clip_rect_max_x","description":""},{"identifier":"number clip_rect_max_y","description":""},{"identifier":"optional boolean intersect_with_current_clip_rectIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_PushClipRect","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"},{"identifier":"clip_rect_min_x","type":"number"},{"identifier":"clip_rect_min_y","type":"number"},{"identifier":"clip_rect_max_x","type":"number"},{"identifier":"clip_rect_max_y","type":"number"},{"isOptional":true,"type":"boolean","identifier":"intersect_with_current_clip_rectIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_PushClipRect\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"},{"identifier":"clip_rect_min_x"},{"identifier":"clip_rect_min_y"},{"identifier":"clip_rect_max_x"},{"identifier":"clip_rect_max_y"},{"identifier":"intersect_with_current_clip_rectIn","modifier":"optional","type_name":"bool"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_PushClipRect(ImGui_DrawList draw_list, number clip_rect_min_x, number clip_rect_min_y, number clip_rect_max_x, number clip_rect_max_y, optional boolean intersect_with_current_clip_rectIn)","eel":"extension_api(\"ImGui_DrawList_PushClipRect\", ImGui_DrawList draw_list, clip_rect_min_x, clip_rect_min_y, clip_rect_max_x, clip_rect_max_y, optional bool intersect_with_current_clip_rectIn)","python":"void ImGui_DrawList_PushClipRect(ImGui_DrawList* draw_list, double clip_rect_min_x, double clip_rect_min_y, double clip_rect_max_x, double clip_rect_max_y, bool* intersect_with_current_clip_rectInOptional)","cpp":"void ImGui_DrawList_PushClipRect(ImGui_DrawList* draw_list, double clip_rect_min_x, double clip_rect_min_y, double clip_rect_max_x, double clip_rect_max_y, bool* intersect_with_current_clip_rectInOptional)"},"title":"ImGui_DrawList_PushClipRect","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Render-level scissoring. Prefer using higher-level PushClipRect to affect\nlogic (hit-testing and widget culling).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_DrawList draw_list","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_DrawList_PushClipRectFullScreen","return_values":[],"parameters":[{"identifier":"draw_list","type":"ImGui_DrawList"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_DrawList_PushClipRectFullScreen\""},{"type_name":"ImGui_DrawList","identifier":"draw_list"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_DrawList_PushClipRectFullScreen(ImGui_DrawList draw_list)","eel":"extension_api(\"ImGui_DrawList_PushClipRectFullScreen\", ImGui_DrawList draw_list)","python":"void ImGui_DrawList_PushClipRectFullScreen(ImGui_DrawList* draw_list)","cpp":"void ImGui_DrawList_PushClipRectFullScreen(ImGui_DrawList* draw_list)"},"title":"ImGui_DrawList_PushClipRectFullScreen","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"number size_w","description":""},{"identifier":"number size_h","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Dummy","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"size_w","type":"number"},{"identifier":"size_h","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_Dummy\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"size_w"},{"identifier":"size_h"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_Dummy(ImGui_Context ctx, number size_w, number size_h)","eel":"extension_api(\"ImGui_Dummy\", ImGui_Context ctx, size_w, size_h)","python":"void ImGui_Dummy(ImGui_Context* ctx, double size_w, double size_h)","cpp":"void ImGui_Dummy(ImGui_Context* ctx, double size_w, double size_h)"},"title":"ImGui_Dummy","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Add a dummy item of given size. unlike InvisibleButton, Dummy() won't take the\nmouse click or be navigable into.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_End","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_End\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_End(ImGui_Context ctx)","eel":"extension_api(\"ImGui_End\", ImGui_Context ctx)","python":"void ImGui_End(ImGui_Context* ctx)","cpp":"void ImGui_End(ImGui_Context* ctx)"},"title":"ImGui_End","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Pop window from the stack. See Begin.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_EndChild","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_EndChild\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_EndChild(ImGui_Context ctx)","eel":"extension_api(\"ImGui_EndChild\", ImGui_Context ctx)","python":"void ImGui_EndChild(ImGui_Context* ctx)","cpp":"void ImGui_EndChild(ImGui_Context* ctx)"},"title":"ImGui_EndChild","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"See BeginChild.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_EndChildFrame","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_EndChildFrame\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_EndChildFrame(ImGui_Context ctx)","eel":"extension_api(\"ImGui_EndChildFrame\", ImGui_Context ctx)","python":"void ImGui_EndChildFrame(ImGui_Context* ctx)","cpp":"void ImGui_EndChildFrame(ImGui_Context* ctx)"},"title":"ImGui_EndChildFrame","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"See BeginChildFrame.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_EndCombo","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_EndCombo\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_EndCombo(ImGui_Context ctx)","eel":"extension_api(\"ImGui_EndCombo\", ImGui_Context ctx)","python":"void ImGui_EndCombo(ImGui_Context* ctx)","cpp":"void ImGui_EndCombo(ImGui_Context* ctx)"},"title":"ImGui_EndCombo","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Only call EndCombo() if BeginCombo returns true!","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_EndDisabled","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_EndDisabled\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_EndDisabled(ImGui_Context ctx)","eel":"extension_api(\"ImGui_EndDisabled\", ImGui_Context ctx)","python":"void ImGui_EndDisabled(ImGui_Context* ctx)","cpp":"void ImGui_EndDisabled(ImGui_Context* ctx)"},"title":"ImGui_EndDisabled","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"See BeginDisabled.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_EndDragDropSource","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_EndDragDropSource\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_EndDragDropSource(ImGui_Context ctx)","eel":"extension_api(\"ImGui_EndDragDropSource\", ImGui_Context ctx)","python":"void ImGui_EndDragDropSource(ImGui_Context* ctx)","cpp":"void ImGui_EndDragDropSource(ImGui_Context* ctx)"},"title":"ImGui_EndDragDropSource","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Only call EndDragDropSource() if BeginDragDropSource returns true!","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_EndDragDropTarget","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_EndDragDropTarget\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_EndDragDropTarget(ImGui_Context ctx)","eel":"extension_api(\"ImGui_EndDragDropTarget\", ImGui_Context ctx)","python":"void ImGui_EndDragDropTarget(ImGui_Context* ctx)","cpp":"void ImGui_EndDragDropTarget(ImGui_Context* ctx)"},"title":"ImGui_EndDragDropTarget","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Only call EndDragDropTarget() if BeginDragDropTarget returns true!","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_EndGroup","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_EndGroup\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_EndGroup(ImGui_Context ctx)","eel":"extension_api(\"ImGui_EndGroup\", ImGui_Context ctx)","python":"void ImGui_EndGroup(ImGui_Context* ctx)","cpp":"void ImGui_EndGroup(ImGui_Context* ctx)"},"title":"ImGui_EndGroup","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Unlock horizontal starting position + capture the whole group bounding box\ninto one \"item\" (so you can use IsItemHovered or layout primitives such as\nSameLine on whole group, etc.).\n\nSee BeginGroup.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_EndListBox","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_EndListBox\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_EndListBox(ImGui_Context ctx)","eel":"extension_api(\"ImGui_EndListBox\", ImGui_Context ctx)","python":"void ImGui_EndListBox(ImGui_Context* ctx)","cpp":"void ImGui_EndListBox(ImGui_Context* ctx)"},"title":"ImGui_EndListBox","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Only call EndListBox() if BeginListBox returned true!","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_EndMenu","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_EndMenu\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_EndMenu(ImGui_Context ctx)","eel":"extension_api(\"ImGui_EndMenu\", ImGui_Context ctx)","python":"void ImGui_EndMenu(ImGui_Context* ctx)","cpp":"void ImGui_EndMenu(ImGui_Context* ctx)"},"title":"ImGui_EndMenu","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Only call EndMenu() if BeginMenu returns true!","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_EndMenuBar","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_EndMenuBar\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_EndMenuBar(ImGui_Context ctx)","eel":"extension_api(\"ImGui_EndMenuBar\", ImGui_Context ctx)","python":"void ImGui_EndMenuBar(ImGui_Context* ctx)","cpp":"void ImGui_EndMenuBar(ImGui_Context* ctx)"},"title":"ImGui_EndMenuBar","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Only call EndMenuBar if BeginMenuBar returns true!","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_EndPopup","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_EndPopup\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_EndPopup(ImGui_Context ctx)","eel":"extension_api(\"ImGui_EndPopup\", ImGui_Context ctx)","python":"void ImGui_EndPopup(ImGui_Context* ctx)","cpp":"void ImGui_EndPopup(ImGui_Context* ctx)"},"title":"ImGui_EndPopup","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Only call EndPopup() if BeginPopup*() returns true!","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_EndTabBar","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_EndTabBar\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_EndTabBar(ImGui_Context ctx)","eel":"extension_api(\"ImGui_EndTabBar\", ImGui_Context ctx)","python":"void ImGui_EndTabBar(ImGui_Context* ctx)","cpp":"void ImGui_EndTabBar(ImGui_Context* ctx)"},"title":"ImGui_EndTabBar","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Only call EndTabBar() if BeginTabBar() returns true!","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_EndTabItem","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_EndTabItem\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_EndTabItem(ImGui_Context ctx)","eel":"extension_api(\"ImGui_EndTabItem\", ImGui_Context ctx)","python":"void ImGui_EndTabItem(ImGui_Context* ctx)","cpp":"void ImGui_EndTabItem(ImGui_Context* ctx)"},"title":"ImGui_EndTabItem","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Only call EndTabItem() if BeginTabItem() returns true!","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_EndTable","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_EndTable\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_EndTable(ImGui_Context ctx)","eel":"extension_api(\"ImGui_EndTable\", ImGui_Context ctx)","python":"void ImGui_EndTable(ImGui_Context* ctx)","cpp":"void ImGui_EndTable(ImGui_Context* ctx)"},"title":"ImGui_EndTable","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Only call EndTable() if BeginTable() returns true!","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_EndTooltip","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_EndTooltip\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_EndTooltip(ImGui_Context ctx)","eel":"extension_api(\"ImGui_EndTooltip\", ImGui_Context ctx)","python":"void ImGui_EndTooltip(ImGui_Context* ctx)","cpp":"void ImGui_EndTooltip(ImGui_Context* ctx)"},"title":"ImGui_EndTooltip","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Only call EndTooltip() if BeginTooltip() returns true.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_FocusedFlags_AnyWindow","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_FocusedFlags_AnyWindow\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_FocusedFlags_AnyWindow()","eel":"int extension_api(\"ImGui_FocusedFlags_AnyWindow\")","python":"int ImGui_FocusedFlags_AnyWindow()","cpp":"int ImGui_FocusedFlags_AnyWindow()"},"title":"ImGui_FocusedFlags_AnyWindow","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Return true if any window is focused.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_FocusedFlags_ChildWindows","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_FocusedFlags_ChildWindows\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_FocusedFlags_ChildWindows()","eel":"int extension_api(\"ImGui_FocusedFlags_ChildWindows\")","python":"int ImGui_FocusedFlags_ChildWindows()","cpp":"int ImGui_FocusedFlags_ChildWindows()"},"title":"ImGui_FocusedFlags_ChildWindows","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Return true if any children of the window is focused.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_FocusedFlags_DockHierarchy","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_FocusedFlags_DockHierarchy\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_FocusedFlags_DockHierarchy()","eel":"int extension_api(\"ImGui_FocusedFlags_DockHierarchy\")","python":"int ImGui_FocusedFlags_DockHierarchy()","cpp":"int ImGui_FocusedFlags_DockHierarchy()"},"title":"ImGui_FocusedFlags_DockHierarchy","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Consider docking hierarchy (treat dockspace host as parent of docked window)\n   (when used with _ChildWindows or _RootWindow).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_FocusedFlags_NoPopupHierarchy","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_FocusedFlags_NoPopupHierarchy\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_FocusedFlags_NoPopupHierarchy()","eel":"int extension_api(\"ImGui_FocusedFlags_NoPopupHierarchy\")","python":"int ImGui_FocusedFlags_NoPopupHierarchy()","cpp":"int ImGui_FocusedFlags_NoPopupHierarchy()"},"title":"ImGui_FocusedFlags_NoPopupHierarchy","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Do not consider popup hierarchy (do not treat popup emitter as parent of\n   popup) (when used with _ChildWindows or _RootWindow).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_FocusedFlags_None","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_FocusedFlags_None\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_FocusedFlags_None()","eel":"int extension_api(\"ImGui_FocusedFlags_None\")","python":"int ImGui_FocusedFlags_None()","cpp":"int ImGui_FocusedFlags_None()"},"title":"ImGui_FocusedFlags_None","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_FocusedFlags_RootAndChildWindows","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_FocusedFlags_RootAndChildWindows\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_FocusedFlags_RootAndChildWindows()","eel":"int extension_api(\"ImGui_FocusedFlags_RootAndChildWindows\")","python":"int ImGui_FocusedFlags_RootAndChildWindows()","cpp":"int ImGui_FocusedFlags_RootAndChildWindows()"},"title":"ImGui_FocusedFlags_RootAndChildWindows","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"FocusedFlags_RootWindow | FocusedFlags_ChildWindows","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_FocusedFlags_RootWindow","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_FocusedFlags_RootWindow\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_FocusedFlags_RootWindow()","eel":"int extension_api(\"ImGui_FocusedFlags_RootWindow\")","python":"int ImGui_FocusedFlags_RootWindow()","cpp":"int ImGui_FocusedFlags_RootWindow()"},"title":"ImGui_FocusedFlags_RootWindow","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Test from root window (top most parent of the current hierarchy).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_FontFlags_Bold","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_FontFlags_Bold\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_FontFlags_Bold()","eel":"int extension_api(\"ImGui_FontFlags_Bold\")","python":"int ImGui_FontFlags_Bold()","cpp":"int ImGui_FontFlags_Bold()"},"title":"ImGui_FontFlags_Bold","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_FontFlags_Italic","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_FontFlags_Italic\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_FontFlags_Italic()","eel":"int extension_api(\"ImGui_FontFlags_Italic\")","python":"int ImGui_FontFlags_Italic()","cpp":"int ImGui_FontFlags_Italic()"},"title":"ImGui_FontFlags_Italic","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_FontFlags_None","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_FontFlags_None\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_FontFlags_None()","eel":"int extension_api(\"ImGui_FontFlags_None\")","python":"int ImGui_FontFlags_None()","cpp":"int ImGui_FontFlags_None()"},"title":"ImGui_FontFlags_None","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Function func","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Function_Execute","return_values":[],"parameters":[{"identifier":"func","type":"ImGui_Function"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_Function_Execute\""},{"type_name":"ImGui_Function","identifier":"func"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_Function_Execute(ImGui_Function func)","eel":"extension_api(\"ImGui_Function_Execute\", ImGui_Function func)","python":"void ImGui_Function_Execute(ImGui_Function* func)","cpp":"void ImGui_Function_Execute(ImGui_Function* func)"},"title":"ImGui_Function_Execute","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Function func","description":""},{"identifier":"string name","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Function_GetValue","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"func","type":"ImGui_Function"},{"identifier":"name","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"ImGui_Function_GetValue\""},{"type_name":"ImGui_Function","identifier":"func"},{"identifier":"\"name\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.ImGui_Function_GetValue(ImGui_Function func, string name)","eel":"double extension_api(\"ImGui_Function_GetValue\", ImGui_Function func, \"name\")","python":"double ImGui_Function_GetValue(ImGui_Function* func, const char* name)","cpp":"double ImGui_Function_GetValue(ImGui_Function* func, const char* name)"},"title":"ImGui_Function_GetValue","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Function func","description":""},{"identifier":"string namereaper_array values","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Function_GetValue_Array","return_values":[],"parameters":[{"identifier":"func","type":"ImGui_Function"},{"isOptional":true,"type":"string","identifier":"values"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_Function_GetValue_Array\""},{"type_name":"ImGui_Function","identifier":"func"},{"identifier":"\"name\""},{"type_name":"reaper_array","identifier":"values"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_Function_GetValue_Array(ImGui_Function func, string namereaper_array values)","eel":"extension_api(\"ImGui_Function_GetValue_Array\", ImGui_Function func, \"name\", reaper_array values)","python":"void ImGui_Function_GetValue_Array(ImGui_Function* func, const char* name, reaper_array* values)","cpp":"void ImGui_Function_GetValue_Array(ImGui_Function* func, const char* name, reaper_array* values)"},"title":"ImGui_Function_GetValue_Array","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Copy the values in the function's memory starting at the address stored\nin the given variable into the array.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Function func","description":""},{"identifier":"string name","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Function_GetValue_String","return_values":[{"identifier":"value","type":"string"}],"parameters":[{"identifier":"func","type":"ImGui_Function"},{"identifier":"name","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_Function_GetValue_String\""},{"type_name":"ImGui_Function","identifier":"func"},{"identifier":"\"name\""},{"identifier":"#value"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string value","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string value = reaper.ImGui_Function_GetValue_String(ImGui_Function func, string name)","eel":"extension_api(\"ImGui_Function_GetValue_String\", ImGui_Function func, \"name\", #value)","python":"void ImGui_Function_GetValue_String(ImGui_Function* func, const char* name, char* valueOutNeedBig, int valueOutNeedBig_sz)","cpp":"void ImGui_Function_GetValue_String(ImGui_Function* func, const char* name, char* valueOutNeedBig, int valueOutNeedBig_sz)"},"title":"ImGui_Function_GetValue_String","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Read from a string slot or a named string (when name starts with a `#`).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Function func","description":""},{"identifier":"string name","description":""},{"identifier":"number value","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Function_SetValue","return_values":[],"parameters":[{"identifier":"func","type":"ImGui_Function"},{"identifier":"name","type":"string"},{"identifier":"value","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_Function_SetValue\""},{"type_name":"ImGui_Function","identifier":"func"},{"identifier":"\"name\""},{"identifier":"value"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_Function_SetValue(ImGui_Function func, string name, number value)","eel":"extension_api(\"ImGui_Function_SetValue\", ImGui_Function func, \"name\", value)","python":"void ImGui_Function_SetValue(ImGui_Function* func, const char* name, double value)","cpp":"void ImGui_Function_SetValue(ImGui_Function* func, const char* name, double value)"},"title":"ImGui_Function_SetValue","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Function func","description":""},{"identifier":"string namereaper_array values","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Function_SetValue_Array","return_values":[],"parameters":[{"identifier":"func","type":"ImGui_Function"},{"isOptional":true,"type":"string","identifier":"values"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_Function_SetValue_Array\""},{"type_name":"ImGui_Function","identifier":"func"},{"identifier":"\"name\""},{"type_name":"reaper_array","identifier":"values"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_Function_SetValue_Array(ImGui_Function func, string namereaper_array values)","eel":"extension_api(\"ImGui_Function_SetValue_Array\", ImGui_Function func, \"name\", reaper_array values)","python":"void ImGui_Function_SetValue_Array(ImGui_Function* func, const char* name, reaper_array* values)","cpp":"void ImGui_Function_SetValue_Array(ImGui_Function* func, const char* name, reaper_array* values)"},"title":"ImGui_Function_SetValue_Array","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Copy the values in the array to the function's memory at the address stored\nin the given variable.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Function func","description":""},{"identifier":"string name","description":""},{"identifier":"string value","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Function_SetValue_String","return_values":[],"parameters":[{"identifier":"func","type":"ImGui_Function"},{"identifier":"name","type":"string"},{"identifier":"value","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_Function_SetValue_String\""},{"type_name":"ImGui_Function","identifier":"func"},{"identifier":"\"name\""},{"identifier":"\"value\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_Function_SetValue_String(ImGui_Function func, string name, string value)","eel":"extension_api(\"ImGui_Function_SetValue_String\", ImGui_Function func, \"name\", \"value\")","python":"void ImGui_Function_SetValue_String(ImGui_Function* func, const char* name, const char* value, int value_sz)","cpp":"void ImGui_Function_SetValue_String(ImGui_Function* func, const char* name, const char* value, int value_sz)"},"title":"ImGui_Function_SetValue_String","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Write to a string slot or a named string (when name starts with a `#`).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetBackgroundDrawList","return_values":[{"type":"ImGui_DrawList"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["ImGui_DrawList"],"parameters":[{"identifier":"\"ImGui_GetBackgroundDrawList\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_DrawList","description":""}],"prog_lang":"*"},"functioncall":{"lua":"ImGui_DrawList reaper.ImGui_GetBackgroundDrawList(ImGui_Context ctx)","eel":"ImGui_DrawList extension_api(\"ImGui_GetBackgroundDrawList\", ImGui_Context ctx)","python":"ImGui_DrawList* ImGui_GetBackgroundDrawList(ImGui_Context* ctx)","cpp":"ImGui_DrawList* ImGui_GetBackgroundDrawList(ImGui_Context* ctx)"},"title":"ImGui_GetBackgroundDrawList","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"This draw list will be the first rendering one. Useful to quickly draw\nshapes/text behind dear imgui contents.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetClipboardText","return_values":[{"identifier":"retval","type":"string"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_GetClipboardText\""},{"identifier":"#retval"},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string retval = reaper.ImGui_GetClipboardText(ImGui_Context ctx)","eel":"bool extension_api(\"ImGui_GetClipboardText\", #retval, ImGui_Context ctx)","python":"const char* ImGui_GetClipboardText(ImGui_Context* ctx)","cpp":"const char* ImGui_GetClipboardText(ImGui_Context* ctx)"},"title":"ImGui_GetClipboardText","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer idx","description":""},{"identifier":"optional number alpha_mulIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetColor","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"idx","type":"integer"},{"isOptional":true,"type":"number","identifier":"alpha_mulIn"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_GetColor\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"idx"},{"type_name":"optional","identifier":"alpha_mulIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_GetColor(ImGui_Context ctx, integer idx, optional number alpha_mulIn)","eel":"int extension_api(\"ImGui_GetColor\", ImGui_Context ctx, int idx, optional alpha_mulIn)","python":"int ImGui_GetColor(ImGui_Context* ctx, int idx, double* alpha_mulInOptional)","cpp":"int ImGui_GetColor(ImGui_Context* ctx, int idx, double* alpha_mulInOptional)"},"title":"ImGui_GetColor","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Retrieve given style color with style alpha applied and optional extra alpha\nmultiplier, packed as a 32-bit value (RGBA). See Col_* for available style colors.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer col_rgba","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetColorEx","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"col_rgba","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_GetColorEx\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"col_rgba"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_GetColorEx(ImGui_Context ctx, integer col_rgba)","eel":"int extension_api(\"ImGui_GetColorEx\", ImGui_Context ctx, int col_rgba)","python":"int ImGui_GetColorEx(ImGui_Context* ctx, int col_rgba)","cpp":"int ImGui_GetColorEx(ImGui_Context* ctx, int col_rgba)"},"title":"ImGui_GetColorEx","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Retrieve given color with style alpha applied, packed as a 32-bit value (RGBA).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer var_idx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetConfigVar","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"var_idx","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"ImGui_GetConfigVar\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"var_idx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.ImGui_GetConfigVar(ImGui_Context ctx, integer var_idx)","eel":"double extension_api(\"ImGui_GetConfigVar\", ImGui_Context ctx, int var_idx)","python":"double ImGui_GetConfigVar(ImGui_Context* ctx, int var_idx)","cpp":"double ImGui_GetConfigVar(ImGui_Context* ctx, int var_idx)"},"title":"ImGui_GetConfigVar","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetContentRegionAvail","return_values":[{"identifier":"x","type":"number"},{"identifier":"y","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_GetContentRegionAvail\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"&amp;x"},{"identifier":"&amp;y"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number x","description":""},{"identifier":"number y","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number x, number y = reaper.ImGui_GetContentRegionAvail(ImGui_Context ctx)","eel":"extension_api(\"ImGui_GetContentRegionAvail\", ImGui_Context ctx, &amp;x, &amp;y)","python":"void ImGui_GetContentRegionAvail(ImGui_Context* ctx, double* xOut, double* yOut)","cpp":"void ImGui_GetContentRegionAvail(ImGui_Context* ctx, double* xOut, double* yOut)"},"title":"ImGui_GetContentRegionAvail","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"== GetContentRegionMax() - GetCursorPos()","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetContentRegionMax","return_values":[{"identifier":"x","type":"number"},{"identifier":"y","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_GetContentRegionMax\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"&amp;x"},{"identifier":"&amp;y"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number x","description":""},{"identifier":"number y","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number x, number y = reaper.ImGui_GetContentRegionMax(ImGui_Context ctx)","eel":"extension_api(\"ImGui_GetContentRegionMax\", ImGui_Context ctx, &amp;x, &amp;y)","python":"void ImGui_GetContentRegionMax(ImGui_Context* ctx, double* xOut, double* yOut)","cpp":"void ImGui_GetContentRegionMax(ImGui_Context* ctx, double* xOut, double* yOut)"},"title":"ImGui_GetContentRegionMax","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Current content boundaries (typically window boundaries including scrolling,\nor current column boundaries), in windows coordinates.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetCursorPos","return_values":[{"identifier":"x","type":"number"},{"identifier":"y","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_GetCursorPos\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"&amp;x"},{"identifier":"&amp;y"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number x","description":""},{"identifier":"number y","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number x, number y = reaper.ImGui_GetCursorPos(ImGui_Context ctx)","eel":"extension_api(\"ImGui_GetCursorPos\", ImGui_Context ctx, &amp;x, &amp;y)","python":"void ImGui_GetCursorPos(ImGui_Context* ctx, double* xOut, double* yOut)","cpp":"void ImGui_GetCursorPos(ImGui_Context* ctx, double* xOut, double* yOut)"},"title":"ImGui_GetCursorPos","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Cursor position in window","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetCursorPosX","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"ImGui_GetCursorPosX\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.ImGui_GetCursorPosX(ImGui_Context ctx)","eel":"double extension_api(\"ImGui_GetCursorPosX\", ImGui_Context ctx)","python":"double ImGui_GetCursorPosX(ImGui_Context* ctx)","cpp":"double ImGui_GetCursorPosX(ImGui_Context* ctx)"},"title":"ImGui_GetCursorPosX","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Cursor X position in window","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetCursorPosY","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"ImGui_GetCursorPosY\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.ImGui_GetCursorPosY(ImGui_Context ctx)","eel":"double extension_api(\"ImGui_GetCursorPosY\", ImGui_Context ctx)","python":"double ImGui_GetCursorPosY(ImGui_Context* ctx)","cpp":"double ImGui_GetCursorPosY(ImGui_Context* ctx)"},"title":"ImGui_GetCursorPosY","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Cursor Y position in window","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetCursorScreenPos","return_values":[{"identifier":"x","type":"number"},{"identifier":"y","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_GetCursorScreenPos\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"&amp;x"},{"identifier":"&amp;y"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number x","description":""},{"identifier":"number y","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number x, number y = reaper.ImGui_GetCursorScreenPos(ImGui_Context ctx)","eel":"extension_api(\"ImGui_GetCursorScreenPos\", ImGui_Context ctx, &amp;x, &amp;y)","python":"void ImGui_GetCursorScreenPos(ImGui_Context* ctx, double* xOut, double* yOut)","cpp":"void ImGui_GetCursorScreenPos(ImGui_Context* ctx, double* xOut, double* yOut)"},"title":"ImGui_GetCursorScreenPos","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Cursor position in absolute screen coordinates (useful to work with the DrawList API).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetCursorStartPos","return_values":[{"identifier":"x","type":"number"},{"identifier":"y","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_GetCursorStartPos\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"&amp;x"},{"identifier":"&amp;y"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number x","description":""},{"identifier":"number y","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number x, number y = reaper.ImGui_GetCursorStartPos(ImGui_Context ctx)","eel":"extension_api(\"ImGui_GetCursorStartPos\", ImGui_Context ctx, &amp;x, &amp;y)","python":"void ImGui_GetCursorStartPos(ImGui_Context* ctx, double* xOut, double* yOut)","cpp":"void ImGui_GetCursorStartPos(ImGui_Context* ctx, double* xOut, double* yOut)"},"title":"ImGui_GetCursorStartPos","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Initial cursor position in window coordinates.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetDeltaTime","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"ImGui_GetDeltaTime\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.ImGui_GetDeltaTime(ImGui_Context ctx)","eel":"double extension_api(\"ImGui_GetDeltaTime\", ImGui_Context ctx)","python":"double ImGui_GetDeltaTime(ImGui_Context* ctx)","cpp":"double ImGui_GetDeltaTime(ImGui_Context* ctx)"},"title":"ImGui_GetDeltaTime","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Time elapsed since last frame, in seconds.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetDragDropPayload","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"type","type":"string"},{"identifier":"payload","type":"string"},{"identifier":"is_preview","type":"boolean"},{"identifier":"is_delivery","type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_GetDragDropPayload\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"#type"},{"identifier":"#payload"},{"type_name":"bool","identifier":"&amp;is_preview"},{"type_name":"bool","identifier":"&amp;is_delivery"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string type","description":""},{"identifier":"string payload","description":""},{"identifier":"boolean is_preview","description":""},{"identifier":"boolean is_delivery","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string type, string payload, boolean is_preview, boolean is_delivery = reaper.ImGui_GetDragDropPayload(ImGui_Context ctx)","eel":"bool extension_api(\"ImGui_GetDragDropPayload\", ImGui_Context ctx, #type, #payload, bool &amp;is_preview, bool &amp;is_delivery)","python":"bool ImGui_GetDragDropPayload(ImGui_Context* ctx, char* typeOut, int typeOut_sz, char* payloadOutNeedBig, int payloadOutNeedBig_sz, bool* is_previewOut, bool* is_deliveryOut)","cpp":"bool ImGui_GetDragDropPayload(ImGui_Context* ctx, char* typeOut, int typeOut_sz, char* payloadOutNeedBig, int payloadOutNeedBig_sz, bool* is_previewOut, bool* is_deliveryOut)"},"title":"ImGui_GetDragDropPayload","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Peek directly into the current payload from anywhere.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer index","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetDragDropPayloadFile","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"filename","type":"string"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"index","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_GetDragDropPayloadFile\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"index"},{"identifier":"#filename"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string filename","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string filename = reaper.ImGui_GetDragDropPayloadFile(ImGui_Context ctx, integer index)","eel":"bool extension_api(\"ImGui_GetDragDropPayloadFile\", ImGui_Context ctx, int index, #filename)","python":"bool ImGui_GetDragDropPayloadFile(ImGui_Context* ctx, int index, char* filenameOut, int filenameOut_sz)","cpp":"bool ImGui_GetDragDropPayloadFile(ImGui_Context* ctx, int index, char* filenameOut, int filenameOut_sz)"},"title":"ImGui_GetDragDropPayloadFile","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get a filename from the list of dropped files.\nReturns false if index is out of bounds.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetFont","return_values":[{"type":"ImGui_Font"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["ImGui_Font"],"parameters":[{"identifier":"\"ImGui_GetFont\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Font","description":""}],"prog_lang":"*"},"functioncall":{"lua":"ImGui_Font reaper.ImGui_GetFont(ImGui_Context ctx)","eel":"ImGui_Font extension_api(\"ImGui_GetFont\", ImGui_Context ctx)","python":"ImGui_Font* ImGui_GetFont(ImGui_Context* ctx)","cpp":"ImGui_Font* ImGui_GetFont(ImGui_Context* ctx)"},"title":"ImGui_GetFont","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get the current font","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetFontSize","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"ImGui_GetFontSize\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.ImGui_GetFontSize(ImGui_Context ctx)","eel":"double extension_api(\"ImGui_GetFontSize\", ImGui_Context ctx)","python":"double ImGui_GetFontSize(ImGui_Context* ctx)","cpp":"double ImGui_GetFontSize(ImGui_Context* ctx)"},"title":"ImGui_GetFontSize","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get current font size (= height in pixels) of current font with current scale\napplied.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetForegroundDrawList","return_values":[{"type":"ImGui_DrawList"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["ImGui_DrawList"],"parameters":[{"identifier":"\"ImGui_GetForegroundDrawList\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_DrawList","description":""}],"prog_lang":"*"},"functioncall":{"lua":"ImGui_DrawList reaper.ImGui_GetForegroundDrawList(ImGui_Context ctx)","eel":"ImGui_DrawList extension_api(\"ImGui_GetForegroundDrawList\", ImGui_Context ctx)","python":"ImGui_DrawList* ImGui_GetForegroundDrawList(ImGui_Context* ctx)","cpp":"ImGui_DrawList* ImGui_GetForegroundDrawList(ImGui_Context* ctx)"},"title":"ImGui_GetForegroundDrawList","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"This draw list will be the last rendered one. Useful to quickly draw\nshapes/text over dear imgui contents.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetFrameCount","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_GetFrameCount\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_GetFrameCount(ImGui_Context ctx)","eel":"int extension_api(\"ImGui_GetFrameCount\", ImGui_Context ctx)","python":"int ImGui_GetFrameCount(ImGui_Context* ctx)","cpp":"int ImGui_GetFrameCount(ImGui_Context* ctx)"},"title":"ImGui_GetFrameCount","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get global imgui frame count. incremented by 1 every frame.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetFrameHeight","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"ImGui_GetFrameHeight\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.ImGui_GetFrameHeight(ImGui_Context ctx)","eel":"double extension_api(\"ImGui_GetFrameHeight\", ImGui_Context ctx)","python":"double ImGui_GetFrameHeight(ImGui_Context* ctx)","cpp":"double ImGui_GetFrameHeight(ImGui_Context* ctx)"},"title":"ImGui_GetFrameHeight","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"GetFontSize + StyleVar_FramePadding.y * 2","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetFrameHeightWithSpacing","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"ImGui_GetFrameHeightWithSpacing\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.ImGui_GetFrameHeightWithSpacing(ImGui_Context ctx)","eel":"double extension_api(\"ImGui_GetFrameHeightWithSpacing\", ImGui_Context ctx)","python":"double ImGui_GetFrameHeightWithSpacing(ImGui_Context* ctx)","cpp":"double ImGui_GetFrameHeightWithSpacing(ImGui_Context* ctx)"},"title":"ImGui_GetFrameHeightWithSpacing","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"GetFontSize + StyleVar_FramePadding.y * 2 + StyleVar_ItemSpacing.y\n(distance in pixels between 2 consecutive lines of framed widgets).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetFramerate","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"ImGui_GetFramerate\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.ImGui_GetFramerate(ImGui_Context ctx)","eel":"double extension_api(\"ImGui_GetFramerate\", ImGui_Context ctx)","python":"double ImGui_GetFramerate(ImGui_Context* ctx)","cpp":"double ImGui_GetFramerate(ImGui_Context* ctx)"},"title":"ImGui_GetFramerate","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Estimate of application framerate (rolling average over 60 frames, based on\nGetDeltaTime), in frame per second. Solely for convenience.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer idx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetInputQueueCharacter","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"unicode_char","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"idx","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_GetInputQueueCharacter\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"idx"},{"type_name":"int","identifier":"&amp;unicode_char"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer unicode_char","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer unicode_char = reaper.ImGui_GetInputQueueCharacter(ImGui_Context ctx, integer idx)","eel":"bool extension_api(\"ImGui_GetInputQueueCharacter\", ImGui_Context ctx, int idx, int &amp;unicode_char)","python":"bool ImGui_GetInputQueueCharacter(ImGui_Context* ctx, int idx, int* unicode_charOut)","cpp":"bool ImGui_GetInputQueueCharacter(ImGui_Context* ctx, int idx, int* unicode_charOut)"},"title":"ImGui_GetInputQueueCharacter","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Read from ImGui's character input queue.\nCall with increasing idx until false is returned.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetItemRectMax","return_values":[{"identifier":"x","type":"number"},{"identifier":"y","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_GetItemRectMax\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"&amp;x"},{"identifier":"&amp;y"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number x","description":""},{"identifier":"number y","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number x, number y = reaper.ImGui_GetItemRectMax(ImGui_Context ctx)","eel":"extension_api(\"ImGui_GetItemRectMax\", ImGui_Context ctx, &amp;x, &amp;y)","python":"void ImGui_GetItemRectMax(ImGui_Context* ctx, double* xOut, double* yOut)","cpp":"void ImGui_GetItemRectMax(ImGui_Context* ctx, double* xOut, double* yOut)"},"title":"ImGui_GetItemRectMax","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get lower-right bounding rectangle of the last item (screen space)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetItemRectMin","return_values":[{"identifier":"x","type":"number"},{"identifier":"y","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_GetItemRectMin\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"&amp;x"},{"identifier":"&amp;y"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number x","description":""},{"identifier":"number y","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number x, number y = reaper.ImGui_GetItemRectMin(ImGui_Context ctx)","eel":"extension_api(\"ImGui_GetItemRectMin\", ImGui_Context ctx, &amp;x, &amp;y)","python":"void ImGui_GetItemRectMin(ImGui_Context* ctx, double* xOut, double* yOut)","cpp":"void ImGui_GetItemRectMin(ImGui_Context* ctx, double* xOut, double* yOut)"},"title":"ImGui_GetItemRectMin","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get upper-left bounding rectangle of the last item (screen space)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetItemRectSize","return_values":[{"identifier":"w","type":"number"},{"identifier":"h","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_GetItemRectSize\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"&amp;w"},{"identifier":"&amp;h"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number w","description":""},{"identifier":"number h","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number w, number h = reaper.ImGui_GetItemRectSize(ImGui_Context ctx)","eel":"extension_api(\"ImGui_GetItemRectSize\", ImGui_Context ctx, &amp;w, &amp;h)","python":"void ImGui_GetItemRectSize(ImGui_Context* ctx, double* wOut, double* hOut)","cpp":"void ImGui_GetItemRectSize(ImGui_Context* ctx, double* wOut, double* hOut)"},"title":"ImGui_GetItemRectSize","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get size of last item","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer key","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetKeyDownDuration","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"key","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"ImGui_GetKeyDownDuration\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"key"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.ImGui_GetKeyDownDuration(ImGui_Context ctx, integer key)","eel":"double extension_api(\"ImGui_GetKeyDownDuration\", ImGui_Context ctx, int key)","python":"double ImGui_GetKeyDownDuration(ImGui_Context* ctx, int key)","cpp":"double ImGui_GetKeyDownDuration(ImGui_Context* ctx, int key)"},"title":"ImGui_GetKeyDownDuration","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Duration the keyboard key has been down (0.0 == just pressed)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetKeyMods","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_GetKeyMods\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_GetKeyMods(ImGui_Context ctx)","eel":"int extension_api(\"ImGui_GetKeyMods\", ImGui_Context ctx)","python":"int ImGui_GetKeyMods(ImGui_Context* ctx)","cpp":"int ImGui_GetKeyMods(ImGui_Context* ctx)"},"title":"ImGui_GetKeyMods","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Flags for the Ctrl/Shift/Alt/Super keys. Uses Mod_* values.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer key","description":""},{"identifier":"number repeat_delay","description":""},{"identifier":"number rate","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetKeyPressedAmount","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"key","type":"integer"},{"identifier":"repeat_delay","type":"number"},{"identifier":"rate","type":"number"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_GetKeyPressedAmount\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"key"},{"identifier":"repeat_delay"},{"identifier":"rate"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_GetKeyPressedAmount(ImGui_Context ctx, integer key, number repeat_delay, number rate)","eel":"int extension_api(\"ImGui_GetKeyPressedAmount\", ImGui_Context ctx, int key, repeat_delay, rate)","python":"int ImGui_GetKeyPressedAmount(ImGui_Context* ctx, int key, double repeat_delay, double rate)","cpp":"int ImGui_GetKeyPressedAmount(ImGui_Context* ctx, int key, double repeat_delay, double rate)"},"title":"ImGui_GetKeyPressedAmount","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Uses provided repeat rate/delay. Return a count, most often 0 or 1 but might\nbe &gt;1 if ConfigVar_RepeatRate is small enough that GetDeltaTime &gt; RepeatRate.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetMainViewport","return_values":[{"type":"ImGui_Viewport"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["ImGui_Viewport"],"parameters":[{"identifier":"\"ImGui_GetMainViewport\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Viewport","description":""}],"prog_lang":"*"},"functioncall":{"lua":"ImGui_Viewport reaper.ImGui_GetMainViewport(ImGui_Context ctx)","eel":"ImGui_Viewport extension_api(\"ImGui_GetMainViewport\", ImGui_Context ctx)","python":"ImGui_Viewport* ImGui_GetMainViewport(ImGui_Context* ctx)","cpp":"ImGui_Viewport* ImGui_GetMainViewport(ImGui_Context* ctx)"},"title":"ImGui_GetMainViewport","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Currently represents REAPER's main window (arrange view).\nWARNING: This may change or be removed in the future.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer button","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetMouseClickedCount","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"button","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_GetMouseClickedCount\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"button"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_GetMouseClickedCount(ImGui_Context ctx, integer button)","eel":"int extension_api(\"ImGui_GetMouseClickedCount\", ImGui_Context ctx, int button)","python":"int ImGui_GetMouseClickedCount(ImGui_Context* ctx, int button)","cpp":"int ImGui_GetMouseClickedCount(ImGui_Context* ctx, int button)"},"title":"ImGui_GetMouseClickedCount","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Return the number of successive mouse-clicks at the time where a click happen (otherwise 0).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer button","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetMouseClickedPos","return_values":[{"identifier":"x","type":"number"},{"identifier":"y","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"button","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_GetMouseClickedPos\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"button"},{"identifier":"&amp;x"},{"identifier":"&amp;y"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number x","description":""},{"identifier":"number y","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number x, number y = reaper.ImGui_GetMouseClickedPos(ImGui_Context ctx, integer button)","eel":"extension_api(\"ImGui_GetMouseClickedPos\", ImGui_Context ctx, int button, &amp;x, &amp;y)","python":"void ImGui_GetMouseClickedPos(ImGui_Context* ctx, int button, double* xOut, double* yOut)","cpp":"void ImGui_GetMouseClickedPos(ImGui_Context* ctx, int button, double* xOut, double* yOut)"},"title":"ImGui_GetMouseClickedPos","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetMouseCursor","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_GetMouseCursor\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_GetMouseCursor(ImGui_Context ctx)","eel":"int extension_api(\"ImGui_GetMouseCursor\", ImGui_Context ctx)","python":"int ImGui_GetMouseCursor(ImGui_Context* ctx)","cpp":"int ImGui_GetMouseCursor(ImGui_Context* ctx)"},"title":"ImGui_GetMouseCursor","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get desired mouse cursor shape, reset every frame. This is updated during the frame.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetMouseDelta","return_values":[{"identifier":"x","type":"number"},{"identifier":"y","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_GetMouseDelta\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"&amp;x"},{"identifier":"&amp;y"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number x","description":""},{"identifier":"number y","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number x, number y = reaper.ImGui_GetMouseDelta(ImGui_Context ctx)","eel":"extension_api(\"ImGui_GetMouseDelta\", ImGui_Context ctx, &amp;x, &amp;y)","python":"void ImGui_GetMouseDelta(ImGui_Context* ctx, double* xOut, double* yOut)","cpp":"void ImGui_GetMouseDelta(ImGui_Context* ctx, double* xOut, double* yOut)"},"title":"ImGui_GetMouseDelta","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Mouse delta. Note that this is zero if either current or previous position\nare invalid (-FLT_MAX,-FLT_MAX), so a disappearing/reappearing mouse won't have\na huge delta.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer button","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetMouseDownDuration","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"button","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"ImGui_GetMouseDownDuration\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"button"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.ImGui_GetMouseDownDuration(ImGui_Context ctx, integer button)","eel":"double extension_api(\"ImGui_GetMouseDownDuration\", ImGui_Context ctx, int button)","python":"double ImGui_GetMouseDownDuration(ImGui_Context* ctx, int button)","cpp":"double ImGui_GetMouseDownDuration(ImGui_Context* ctx, int button)"},"title":"ImGui_GetMouseDownDuration","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Duration the mouse button has been down (0.0 == just clicked)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"number x","description":""},{"identifier":"number y","description":""},{"identifier":"optional integer buttonIn","description":""},{"identifier":"optional number lock_thresholdIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetMouseDragDelta","return_values":[{"identifier":"x","type":"number"},{"identifier":"y","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"x","type":"number"},{"identifier":"y","type":"number"},{"isOptional":true,"type":"integer","identifier":"buttonIn"},{"isOptional":true,"type":"number","identifier":"lock_thresholdIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_GetMouseDragDelta\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"&amp;x"},{"identifier":"&amp;y"},{"identifier":"buttonIn","modifier":"optional","type_name":"int"},{"type_name":"optional","identifier":"lock_thresholdIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number x","description":""},{"identifier":"number y","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number x, number y = reaper.ImGui_GetMouseDragDelta(ImGui_Context ctx, number x, number y, optional integer buttonIn, optional number lock_thresholdIn)","eel":"extension_api(\"ImGui_GetMouseDragDelta\", ImGui_Context ctx, &amp;x, &amp;y, optional int buttonIn, optional lock_thresholdIn)","python":"void ImGui_GetMouseDragDelta(ImGui_Context* ctx, double* xOut, double* yOut, int* buttonInOptional, double* lock_thresholdInOptional)","cpp":"void ImGui_GetMouseDragDelta(ImGui_Context* ctx, double* xOut, double* yOut, int* buttonInOptional, double* lock_thresholdInOptional)"},"title":"ImGui_GetMouseDragDelta","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Return the delta from the initial clicking position while the mouse button is\npressed or was just released. This is locked and return 0.0 until the mouse\nmoves past a distance threshold at least once (if lock_threshold &lt; -1.0, uses\nConfigVar_MouseDragThreshold).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetMousePos","return_values":[{"identifier":"x","type":"number"},{"identifier":"y","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_GetMousePos\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"&amp;x"},{"identifier":"&amp;y"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number x","description":""},{"identifier":"number y","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number x, number y = reaper.ImGui_GetMousePos(ImGui_Context ctx)","eel":"extension_api(\"ImGui_GetMousePos\", ImGui_Context ctx, &amp;x, &amp;y)","python":"void ImGui_GetMousePos(ImGui_Context* ctx, double* xOut, double* yOut)","cpp":"void ImGui_GetMousePos(ImGui_Context* ctx, double* xOut, double* yOut)"},"title":"ImGui_GetMousePos","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetMousePosOnOpeningCurrentPopup","return_values":[{"identifier":"x","type":"number"},{"identifier":"y","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_GetMousePosOnOpeningCurrentPopup\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"&amp;x"},{"identifier":"&amp;y"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number x","description":""},{"identifier":"number y","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number x, number y = reaper.ImGui_GetMousePosOnOpeningCurrentPopup(ImGui_Context ctx)","eel":"extension_api(\"ImGui_GetMousePosOnOpeningCurrentPopup\", ImGui_Context ctx, &amp;x, &amp;y)","python":"void ImGui_GetMousePosOnOpeningCurrentPopup(ImGui_Context* ctx, double* xOut, double* yOut)","cpp":"void ImGui_GetMousePosOnOpeningCurrentPopup(ImGui_Context* ctx, double* xOut, double* yOut)"},"title":"ImGui_GetMousePosOnOpeningCurrentPopup","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Retrieve mouse position at the time of opening popup we have BeginPopup()\ninto (helper to avoid user backing that value themselves).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetMouseWheel","return_values":[{"identifier":"vertical","type":"number"},{"identifier":"horizontal","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_GetMouseWheel\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"&amp;vertical"},{"identifier":"&amp;horizontal"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number vertical","description":""},{"identifier":"number horizontal","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number vertical, number horizontal = reaper.ImGui_GetMouseWheel(ImGui_Context ctx)","eel":"extension_api(\"ImGui_GetMouseWheel\", ImGui_Context ctx, &amp;vertical, &amp;horizontal)","python":"void ImGui_GetMouseWheel(ImGui_Context* ctx, double* verticalOut, double* horizontalOut)","cpp":"void ImGui_GetMouseWheel(ImGui_Context* ctx, double* verticalOut, double* horizontalOut)"},"title":"ImGui_GetMouseWheel","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Vertical: 1 unit scrolls about 5 lines text. &gt;0 scrolls Up, &lt;0 scrolls Down.\nHold SHIFT to turn vertical scroll into horizontal scroll\n\nHorizontal: &gt;0 scrolls Left, &lt;0 scrolls Right.\nMost users don't have a mouse with a horizontal wheel.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetScrollMaxX","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"ImGui_GetScrollMaxX\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.ImGui_GetScrollMaxX(ImGui_Context ctx)","eel":"double extension_api(\"ImGui_GetScrollMaxX\", ImGui_Context ctx)","python":"double ImGui_GetScrollMaxX(ImGui_Context* ctx)","cpp":"double ImGui_GetScrollMaxX(ImGui_Context* ctx)"},"title":"ImGui_GetScrollMaxX","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get maximum scrolling amount ~~ ContentSize.x - WindowSize.x - DecorationsSize.x","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetScrollMaxY","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"ImGui_GetScrollMaxY\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.ImGui_GetScrollMaxY(ImGui_Context ctx)","eel":"double extension_api(\"ImGui_GetScrollMaxY\", ImGui_Context ctx)","python":"double ImGui_GetScrollMaxY(ImGui_Context* ctx)","cpp":"double ImGui_GetScrollMaxY(ImGui_Context* ctx)"},"title":"ImGui_GetScrollMaxY","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get maximum scrolling amount ~~ ContentSize.y - WindowSize.y - DecorationsSize.y","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetScrollX","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"ImGui_GetScrollX\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.ImGui_GetScrollX(ImGui_Context ctx)","eel":"double extension_api(\"ImGui_GetScrollX\", ImGui_Context ctx)","python":"double ImGui_GetScrollX(ImGui_Context* ctx)","cpp":"double ImGui_GetScrollX(ImGui_Context* ctx)"},"title":"ImGui_GetScrollX","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get scrolling amount [0 .. GetScrollMaxX()]","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetScrollY","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"ImGui_GetScrollY\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.ImGui_GetScrollY(ImGui_Context ctx)","eel":"double extension_api(\"ImGui_GetScrollY\", ImGui_Context ctx)","python":"double ImGui_GetScrollY(ImGui_Context* ctx)","cpp":"double ImGui_GetScrollY(ImGui_Context* ctx)"},"title":"ImGui_GetScrollY","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get scrolling amount [0 .. GetScrollMaxY()]","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer idx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetStyleColor","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"idx","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_GetStyleColor\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"idx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_GetStyleColor(ImGui_Context ctx, integer idx)","eel":"int extension_api(\"ImGui_GetStyleColor\", ImGui_Context ctx, int idx)","python":"int ImGui_GetStyleColor(ImGui_Context* ctx, int idx)","cpp":"int ImGui_GetStyleColor(ImGui_Context* ctx, int idx)"},"title":"ImGui_GetStyleColor","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Retrieve style color as stored in ImGuiStyle structure.\nUse to feed back into PushStyleColor, Otherwise use GetColor to get style color\nwith style alpha baked in. See Col_* for available style colors.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer var_idx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetStyleVar","return_values":[{"identifier":"val1","type":"number"},{"identifier":"val2","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"var_idx","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_GetStyleVar\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"var_idx"},{"identifier":"&amp;val1"},{"identifier":"&amp;val2"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number val1","description":""},{"identifier":"number val2","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number val1, number val2 = reaper.ImGui_GetStyleVar(ImGui_Context ctx, integer var_idx)","eel":"extension_api(\"ImGui_GetStyleVar\", ImGui_Context ctx, int var_idx, &amp;val1, &amp;val2)","python":"void ImGui_GetStyleVar(ImGui_Context* ctx, int var_idx, double* val1Out, double* val2Out)","cpp":"void ImGui_GetStyleVar(ImGui_Context* ctx, int var_idx, double* val1Out, double* val2Out)"},"title":"ImGui_GetStyleVar","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetTextLineHeight","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"ImGui_GetTextLineHeight\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.ImGui_GetTextLineHeight(ImGui_Context ctx)","eel":"double extension_api(\"ImGui_GetTextLineHeight\", ImGui_Context ctx)","python":"double ImGui_GetTextLineHeight(ImGui_Context* ctx)","cpp":"double ImGui_GetTextLineHeight(ImGui_Context* ctx)"},"title":"ImGui_GetTextLineHeight","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Same as GetFontSize","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetTextLineHeightWithSpacing","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"ImGui_GetTextLineHeightWithSpacing\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.ImGui_GetTextLineHeightWithSpacing(ImGui_Context ctx)","eel":"double extension_api(\"ImGui_GetTextLineHeightWithSpacing\", ImGui_Context ctx)","python":"double ImGui_GetTextLineHeightWithSpacing(ImGui_Context* ctx)","cpp":"double ImGui_GetTextLineHeightWithSpacing(ImGui_Context* ctx)"},"title":"ImGui_GetTextLineHeightWithSpacing","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"GetFontSize + StyleVar_ItemSpacing.y\n(distance in pixels between 2 consecutive lines of text).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetTime","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"ImGui_GetTime\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.ImGui_GetTime(ImGui_Context ctx)","eel":"double extension_api(\"ImGui_GetTime\", ImGui_Context ctx)","python":"double ImGui_GetTime(ImGui_Context* ctx)","cpp":"double ImGui_GetTime(ImGui_Context* ctx)"},"title":"ImGui_GetTime","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get global imgui time. Incremented every frame.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetTreeNodeToLabelSpacing","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"ImGui_GetTreeNodeToLabelSpacing\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.ImGui_GetTreeNodeToLabelSpacing(ImGui_Context ctx)","eel":"double extension_api(\"ImGui_GetTreeNodeToLabelSpacing\", ImGui_Context ctx)","python":"double ImGui_GetTreeNodeToLabelSpacing(ImGui_Context* ctx)","cpp":"double ImGui_GetTreeNodeToLabelSpacing(ImGui_Context* ctx)"},"title":"ImGui_GetTreeNodeToLabelSpacing","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Horizontal distance preceding label when using TreeNode*() or Bullet()\n== (GetFontSize + StyleVar_FramePadding.x*2) for a regular unframed TreeNode.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_GetVersion","return_values":[{"identifier":"imgui_version","type":"string"},{"identifier":"imgui_version_num","type":"integer"},{"identifier":"reaimgui_version","type":"string"}],"parameters":[]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_GetVersion\""},{"identifier":"#imgui_version"},{"type_name":"int","identifier":"&amp;imgui_version_num"},{"identifier":"#reaimgui_version"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"string imgui_version","description":""},{"identifier":"integer imgui_version_num","description":""},{"identifier":"string reaimgui_version","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string imgui_version, integer imgui_version_num, string reaimgui_version = reaper.ImGui_GetVersion()","eel":"extension_api(\"ImGui_GetVersion\", #imgui_version, int &amp;imgui_version_num, #reaimgui_version)","python":"void ImGui_GetVersion(char* imgui_versionOut, int imgui_versionOut_sz, int* imgui_version_numOut, char* reaimgui_versionOut, int reaimgui_versionOut_sz)","cpp":"void ImGui_GetVersion(char* imgui_versionOut, int imgui_versionOut_sz, int* imgui_version_numOut, char* reaimgui_versionOut, int reaimgui_versionOut_sz)"},"title":"ImGui_GetVersion","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetWindowContentRegionMax","return_values":[{"identifier":"x","type":"number"},{"identifier":"y","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_GetWindowContentRegionMax\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"&amp;x"},{"identifier":"&amp;y"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number x","description":""},{"identifier":"number y","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number x, number y = reaper.ImGui_GetWindowContentRegionMax(ImGui_Context ctx)","eel":"extension_api(\"ImGui_GetWindowContentRegionMax\", ImGui_Context ctx, &amp;x, &amp;y)","python":"void ImGui_GetWindowContentRegionMax(ImGui_Context* ctx, double* xOut, double* yOut)","cpp":"void ImGui_GetWindowContentRegionMax(ImGui_Context* ctx, double* xOut, double* yOut)"},"title":"ImGui_GetWindowContentRegionMax","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Content boundaries max (roughly (0,0)+Size-Scroll) where Size can be\noverridden with SetNextWindowContentSize, in window coordinates.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetWindowContentRegionMin","return_values":[{"identifier":"x","type":"number"},{"identifier":"y","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_GetWindowContentRegionMin\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"&amp;x"},{"identifier":"&amp;y"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number x","description":""},{"identifier":"number y","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number x, number y = reaper.ImGui_GetWindowContentRegionMin(ImGui_Context ctx)","eel":"extension_api(\"ImGui_GetWindowContentRegionMin\", ImGui_Context ctx, &amp;x, &amp;y)","python":"void ImGui_GetWindowContentRegionMin(ImGui_Context* ctx, double* xOut, double* yOut)","cpp":"void ImGui_GetWindowContentRegionMin(ImGui_Context* ctx, double* xOut, double* yOut)"},"title":"ImGui_GetWindowContentRegionMin","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Content boundaries min (roughly (0,0)-Scroll), in window coordinates.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetWindowDockID","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_GetWindowDockID\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_GetWindowDockID(ImGui_Context ctx)","eel":"int extension_api(\"ImGui_GetWindowDockID\", ImGui_Context ctx)","python":"int ImGui_GetWindowDockID(ImGui_Context* ctx)","cpp":"int ImGui_GetWindowDockID(ImGui_Context* ctx)"},"title":"ImGui_GetWindowDockID","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetWindowDpiScale","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"ImGui_GetWindowDpiScale\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.ImGui_GetWindowDpiScale(ImGui_Context ctx)","eel":"double extension_api(\"ImGui_GetWindowDpiScale\", ImGui_Context ctx)","python":"double ImGui_GetWindowDpiScale(ImGui_Context* ctx)","cpp":"double ImGui_GetWindowDpiScale(ImGui_Context* ctx)"},"title":"ImGui_GetWindowDpiScale","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get DPI scale currently associated to the current window's viewport\n(1.0 = 96 DPI).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetWindowDrawList","return_values":[{"type":"ImGui_DrawList"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["ImGui_DrawList"],"parameters":[{"identifier":"\"ImGui_GetWindowDrawList\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_DrawList","description":""}],"prog_lang":"*"},"functioncall":{"lua":"ImGui_DrawList reaper.ImGui_GetWindowDrawList(ImGui_Context ctx)","eel":"ImGui_DrawList extension_api(\"ImGui_GetWindowDrawList\", ImGui_Context ctx)","python":"ImGui_DrawList* ImGui_GetWindowDrawList(ImGui_Context* ctx)","cpp":"ImGui_DrawList* ImGui_GetWindowDrawList(ImGui_Context* ctx)"},"title":"ImGui_GetWindowDrawList","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"The draw list associated to the current window, to append your own drawing primitives","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetWindowHeight","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"ImGui_GetWindowHeight\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.ImGui_GetWindowHeight(ImGui_Context ctx)","eel":"double extension_api(\"ImGui_GetWindowHeight\", ImGui_Context ctx)","python":"double ImGui_GetWindowHeight(ImGui_Context* ctx)","cpp":"double ImGui_GetWindowHeight(ImGui_Context* ctx)"},"title":"ImGui_GetWindowHeight","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get current window height (shortcut for (select(2, GetWindowSize())).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetWindowPos","return_values":[{"identifier":"x","type":"number"},{"identifier":"y","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_GetWindowPos\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"&amp;x"},{"identifier":"&amp;y"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number x","description":""},{"identifier":"number y","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number x, number y = reaper.ImGui_GetWindowPos(ImGui_Context ctx)","eel":"extension_api(\"ImGui_GetWindowPos\", ImGui_Context ctx, &amp;x, &amp;y)","python":"void ImGui_GetWindowPos(ImGui_Context* ctx, double* xOut, double* yOut)","cpp":"void ImGui_GetWindowPos(ImGui_Context* ctx, double* xOut, double* yOut)"},"title":"ImGui_GetWindowPos","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get current window position in screen space (useful if you want to do your own\ndrawing via the DrawList API).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetWindowSize","return_values":[{"identifier":"w","type":"number"},{"identifier":"h","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_GetWindowSize\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"&amp;w"},{"identifier":"&amp;h"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number w","description":""},{"identifier":"number h","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number w, number h = reaper.ImGui_GetWindowSize(ImGui_Context ctx)","eel":"extension_api(\"ImGui_GetWindowSize\", ImGui_Context ctx, &amp;w, &amp;h)","python":"void ImGui_GetWindowSize(ImGui_Context* ctx, double* wOut, double* hOut)","cpp":"void ImGui_GetWindowSize(ImGui_Context* ctx, double* wOut, double* hOut)"},"title":"ImGui_GetWindowSize","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get current window size","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetWindowViewport","return_values":[{"type":"ImGui_Viewport"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["ImGui_Viewport"],"parameters":[{"identifier":"\"ImGui_GetWindowViewport\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Viewport","description":""}],"prog_lang":"*"},"functioncall":{"lua":"ImGui_Viewport reaper.ImGui_GetWindowViewport(ImGui_Context ctx)","eel":"ImGui_Viewport extension_api(\"ImGui_GetWindowViewport\", ImGui_Context ctx)","python":"ImGui_Viewport* ImGui_GetWindowViewport(ImGui_Context* ctx)","cpp":"ImGui_Viewport* ImGui_GetWindowViewport(ImGui_Context* ctx)"},"title":"ImGui_GetWindowViewport","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get viewport currently associated to the current window.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_GetWindowWidth","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"ImGui_GetWindowWidth\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.ImGui_GetWindowWidth(ImGui_Context ctx)","eel":"double extension_api(\"ImGui_GetWindowWidth\", ImGui_Context ctx)","python":"double ImGui_GetWindowWidth(ImGui_Context* ctx)","cpp":"double ImGui_GetWindowWidth(ImGui_Context* ctx)"},"title":"ImGui_GetWindowWidth","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get current window width (shortcut for (select(1, GetWindowSize())).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_HoveredFlags_AllowWhenBlockedByActiveItem","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_HoveredFlags_AllowWhenBlockedByActiveItem\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_HoveredFlags_AllowWhenBlockedByActiveItem()","eel":"int extension_api(\"ImGui_HoveredFlags_AllowWhenBlockedByActiveItem\")","python":"int ImGui_HoveredFlags_AllowWhenBlockedByActiveItem()","cpp":"int ImGui_HoveredFlags_AllowWhenBlockedByActiveItem()"},"title":"ImGui_HoveredFlags_AllowWhenBlockedByActiveItem","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Return true even if an active item is blocking access to this item/window.\n  Useful for Drag and Drop patterns.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_HoveredFlags_AllowWhenBlockedByPopup","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_HoveredFlags_AllowWhenBlockedByPopup\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_HoveredFlags_AllowWhenBlockedByPopup()","eel":"int extension_api(\"ImGui_HoveredFlags_AllowWhenBlockedByPopup\")","python":"int ImGui_HoveredFlags_AllowWhenBlockedByPopup()","cpp":"int ImGui_HoveredFlags_AllowWhenBlockedByPopup()"},"title":"ImGui_HoveredFlags_AllowWhenBlockedByPopup","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Return true even if a popup window is normally blocking access to this item/window.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_HoveredFlags_AllowWhenDisabled","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_HoveredFlags_AllowWhenDisabled\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_HoveredFlags_AllowWhenDisabled()","eel":"int extension_api(\"ImGui_HoveredFlags_AllowWhenDisabled\")","python":"int ImGui_HoveredFlags_AllowWhenDisabled()","cpp":"int ImGui_HoveredFlags_AllowWhenDisabled()"},"title":"ImGui_HoveredFlags_AllowWhenDisabled","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"IsItemHovered only: Return true even if the item is disabled.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_HoveredFlags_AllowWhenOverlapped","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_HoveredFlags_AllowWhenOverlapped\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_HoveredFlags_AllowWhenOverlapped()","eel":"int extension_api(\"ImGui_HoveredFlags_AllowWhenOverlapped\")","python":"int ImGui_HoveredFlags_AllowWhenOverlapped()","cpp":"int ImGui_HoveredFlags_AllowWhenOverlapped()"},"title":"ImGui_HoveredFlags_AllowWhenOverlapped","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"IsItemHovered only: Return true even if the position is obstructed or\n  overlapped by another window.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_HoveredFlags_AnyWindow","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_HoveredFlags_AnyWindow\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_HoveredFlags_AnyWindow()","eel":"int extension_api(\"ImGui_HoveredFlags_AnyWindow\")","python":"int ImGui_HoveredFlags_AnyWindow()","cpp":"int ImGui_HoveredFlags_AnyWindow()"},"title":"ImGui_HoveredFlags_AnyWindow","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"IsWindowHovered only: Return true if any window is hovered.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_HoveredFlags_ChildWindows","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_HoveredFlags_ChildWindows\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_HoveredFlags_ChildWindows()","eel":"int extension_api(\"ImGui_HoveredFlags_ChildWindows\")","python":"int ImGui_HoveredFlags_ChildWindows()","cpp":"int ImGui_HoveredFlags_ChildWindows()"},"title":"ImGui_HoveredFlags_ChildWindows","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"IsWindowHovered only: Return true if any children of the window is hovered.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_HoveredFlags_DelayNormal","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_HoveredFlags_DelayNormal\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_HoveredFlags_DelayNormal()","eel":"int extension_api(\"ImGui_HoveredFlags_DelayNormal\")","python":"int ImGui_HoveredFlags_DelayNormal()","cpp":"int ImGui_HoveredFlags_DelayNormal()"},"title":"ImGui_HoveredFlags_DelayNormal","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Return true after ConfigVar_HoverDelayNormal elapsed (~0.30 sec)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_HoveredFlags_DelayShort","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_HoveredFlags_DelayShort\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_HoveredFlags_DelayShort()","eel":"int extension_api(\"ImGui_HoveredFlags_DelayShort\")","python":"int ImGui_HoveredFlags_DelayShort()","cpp":"int ImGui_HoveredFlags_DelayShort()"},"title":"ImGui_HoveredFlags_DelayShort","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Return true after ConfigVar_HoverDelayShort elapsed (~0.10 sec)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_HoveredFlags_DockHierarchy","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_HoveredFlags_DockHierarchy\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_HoveredFlags_DockHierarchy()","eel":"int extension_api(\"ImGui_HoveredFlags_DockHierarchy\")","python":"int ImGui_HoveredFlags_DockHierarchy()","cpp":"int ImGui_HoveredFlags_DockHierarchy()"},"title":"ImGui_HoveredFlags_DockHierarchy","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"IsWindowHovered only: Consider docking hierarchy (treat dockspace host as\n  parent of docked window) (when used with _ChildWindows or _RootWindow).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_HoveredFlags_NoNavOverride","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_HoveredFlags_NoNavOverride\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_HoveredFlags_NoNavOverride()","eel":"int extension_api(\"ImGui_HoveredFlags_NoNavOverride\")","python":"int ImGui_HoveredFlags_NoNavOverride()","cpp":"int ImGui_HoveredFlags_NoNavOverride()"},"title":"ImGui_HoveredFlags_NoNavOverride","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable using gamepad/keyboard navigation state when active, always query mouse.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_HoveredFlags_NoPopupHierarchy","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_HoveredFlags_NoPopupHierarchy\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_HoveredFlags_NoPopupHierarchy()","eel":"int extension_api(\"ImGui_HoveredFlags_NoPopupHierarchy\")","python":"int ImGui_HoveredFlags_NoPopupHierarchy()","cpp":"int ImGui_HoveredFlags_NoPopupHierarchy()"},"title":"ImGui_HoveredFlags_NoPopupHierarchy","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"IsWindowHovered only: Do not consider popup hierarchy (do not treat popup\n  emitter as parent of popup) (when used with _ChildWindows or _RootWindow).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_HoveredFlags_NoSharedDelay","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_HoveredFlags_NoSharedDelay\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_HoveredFlags_NoSharedDelay()","eel":"int extension_api(\"ImGui_HoveredFlags_NoSharedDelay\")","python":"int ImGui_HoveredFlags_NoSharedDelay()","cpp":"int ImGui_HoveredFlags_NoSharedDelay()"},"title":"ImGui_HoveredFlags_NoSharedDelay","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable shared delay system where moving from one item to the next keeps\n  the previous timer for a short time (standard for tooltips with long delays","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_HoveredFlags_None","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_HoveredFlags_None\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_HoveredFlags_None()","eel":"int extension_api(\"ImGui_HoveredFlags_None\")","python":"int ImGui_HoveredFlags_None()","cpp":"int ImGui_HoveredFlags_None()"},"title":"ImGui_HoveredFlags_None","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Return true if directly over the item/window, not obstructed by another\n  window, not obstructed by an active popup or modal blocking inputs under them.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_HoveredFlags_RectOnly","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_HoveredFlags_RectOnly\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_HoveredFlags_RectOnly()","eel":"int extension_api(\"ImGui_HoveredFlags_RectOnly\")","python":"int ImGui_HoveredFlags_RectOnly()","cpp":"int ImGui_HoveredFlags_RectOnly()"},"title":"ImGui_HoveredFlags_RectOnly","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"HoveredFlags_AllowWhenBlockedByPopup |\n  HoveredFlags_AllowWhenBlockedByActiveItem | HoveredFlags_AllowWhenOverlapped","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_HoveredFlags_RootAndChildWindows","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_HoveredFlags_RootAndChildWindows\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_HoveredFlags_RootAndChildWindows()","eel":"int extension_api(\"ImGui_HoveredFlags_RootAndChildWindows\")","python":"int ImGui_HoveredFlags_RootAndChildWindows()","cpp":"int ImGui_HoveredFlags_RootAndChildWindows()"},"title":"ImGui_HoveredFlags_RootAndChildWindows","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"HoveredFlags_RootWindow | HoveredFlags_ChildWindows","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_HoveredFlags_RootWindow","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_HoveredFlags_RootWindow\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_HoveredFlags_RootWindow()","eel":"int extension_api(\"ImGui_HoveredFlags_RootWindow\")","python":"int ImGui_HoveredFlags_RootWindow()","cpp":"int ImGui_HoveredFlags_RootWindow()"},"title":"ImGui_HoveredFlags_RootWindow","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"IsWindowHovered only: Test from root window (top most parent of the current hierarchy).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":9,"entries":[{"identifier":"ImGui_Context ctxImGui_Image img","description":""},{"identifier":"number size_w","description":""},{"identifier":"number size_h","description":""},{"identifier":"optional number uv0_xIn","description":""},{"identifier":"optional number uv0_yIn","description":""},{"identifier":"optional number uv1_xIn","description":""},{"identifier":"optional number uv1_yIn","description":""},{"identifier":"optional integer tint_col_rgbaIn","description":""},{"identifier":"optional integer border_col_rgbaIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Image","return_values":[],"parameters":[{"isOptional":true,"type":"ImGui_Context","identifier":"img"},{"identifier":"size_w","type":"number"},{"identifier":"size_h","type":"number"},{"isOptional":true,"type":"number","identifier":"uv0_xIn"},{"isOptional":true,"type":"number","identifier":"uv0_yIn"},{"isOptional":true,"type":"number","identifier":"uv1_xIn"},{"isOptional":true,"type":"number","identifier":"uv1_yIn"},{"isOptional":true,"type":"integer","identifier":"tint_col_rgbaIn"},{"isOptional":true,"type":"integer","identifier":"border_col_rgbaIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_Image\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"ImGui_Image","identifier":"img"},{"identifier":"size_w"},{"identifier":"size_h"},{"type_name":"optional","identifier":"uv0_xIn"},{"type_name":"optional","identifier":"uv0_yIn"},{"type_name":"optional","identifier":"uv1_xIn"},{"type_name":"optional","identifier":"uv1_yIn"},{"identifier":"tint_col_rgbaIn","modifier":"optional","type_name":"int"},{"identifier":"border_col_rgbaIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_Image(ImGui_Context ctxImGui_Image img, number size_w, number size_h, optional number uv0_xIn, optional number uv0_yIn, optional number uv1_xIn, optional number uv1_yIn, optional integer tint_col_rgbaIn, optional integer border_col_rgbaIn)","eel":"extension_api(\"ImGui_Image\", ImGui_Context ctx, ImGui_Image img, size_w, size_h, optional uv0_xIn, optional uv0_yIn, optional uv1_xIn, optional uv1_yIn, optional int tint_col_rgbaIn, optional int border_col_rgbaIn)","python":"void ImGui_Image(ImGui_Context* ctx, ImGui_Image* img, double size_w, double size_h, double* uv0_xInOptional, double* uv0_yInOptional, double* uv1_xInOptional, double* uv1_yInOptional, int* tint_col_rgbaInOptional, int* border_col_rgbaInOptional)","cpp":"void ImGui_Image(ImGui_Context* ctx, ImGui_Image* img, double size_w, double size_h, double* uv0_xInOptional, double* uv0_yInOptional, double* uv1_xInOptional, double* uv1_yInOptional, int* tint_col_rgbaInOptional, int* border_col_rgbaInOptional)"},"title":"ImGui_Image","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":10,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string str_idImGui_Image img","description":""},{"identifier":"number size_w","description":""},{"identifier":"number size_h","description":""},{"identifier":"optional number uv0_xIn","description":""},{"identifier":"optional number uv0_yIn","description":""},{"identifier":"optional number uv1_xIn","description":""},{"identifier":"optional number uv1_yIn","description":""},{"identifier":"optional integer bg_col_rgbaIn","description":""},{"identifier":"optional integer tint_col_rgbaIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_ImageButton","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"string","identifier":"img"},{"identifier":"size_w","type":"number"},{"identifier":"size_h","type":"number"},{"isOptional":true,"type":"number","identifier":"uv0_xIn"},{"isOptional":true,"type":"number","identifier":"uv0_yIn"},{"isOptional":true,"type":"number","identifier":"uv1_xIn"},{"isOptional":true,"type":"number","identifier":"uv1_yIn"},{"isOptional":true,"type":"integer","identifier":"bg_col_rgbaIn"},{"isOptional":true,"type":"integer","identifier":"tint_col_rgbaIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_ImageButton\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"str_id\""},{"type_name":"ImGui_Image","identifier":"img"},{"identifier":"size_w"},{"identifier":"size_h"},{"type_name":"optional","identifier":"uv0_xIn"},{"type_name":"optional","identifier":"uv0_yIn"},{"type_name":"optional","identifier":"uv1_xIn"},{"type_name":"optional","identifier":"uv1_yIn"},{"identifier":"bg_col_rgbaIn","modifier":"optional","type_name":"int"},{"identifier":"tint_col_rgbaIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_ImageButton(ImGui_Context ctx, string str_idImGui_Image img, number size_w, number size_h, optional number uv0_xIn, optional number uv0_yIn, optional number uv1_xIn, optional number uv1_yIn, optional integer bg_col_rgbaIn, optional integer tint_col_rgbaIn)","eel":"bool extension_api(\"ImGui_ImageButton\", ImGui_Context ctx, \"str_id\", ImGui_Image img, size_w, size_h, optional uv0_xIn, optional uv0_yIn, optional uv1_xIn, optional uv1_yIn, optional int bg_col_rgbaIn, optional int tint_col_rgbaIn)","python":"bool ImGui_ImageButton(ImGui_Context* ctx, const char* str_id, ImGui_Image* img, double size_w, double size_h, double* uv0_xInOptional, double* uv0_yInOptional, double* uv1_xInOptional, double* uv1_yInOptional, int* bg_col_rgbaInOptional, int* tint_col_rgbaInOptional)","cpp":"bool ImGui_ImageButton(ImGui_Context* ctx, const char* str_id, ImGui_Image* img, double size_w, double size_h, double* uv0_xInOptional, double* uv0_yInOptional, double* uv1_xInOptional, double* uv1_yInOptional, int* bg_col_rgbaInOptional, int* tint_col_rgbaInOptional)"},"title":"ImGui_ImageButton","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_ImageSet set","description":""},{"identifier":"number scaleImGui_Image img","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_ImageSet_Add","return_values":[],"parameters":[{"identifier":"set","type":"ImGui_ImageSet"},{"isOptional":true,"type":"number","identifier":"img"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_ImageSet_Add\""},{"type_name":"ImGui_ImageSet","identifier":"set"},{"identifier":"scale"},{"type_name":"ImGui_Image","identifier":"img"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_ImageSet_Add(ImGui_ImageSet set, number scaleImGui_Image img)","eel":"extension_api(\"ImGui_ImageSet_Add\", ImGui_ImageSet set, scale, ImGui_Image img)","python":"void ImGui_ImageSet_Add(ImGui_ImageSet* set, double scale, ImGui_Image* img)","cpp":"void ImGui_ImageSet_Add(ImGui_ImageSet* set, double scale, ImGui_Image* img)"},"title":"ImGui_ImageSet_Add","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"'img' cannot be another ImageSet.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Image img","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Image_GetSize","return_values":[{"identifier":"w","type":"number"},{"identifier":"h","type":"number"}],"parameters":[{"identifier":"img","type":"ImGui_Image"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_Image_GetSize\""},{"type_name":"ImGui_Image","identifier":"img"},{"identifier":"&amp;w"},{"identifier":"&amp;h"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number w","description":""},{"identifier":"number h","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number w, number h = reaper.ImGui_Image_GetSize(ImGui_Image img)","eel":"extension_api(\"ImGui_Image_GetSize\", ImGui_Image img, &amp;w, &amp;h)","python":"void ImGui_Image_GetSize(ImGui_Image* img, double* wOut, double* hOut)","cpp":"void ImGui_Image_GetSize(ImGui_Image* img, double* wOut, double* hOut)"},"title":"ImGui_Image_GetSize","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional number indent_wIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Indent","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"number","identifier":"indent_wIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_Indent\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"optional","identifier":"indent_wIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_Indent(ImGui_Context ctx, optional number indent_wIn)","eel":"extension_api(\"ImGui_Indent\", ImGui_Context ctx, optional indent_wIn)","python":"void ImGui_Indent(ImGui_Context* ctx, double* indent_wInOptional)","cpp":"void ImGui_Indent(ImGui_Context* ctx, double* indent_wInOptional)"},"title":"ImGui_Indent","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Move content position toward the right, by 'indent_w', or\nStyleVar_IndentSpacing if 'indent_w' &lt;= 0. See Unindent.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"number v","description":""},{"identifier":"optional number stepIn","description":""},{"identifier":"optional number step_fastIn","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_InputDouble","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v","type":"number"},{"isOptional":true,"type":"number","identifier":"stepIn"},{"isOptional":true,"type":"number","identifier":"step_fastIn"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_InputDouble\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"identifier":"&amp;v"},{"type_name":"optional","identifier":"stepIn"},{"type_name":"optional","identifier":"step_fastIn"},{"type_name":"optional","identifier":"\"formatIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number v","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number v = reaper.ImGui_InputDouble(ImGui_Context ctx, string label, number v, optional number stepIn, optional number step_fastIn, optional string formatIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_InputDouble\", ImGui_Context ctx, \"label\", &amp;v, optional stepIn, optional step_fastIn, optional \"formatIn\", optional int flagsIn)","python":"bool ImGui_InputDouble(ImGui_Context* ctx, const char* label, double* vInOut, double* stepInOptional, double* step_fastInOptional, const char* formatInOptional, int* flagsInOptional)","cpp":"bool ImGui_InputDouble(ImGui_Context* ctx, const char* label, double* vInOut, double* stepInOptional, double* step_fastInOptional, const char* formatInOptional, int* flagsInOptional)"},"title":"ImGui_InputDouble","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"number v1","description":""},{"identifier":"number v2","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_InputDouble2","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v1","type":"number"},{"identifier":"v2","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v1","type":"number"},{"identifier":"v2","type":"number"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_InputDouble2\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"identifier":"&amp;v1"},{"identifier":"&amp;v2"},{"type_name":"optional","identifier":"\"formatIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number v1","description":""},{"identifier":"number v2","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number v1, number v2 = reaper.ImGui_InputDouble2(ImGui_Context ctx, string label, number v1, number v2, optional string formatIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_InputDouble2\", ImGui_Context ctx, \"label\", &amp;v1, &amp;v2, optional \"formatIn\", optional int flagsIn)","python":"bool ImGui_InputDouble2(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, const char* formatInOptional, int* flagsInOptional)","cpp":"bool ImGui_InputDouble2(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, const char* formatInOptional, int* flagsInOptional)"},"title":"ImGui_InputDouble2","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"number v1","description":""},{"identifier":"number v2","description":""},{"identifier":"number v3","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_InputDouble3","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v1","type":"number"},{"identifier":"v2","type":"number"},{"identifier":"v3","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v1","type":"number"},{"identifier":"v2","type":"number"},{"identifier":"v3","type":"number"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_InputDouble3\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"identifier":"&amp;v1"},{"identifier":"&amp;v2"},{"identifier":"&amp;v3"},{"type_name":"optional","identifier":"\"formatIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number v1","description":""},{"identifier":"number v2","description":""},{"identifier":"number v3","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number v1, number v2, number v3 = reaper.ImGui_InputDouble3(ImGui_Context ctx, string label, number v1, number v2, number v3, optional string formatIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_InputDouble3\", ImGui_Context ctx, \"label\", &amp;v1, &amp;v2, &amp;v3, optional \"formatIn\", optional int flagsIn)","python":"bool ImGui_InputDouble3(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, const char* formatInOptional, int* flagsInOptional)","cpp":"bool ImGui_InputDouble3(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, const char* formatInOptional, int* flagsInOptional)"},"title":"ImGui_InputDouble3","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"number v1","description":""},{"identifier":"number v2","description":""},{"identifier":"number v3","description":""},{"identifier":"number v4","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_InputDouble4","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v1","type":"number"},{"identifier":"v2","type":"number"},{"identifier":"v3","type":"number"},{"identifier":"v4","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v1","type":"number"},{"identifier":"v2","type":"number"},{"identifier":"v3","type":"number"},{"identifier":"v4","type":"number"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_InputDouble4\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"identifier":"&amp;v1"},{"identifier":"&amp;v2"},{"identifier":"&amp;v3"},{"identifier":"&amp;v4"},{"type_name":"optional","identifier":"\"formatIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number v1","description":""},{"identifier":"number v2","description":""},{"identifier":"number v3","description":""},{"identifier":"number v4","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number v1, number v2, number v3, number v4 = reaper.ImGui_InputDouble4(ImGui_Context ctx, string label, number v1, number v2, number v3, number v4, optional string formatIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_InputDouble4\", ImGui_Context ctx, \"label\", &amp;v1, &amp;v2, &amp;v3, &amp;v4, optional \"formatIn\", optional int flagsIn)","python":"bool ImGui_InputDouble4(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double* v4InOut, const char* formatInOptional, int* flagsInOptional)","cpp":"bool ImGui_InputDouble4(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double* v4InOut, const char* formatInOptional, int* flagsInOptional)"},"title":"ImGui_InputDouble4","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string labelreaper_array values","description":""},{"identifier":"optional number stepIn","description":""},{"identifier":"optional number step_fastIn","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_InputDoubleN","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"string","identifier":"values"},{"isOptional":true,"type":"number","identifier":"stepIn"},{"isOptional":true,"type":"number","identifier":"step_fastIn"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_InputDoubleN\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"reaper_array","identifier":"values"},{"type_name":"optional","identifier":"stepIn"},{"type_name":"optional","identifier":"step_fastIn"},{"type_name":"optional","identifier":"\"formatIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_InputDoubleN(ImGui_Context ctx, string labelreaper_array values, optional number stepIn, optional number step_fastIn, optional string formatIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_InputDoubleN\", ImGui_Context ctx, \"label\", reaper_array values, optional stepIn, optional step_fastIn, optional \"formatIn\", optional int flagsIn)","python":"bool ImGui_InputDoubleN(ImGui_Context* ctx, const char* label, reaper_array* values, double* stepInOptional, double* step_fastInOptional, const char* formatInOptional, int* flagsInOptional)","cpp":"bool ImGui_InputDoubleN(ImGui_Context* ctx, const char* label, reaper_array* values, double* stepInOptional, double* step_fastInOptional, const char* formatInOptional, int* flagsInOptional)"},"title":"ImGui_InputDoubleN","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"integer v","description":""},{"identifier":"optional integer stepIn","description":""},{"identifier":"optional integer step_fastIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_InputInt","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v","type":"integer"},{"isOptional":true,"type":"integer","identifier":"stepIn"},{"isOptional":true,"type":"integer","identifier":"step_fastIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_InputInt\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"int","identifier":"&amp;v"},{"identifier":"stepIn","modifier":"optional","type_name":"int"},{"identifier":"step_fastIn","modifier":"optional","type_name":"int"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer v","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer v = reaper.ImGui_InputInt(ImGui_Context ctx, string label, integer v, optional integer stepIn, optional integer step_fastIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_InputInt\", ImGui_Context ctx, \"label\", int &amp;v, optional int stepIn, optional int step_fastIn, optional int flagsIn)","python":"bool ImGui_InputInt(ImGui_Context* ctx, const char* label, int* vInOut, int* stepInOptional, int* step_fastInOptional, int* flagsInOptional)","cpp":"bool ImGui_InputInt(ImGui_Context* ctx, const char* label, int* vInOut, int* stepInOptional, int* step_fastInOptional, int* flagsInOptional)"},"title":"ImGui_InputInt","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"integer v1","description":""},{"identifier":"integer v2","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_InputInt2","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v1","type":"integer"},{"identifier":"v2","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v1","type":"integer"},{"identifier":"v2","type":"integer"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_InputInt2\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"int","identifier":"&amp;v1"},{"type_name":"int","identifier":"&amp;v2"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer v1","description":""},{"identifier":"integer v2","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer v1, integer v2 = reaper.ImGui_InputInt2(ImGui_Context ctx, string label, integer v1, integer v2, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_InputInt2\", ImGui_Context ctx, \"label\", int &amp;v1, int &amp;v2, optional int flagsIn)","python":"bool ImGui_InputInt2(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* flagsInOptional)","cpp":"bool ImGui_InputInt2(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* flagsInOptional)"},"title":"ImGui_InputInt2","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"integer v1","description":""},{"identifier":"integer v2","description":""},{"identifier":"integer v3","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_InputInt3","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v1","type":"integer"},{"identifier":"v2","type":"integer"},{"identifier":"v3","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v1","type":"integer"},{"identifier":"v2","type":"integer"},{"identifier":"v3","type":"integer"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_InputInt3\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"int","identifier":"&amp;v1"},{"type_name":"int","identifier":"&amp;v2"},{"type_name":"int","identifier":"&amp;v3"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer v1","description":""},{"identifier":"integer v2","description":""},{"identifier":"integer v3","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer v1, integer v2, integer v3 = reaper.ImGui_InputInt3(ImGui_Context ctx, string label, integer v1, integer v2, integer v3, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_InputInt3\", ImGui_Context ctx, \"label\", int &amp;v1, int &amp;v2, int &amp;v3, optional int flagsIn)","python":"bool ImGui_InputInt3(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int* flagsInOptional)","cpp":"bool ImGui_InputInt3(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int* flagsInOptional)"},"title":"ImGui_InputInt3","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"integer v1","description":""},{"identifier":"integer v2","description":""},{"identifier":"integer v3","description":""},{"identifier":"integer v4","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_InputInt4","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v1","type":"integer"},{"identifier":"v2","type":"integer"},{"identifier":"v3","type":"integer"},{"identifier":"v4","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v1","type":"integer"},{"identifier":"v2","type":"integer"},{"identifier":"v3","type":"integer"},{"identifier":"v4","type":"integer"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_InputInt4\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"int","identifier":"&amp;v1"},{"type_name":"int","identifier":"&amp;v2"},{"type_name":"int","identifier":"&amp;v3"},{"type_name":"int","identifier":"&amp;v4"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer v1","description":""},{"identifier":"integer v2","description":""},{"identifier":"integer v3","description":""},{"identifier":"integer v4","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer v1, integer v2, integer v3, integer v4 = reaper.ImGui_InputInt4(ImGui_Context ctx, string label, integer v1, integer v2, integer v3, integer v4, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_InputInt4\", ImGui_Context ctx, \"label\", int &amp;v1, int &amp;v2, int &amp;v3, int &amp;v4, optional int flagsIn)","python":"bool ImGui_InputInt4(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int* v4InOut, int* flagsInOptional)","cpp":"bool ImGui_InputInt4(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int* v4InOut, int* flagsInOptional)"},"title":"ImGui_InputInt4","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"string buf","description":""},{"identifier":"optional integer flagsInImGui_Function callbackIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_InputText","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"buf","type":"string"},{"isOptional":true,"type":"integer","identifier":"callbackIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_InputText\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"identifier":"#buf"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"},{"type_name":"ImGui_Function","identifier":"callbackIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string buf = reaper.ImGui_InputText(ImGui_Context ctx, string label, string buf, optional integer flagsInImGui_Function callbackIn)","eel":"bool extension_api(\"ImGui_InputText\", ImGui_Context ctx, \"label\", #buf, optional int flagsIn, ImGui_Function callbackIn)","python":"bool ImGui_InputText(ImGui_Context* ctx, const char* label, char* bufInOutNeedBig, int bufInOutNeedBig_sz, int* flagsInOptional, ImGui_Function* callbackInOptional)","cpp":"bool ImGui_InputText(ImGui_Context* ctx, const char* label, char* bufInOutNeedBig, int bufInOutNeedBig_sz, int* flagsInOptional, ImGui_Function* callbackInOptional)"},"title":"ImGui_InputText","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_InputTextFlags_AllowTabInput","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_InputTextFlags_AllowTabInput\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_InputTextFlags_AllowTabInput()","eel":"int extension_api(\"ImGui_InputTextFlags_AllowTabInput\")","python":"int ImGui_InputTextFlags_AllowTabInput()","cpp":"int ImGui_InputTextFlags_AllowTabInput()"},"title":"ImGui_InputTextFlags_AllowTabInput","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Pressing TAB input a '\\t' character into the text field.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_InputTextFlags_AlwaysOverwrite","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_InputTextFlags_AlwaysOverwrite\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_InputTextFlags_AlwaysOverwrite()","eel":"int extension_api(\"ImGui_InputTextFlags_AlwaysOverwrite\")","python":"int ImGui_InputTextFlags_AlwaysOverwrite()","cpp":"int ImGui_InputTextFlags_AlwaysOverwrite()"},"title":"ImGui_InputTextFlags_AlwaysOverwrite","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Overwrite mode.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_InputTextFlags_AutoSelectAll","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_InputTextFlags_AutoSelectAll\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_InputTextFlags_AutoSelectAll()","eel":"int extension_api(\"ImGui_InputTextFlags_AutoSelectAll\")","python":"int ImGui_InputTextFlags_AutoSelectAll()","cpp":"int ImGui_InputTextFlags_AutoSelectAll()"},"title":"ImGui_InputTextFlags_AutoSelectAll","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Select entire text when first taking mouse focus.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_InputTextFlags_CallbackAlways","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_InputTextFlags_CallbackAlways\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_InputTextFlags_CallbackAlways()","eel":"int extension_api(\"ImGui_InputTextFlags_CallbackAlways\")","python":"int ImGui_InputTextFlags_CallbackAlways()","cpp":"int ImGui_InputTextFlags_CallbackAlways()"},"title":"ImGui_InputTextFlags_CallbackAlways","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Callback on each iteration. User code may query cursor position, modify text buffer.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_InputTextFlags_CallbackCharFilter","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_InputTextFlags_CallbackCharFilter\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_InputTextFlags_CallbackCharFilter()","eel":"int extension_api(\"ImGui_InputTextFlags_CallbackCharFilter\")","python":"int ImGui_InputTextFlags_CallbackCharFilter()","cpp":"int ImGui_InputTextFlags_CallbackCharFilter()"},"title":"ImGui_InputTextFlags_CallbackCharFilter","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Callback on character inputs to replace or discard them.\n   Modify 'EventChar' to replace or 'EventChar = 0' to discard.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_InputTextFlags_CallbackCompletion","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_InputTextFlags_CallbackCompletion\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_InputTextFlags_CallbackCompletion()","eel":"int extension_api(\"ImGui_InputTextFlags_CallbackCompletion\")","python":"int ImGui_InputTextFlags_CallbackCompletion()","cpp":"int ImGui_InputTextFlags_CallbackCompletion()"},"title":"ImGui_InputTextFlags_CallbackCompletion","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Callback on pressing TAB (for completion handling).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_InputTextFlags_CallbackEdit","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_InputTextFlags_CallbackEdit\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_InputTextFlags_CallbackEdit()","eel":"int extension_api(\"ImGui_InputTextFlags_CallbackEdit\")","python":"int ImGui_InputTextFlags_CallbackEdit()","cpp":"int ImGui_InputTextFlags_CallbackEdit()"},"title":"ImGui_InputTextFlags_CallbackEdit","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Callback on any edit (note that InputText() already returns true on edit,\n   the callback is useful mainly to manipulate the underlying buffer while\n   focus is active).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_InputTextFlags_CallbackHistory","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_InputTextFlags_CallbackHistory\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_InputTextFlags_CallbackHistory()","eel":"int extension_api(\"ImGui_InputTextFlags_CallbackHistory\")","python":"int ImGui_InputTextFlags_CallbackHistory()","cpp":"int ImGui_InputTextFlags_CallbackHistory()"},"title":"ImGui_InputTextFlags_CallbackHistory","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Callback on pressing Up/Down arrows (for history handling).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_InputTextFlags_CharsDecimal","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_InputTextFlags_CharsDecimal\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_InputTextFlags_CharsDecimal()","eel":"int extension_api(\"ImGui_InputTextFlags_CharsDecimal\")","python":"int ImGui_InputTextFlags_CharsDecimal()","cpp":"int ImGui_InputTextFlags_CharsDecimal()"},"title":"ImGui_InputTextFlags_CharsDecimal","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Allow 0123456789.+-*/.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_InputTextFlags_CharsHexadecimal","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_InputTextFlags_CharsHexadecimal\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_InputTextFlags_CharsHexadecimal()","eel":"int extension_api(\"ImGui_InputTextFlags_CharsHexadecimal\")","python":"int ImGui_InputTextFlags_CharsHexadecimal()","cpp":"int ImGui_InputTextFlags_CharsHexadecimal()"},"title":"ImGui_InputTextFlags_CharsHexadecimal","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Allow 0123456789ABCDEFabcdef.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_InputTextFlags_CharsNoBlank","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_InputTextFlags_CharsNoBlank\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_InputTextFlags_CharsNoBlank()","eel":"int extension_api(\"ImGui_InputTextFlags_CharsNoBlank\")","python":"int ImGui_InputTextFlags_CharsNoBlank()","cpp":"int ImGui_InputTextFlags_CharsNoBlank()"},"title":"ImGui_InputTextFlags_CharsNoBlank","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Filter out spaces, tabs.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_InputTextFlags_CharsScientific","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_InputTextFlags_CharsScientific\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_InputTextFlags_CharsScientific()","eel":"int extension_api(\"ImGui_InputTextFlags_CharsScientific\")","python":"int ImGui_InputTextFlags_CharsScientific()","cpp":"int ImGui_InputTextFlags_CharsScientific()"},"title":"ImGui_InputTextFlags_CharsScientific","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Allow 0123456789.+-*/eE (Scientific notation input).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_InputTextFlags_CharsUppercase","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_InputTextFlags_CharsUppercase\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_InputTextFlags_CharsUppercase()","eel":"int extension_api(\"ImGui_InputTextFlags_CharsUppercase\")","python":"int ImGui_InputTextFlags_CharsUppercase()","cpp":"int ImGui_InputTextFlags_CharsUppercase()"},"title":"ImGui_InputTextFlags_CharsUppercase","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Turn a..z into A..Z.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_InputTextFlags_CtrlEnterForNewLine","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_InputTextFlags_CtrlEnterForNewLine\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_InputTextFlags_CtrlEnterForNewLine()","eel":"int extension_api(\"ImGui_InputTextFlags_CtrlEnterForNewLine\")","python":"int ImGui_InputTextFlags_CtrlEnterForNewLine()","cpp":"int ImGui_InputTextFlags_CtrlEnterForNewLine()"},"title":"ImGui_InputTextFlags_CtrlEnterForNewLine","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"In multi-line mode, unfocus with Enter, add new line with Ctrl+Enter\n   (default is opposite: unfocus with Ctrl+Enter, add line with Enter).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_InputTextFlags_EnterReturnsTrue","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_InputTextFlags_EnterReturnsTrue\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_InputTextFlags_EnterReturnsTrue()","eel":"int extension_api(\"ImGui_InputTextFlags_EnterReturnsTrue\")","python":"int ImGui_InputTextFlags_EnterReturnsTrue()","cpp":"int ImGui_InputTextFlags_EnterReturnsTrue()"},"title":"ImGui_InputTextFlags_EnterReturnsTrue","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Return 'true' when Enter is pressed (as opposed to every time the value was\n   modified). Consider looking at the IsItemDeactivatedAfterEdit function.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_InputTextFlags_EscapeClearsAll","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_InputTextFlags_EscapeClearsAll\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_InputTextFlags_EscapeClearsAll()","eel":"int extension_api(\"ImGui_InputTextFlags_EscapeClearsAll\")","python":"int ImGui_InputTextFlags_EscapeClearsAll()","cpp":"int ImGui_InputTextFlags_EscapeClearsAll()"},"title":"ImGui_InputTextFlags_EscapeClearsAll","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Escape key clears content if not empty, and deactivate otherwise\n   (constrast to default behavior of Escape to revert).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_InputTextFlags_NoHorizontalScroll","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_InputTextFlags_NoHorizontalScroll\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_InputTextFlags_NoHorizontalScroll()","eel":"int extension_api(\"ImGui_InputTextFlags_NoHorizontalScroll\")","python":"int ImGui_InputTextFlags_NoHorizontalScroll()","cpp":"int ImGui_InputTextFlags_NoHorizontalScroll()"},"title":"ImGui_InputTextFlags_NoHorizontalScroll","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable following the cursor horizontally.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_InputTextFlags_NoUndoRedo","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_InputTextFlags_NoUndoRedo\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_InputTextFlags_NoUndoRedo()","eel":"int extension_api(\"ImGui_InputTextFlags_NoUndoRedo\")","python":"int ImGui_InputTextFlags_NoUndoRedo()","cpp":"int ImGui_InputTextFlags_NoUndoRedo()"},"title":"ImGui_InputTextFlags_NoUndoRedo","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable undo/redo. Note that input text owns the text data while active.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_InputTextFlags_None","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_InputTextFlags_None\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_InputTextFlags_None()","eel":"int extension_api(\"ImGui_InputTextFlags_None\")","python":"int ImGui_InputTextFlags_None()","cpp":"int ImGui_InputTextFlags_None()"},"title":"ImGui_InputTextFlags_None","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_InputTextFlags_Password","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_InputTextFlags_Password\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_InputTextFlags_Password()","eel":"int extension_api(\"ImGui_InputTextFlags_Password\")","python":"int ImGui_InputTextFlags_Password()","cpp":"int ImGui_InputTextFlags_Password()"},"title":"ImGui_InputTextFlags_Password","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Password mode, display all characters as '*'.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_InputTextFlags_ReadOnly","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_InputTextFlags_ReadOnly\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_InputTextFlags_ReadOnly()","eel":"int extension_api(\"ImGui_InputTextFlags_ReadOnly\")","python":"int ImGui_InputTextFlags_ReadOnly()","cpp":"int ImGui_InputTextFlags_ReadOnly()"},"title":"ImGui_InputTextFlags_ReadOnly","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Read-only mode.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"string buf","description":""},{"identifier":"optional number size_wIn","description":""},{"identifier":"optional number size_hIn","description":""},{"identifier":"optional integer flagsInImGui_Function callbackIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_InputTextMultiline","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"buf","type":"string"},{"isOptional":true,"type":"number","identifier":"size_wIn"},{"isOptional":true,"type":"number","identifier":"size_hIn"},{"isOptional":true,"type":"integer","identifier":"callbackIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_InputTextMultiline\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"identifier":"#buf"},{"type_name":"optional","identifier":"size_wIn"},{"type_name":"optional","identifier":"size_hIn"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"},{"type_name":"ImGui_Function","identifier":"callbackIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string buf = reaper.ImGui_InputTextMultiline(ImGui_Context ctx, string label, string buf, optional number size_wIn, optional number size_hIn, optional integer flagsInImGui_Function callbackIn)","eel":"bool extension_api(\"ImGui_InputTextMultiline\", ImGui_Context ctx, \"label\", #buf, optional size_wIn, optional size_hIn, optional int flagsIn, ImGui_Function callbackIn)","python":"bool ImGui_InputTextMultiline(ImGui_Context* ctx, const char* label, char* bufInOutNeedBig, int bufInOutNeedBig_sz, double* size_wInOptional, double* size_hInOptional, int* flagsInOptional, ImGui_Function* callbackInOptional)","cpp":"bool ImGui_InputTextMultiline(ImGui_Context* ctx, const char* label, char* bufInOutNeedBig, int bufInOutNeedBig_sz, double* size_wInOptional, double* size_hInOptional, int* flagsInOptional, ImGui_Function* callbackInOptional)"},"title":"ImGui_InputTextMultiline","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"string hint","description":""},{"identifier":"string buf","description":""},{"identifier":"optional integer flagsInImGui_Function callbackIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_InputTextWithHint","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"buf","type":"string"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"hint","type":"string"},{"identifier":"buf","type":"string"},{"isOptional":true,"type":"integer","identifier":"callbackIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_InputTextWithHint\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"identifier":"\"hint\""},{"identifier":"#buf"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"},{"type_name":"ImGui_Function","identifier":"callbackIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"string buf","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, string buf = reaper.ImGui_InputTextWithHint(ImGui_Context ctx, string label, string hint, string buf, optional integer flagsInImGui_Function callbackIn)","eel":"bool extension_api(\"ImGui_InputTextWithHint\", ImGui_Context ctx, \"label\", \"hint\", #buf, optional int flagsIn, ImGui_Function callbackIn)","python":"bool ImGui_InputTextWithHint(ImGui_Context* ctx, const char* label, const char* hint, char* bufInOutNeedBig, int bufInOutNeedBig_sz, int* flagsInOptional, ImGui_Function* callbackInOptional)","cpp":"bool ImGui_InputTextWithHint(ImGui_Context* ctx, const char* label, const char* hint, char* bufInOutNeedBig, int bufInOutNeedBig_sz, int* flagsInOptional, ImGui_Function* callbackInOptional)"},"title":"ImGui_InputTextWithHint","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string str_id","description":""},{"identifier":"number size_w","description":""},{"identifier":"number size_h","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_InvisibleButton","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"str_id","type":"string"},{"identifier":"size_w","type":"number"},{"identifier":"size_h","type":"number"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_InvisibleButton\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"str_id\""},{"identifier":"size_w"},{"identifier":"size_h"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_InvisibleButton(ImGui_Context ctx, string str_id, number size_w, number size_h, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_InvisibleButton\", ImGui_Context ctx, \"str_id\", size_w, size_h, optional int flagsIn)","python":"bool ImGui_InvisibleButton(ImGui_Context* ctx, const char* str_id, double size_w, double size_h, int* flagsInOptional)","cpp":"bool ImGui_InvisibleButton(ImGui_Context* ctx, const char* str_id, double size_w, double size_h, int* flagsInOptional)"},"title":"ImGui_InvisibleButton","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Flexible button behavior without the visuals, frequently useful to build\ncustom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsAnyItemActive","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsAnyItemActive\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsAnyItemActive(ImGui_Context ctx)","eel":"bool extension_api(\"ImGui_IsAnyItemActive\", ImGui_Context ctx)","python":"bool ImGui_IsAnyItemActive(ImGui_Context* ctx)","cpp":"bool ImGui_IsAnyItemActive(ImGui_Context* ctx)"},"title":"ImGui_IsAnyItemActive","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsAnyItemFocused","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsAnyItemFocused\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsAnyItemFocused(ImGui_Context ctx)","eel":"bool extension_api(\"ImGui_IsAnyItemFocused\", ImGui_Context ctx)","python":"bool ImGui_IsAnyItemFocused(ImGui_Context* ctx)","cpp":"bool ImGui_IsAnyItemFocused(ImGui_Context* ctx)"},"title":"ImGui_IsAnyItemFocused","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsAnyItemHovered","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsAnyItemHovered\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsAnyItemHovered(ImGui_Context ctx)","eel":"bool extension_api(\"ImGui_IsAnyItemHovered\", ImGui_Context ctx)","python":"bool ImGui_IsAnyItemHovered(ImGui_Context* ctx)","cpp":"bool ImGui_IsAnyItemHovered(ImGui_Context* ctx)"},"title":"ImGui_IsAnyItemHovered","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsAnyMouseDown","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsAnyMouseDown\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsAnyMouseDown(ImGui_Context ctx)","eel":"bool extension_api(\"ImGui_IsAnyMouseDown\", ImGui_Context ctx)","python":"bool ImGui_IsAnyMouseDown(ImGui_Context* ctx)","cpp":"bool ImGui_IsAnyMouseDown(ImGui_Context* ctx)"},"title":"ImGui_IsAnyMouseDown","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Is any mouse button held?","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsItemActivated","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsItemActivated\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsItemActivated(ImGui_Context ctx)","eel":"bool extension_api(\"ImGui_IsItemActivated\", ImGui_Context ctx)","python":"bool ImGui_IsItemActivated(ImGui_Context* ctx)","cpp":"bool ImGui_IsItemActivated(ImGui_Context* ctx)"},"title":"ImGui_IsItemActivated","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Was the last item just made active (item was previously inactive).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsItemActive","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsItemActive\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsItemActive(ImGui_Context ctx)","eel":"bool extension_api(\"ImGui_IsItemActive\", ImGui_Context ctx)","python":"bool ImGui_IsItemActive(ImGui_Context* ctx)","cpp":"bool ImGui_IsItemActive(ImGui_Context* ctx)"},"title":"ImGui_IsItemActive","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Is the last item active? (e.g. button being held, text field being edited.\nThis will continuously return true while holding mouse button on an item.\nItems that don't interact will always return false.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional integer mouse_buttonIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsItemClicked","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"integer","identifier":"mouse_buttonIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsItemClicked\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"mouse_buttonIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsItemClicked(ImGui_Context ctx, optional integer mouse_buttonIn)","eel":"bool extension_api(\"ImGui_IsItemClicked\", ImGui_Context ctx, optional int mouse_buttonIn)","python":"bool ImGui_IsItemClicked(ImGui_Context* ctx, int* mouse_buttonInOptional)","cpp":"bool ImGui_IsItemClicked(ImGui_Context* ctx, int* mouse_buttonInOptional)"},"title":"ImGui_IsItemClicked","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Is the last item clicked? (e.g. button/node just clicked on)\n== IsMouseClicked(mouse_button) &amp;&amp; IsItemHovered().\n\nThis is NOT equivalent to the behavior of e.g. Button.\nMost widgets have specific reactions based on mouse-up/down state, mouse position etc.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsItemDeactivated","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsItemDeactivated\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsItemDeactivated(ImGui_Context ctx)","eel":"bool extension_api(\"ImGui_IsItemDeactivated\", ImGui_Context ctx)","python":"bool ImGui_IsItemDeactivated(ImGui_Context* ctx)","cpp":"bool ImGui_IsItemDeactivated(ImGui_Context* ctx)"},"title":"ImGui_IsItemDeactivated","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Was the last item just made inactive (item was previously active).\nUseful for Undo/Redo patterns with widgets that require continuous editing.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsItemDeactivatedAfterEdit","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsItemDeactivatedAfterEdit\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsItemDeactivatedAfterEdit(ImGui_Context ctx)","eel":"bool extension_api(\"ImGui_IsItemDeactivatedAfterEdit\", ImGui_Context ctx)","python":"bool ImGui_IsItemDeactivatedAfterEdit(ImGui_Context* ctx)","cpp":"bool ImGui_IsItemDeactivatedAfterEdit(ImGui_Context* ctx)"},"title":"ImGui_IsItemDeactivatedAfterEdit","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Was the last item just made inactive and made a value change when it was\nactive? (e.g. Slider/Drag moved).\n\nUseful for Undo/Redo patterns with widgets that require continuous editing. Note\nthat you may get false positives (some widgets such as Combo/ListBox/Selectable\nwill return true even when clicking an already selected item).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsItemEdited","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsItemEdited\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsItemEdited(ImGui_Context ctx)","eel":"bool extension_api(\"ImGui_IsItemEdited\", ImGui_Context ctx)","python":"bool ImGui_IsItemEdited(ImGui_Context* ctx)","cpp":"bool ImGui_IsItemEdited(ImGui_Context* ctx)"},"title":"ImGui_IsItemEdited","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Did the last item modify its underlying value this frame? or was pressed?\nThis is generally the same as the \"bool\" return value of many widgets.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsItemFocused","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsItemFocused\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsItemFocused(ImGui_Context ctx)","eel":"bool extension_api(\"ImGui_IsItemFocused\", ImGui_Context ctx)","python":"bool ImGui_IsItemFocused(ImGui_Context* ctx)","cpp":"bool ImGui_IsItemFocused(ImGui_Context* ctx)"},"title":"ImGui_IsItemFocused","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Is the last item focused for keyboard/gamepad navigation?","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsItemHovered","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsItemHovered\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsItemHovered(ImGui_Context ctx, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_IsItemHovered\", ImGui_Context ctx, optional int flagsIn)","python":"bool ImGui_IsItemHovered(ImGui_Context* ctx, int* flagsInOptional)","cpp":"bool ImGui_IsItemHovered(ImGui_Context* ctx, int* flagsInOptional)"},"title":"ImGui_IsItemHovered","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Is the last item hovered? (and usable, aka not blocked by a popup, etc.).\nSee HoveredFlags_* for more options.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsItemToggledOpen","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsItemToggledOpen\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsItemToggledOpen(ImGui_Context ctx)","eel":"bool extension_api(\"ImGui_IsItemToggledOpen\", ImGui_Context ctx)","python":"bool ImGui_IsItemToggledOpen(ImGui_Context* ctx)","cpp":"bool ImGui_IsItemToggledOpen(ImGui_Context* ctx)"},"title":"ImGui_IsItemToggledOpen","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Was the last item open state toggled? Set by TreeNode.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsItemVisible","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsItemVisible\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsItemVisible(ImGui_Context ctx)","eel":"bool extension_api(\"ImGui_IsItemVisible\", ImGui_Context ctx)","python":"bool ImGui_IsItemVisible(ImGui_Context* ctx)","cpp":"bool ImGui_IsItemVisible(ImGui_Context* ctx)"},"title":"ImGui_IsItemVisible","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Is the last item visible? (items may be out of sight because of clipping/scrolling)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer key","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsKeyDown","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"key","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsKeyDown\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"key"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsKeyDown(ImGui_Context ctx, integer key)","eel":"bool extension_api(\"ImGui_IsKeyDown\", ImGui_Context ctx, int key)","python":"bool ImGui_IsKeyDown(ImGui_Context* ctx, int key)","cpp":"bool ImGui_IsKeyDown(ImGui_Context* ctx, int key)"},"title":"ImGui_IsKeyDown","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Is key being held.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer key","description":""},{"identifier":"optional boolean repeatIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsKeyPressed","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"key","type":"integer"},{"isOptional":true,"type":"boolean","identifier":"repeatIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsKeyPressed\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"key"},{"identifier":"repeatIn","modifier":"optional","type_name":"bool"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsKeyPressed(ImGui_Context ctx, integer key, optional boolean repeatIn)","eel":"bool extension_api(\"ImGui_IsKeyPressed\", ImGui_Context ctx, int key, optional bool repeatIn)","python":"bool ImGui_IsKeyPressed(ImGui_Context* ctx, int key, bool* repeatInOptional)","cpp":"bool ImGui_IsKeyPressed(ImGui_Context* ctx, int key, bool* repeatInOptional)"},"title":"ImGui_IsKeyPressed","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Was key pressed (went from !Down to Down)?\nIf repeat=true, uses ConfigVar_KeyRepeatDelay / ConfigVar_KeyRepeatRate.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer key","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsKeyReleased","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"key","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsKeyReleased\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"key"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsKeyReleased(ImGui_Context ctx, integer key)","eel":"bool extension_api(\"ImGui_IsKeyReleased\", ImGui_Context ctx, int key)","python":"bool ImGui_IsKeyReleased(ImGui_Context* ctx, int key)","cpp":"bool ImGui_IsKeyReleased(ImGui_Context* ctx, int key)"},"title":"ImGui_IsKeyReleased","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Was key released (went from Down to !Down)?","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer button","description":""},{"identifier":"optional boolean repeatIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsMouseClicked","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"button","type":"integer"},{"isOptional":true,"type":"boolean","identifier":"repeatIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsMouseClicked\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"button"},{"identifier":"repeatIn","modifier":"optional","type_name":"bool"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsMouseClicked(ImGui_Context ctx, integer button, optional boolean repeatIn)","eel":"bool extension_api(\"ImGui_IsMouseClicked\", ImGui_Context ctx, int button, optional bool repeatIn)","python":"bool ImGui_IsMouseClicked(ImGui_Context* ctx, int button, bool* repeatInOptional)","cpp":"bool ImGui_IsMouseClicked(ImGui_Context* ctx, int button, bool* repeatInOptional)"},"title":"ImGui_IsMouseClicked","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Did mouse button clicked? (went from !Down to Down).\nSame as GetMouseClickedCount() == 1.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer button","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsMouseDoubleClicked","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"button","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsMouseDoubleClicked\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"button"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsMouseDoubleClicked(ImGui_Context ctx, integer button)","eel":"bool extension_api(\"ImGui_IsMouseDoubleClicked\", ImGui_Context ctx, int button)","python":"bool ImGui_IsMouseDoubleClicked(ImGui_Context* ctx, int button)","cpp":"bool ImGui_IsMouseDoubleClicked(ImGui_Context* ctx, int button)"},"title":"ImGui_IsMouseDoubleClicked","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Did mouse button double-clicked? Same as GetMouseClickedCount() == 2.\n(Note that a double-click will also report IsMouseClicked() == true)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer button","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsMouseDown","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"button","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsMouseDown\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"button"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsMouseDown(ImGui_Context ctx, integer button)","eel":"bool extension_api(\"ImGui_IsMouseDown\", ImGui_Context ctx, int button)","python":"bool ImGui_IsMouseDown(ImGui_Context* ctx, int button)","cpp":"bool ImGui_IsMouseDown(ImGui_Context* ctx, int button)"},"title":"ImGui_IsMouseDown","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Is mouse button held?","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer button","description":""},{"identifier":"optional number lock_thresholdIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsMouseDragging","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"button","type":"integer"},{"isOptional":true,"type":"number","identifier":"lock_thresholdIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsMouseDragging\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"button"},{"type_name":"optional","identifier":"lock_thresholdIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsMouseDragging(ImGui_Context ctx, integer button, optional number lock_thresholdIn)","eel":"bool extension_api(\"ImGui_IsMouseDragging\", ImGui_Context ctx, int button, optional lock_thresholdIn)","python":"bool ImGui_IsMouseDragging(ImGui_Context* ctx, int button, double* lock_thresholdInOptional)","cpp":"bool ImGui_IsMouseDragging(ImGui_Context* ctx, int button, double* lock_thresholdInOptional)"},"title":"ImGui_IsMouseDragging","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Is mouse dragging? (if lock_threshold &lt; -1.0, uses ConfigVar_MouseDragThreshold)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"number r_min_x","description":""},{"identifier":"number r_min_y","description":""},{"identifier":"number r_max_x","description":""},{"identifier":"number r_max_y","description":""},{"identifier":"optional boolean clipIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsMouseHoveringRect","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"r_min_x","type":"number"},{"identifier":"r_min_y","type":"number"},{"identifier":"r_max_x","type":"number"},{"identifier":"r_max_y","type":"number"},{"isOptional":true,"type":"boolean","identifier":"clipIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsMouseHoveringRect\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"r_min_x"},{"identifier":"r_min_y"},{"identifier":"r_max_x"},{"identifier":"r_max_y"},{"identifier":"clipIn","modifier":"optional","type_name":"bool"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsMouseHoveringRect(ImGui_Context ctx, number r_min_x, number r_min_y, number r_max_x, number r_max_y, optional boolean clipIn)","eel":"bool extension_api(\"ImGui_IsMouseHoveringRect\", ImGui_Context ctx, r_min_x, r_min_y, r_max_x, r_max_y, optional bool clipIn)","python":"bool ImGui_IsMouseHoveringRect(ImGui_Context* ctx, double r_min_x, double r_min_y, double r_max_x, double r_max_y, bool* clipInOptional)","cpp":"bool ImGui_IsMouseHoveringRect(ImGui_Context* ctx, double r_min_x, double r_min_y, double r_max_x, double r_max_y, bool* clipInOptional)"},"title":"ImGui_IsMouseHoveringRect","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Is mouse hovering given bounding rect (in screen space).\nClipped by current clipping settings, but disregarding of other consideration\nof focus/window ordering/popup-block.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional number mouse_pos_xIn","description":""},{"identifier":"optional number mouse_pos_yIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsMousePosValid","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"number","identifier":"mouse_pos_xIn"},{"isOptional":true,"type":"number","identifier":"mouse_pos_yIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsMousePosValid\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"optional","identifier":"mouse_pos_xIn"},{"type_name":"optional","identifier":"mouse_pos_yIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsMousePosValid(ImGui_Context ctx, optional number mouse_pos_xIn, optional number mouse_pos_yIn)","eel":"bool extension_api(\"ImGui_IsMousePosValid\", ImGui_Context ctx, optional mouse_pos_xIn, optional mouse_pos_yIn)","python":"bool ImGui_IsMousePosValid(ImGui_Context* ctx, double* mouse_pos_xInOptional, double* mouse_pos_yInOptional)","cpp":"bool ImGui_IsMousePosValid(ImGui_Context* ctx, double* mouse_pos_xInOptional, double* mouse_pos_yInOptional)"},"title":"ImGui_IsMousePosValid","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer button","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsMouseReleased","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"button","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsMouseReleased\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"button"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsMouseReleased(ImGui_Context ctx, integer button)","eel":"bool extension_api(\"ImGui_IsMouseReleased\", ImGui_Context ctx, int button)","python":"bool ImGui_IsMouseReleased(ImGui_Context* ctx, int button)","cpp":"bool ImGui_IsMouseReleased(ImGui_Context* ctx, int button)"},"title":"ImGui_IsMouseReleased","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Did mouse button released? (went from Down to !Down)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string str_id","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsPopupOpen","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"str_id","type":"string"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsPopupOpen\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"str_id\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsPopupOpen(ImGui_Context ctx, string str_id, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_IsPopupOpen\", ImGui_Context ctx, \"str_id\", optional int flagsIn)","python":"bool ImGui_IsPopupOpen(ImGui_Context* ctx, const char* str_id, int* flagsInOptional)","cpp":"bool ImGui_IsPopupOpen(ImGui_Context* ctx, const char* str_id, int* flagsInOptional)"},"title":"ImGui_IsPopupOpen","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Return true if the popup is open at the current BeginPopup level of the\npopup stack.\n\n- With PopupFlags_AnyPopupId: return true if any popup is open at the current\n  BeginPopup() level of the popup stack.\n- With PopupFlags_AnyPopupId + PopupFlags_AnyPopupLevel: return true if any\n  popup is open.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"number size_w","description":""},{"identifier":"number size_h","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsRectVisible","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"size_w","type":"number"},{"identifier":"size_h","type":"number"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsRectVisible\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"size_w"},{"identifier":"size_h"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsRectVisible(ImGui_Context ctx, number size_w, number size_h)","eel":"bool extension_api(\"ImGui_IsRectVisible\", ImGui_Context ctx, size_w, size_h)","python":"bool ImGui_IsRectVisible(ImGui_Context* ctx, double size_w, double size_h)","cpp":"bool ImGui_IsRectVisible(ImGui_Context* ctx, double size_w, double size_h)"},"title":"ImGui_IsRectVisible","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Test if rectangle (of given size, starting from cursor position) is\nvisible / not clipped.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"number rect_min_x","description":""},{"identifier":"number rect_min_y","description":""},{"identifier":"number rect_max_x","description":""},{"identifier":"number rect_max_y","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsRectVisibleEx","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"rect_min_x","type":"number"},{"identifier":"rect_min_y","type":"number"},{"identifier":"rect_max_x","type":"number"},{"identifier":"rect_max_y","type":"number"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsRectVisibleEx\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"rect_min_x"},{"identifier":"rect_min_y"},{"identifier":"rect_max_x"},{"identifier":"rect_max_y"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsRectVisibleEx(ImGui_Context ctx, number rect_min_x, number rect_min_y, number rect_max_x, number rect_max_y)","eel":"bool extension_api(\"ImGui_IsRectVisibleEx\", ImGui_Context ctx, rect_min_x, rect_min_y, rect_max_x, rect_max_y)","python":"bool ImGui_IsRectVisibleEx(ImGui_Context* ctx, double rect_min_x, double rect_min_y, double rect_max_x, double rect_max_y)","cpp":"bool ImGui_IsRectVisibleEx(ImGui_Context* ctx, double rect_min_x, double rect_min_y, double rect_max_x, double rect_max_y)"},"title":"ImGui_IsRectVisibleEx","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Test if rectangle (in screen space) is visible / not clipped. to perform\ncoarse clipping on user's side.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsWindowAppearing","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsWindowAppearing\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsWindowAppearing(ImGui_Context ctx)","eel":"bool extension_api(\"ImGui_IsWindowAppearing\", ImGui_Context ctx)","python":"bool ImGui_IsWindowAppearing(ImGui_Context* ctx)","cpp":"bool ImGui_IsWindowAppearing(ImGui_Context* ctx)"},"title":"ImGui_IsWindowAppearing","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Use after Begin/BeginPopup/BeginPopupModal to tell if a window just opened.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsWindowDocked","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsWindowDocked\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsWindowDocked(ImGui_Context ctx)","eel":"bool extension_api(\"ImGui_IsWindowDocked\", ImGui_Context ctx)","python":"bool ImGui_IsWindowDocked(ImGui_Context* ctx)","cpp":"bool ImGui_IsWindowDocked(ImGui_Context* ctx)"},"title":"ImGui_IsWindowDocked","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Is current window docked into another window or a REAPER docker?","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsWindowFocused","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsWindowFocused\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsWindowFocused(ImGui_Context ctx, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_IsWindowFocused\", ImGui_Context ctx, optional int flagsIn)","python":"bool ImGui_IsWindowFocused(ImGui_Context* ctx, int* flagsInOptional)","cpp":"bool ImGui_IsWindowFocused(ImGui_Context* ctx, int* flagsInOptional)"},"title":"ImGui_IsWindowFocused","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Is current window focused? or its root/child, depending on flags.\nSee flags for options.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_IsWindowHovered","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_IsWindowHovered\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_IsWindowHovered(ImGui_Context ctx, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_IsWindowHovered\", ImGui_Context ctx, optional int flagsIn)","python":"bool ImGui_IsWindowHovered(ImGui_Context* ctx, int* flagsInOptional)","cpp":"bool ImGui_IsWindowHovered(ImGui_Context* ctx, int* flagsInOptional)"},"title":"ImGui_IsWindowHovered","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Is current window hovered (and typically: not blocked by a popup/modal)?\nSee flags for options.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_0","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_0\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_0()","eel":"int extension_api(\"ImGui_Key_0\")","python":"int ImGui_Key_0()","cpp":"int ImGui_Key_0()"},"title":"ImGui_Key_0","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_1","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_1\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_1()","eel":"int extension_api(\"ImGui_Key_1\")","python":"int ImGui_Key_1()","cpp":"int ImGui_Key_1()"},"title":"ImGui_Key_1","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_2","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_2\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_2()","eel":"int extension_api(\"ImGui_Key_2\")","python":"int ImGui_Key_2()","cpp":"int ImGui_Key_2()"},"title":"ImGui_Key_2","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_3","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_3\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_3()","eel":"int extension_api(\"ImGui_Key_3\")","python":"int ImGui_Key_3()","cpp":"int ImGui_Key_3()"},"title":"ImGui_Key_3","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_4","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_4\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_4()","eel":"int extension_api(\"ImGui_Key_4\")","python":"int ImGui_Key_4()","cpp":"int ImGui_Key_4()"},"title":"ImGui_Key_4","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_5","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_5\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_5()","eel":"int extension_api(\"ImGui_Key_5\")","python":"int ImGui_Key_5()","cpp":"int ImGui_Key_5()"},"title":"ImGui_Key_5","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_6","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_6\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_6()","eel":"int extension_api(\"ImGui_Key_6\")","python":"int ImGui_Key_6()","cpp":"int ImGui_Key_6()"},"title":"ImGui_Key_6","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_7","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_7\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_7()","eel":"int extension_api(\"ImGui_Key_7\")","python":"int ImGui_Key_7()","cpp":"int ImGui_Key_7()"},"title":"ImGui_Key_7","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_8","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_8\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_8()","eel":"int extension_api(\"ImGui_Key_8\")","python":"int ImGui_Key_8()","cpp":"int ImGui_Key_8()"},"title":"ImGui_Key_8","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_9","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_9\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_9()","eel":"int extension_api(\"ImGui_Key_9\")","python":"int ImGui_Key_9()","cpp":"int ImGui_Key_9()"},"title":"ImGui_Key_9","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_A","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_A\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_A()","eel":"int extension_api(\"ImGui_Key_A\")","python":"int ImGui_Key_A()","cpp":"int ImGui_Key_A()"},"title":"ImGui_Key_A","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Apostrophe","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Apostrophe\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Apostrophe()","eel":"int extension_api(\"ImGui_Key_Apostrophe\")","python":"int ImGui_Key_Apostrophe()","cpp":"int ImGui_Key_Apostrophe()"},"title":"ImGui_Key_Apostrophe","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"'","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_B","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_B\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_B()","eel":"int extension_api(\"ImGui_Key_B\")","python":"int ImGui_Key_B()","cpp":"int ImGui_Key_B()"},"title":"ImGui_Key_B","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Backslash","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Backslash\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Backslash()","eel":"int extension_api(\"ImGui_Key_Backslash\")","python":"int ImGui_Key_Backslash()","cpp":"int ImGui_Key_Backslash()"},"title":"ImGui_Key_Backslash","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"\\","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Backspace","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Backspace\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Backspace()","eel":"int extension_api(\"ImGui_Key_Backspace\")","python":"int ImGui_Key_Backspace()","cpp":"int ImGui_Key_Backspace()"},"title":"ImGui_Key_Backspace","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_C","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_C\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_C()","eel":"int extension_api(\"ImGui_Key_C\")","python":"int ImGui_Key_C()","cpp":"int ImGui_Key_C()"},"title":"ImGui_Key_C","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_CapsLock","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_CapsLock\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_CapsLock()","eel":"int extension_api(\"ImGui_Key_CapsLock\")","python":"int ImGui_Key_CapsLock()","cpp":"int ImGui_Key_CapsLock()"},"title":"ImGui_Key_CapsLock","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Comma","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Comma\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Comma()","eel":"int extension_api(\"ImGui_Key_Comma\")","python":"int ImGui_Key_Comma()","cpp":"int ImGui_Key_Comma()"},"title":"ImGui_Key_Comma","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":",","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_D","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_D\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_D()","eel":"int extension_api(\"ImGui_Key_D\")","python":"int ImGui_Key_D()","cpp":"int ImGui_Key_D()"},"title":"ImGui_Key_D","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Delete","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Delete\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Delete()","eel":"int extension_api(\"ImGui_Key_Delete\")","python":"int ImGui_Key_Delete()","cpp":"int ImGui_Key_Delete()"},"title":"ImGui_Key_Delete","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_DownArrow","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_DownArrow\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_DownArrow()","eel":"int extension_api(\"ImGui_Key_DownArrow\")","python":"int ImGui_Key_DownArrow()","cpp":"int ImGui_Key_DownArrow()"},"title":"ImGui_Key_DownArrow","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_E","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_E\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_E()","eel":"int extension_api(\"ImGui_Key_E\")","python":"int ImGui_Key_E()","cpp":"int ImGui_Key_E()"},"title":"ImGui_Key_E","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_End","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_End\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_End()","eel":"int extension_api(\"ImGui_Key_End\")","python":"int ImGui_Key_End()","cpp":"int ImGui_Key_End()"},"title":"ImGui_Key_End","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Enter","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Enter\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Enter()","eel":"int extension_api(\"ImGui_Key_Enter\")","python":"int ImGui_Key_Enter()","cpp":"int ImGui_Key_Enter()"},"title":"ImGui_Key_Enter","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Equal","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Equal\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Equal()","eel":"int extension_api(\"ImGui_Key_Equal\")","python":"int ImGui_Key_Equal()","cpp":"int ImGui_Key_Equal()"},"title":"ImGui_Key_Equal","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"=","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Escape","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Escape\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Escape()","eel":"int extension_api(\"ImGui_Key_Escape\")","python":"int ImGui_Key_Escape()","cpp":"int ImGui_Key_Escape()"},"title":"ImGui_Key_Escape","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_F","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_F\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_F()","eel":"int extension_api(\"ImGui_Key_F\")","python":"int ImGui_Key_F()","cpp":"int ImGui_Key_F()"},"title":"ImGui_Key_F","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_F1","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_F1\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_F1()","eel":"int extension_api(\"ImGui_Key_F1\")","python":"int ImGui_Key_F1()","cpp":"int ImGui_Key_F1()"},"title":"ImGui_Key_F1","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_F10","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_F10\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_F10()","eel":"int extension_api(\"ImGui_Key_F10\")","python":"int ImGui_Key_F10()","cpp":"int ImGui_Key_F10()"},"title":"ImGui_Key_F10","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_F11","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_F11\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_F11()","eel":"int extension_api(\"ImGui_Key_F11\")","python":"int ImGui_Key_F11()","cpp":"int ImGui_Key_F11()"},"title":"ImGui_Key_F11","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_F12","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_F12\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_F12()","eel":"int extension_api(\"ImGui_Key_F12\")","python":"int ImGui_Key_F12()","cpp":"int ImGui_Key_F12()"},"title":"ImGui_Key_F12","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_F2","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_F2\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_F2()","eel":"int extension_api(\"ImGui_Key_F2\")","python":"int ImGui_Key_F2()","cpp":"int ImGui_Key_F2()"},"title":"ImGui_Key_F2","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_F3","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_F3\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_F3()","eel":"int extension_api(\"ImGui_Key_F3\")","python":"int ImGui_Key_F3()","cpp":"int ImGui_Key_F3()"},"title":"ImGui_Key_F3","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_F4","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_F4\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_F4()","eel":"int extension_api(\"ImGui_Key_F4\")","python":"int ImGui_Key_F4()","cpp":"int ImGui_Key_F4()"},"title":"ImGui_Key_F4","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_F5","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_F5\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_F5()","eel":"int extension_api(\"ImGui_Key_F5\")","python":"int ImGui_Key_F5()","cpp":"int ImGui_Key_F5()"},"title":"ImGui_Key_F5","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_F6","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_F6\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_F6()","eel":"int extension_api(\"ImGui_Key_F6\")","python":"int ImGui_Key_F6()","cpp":"int ImGui_Key_F6()"},"title":"ImGui_Key_F6","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_F7","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_F7\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_F7()","eel":"int extension_api(\"ImGui_Key_F7\")","python":"int ImGui_Key_F7()","cpp":"int ImGui_Key_F7()"},"title":"ImGui_Key_F7","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_F8","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_F8\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_F8()","eel":"int extension_api(\"ImGui_Key_F8\")","python":"int ImGui_Key_F8()","cpp":"int ImGui_Key_F8()"},"title":"ImGui_Key_F8","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_F9","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_F9\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_F9()","eel":"int extension_api(\"ImGui_Key_F9\")","python":"int ImGui_Key_F9()","cpp":"int ImGui_Key_F9()"},"title":"ImGui_Key_F9","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_G","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_G\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_G()","eel":"int extension_api(\"ImGui_Key_G\")","python":"int ImGui_Key_G()","cpp":"int ImGui_Key_G()"},"title":"ImGui_Key_G","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_GraveAccent","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_GraveAccent\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_GraveAccent()","eel":"int extension_api(\"ImGui_Key_GraveAccent\")","python":"int ImGui_Key_GraveAccent()","cpp":"int ImGui_Key_GraveAccent()"},"title":"ImGui_Key_GraveAccent","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"`","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_H","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_H\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_H()","eel":"int extension_api(\"ImGui_Key_H\")","python":"int ImGui_Key_H()","cpp":"int ImGui_Key_H()"},"title":"ImGui_Key_H","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Home","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Home\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Home()","eel":"int extension_api(\"ImGui_Key_Home\")","python":"int ImGui_Key_Home()","cpp":"int ImGui_Key_Home()"},"title":"ImGui_Key_Home","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_I","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_I\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_I()","eel":"int extension_api(\"ImGui_Key_I\")","python":"int ImGui_Key_I()","cpp":"int ImGui_Key_I()"},"title":"ImGui_Key_I","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Insert","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Insert\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Insert()","eel":"int extension_api(\"ImGui_Key_Insert\")","python":"int ImGui_Key_Insert()","cpp":"int ImGui_Key_Insert()"},"title":"ImGui_Key_Insert","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_J","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_J\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_J()","eel":"int extension_api(\"ImGui_Key_J\")","python":"int ImGui_Key_J()","cpp":"int ImGui_Key_J()"},"title":"ImGui_Key_J","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_K","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_K\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_K()","eel":"int extension_api(\"ImGui_Key_K\")","python":"int ImGui_Key_K()","cpp":"int ImGui_Key_K()"},"title":"ImGui_Key_K","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Keypad0","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Keypad0\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Keypad0()","eel":"int extension_api(\"ImGui_Key_Keypad0\")","python":"int ImGui_Key_Keypad0()","cpp":"int ImGui_Key_Keypad0()"},"title":"ImGui_Key_Keypad0","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Keypad1","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Keypad1\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Keypad1()","eel":"int extension_api(\"ImGui_Key_Keypad1\")","python":"int ImGui_Key_Keypad1()","cpp":"int ImGui_Key_Keypad1()"},"title":"ImGui_Key_Keypad1","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Keypad2","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Keypad2\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Keypad2()","eel":"int extension_api(\"ImGui_Key_Keypad2\")","python":"int ImGui_Key_Keypad2()","cpp":"int ImGui_Key_Keypad2()"},"title":"ImGui_Key_Keypad2","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Keypad3","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Keypad3\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Keypad3()","eel":"int extension_api(\"ImGui_Key_Keypad3\")","python":"int ImGui_Key_Keypad3()","cpp":"int ImGui_Key_Keypad3()"},"title":"ImGui_Key_Keypad3","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Keypad4","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Keypad4\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Keypad4()","eel":"int extension_api(\"ImGui_Key_Keypad4\")","python":"int ImGui_Key_Keypad4()","cpp":"int ImGui_Key_Keypad4()"},"title":"ImGui_Key_Keypad4","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Keypad5","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Keypad5\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Keypad5()","eel":"int extension_api(\"ImGui_Key_Keypad5\")","python":"int ImGui_Key_Keypad5()","cpp":"int ImGui_Key_Keypad5()"},"title":"ImGui_Key_Keypad5","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Keypad6","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Keypad6\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Keypad6()","eel":"int extension_api(\"ImGui_Key_Keypad6\")","python":"int ImGui_Key_Keypad6()","cpp":"int ImGui_Key_Keypad6()"},"title":"ImGui_Key_Keypad6","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Keypad7","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Keypad7\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Keypad7()","eel":"int extension_api(\"ImGui_Key_Keypad7\")","python":"int ImGui_Key_Keypad7()","cpp":"int ImGui_Key_Keypad7()"},"title":"ImGui_Key_Keypad7","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Keypad8","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Keypad8\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Keypad8()","eel":"int extension_api(\"ImGui_Key_Keypad8\")","python":"int ImGui_Key_Keypad8()","cpp":"int ImGui_Key_Keypad8()"},"title":"ImGui_Key_Keypad8","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Keypad9","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Keypad9\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Keypad9()","eel":"int extension_api(\"ImGui_Key_Keypad9\")","python":"int ImGui_Key_Keypad9()","cpp":"int ImGui_Key_Keypad9()"},"title":"ImGui_Key_Keypad9","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_KeypadAdd","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_KeypadAdd\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_KeypadAdd()","eel":"int extension_api(\"ImGui_Key_KeypadAdd\")","python":"int ImGui_Key_KeypadAdd()","cpp":"int ImGui_Key_KeypadAdd()"},"title":"ImGui_Key_KeypadAdd","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_KeypadDecimal","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_KeypadDecimal\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_KeypadDecimal()","eel":"int extension_api(\"ImGui_Key_KeypadDecimal\")","python":"int ImGui_Key_KeypadDecimal()","cpp":"int ImGui_Key_KeypadDecimal()"},"title":"ImGui_Key_KeypadDecimal","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_KeypadDivide","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_KeypadDivide\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_KeypadDivide()","eel":"int extension_api(\"ImGui_Key_KeypadDivide\")","python":"int ImGui_Key_KeypadDivide()","cpp":"int ImGui_Key_KeypadDivide()"},"title":"ImGui_Key_KeypadDivide","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_KeypadEnter","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_KeypadEnter\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_KeypadEnter()","eel":"int extension_api(\"ImGui_Key_KeypadEnter\")","python":"int ImGui_Key_KeypadEnter()","cpp":"int ImGui_Key_KeypadEnter()"},"title":"ImGui_Key_KeypadEnter","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_KeypadEqual","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_KeypadEqual\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_KeypadEqual()","eel":"int extension_api(\"ImGui_Key_KeypadEqual\")","python":"int ImGui_Key_KeypadEqual()","cpp":"int ImGui_Key_KeypadEqual()"},"title":"ImGui_Key_KeypadEqual","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_KeypadMultiply","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_KeypadMultiply\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_KeypadMultiply()","eel":"int extension_api(\"ImGui_Key_KeypadMultiply\")","python":"int ImGui_Key_KeypadMultiply()","cpp":"int ImGui_Key_KeypadMultiply()"},"title":"ImGui_Key_KeypadMultiply","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_KeypadSubtract","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_KeypadSubtract\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_KeypadSubtract()","eel":"int extension_api(\"ImGui_Key_KeypadSubtract\")","python":"int ImGui_Key_KeypadSubtract()","cpp":"int ImGui_Key_KeypadSubtract()"},"title":"ImGui_Key_KeypadSubtract","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_L","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_L\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_L()","eel":"int extension_api(\"ImGui_Key_L\")","python":"int ImGui_Key_L()","cpp":"int ImGui_Key_L()"},"title":"ImGui_Key_L","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_LeftAlt","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_LeftAlt\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_LeftAlt()","eel":"int extension_api(\"ImGui_Key_LeftAlt\")","python":"int ImGui_Key_LeftAlt()","cpp":"int ImGui_Key_LeftAlt()"},"title":"ImGui_Key_LeftAlt","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_LeftArrow","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_LeftArrow\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_LeftArrow()","eel":"int extension_api(\"ImGui_Key_LeftArrow\")","python":"int ImGui_Key_LeftArrow()","cpp":"int ImGui_Key_LeftArrow()"},"title":"ImGui_Key_LeftArrow","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_LeftBracket","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_LeftBracket\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_LeftBracket()","eel":"int extension_api(\"ImGui_Key_LeftBracket\")","python":"int ImGui_Key_LeftBracket()","cpp":"int ImGui_Key_LeftBracket()"},"title":"ImGui_Key_LeftBracket","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"[","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_LeftCtrl","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_LeftCtrl\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_LeftCtrl()","eel":"int extension_api(\"ImGui_Key_LeftCtrl\")","python":"int ImGui_Key_LeftCtrl()","cpp":"int ImGui_Key_LeftCtrl()"},"title":"ImGui_Key_LeftCtrl","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_LeftShift","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_LeftShift\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_LeftShift()","eel":"int extension_api(\"ImGui_Key_LeftShift\")","python":"int ImGui_Key_LeftShift()","cpp":"int ImGui_Key_LeftShift()"},"title":"ImGui_Key_LeftShift","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_LeftSuper","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_LeftSuper\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_LeftSuper()","eel":"int extension_api(\"ImGui_Key_LeftSuper\")","python":"int ImGui_Key_LeftSuper()","cpp":"int ImGui_Key_LeftSuper()"},"title":"ImGui_Key_LeftSuper","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_M","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_M\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_M()","eel":"int extension_api(\"ImGui_Key_M\")","python":"int ImGui_Key_M()","cpp":"int ImGui_Key_M()"},"title":"ImGui_Key_M","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Menu","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Menu\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Menu()","eel":"int extension_api(\"ImGui_Key_Menu\")","python":"int ImGui_Key_Menu()","cpp":"int ImGui_Key_Menu()"},"title":"ImGui_Key_Menu","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Minus","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Minus\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Minus()","eel":"int extension_api(\"ImGui_Key_Minus\")","python":"int ImGui_Key_Minus()","cpp":"int ImGui_Key_Minus()"},"title":"ImGui_Key_Minus","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"-","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_MouseLeft","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_MouseLeft\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_MouseLeft()","eel":"int extension_api(\"ImGui_Key_MouseLeft\")","python":"int ImGui_Key_MouseLeft()","cpp":"int ImGui_Key_MouseLeft()"},"title":"ImGui_Key_MouseLeft","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_MouseMiddle","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_MouseMiddle\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_MouseMiddle()","eel":"int extension_api(\"ImGui_Key_MouseMiddle\")","python":"int ImGui_Key_MouseMiddle()","cpp":"int ImGui_Key_MouseMiddle()"},"title":"ImGui_Key_MouseMiddle","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_MouseRight","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_MouseRight\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_MouseRight()","eel":"int extension_api(\"ImGui_Key_MouseRight\")","python":"int ImGui_Key_MouseRight()","cpp":"int ImGui_Key_MouseRight()"},"title":"ImGui_Key_MouseRight","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_MouseWheelX","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_MouseWheelX\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_MouseWheelX()","eel":"int extension_api(\"ImGui_Key_MouseWheelX\")","python":"int ImGui_Key_MouseWheelX()","cpp":"int ImGui_Key_MouseWheelX()"},"title":"ImGui_Key_MouseWheelX","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_MouseWheelY","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_MouseWheelY\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_MouseWheelY()","eel":"int extension_api(\"ImGui_Key_MouseWheelY\")","python":"int ImGui_Key_MouseWheelY()","cpp":"int ImGui_Key_MouseWheelY()"},"title":"ImGui_Key_MouseWheelY","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_MouseX1","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_MouseX1\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_MouseX1()","eel":"int extension_api(\"ImGui_Key_MouseX1\")","python":"int ImGui_Key_MouseX1()","cpp":"int ImGui_Key_MouseX1()"},"title":"ImGui_Key_MouseX1","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_MouseX2","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_MouseX2\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_MouseX2()","eel":"int extension_api(\"ImGui_Key_MouseX2\")","python":"int ImGui_Key_MouseX2()","cpp":"int ImGui_Key_MouseX2()"},"title":"ImGui_Key_MouseX2","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_N","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_N\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_N()","eel":"int extension_api(\"ImGui_Key_N\")","python":"int ImGui_Key_N()","cpp":"int ImGui_Key_N()"},"title":"ImGui_Key_N","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_NumLock","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_NumLock\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_NumLock()","eel":"int extension_api(\"ImGui_Key_NumLock\")","python":"int ImGui_Key_NumLock()","cpp":"int ImGui_Key_NumLock()"},"title":"ImGui_Key_NumLock","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_O","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_O\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_O()","eel":"int extension_api(\"ImGui_Key_O\")","python":"int ImGui_Key_O()","cpp":"int ImGui_Key_O()"},"title":"ImGui_Key_O","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_P","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_P\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_P()","eel":"int extension_api(\"ImGui_Key_P\")","python":"int ImGui_Key_P()","cpp":"int ImGui_Key_P()"},"title":"ImGui_Key_P","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_PageDown","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_PageDown\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_PageDown()","eel":"int extension_api(\"ImGui_Key_PageDown\")","python":"int ImGui_Key_PageDown()","cpp":"int ImGui_Key_PageDown()"},"title":"ImGui_Key_PageDown","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_PageUp","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_PageUp\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_PageUp()","eel":"int extension_api(\"ImGui_Key_PageUp\")","python":"int ImGui_Key_PageUp()","cpp":"int ImGui_Key_PageUp()"},"title":"ImGui_Key_PageUp","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Pause","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Pause\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Pause()","eel":"int extension_api(\"ImGui_Key_Pause\")","python":"int ImGui_Key_Pause()","cpp":"int ImGui_Key_Pause()"},"title":"ImGui_Key_Pause","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Period","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Period\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Period()","eel":"int extension_api(\"ImGui_Key_Period\")","python":"int ImGui_Key_Period()","cpp":"int ImGui_Key_Period()"},"title":"ImGui_Key_Period","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":".","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_PrintScreen","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_PrintScreen\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_PrintScreen()","eel":"int extension_api(\"ImGui_Key_PrintScreen\")","python":"int ImGui_Key_PrintScreen()","cpp":"int ImGui_Key_PrintScreen()"},"title":"ImGui_Key_PrintScreen","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Q","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Q\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Q()","eel":"int extension_api(\"ImGui_Key_Q\")","python":"int ImGui_Key_Q()","cpp":"int ImGui_Key_Q()"},"title":"ImGui_Key_Q","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_R","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_R\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_R()","eel":"int extension_api(\"ImGui_Key_R\")","python":"int ImGui_Key_R()","cpp":"int ImGui_Key_R()"},"title":"ImGui_Key_R","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_RightAlt","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_RightAlt\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_RightAlt()","eel":"int extension_api(\"ImGui_Key_RightAlt\")","python":"int ImGui_Key_RightAlt()","cpp":"int ImGui_Key_RightAlt()"},"title":"ImGui_Key_RightAlt","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_RightArrow","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_RightArrow\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_RightArrow()","eel":"int extension_api(\"ImGui_Key_RightArrow\")","python":"int ImGui_Key_RightArrow()","cpp":"int ImGui_Key_RightArrow()"},"title":"ImGui_Key_RightArrow","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_RightBracket","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_RightBracket\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_RightBracket()","eel":"int extension_api(\"ImGui_Key_RightBracket\")","python":"int ImGui_Key_RightBracket()","cpp":"int ImGui_Key_RightBracket()"},"title":"ImGui_Key_RightBracket","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"]","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_RightCtrl","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_RightCtrl\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_RightCtrl()","eel":"int extension_api(\"ImGui_Key_RightCtrl\")","python":"int ImGui_Key_RightCtrl()","cpp":"int ImGui_Key_RightCtrl()"},"title":"ImGui_Key_RightCtrl","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_RightShift","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_RightShift\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_RightShift()","eel":"int extension_api(\"ImGui_Key_RightShift\")","python":"int ImGui_Key_RightShift()","cpp":"int ImGui_Key_RightShift()"},"title":"ImGui_Key_RightShift","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_RightSuper","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_RightSuper\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_RightSuper()","eel":"int extension_api(\"ImGui_Key_RightSuper\")","python":"int ImGui_Key_RightSuper()","cpp":"int ImGui_Key_RightSuper()"},"title":"ImGui_Key_RightSuper","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_S","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_S\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_S()","eel":"int extension_api(\"ImGui_Key_S\")","python":"int ImGui_Key_S()","cpp":"int ImGui_Key_S()"},"title":"ImGui_Key_S","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_ScrollLock","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_ScrollLock\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_ScrollLock()","eel":"int extension_api(\"ImGui_Key_ScrollLock\")","python":"int ImGui_Key_ScrollLock()","cpp":"int ImGui_Key_ScrollLock()"},"title":"ImGui_Key_ScrollLock","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Semicolon","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Semicolon\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Semicolon()","eel":"int extension_api(\"ImGui_Key_Semicolon\")","python":"int ImGui_Key_Semicolon()","cpp":"int ImGui_Key_Semicolon()"},"title":"ImGui_Key_Semicolon","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":";","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Slash","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Slash\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Slash()","eel":"int extension_api(\"ImGui_Key_Slash\")","python":"int ImGui_Key_Slash()","cpp":"int ImGui_Key_Slash()"},"title":"ImGui_Key_Slash","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"/","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Space","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Space\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Space()","eel":"int extension_api(\"ImGui_Key_Space\")","python":"int ImGui_Key_Space()","cpp":"int ImGui_Key_Space()"},"title":"ImGui_Key_Space","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_T","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_T\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_T()","eel":"int extension_api(\"ImGui_Key_T\")","python":"int ImGui_Key_T()","cpp":"int ImGui_Key_T()"},"title":"ImGui_Key_T","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Tab","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Tab\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Tab()","eel":"int extension_api(\"ImGui_Key_Tab\")","python":"int ImGui_Key_Tab()","cpp":"int ImGui_Key_Tab()"},"title":"ImGui_Key_Tab","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_U","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_U\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_U()","eel":"int extension_api(\"ImGui_Key_U\")","python":"int ImGui_Key_U()","cpp":"int ImGui_Key_U()"},"title":"ImGui_Key_U","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_UpArrow","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_UpArrow\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_UpArrow()","eel":"int extension_api(\"ImGui_Key_UpArrow\")","python":"int ImGui_Key_UpArrow()","cpp":"int ImGui_Key_UpArrow()"},"title":"ImGui_Key_UpArrow","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_V","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_V\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_V()","eel":"int extension_api(\"ImGui_Key_V\")","python":"int ImGui_Key_V()","cpp":"int ImGui_Key_V()"},"title":"ImGui_Key_V","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_W","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_W\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_W()","eel":"int extension_api(\"ImGui_Key_W\")","python":"int ImGui_Key_W()","cpp":"int ImGui_Key_W()"},"title":"ImGui_Key_W","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_X","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_X\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_X()","eel":"int extension_api(\"ImGui_Key_X\")","python":"int ImGui_Key_X()","cpp":"int ImGui_Key_X()"},"title":"ImGui_Key_X","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Y","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Y\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Y()","eel":"int extension_api(\"ImGui_Key_Y\")","python":"int ImGui_Key_Y()","cpp":"int ImGui_Key_Y()"},"title":"ImGui_Key_Y","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Key_Z","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Key_Z\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Key_Z()","eel":"int extension_api(\"ImGui_Key_Z\")","python":"int ImGui_Key_Z()","cpp":"int ImGui_Key_Z()"},"title":"ImGui_Key_Z","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"string text","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_LabelText","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"text","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_LabelText\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"identifier":"\"text\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_LabelText(ImGui_Context ctx, string label, string text)","eel":"extension_api(\"ImGui_LabelText\", ImGui_Context ctx, \"label\", \"text\")","python":"void ImGui_LabelText(ImGui_Context* ctx, const char* label, const char* text)","cpp":"void ImGui_LabelText(ImGui_Context* ctx, const char* label, const char* text)"},"title":"ImGui_LabelText","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Display text+label aligned the same way as value+label widgets","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"integer current_item","description":""},{"identifier":"string items","description":""},{"identifier":"optional integer height_in_itemsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_ListBox","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"current_item","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"current_item","type":"integer"},{"identifier":"items","type":"string"},{"isOptional":true,"type":"integer","identifier":"height_in_itemsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_ListBox\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"int","identifier":"&amp;current_item"},{"identifier":"\"items\""},{"identifier":"height_in_itemsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer current_item","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer current_item = reaper.ImGui_ListBox(ImGui_Context ctx, string label, integer current_item, string items, optional integer height_in_itemsIn)","eel":"bool extension_api(\"ImGui_ListBox\", ImGui_Context ctx, \"label\", int &amp;current_item, \"items\", optional int height_in_itemsIn)","python":"bool ImGui_ListBox(ImGui_Context* ctx, const char* label, int* current_itemInOut, const char* items, int items_sz, int* height_in_itemsInOptional)","cpp":"bool ImGui_ListBox(ImGui_Context* ctx, const char* label, int* current_itemInOut, const char* items, int items_sz, int* height_in_itemsInOptional)"},"title":"ImGui_ListBox","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"This is an helper over BeginListBox/EndListBox for convenience purpose.\n\nEach item must be null-terminated (requires REAPER v6.44 or newer for EEL and Lua).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_ListClipper clipper","description":""},{"identifier":"integer items_count","description":""},{"identifier":"optional number items_heightIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_ListClipper_Begin","return_values":[],"parameters":[{"identifier":"clipper","type":"ImGui_ListClipper"},{"identifier":"items_count","type":"integer"},{"isOptional":true,"type":"number","identifier":"items_heightIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_ListClipper_Begin\""},{"type_name":"ImGui_ListClipper","identifier":"clipper"},{"type_name":"int","identifier":"items_count"},{"type_name":"optional","identifier":"items_heightIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_ListClipper_Begin(ImGui_ListClipper clipper, integer items_count, optional number items_heightIn)","eel":"extension_api(\"ImGui_ListClipper_Begin\", ImGui_ListClipper clipper, int items_count, optional items_heightIn)","python":"void ImGui_ListClipper_Begin(ImGui_ListClipper* clipper, int items_count, double* items_heightInOptional)","cpp":"void ImGui_ListClipper_Begin(ImGui_ListClipper* clipper, int items_count, double* items_heightInOptional)"},"title":"ImGui_ListClipper_Begin","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"- items_count: Use INT_MAX if you don't know how many items you have\n(in which case the cursor won't be advanced in the final step)\n- items_height: Use -1.0 to be calculated automatically on first step.\n  Otherwise pass in the distance between your items, typically\n  GetTextLineHeightWithSpacing or GetFrameHeightWithSpacing.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_ListClipper clipper","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_ListClipper_End","return_values":[],"parameters":[{"identifier":"clipper","type":"ImGui_ListClipper"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_ListClipper_End\""},{"type_name":"ImGui_ListClipper","identifier":"clipper"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_ListClipper_End(ImGui_ListClipper clipper)","eel":"extension_api(\"ImGui_ListClipper_End\", ImGui_ListClipper clipper)","python":"void ImGui_ListClipper_End(ImGui_ListClipper* clipper)","cpp":"void ImGui_ListClipper_End(ImGui_ListClipper* clipper)"},"title":"ImGui_ListClipper_End","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Automatically called on the last call of ListClipper_Step that returns false.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_ListClipper clipper","description":""},{"identifier":"integer item_min","description":""},{"identifier":"integer item_max","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_ListClipper_ForceDisplayRangeByIndices","return_values":[],"parameters":[{"identifier":"clipper","type":"ImGui_ListClipper"},{"identifier":"item_min","type":"integer"},{"identifier":"item_max","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_ListClipper_ForceDisplayRangeByIndices\""},{"type_name":"ImGui_ListClipper","identifier":"clipper"},{"type_name":"int","identifier":"item_min"},{"type_name":"int","identifier":"item_max"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_ListClipper_ForceDisplayRangeByIndices(ImGui_ListClipper clipper, integer item_min, integer item_max)","eel":"extension_api(\"ImGui_ListClipper_ForceDisplayRangeByIndices\", ImGui_ListClipper clipper, int item_min, int item_max)","python":"void ImGui_ListClipper_ForceDisplayRangeByIndices(ImGui_ListClipper* clipper, int item_min, int item_max)","cpp":"void ImGui_ListClipper_ForceDisplayRangeByIndices(ImGui_ListClipper* clipper, int item_min, int item_max)"},"title":"ImGui_ListClipper_ForceDisplayRangeByIndices","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Call ListClipper_ForceDisplayRangeByIndices before first call to\nListClipper_Step if you need a range of items to be displayed regardless of\nvisibility.\n\nitem_max is exclusive e.g. use (42, 42+1) to make item 42 always visible BUT due\nto alignment/padding of certain items it is likely that an extra item may be\nincluded on either end of the display range.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_ListClipper clipper","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_ListClipper_GetDisplayRange","return_values":[{"identifier":"display_start","type":"integer"},{"identifier":"display_end","type":"integer"}],"parameters":[{"identifier":"clipper","type":"ImGui_ListClipper"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_ListClipper_GetDisplayRange\""},{"type_name":"ImGui_ListClipper","identifier":"clipper"},{"type_name":"int","identifier":"&amp;display_start"},{"type_name":"int","identifier":"&amp;display_end"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer display_start","description":""},{"identifier":"integer display_end","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer display_start, integer display_end = reaper.ImGui_ListClipper_GetDisplayRange(ImGui_ListClipper clipper)","eel":"extension_api(\"ImGui_ListClipper_GetDisplayRange\", ImGui_ListClipper clipper, int &amp;display_start, int &amp;display_end)","python":"void ImGui_ListClipper_GetDisplayRange(ImGui_ListClipper* clipper, int* display_startOut, int* display_endOut)","cpp":"void ImGui_ListClipper_GetDisplayRange(ImGui_ListClipper* clipper, int* display_startOut, int* display_endOut)"},"title":"ImGui_ListClipper_GetDisplayRange","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_ListClipper clipper","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_ListClipper_Step","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"clipper","type":"ImGui_ListClipper"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_ListClipper_Step\""},{"type_name":"ImGui_ListClipper","identifier":"clipper"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_ListClipper_Step(ImGui_ListClipper clipper)","eel":"bool extension_api(\"ImGui_ListClipper_Step\", ImGui_ListClipper clipper)","python":"bool ImGui_ListClipper_Step(ImGui_ListClipper* clipper)","cpp":"bool ImGui_ListClipper_Step(ImGui_ListClipper* clipper)"},"title":"ImGui_ListClipper_Step","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Call until it returns false. The display_start/display_end fields from\nListClipper_GetDisplayRange will be set and you can process/draw those items.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_LogFinish","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_LogFinish\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_LogFinish(ImGui_Context ctx)","eel":"extension_api(\"ImGui_LogFinish\", ImGui_Context ctx)","python":"void ImGui_LogFinish(ImGui_Context* ctx)","cpp":"void ImGui_LogFinish(ImGui_Context* ctx)"},"title":"ImGui_LogFinish","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Stop logging (close file, etc.)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string text","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_LogText","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"text","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_LogText\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"text\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_LogText(ImGui_Context ctx, string text)","eel":"extension_api(\"ImGui_LogText\", ImGui_Context ctx, \"text\")","python":"void ImGui_LogText(ImGui_Context* ctx, const char* text)","cpp":"void ImGui_LogText(ImGui_Context* ctx, const char* text)"},"title":"ImGui_LogText","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Pass text data straight to log (without being displayed)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional integer auto_open_depthIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_LogToClipboard","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"integer","identifier":"auto_open_depthIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_LogToClipboard\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"auto_open_depthIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_LogToClipboard(ImGui_Context ctx, optional integer auto_open_depthIn)","eel":"extension_api(\"ImGui_LogToClipboard\", ImGui_Context ctx, optional int auto_open_depthIn)","python":"void ImGui_LogToClipboard(ImGui_Context* ctx, int* auto_open_depthInOptional)","cpp":"void ImGui_LogToClipboard(ImGui_Context* ctx, int* auto_open_depthInOptional)"},"title":"ImGui_LogToClipboard","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Start logging all text output from the interface to the OS clipboard.\nSee also SetClipboardText.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional integer auto_open_depthIn","description":""},{"identifier":"optional string filenameIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_LogToFile","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"integer","identifier":"auto_open_depthIn"},{"isOptional":true,"type":"string","identifier":"filenameIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_LogToFile\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"auto_open_depthIn","modifier":"optional","type_name":"int"},{"type_name":"optional","identifier":"\"filenameIn\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_LogToFile(ImGui_Context ctx, optional integer auto_open_depthIn, optional string filenameIn)","eel":"extension_api(\"ImGui_LogToFile\", ImGui_Context ctx, optional int auto_open_depthIn, optional \"filenameIn\")","python":"void ImGui_LogToFile(ImGui_Context* ctx, int* auto_open_depthInOptional, const char* filenameInOptional)","cpp":"void ImGui_LogToFile(ImGui_Context* ctx, int* auto_open_depthInOptional, const char* filenameInOptional)"},"title":"ImGui_LogToFile","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Start logging all text output from the interface to a file.\nThe data is saved to $resource_path/imgui_log.txt if filename is nil.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional integer auto_open_depthIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_LogToTTY","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"integer","identifier":"auto_open_depthIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_LogToTTY\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"auto_open_depthIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_LogToTTY(ImGui_Context ctx, optional integer auto_open_depthIn)","eel":"extension_api(\"ImGui_LogToTTY\", ImGui_Context ctx, optional int auto_open_depthIn)","python":"void ImGui_LogToTTY(ImGui_Context* ctx, int* auto_open_depthInOptional)","cpp":"void ImGui_LogToTTY(ImGui_Context* ctx, int* auto_open_depthInOptional)"},"title":"ImGui_LogToTTY","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Start logging all text output from the interface to the TTY (stdout).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"optional string shortcutIn","description":""},{"identifier":"optional boolean p_selected","description":""},{"identifier":"optional boolean enabledIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_MenuItem","return_values":[{"identifier":"retval","type":"boolean"},{"isOptional":true,"type":"boolean","identifier":"p_selected"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"isOptional":true,"type":"string","identifier":"shortcutIn"},{"isOptional":true,"type":"boolean","identifier":"p_selected"},{"isOptional":true,"type":"boolean","identifier":"enabledIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_MenuItem\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"optional","identifier":"\"shortcutIn\""},{"identifier":"&amp;p_selected","modifier":"optional","type_name":"bool"},{"identifier":"enabledIn","modifier":"optional","type_name":"bool"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"optional boolean p_selected","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, optional boolean p_selected = reaper.ImGui_MenuItem(ImGui_Context ctx, string label, optional string shortcutIn, optional boolean p_selected, optional boolean enabledIn)","eel":"bool extension_api(\"ImGui_MenuItem\", ImGui_Context ctx, \"label\", optional \"shortcutIn\", optional bool &amp;p_selected, optional bool enabledIn)","python":"bool ImGui_MenuItem(ImGui_Context* ctx, const char* label, const char* shortcutInOptional, bool* p_selectedInOutOptional, bool* enabledInOptional)","cpp":"bool ImGui_MenuItem(ImGui_Context* ctx, const char* label, const char* shortcutInOptional, bool* p_selectedInOutOptional, bool* enabledInOptional)"},"title":"ImGui_MenuItem","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Return true when activated. Shortcuts are displayed for convenience but not\nprocessed by ImGui at the moment. Toggle state is written to 'selected' when\nprovided.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Mod_Alt","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Mod_Alt\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Mod_Alt()","eel":"int extension_api(\"ImGui_Mod_Alt\")","python":"int ImGui_Mod_Alt()","cpp":"int ImGui_Mod_Alt()"},"title":"ImGui_Mod_Alt","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Mod_Ctrl","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Mod_Ctrl\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Mod_Ctrl()","eel":"int extension_api(\"ImGui_Mod_Ctrl\")","python":"int ImGui_Mod_Ctrl()","cpp":"int ImGui_Mod_Ctrl()"},"title":"ImGui_Mod_Ctrl","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Mod_None","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Mod_None\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Mod_None()","eel":"int extension_api(\"ImGui_Mod_None\")","python":"int ImGui_Mod_None()","cpp":"int ImGui_Mod_None()"},"title":"ImGui_Mod_None","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Mod_Shift","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Mod_Shift\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Mod_Shift()","eel":"int extension_api(\"ImGui_Mod_Shift\")","python":"int ImGui_Mod_Shift()","cpp":"int ImGui_Mod_Shift()"},"title":"ImGui_Mod_Shift","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Mod_Shortcut","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Mod_Shortcut\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Mod_Shortcut()","eel":"int extension_api(\"ImGui_Mod_Shortcut\")","python":"int ImGui_Mod_Shortcut()","cpp":"int ImGui_Mod_Shortcut()"},"title":"ImGui_Mod_Shortcut","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Alias for Mod_Ctrl on Linux and Windows and Mod_Super on macOS (Cmd key).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_Mod_Super","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_Mod_Super\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_Mod_Super()","eel":"int extension_api(\"ImGui_Mod_Super\")","python":"int ImGui_Mod_Super()","cpp":"int ImGui_Mod_Super()"},"title":"ImGui_Mod_Super","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_MouseButton_Left","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_MouseButton_Left\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_MouseButton_Left()","eel":"int extension_api(\"ImGui_MouseButton_Left\")","python":"int ImGui_MouseButton_Left()","cpp":"int ImGui_MouseButton_Left()"},"title":"ImGui_MouseButton_Left","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_MouseButton_Middle","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_MouseButton_Middle\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_MouseButton_Middle()","eel":"int extension_api(\"ImGui_MouseButton_Middle\")","python":"int ImGui_MouseButton_Middle()","cpp":"int ImGui_MouseButton_Middle()"},"title":"ImGui_MouseButton_Middle","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_MouseButton_Right","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_MouseButton_Right\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_MouseButton_Right()","eel":"int extension_api(\"ImGui_MouseButton_Right\")","python":"int ImGui_MouseButton_Right()","cpp":"int ImGui_MouseButton_Right()"},"title":"ImGui_MouseButton_Right","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_MouseCursor_Arrow","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_MouseCursor_Arrow\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_MouseCursor_Arrow()","eel":"int extension_api(\"ImGui_MouseCursor_Arrow\")","python":"int ImGui_MouseCursor_Arrow()","cpp":"int ImGui_MouseCursor_Arrow()"},"title":"ImGui_MouseCursor_Arrow","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_MouseCursor_Hand","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_MouseCursor_Hand\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_MouseCursor_Hand()","eel":"int extension_api(\"ImGui_MouseCursor_Hand\")","python":"int ImGui_MouseCursor_Hand()","cpp":"int ImGui_MouseCursor_Hand()"},"title":"ImGui_MouseCursor_Hand","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"(Unused by Dear ImGui functions. Use for e.g. hyperlinks)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_MouseCursor_None","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_MouseCursor_None\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_MouseCursor_None()","eel":"int extension_api(\"ImGui_MouseCursor_None\")","python":"int ImGui_MouseCursor_None()","cpp":"int ImGui_MouseCursor_None()"},"title":"ImGui_MouseCursor_None","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_MouseCursor_NotAllowed","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_MouseCursor_NotAllowed\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_MouseCursor_NotAllowed()","eel":"int extension_api(\"ImGui_MouseCursor_NotAllowed\")","python":"int ImGui_MouseCursor_NotAllowed()","cpp":"int ImGui_MouseCursor_NotAllowed()"},"title":"ImGui_MouseCursor_NotAllowed","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"When hovering something with disallowed interaction. Usually a crossed circle.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_MouseCursor_ResizeAll","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_MouseCursor_ResizeAll\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_MouseCursor_ResizeAll()","eel":"int extension_api(\"ImGui_MouseCursor_ResizeAll\")","python":"int ImGui_MouseCursor_ResizeAll()","cpp":"int ImGui_MouseCursor_ResizeAll()"},"title":"ImGui_MouseCursor_ResizeAll","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"(Unused by Dear ImGui functions)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_MouseCursor_ResizeEW","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_MouseCursor_ResizeEW\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_MouseCursor_ResizeEW()","eel":"int extension_api(\"ImGui_MouseCursor_ResizeEW\")","python":"int ImGui_MouseCursor_ResizeEW()","cpp":"int ImGui_MouseCursor_ResizeEW()"},"title":"ImGui_MouseCursor_ResizeEW","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"When hovering over a vertical border or a column.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_MouseCursor_ResizeNESW","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_MouseCursor_ResizeNESW\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_MouseCursor_ResizeNESW()","eel":"int extension_api(\"ImGui_MouseCursor_ResizeNESW\")","python":"int ImGui_MouseCursor_ResizeNESW()","cpp":"int ImGui_MouseCursor_ResizeNESW()"},"title":"ImGui_MouseCursor_ResizeNESW","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"When hovering over the bottom-left corner of a window.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_MouseCursor_ResizeNS","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_MouseCursor_ResizeNS\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_MouseCursor_ResizeNS()","eel":"int extension_api(\"ImGui_MouseCursor_ResizeNS\")","python":"int ImGui_MouseCursor_ResizeNS()","cpp":"int ImGui_MouseCursor_ResizeNS()"},"title":"ImGui_MouseCursor_ResizeNS","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"When hovering over a horizontal border.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_MouseCursor_ResizeNWSE","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_MouseCursor_ResizeNWSE\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_MouseCursor_ResizeNWSE()","eel":"int extension_api(\"ImGui_MouseCursor_ResizeNWSE\")","python":"int ImGui_MouseCursor_ResizeNWSE()","cpp":"int ImGui_MouseCursor_ResizeNWSE()"},"title":"ImGui_MouseCursor_ResizeNWSE","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"When hovering over the bottom-right corner of a window.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_MouseCursor_TextInput","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_MouseCursor_TextInput\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_MouseCursor_TextInput()","eel":"int extension_api(\"ImGui_MouseCursor_TextInput\")","python":"int ImGui_MouseCursor_TextInput()","cpp":"int ImGui_MouseCursor_TextInput()"},"title":"ImGui_MouseCursor_TextInput","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"When hovering over InputText, etc.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_NewLine","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_NewLine\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_NewLine(ImGui_Context ctx)","eel":"extension_api(\"ImGui_NewLine\", ImGui_Context ctx)","python":"void ImGui_NewLine(ImGui_Context* ctx)","cpp":"void ImGui_NewLine(ImGui_Context* ctx)"},"title":"ImGui_NewLine","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Undo a SameLine() or force a new line when in a horizontal-layout context.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_NumericLimits_Double","return_values":[{"identifier":"min","type":"number"},{"identifier":"max","type":"number"}],"parameters":[]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_NumericLimits_Double\""},{"identifier":"&amp;min"},{"identifier":"&amp;max"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number min","description":""},{"identifier":"number max","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number min, number max = reaper.ImGui_NumericLimits_Double()","eel":"extension_api(\"ImGui_NumericLimits_Double\", &amp;min, &amp;max)","python":"void ImGui_NumericLimits_Double(double* minOut, double* maxOut)","cpp":"void ImGui_NumericLimits_Double(double* minOut, double* maxOut)"},"title":"ImGui_NumericLimits_Double","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns DBL_MIN and DBL_MAX for this system.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_NumericLimits_Float","return_values":[{"identifier":"min","type":"number"},{"identifier":"max","type":"number"}],"parameters":[]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_NumericLimits_Float\""},{"identifier":"&amp;min"},{"identifier":"&amp;max"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number min","description":""},{"identifier":"number max","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number min, number max = reaper.ImGui_NumericLimits_Float()","eel":"extension_api(\"ImGui_NumericLimits_Float\", &amp;min, &amp;max)","python":"void ImGui_NumericLimits_Float(double* minOut, double* maxOut)","cpp":"void ImGui_NumericLimits_Float(double* minOut, double* maxOut)"},"title":"ImGui_NumericLimits_Float","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns FLT_MIN and FLT_MAX for this system.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_NumericLimits_Int","return_values":[{"identifier":"min","type":"integer"},{"identifier":"max","type":"integer"}],"parameters":[]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_NumericLimits_Int\""},{"type_name":"int","identifier":"&amp;min"},{"type_name":"int","identifier":"&amp;max"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer min","description":""},{"identifier":"integer max","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer min, integer max = reaper.ImGui_NumericLimits_Int()","eel":"extension_api(\"ImGui_NumericLimits_Int\", int &amp;min, int &amp;max)","python":"void ImGui_NumericLimits_Int(int* minOut, int* maxOut)","cpp":"void ImGui_NumericLimits_Int(int* minOut, int* maxOut)"},"title":"ImGui_NumericLimits_Int","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns INT_MIN and INT_MAX for this system.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string str_id","description":""},{"identifier":"optional integer popup_flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_OpenPopup","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"str_id","type":"string"},{"isOptional":true,"type":"integer","identifier":"popup_flagsIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_OpenPopup\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"str_id\""},{"identifier":"popup_flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_OpenPopup(ImGui_Context ctx, string str_id, optional integer popup_flagsIn)","eel":"extension_api(\"ImGui_OpenPopup\", ImGui_Context ctx, \"str_id\", optional int popup_flagsIn)","python":"void ImGui_OpenPopup(ImGui_Context* ctx, const char* str_id, int* popup_flagsInOptional)","cpp":"void ImGui_OpenPopup(ImGui_Context* ctx, const char* str_id, int* popup_flagsInOptional)"},"title":"ImGui_OpenPopup","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set popup state to open (don't call every frame!).\nImGuiPopupFlags are available for opening options.\n\nIf not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\n\nUse PopupFlags_NoOpenOverExistingPopup to avoid opening a popup if there's\nalready one at the same level.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional string str_idIn","description":""},{"identifier":"optional integer popup_flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_OpenPopupOnItemClick","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"string","identifier":"str_idIn"},{"isOptional":true,"type":"integer","identifier":"popup_flagsIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_OpenPopupOnItemClick\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"optional","identifier":"\"str_idIn\""},{"identifier":"popup_flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_OpenPopupOnItemClick(ImGui_Context ctx, optional string str_idIn, optional integer popup_flagsIn)","eel":"extension_api(\"ImGui_OpenPopupOnItemClick\", ImGui_Context ctx, optional \"str_idIn\", optional int popup_flagsIn)","python":"void ImGui_OpenPopupOnItemClick(ImGui_Context* ctx, const char* str_idInOptional, int* popup_flagsInOptional)","cpp":"void ImGui_OpenPopupOnItemClick(ImGui_Context* ctx, const char* str_idInOptional, int* popup_flagsInOptional)"},"title":"ImGui_OpenPopupOnItemClick","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Helper to open popup when clicked on last item. return true when just opened.\n(Note: actually triggers on the mouse _released_ event to be consistent with\npopup behaviors.)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string labelreaper_array values","description":""},{"identifier":"optional integer values_offsetIn","description":""},{"identifier":"optional string overlay_textIn","description":""},{"identifier":"optional number scale_minIn","description":""},{"identifier":"optional number scale_maxIn","description":""},{"identifier":"optional number graph_size_wIn","description":""},{"identifier":"optional number graph_size_hIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_PlotHistogram","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"string","identifier":"values"},{"isOptional":true,"type":"integer","identifier":"values_offsetIn"},{"isOptional":true,"type":"string","identifier":"overlay_textIn"},{"isOptional":true,"type":"number","identifier":"scale_minIn"},{"isOptional":true,"type":"number","identifier":"scale_maxIn"},{"isOptional":true,"type":"number","identifier":"graph_size_wIn"},{"isOptional":true,"type":"number","identifier":"graph_size_hIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_PlotHistogram\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"reaper_array","identifier":"values"},{"identifier":"values_offsetIn","modifier":"optional","type_name":"int"},{"type_name":"optional","identifier":"\"overlay_textIn\""},{"type_name":"optional","identifier":"scale_minIn"},{"type_name":"optional","identifier":"scale_maxIn"},{"type_name":"optional","identifier":"graph_size_wIn"},{"type_name":"optional","identifier":"graph_size_hIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_PlotHistogram(ImGui_Context ctx, string labelreaper_array values, optional integer values_offsetIn, optional string overlay_textIn, optional number scale_minIn, optional number scale_maxIn, optional number graph_size_wIn, optional number graph_size_hIn)","eel":"extension_api(\"ImGui_PlotHistogram\", ImGui_Context ctx, \"label\", reaper_array values, optional int values_offsetIn, optional \"overlay_textIn\", optional scale_minIn, optional scale_maxIn, optional graph_size_wIn, optional graph_size_hIn)","python":"void ImGui_PlotHistogram(ImGui_Context* ctx, const char* label, reaper_array* values, int* values_offsetInOptional, const char* overlay_textInOptional, double* scale_minInOptional, double* scale_maxInOptional, double* graph_size_wInOptional, double* graph_size_hInOptional)","cpp":"void ImGui_PlotHistogram(ImGui_Context* ctx, const char* label, reaper_array* values, int* values_offsetInOptional, const char* overlay_textInOptional, double* scale_minInOptional, double* scale_maxInOptional, double* graph_size_wInOptional, double* graph_size_hInOptional)"},"title":"ImGui_PlotHistogram","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string labelreaper_array values","description":""},{"identifier":"optional integer values_offsetIn","description":""},{"identifier":"optional string overlay_textIn","description":""},{"identifier":"optional number scale_minIn","description":""},{"identifier":"optional number scale_maxIn","description":""},{"identifier":"optional number graph_size_wIn","description":""},{"identifier":"optional number graph_size_hIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_PlotLines","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"string","identifier":"values"},{"isOptional":true,"type":"integer","identifier":"values_offsetIn"},{"isOptional":true,"type":"string","identifier":"overlay_textIn"},{"isOptional":true,"type":"number","identifier":"scale_minIn"},{"isOptional":true,"type":"number","identifier":"scale_maxIn"},{"isOptional":true,"type":"number","identifier":"graph_size_wIn"},{"isOptional":true,"type":"number","identifier":"graph_size_hIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_PlotLines\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"reaper_array","identifier":"values"},{"identifier":"values_offsetIn","modifier":"optional","type_name":"int"},{"type_name":"optional","identifier":"\"overlay_textIn\""},{"type_name":"optional","identifier":"scale_minIn"},{"type_name":"optional","identifier":"scale_maxIn"},{"type_name":"optional","identifier":"graph_size_wIn"},{"type_name":"optional","identifier":"graph_size_hIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_PlotLines(ImGui_Context ctx, string labelreaper_array values, optional integer values_offsetIn, optional string overlay_textIn, optional number scale_minIn, optional number scale_maxIn, optional number graph_size_wIn, optional number graph_size_hIn)","eel":"extension_api(\"ImGui_PlotLines\", ImGui_Context ctx, \"label\", reaper_array values, optional int values_offsetIn, optional \"overlay_textIn\", optional scale_minIn, optional scale_maxIn, optional graph_size_wIn, optional graph_size_hIn)","python":"void ImGui_PlotLines(ImGui_Context* ctx, const char* label, reaper_array* values, int* values_offsetInOptional, const char* overlay_textInOptional, double* scale_minInOptional, double* scale_maxInOptional, double* graph_size_wInOptional, double* graph_size_hInOptional)","cpp":"void ImGui_PlotLines(ImGui_Context* ctx, const char* label, reaper_array* values, int* values_offsetInOptional, const char* overlay_textInOptional, double* scale_minInOptional, double* scale_maxInOptional, double* graph_size_wInOptional, double* graph_size_hInOptional)"},"title":"ImGui_PlotLines","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"number x","description":""},{"identifier":"number y","description":""},{"identifier":"optional boolean to_nativeIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_PointConvertNative","return_values":[{"identifier":"x","type":"number"},{"identifier":"y","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"x","type":"number"},{"identifier":"y","type":"number"},{"isOptional":true,"type":"boolean","identifier":"to_nativeIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_PointConvertNative\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"&amp;x"},{"identifier":"&amp;y"},{"identifier":"to_nativeIn","modifier":"optional","type_name":"bool"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number x","description":""},{"identifier":"number y","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number x, number y = reaper.ImGui_PointConvertNative(ImGui_Context ctx, number x, number y, optional boolean to_nativeIn)","eel":"extension_api(\"ImGui_PointConvertNative\", ImGui_Context ctx, &amp;x, &amp;y, optional bool to_nativeIn)","python":"void ImGui_PointConvertNative(ImGui_Context* ctx, double* xInOut, double* yInOut, bool* to_nativeInOptional)","cpp":"void ImGui_PointConvertNative(ImGui_Context* ctx, double* xInOut, double* yInOut, bool* to_nativeInOptional)"},"title":"ImGui_PointConvertNative","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Convert a position from the current platform's native coordinate position\nsystem to ReaImGui global coordinates (or vice versa).\n\nThis effectively flips the Y coordinate on macOS and applies HiDPI scaling on\nWindows and Linux.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_PopButtonRepeat","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_PopButtonRepeat\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_PopButtonRepeat(ImGui_Context ctx)","eel":"extension_api(\"ImGui_PopButtonRepeat\", ImGui_Context ctx)","python":"void ImGui_PopButtonRepeat(ImGui_Context* ctx)","cpp":"void ImGui_PopButtonRepeat(ImGui_Context* ctx)"},"title":"ImGui_PopButtonRepeat","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"See PushButtonRepeat","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_PopClipRect","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_PopClipRect\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_PopClipRect(ImGui_Context ctx)","eel":"extension_api(\"ImGui_PopClipRect\", ImGui_Context ctx)","python":"void ImGui_PopClipRect(ImGui_Context* ctx)","cpp":"void ImGui_PopClipRect(ImGui_Context* ctx)"},"title":"ImGui_PopClipRect","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"See PushClipRect","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_PopFont","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_PopFont\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_PopFont(ImGui_Context ctx)","eel":"extension_api(\"ImGui_PopFont\", ImGui_Context ctx)","python":"void ImGui_PopFont(ImGui_Context* ctx)","cpp":"void ImGui_PopFont(ImGui_Context* ctx)"},"title":"ImGui_PopFont","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"See PushFont.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_PopID","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_PopID\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_PopID(ImGui_Context ctx)","eel":"extension_api(\"ImGui_PopID\", ImGui_Context ctx)","python":"void ImGui_PopID(ImGui_Context* ctx)","cpp":"void ImGui_PopID(ImGui_Context* ctx)"},"title":"ImGui_PopID","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Pop from the ID stack.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_PopItemWidth","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_PopItemWidth\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_PopItemWidth(ImGui_Context ctx)","eel":"extension_api(\"ImGui_PopItemWidth\", ImGui_Context ctx)","python":"void ImGui_PopItemWidth(ImGui_Context* ctx)","cpp":"void ImGui_PopItemWidth(ImGui_Context* ctx)"},"title":"ImGui_PopItemWidth","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"See PushItemWidth","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional integer countIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_PopStyleColor","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"integer","identifier":"countIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_PopStyleColor\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"countIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_PopStyleColor(ImGui_Context ctx, optional integer countIn)","eel":"extension_api(\"ImGui_PopStyleColor\", ImGui_Context ctx, optional int countIn)","python":"void ImGui_PopStyleColor(ImGui_Context* ctx, int* countInOptional)","cpp":"void ImGui_PopStyleColor(ImGui_Context* ctx, int* countInOptional)"},"title":"ImGui_PopStyleColor","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional integer countIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_PopStyleVar","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"integer","identifier":"countIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_PopStyleVar\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"countIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_PopStyleVar(ImGui_Context ctx, optional integer countIn)","eel":"extension_api(\"ImGui_PopStyleVar\", ImGui_Context ctx, optional int countIn)","python":"void ImGui_PopStyleVar(ImGui_Context* ctx, int* countInOptional)","cpp":"void ImGui_PopStyleVar(ImGui_Context* ctx, int* countInOptional)"},"title":"ImGui_PopStyleVar","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Reset a style variable.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_PopTabStop","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_PopTabStop\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_PopTabStop(ImGui_Context ctx)","eel":"extension_api(\"ImGui_PopTabStop\", ImGui_Context ctx)","python":"void ImGui_PopTabStop(ImGui_Context* ctx)","cpp":"void ImGui_PopTabStop(ImGui_Context* ctx)"},"title":"ImGui_PopTabStop","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"See PushTabStop","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_PopTextWrapPos","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_PopTextWrapPos\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_PopTextWrapPos(ImGui_Context ctx)","eel":"extension_api(\"ImGui_PopTextWrapPos\", ImGui_Context ctx)","python":"void ImGui_PopTextWrapPos(ImGui_Context* ctx)","cpp":"void ImGui_PopTextWrapPos(ImGui_Context* ctx)"},"title":"ImGui_PopTextWrapPos","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_PopupFlags_AnyPopup","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_PopupFlags_AnyPopup\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_PopupFlags_AnyPopup()","eel":"int extension_api(\"ImGui_PopupFlags_AnyPopup\")","python":"int ImGui_PopupFlags_AnyPopup()","cpp":"int ImGui_PopupFlags_AnyPopup()"},"title":"ImGui_PopupFlags_AnyPopup","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"PopupFlags_AnyPopupId | PopupFlags_AnyPopupLevel","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_PopupFlags_AnyPopupId","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_PopupFlags_AnyPopupId\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_PopupFlags_AnyPopupId()","eel":"int extension_api(\"ImGui_PopupFlags_AnyPopupId\")","python":"int ImGui_PopupFlags_AnyPopupId()","cpp":"int ImGui_PopupFlags_AnyPopupId()"},"title":"ImGui_PopupFlags_AnyPopupId","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"For IsPopupOpen: ignore the str_id parameter and test for any popup.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_PopupFlags_AnyPopupLevel","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_PopupFlags_AnyPopupLevel\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_PopupFlags_AnyPopupLevel()","eel":"int extension_api(\"ImGui_PopupFlags_AnyPopupLevel\")","python":"int ImGui_PopupFlags_AnyPopupLevel()","cpp":"int ImGui_PopupFlags_AnyPopupLevel()"},"title":"ImGui_PopupFlags_AnyPopupLevel","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"For IsPopupOpen: search/test at any level of the popup stack\n  (default test in the current level).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_PopupFlags_MouseButtonLeft","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_PopupFlags_MouseButtonLeft\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_PopupFlags_MouseButtonLeft()","eel":"int extension_api(\"ImGui_PopupFlags_MouseButtonLeft\")","python":"int ImGui_PopupFlags_MouseButtonLeft()","cpp":"int ImGui_PopupFlags_MouseButtonLeft()"},"title":"ImGui_PopupFlags_MouseButtonLeft","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"For BeginPopupContext*(): open on Left Mouse release.\n   Guaranteed to always be == 0 (same as MouseButton_Left).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_PopupFlags_MouseButtonMiddle","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_PopupFlags_MouseButtonMiddle\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_PopupFlags_MouseButtonMiddle()","eel":"int extension_api(\"ImGui_PopupFlags_MouseButtonMiddle\")","python":"int ImGui_PopupFlags_MouseButtonMiddle()","cpp":"int ImGui_PopupFlags_MouseButtonMiddle()"},"title":"ImGui_PopupFlags_MouseButtonMiddle","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"For BeginPopupContext*(): open on Middle Mouse release.\n   Guaranteed to always be == 2 (same as MouseButton_Middle).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_PopupFlags_MouseButtonRight","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_PopupFlags_MouseButtonRight\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_PopupFlags_MouseButtonRight()","eel":"int extension_api(\"ImGui_PopupFlags_MouseButtonRight\")","python":"int ImGui_PopupFlags_MouseButtonRight()","cpp":"int ImGui_PopupFlags_MouseButtonRight()"},"title":"ImGui_PopupFlags_MouseButtonRight","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"For BeginPopupContext*(): open on Right Mouse release.\n   Guaranteed to always be == 1 (same as MouseButton_Right).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_PopupFlags_NoOpenOverExistingPopup","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_PopupFlags_NoOpenOverExistingPopup\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_PopupFlags_NoOpenOverExistingPopup()","eel":"int extension_api(\"ImGui_PopupFlags_NoOpenOverExistingPopup\")","python":"int ImGui_PopupFlags_NoOpenOverExistingPopup()","cpp":"int ImGui_PopupFlags_NoOpenOverExistingPopup()"},"title":"ImGui_PopupFlags_NoOpenOverExistingPopup","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"For OpenPopup*(), BeginPopupContext*(): don't open if there's already a popup\n   at the same level of the popup stack.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_PopupFlags_NoOpenOverItems","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_PopupFlags_NoOpenOverItems\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_PopupFlags_NoOpenOverItems()","eel":"int extension_api(\"ImGui_PopupFlags_NoOpenOverItems\")","python":"int ImGui_PopupFlags_NoOpenOverItems()","cpp":"int ImGui_PopupFlags_NoOpenOverItems()"},"title":"ImGui_PopupFlags_NoOpenOverItems","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"For BeginPopupContextWindow: don't return true when hovering items,\n   only when hovering empty space.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_PopupFlags_None","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_PopupFlags_None\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_PopupFlags_None()","eel":"int extension_api(\"ImGui_PopupFlags_None\")","python":"int ImGui_PopupFlags_None()","cpp":"int ImGui_PopupFlags_None()"},"title":"ImGui_PopupFlags_None","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"number fraction","description":""},{"identifier":"optional number size_arg_wIn","description":""},{"identifier":"optional number size_arg_hIn","description":""},{"identifier":"optional string overlayIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_ProgressBar","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"fraction","type":"number"},{"isOptional":true,"type":"number","identifier":"size_arg_wIn"},{"isOptional":true,"type":"number","identifier":"size_arg_hIn"},{"isOptional":true,"type":"string","identifier":"overlayIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_ProgressBar\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"fraction"},{"type_name":"optional","identifier":"size_arg_wIn"},{"type_name":"optional","identifier":"size_arg_hIn"},{"type_name":"optional","identifier":"\"overlayIn\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_ProgressBar(ImGui_Context ctx, number fraction, optional number size_arg_wIn, optional number size_arg_hIn, optional string overlayIn)","eel":"extension_api(\"ImGui_ProgressBar\", ImGui_Context ctx, fraction, optional size_arg_wIn, optional size_arg_hIn, optional \"overlayIn\")","python":"void ImGui_ProgressBar(ImGui_Context* ctx, double fraction, double* size_arg_wInOptional, double* size_arg_hInOptional, const char* overlayInOptional)","cpp":"void ImGui_ProgressBar(ImGui_Context* ctx, double fraction, double* size_arg_wInOptional, double* size_arg_hInOptional, const char* overlayInOptional)"},"title":"ImGui_ProgressBar","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"boolean repeat","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_PushButtonRepeat","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"repeat","type":"boolean"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_PushButtonRepeat\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"bool","identifier":"repeat"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_PushButtonRepeat(ImGui_Context ctx, boolean repeat)","eel":"extension_api(\"ImGui_PushButtonRepeat\", ImGui_Context ctx, bool repeat)","python":"void ImGui_PushButtonRepeat(ImGui_Context* ctx, bool repeat)","cpp":"void ImGui_PushButtonRepeat(ImGui_Context* ctx, bool repeat)"},"title":"ImGui_PushButtonRepeat","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"In 'repeat' mode, Button*() functions return repeated true in a typematic\nmanner (using ConfigVar_KeyRepeatDelay/ConfigVar_KeyRepeatRate settings).\n\nNote that you can call IsItemActive after any Button to tell if the button is\nheld in the current frame.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"number clip_rect_min_x","description":""},{"identifier":"number clip_rect_min_y","description":""},{"identifier":"number clip_rect_max_x","description":""},{"identifier":"number clip_rect_max_y","description":""},{"identifier":"boolean intersect_with_current_clip_rect","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_PushClipRect","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"clip_rect_min_x","type":"number"},{"identifier":"clip_rect_min_y","type":"number"},{"identifier":"clip_rect_max_x","type":"number"},{"identifier":"clip_rect_max_y","type":"number"},{"identifier":"intersect_with_current_clip_rect","type":"boolean"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_PushClipRect\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"clip_rect_min_x"},{"identifier":"clip_rect_min_y"},{"identifier":"clip_rect_max_x"},{"identifier":"clip_rect_max_y"},{"type_name":"bool","identifier":"intersect_with_current_clip_rect"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_PushClipRect(ImGui_Context ctx, number clip_rect_min_x, number clip_rect_min_y, number clip_rect_max_x, number clip_rect_max_y, boolean intersect_with_current_clip_rect)","eel":"extension_api(\"ImGui_PushClipRect\", ImGui_Context ctx, clip_rect_min_x, clip_rect_min_y, clip_rect_max_x, clip_rect_max_y, bool intersect_with_current_clip_rect)","python":"void ImGui_PushClipRect(ImGui_Context* ctx, double clip_rect_min_x, double clip_rect_min_y, double clip_rect_max_x, double clip_rect_max_y, bool intersect_with_current_clip_rect)","cpp":"void ImGui_PushClipRect(ImGui_Context* ctx, double clip_rect_min_x, double clip_rect_min_y, double clip_rect_max_x, double clip_rect_max_y, bool intersect_with_current_clip_rect)"},"title":"ImGui_PushClipRect","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctxImGui_Font font","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_PushFont","return_values":[],"parameters":[{"isOptional":true,"type":"ImGui_Context","identifier":"font"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_PushFont\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"ImGui_Font","identifier":"font"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_PushFont(ImGui_Context ctxImGui_Font font)","eel":"extension_api(\"ImGui_PushFont\", ImGui_Context ctx, ImGui_Font font)","python":"void ImGui_PushFont(ImGui_Context* ctx, ImGui_Font* font)","cpp":"void ImGui_PushFont(ImGui_Context* ctx, ImGui_Font* font)"},"title":"ImGui_PushFont","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Change the current font. Use nil to push the default font.\nThe font object must have been registered using Attach. See PopFont.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string str_id","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_PushID","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"str_id","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_PushID\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"str_id\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_PushID(ImGui_Context ctx, string str_id)","eel":"extension_api(\"ImGui_PushID\", ImGui_Context ctx, \"str_id\")","python":"void ImGui_PushID(ImGui_Context* ctx, const char* str_id)","cpp":"void ImGui_PushID(ImGui_Context* ctx, const char* str_id)"},"title":"ImGui_PushID","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Push string into the ID stack.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"number item_width","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_PushItemWidth","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"item_width","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_PushItemWidth\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"item_width"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_PushItemWidth(ImGui_Context ctx, number item_width)","eel":"extension_api(\"ImGui_PushItemWidth\", ImGui_Context ctx, item_width)","python":"void ImGui_PushItemWidth(ImGui_Context* ctx, double item_width)","cpp":"void ImGui_PushItemWidth(ImGui_Context* ctx, double item_width)"},"title":"ImGui_PushItemWidth","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Push width of items for common large \"item+label\" widgets.\n\n- \\&gt;0.0: width in pixels\n- &lt;0.0 align xx pixels to the right of window\n  (so -FLT_MIN always align width to the right side)\n- 0.0 = default to ~2/3 of windows width.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer idx","description":""},{"identifier":"integer col_rgba","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_PushStyleColor","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"idx","type":"integer"},{"identifier":"col_rgba","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_PushStyleColor\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"idx"},{"type_name":"int","identifier":"col_rgba"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_PushStyleColor(ImGui_Context ctx, integer idx, integer col_rgba)","eel":"extension_api(\"ImGui_PushStyleColor\", ImGui_Context ctx, int idx, int col_rgba)","python":"void ImGui_PushStyleColor(ImGui_Context* ctx, int idx, int col_rgba)","cpp":"void ImGui_PushStyleColor(ImGui_Context* ctx, int idx, int col_rgba)"},"title":"ImGui_PushStyleColor","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Temporarily modify a style color.\nCall PopStyleColor to undo after use (before the end of the frame).\nSee Col_* for available style colors.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer var_idx","description":""},{"identifier":"number val1","description":""},{"identifier":"optional number val2In","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_PushStyleVar","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"var_idx","type":"integer"},{"identifier":"val1","type":"number"},{"isOptional":true,"type":"number","identifier":"val2In"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_PushStyleVar\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"var_idx"},{"identifier":"val1"},{"type_name":"optional","identifier":"val2In"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_PushStyleVar(ImGui_Context ctx, integer var_idx, number val1, optional number val2In)","eel":"extension_api(\"ImGui_PushStyleVar\", ImGui_Context ctx, int var_idx, val1, optional val2In)","python":"void ImGui_PushStyleVar(ImGui_Context* ctx, int var_idx, double val1, double* val2InOptional)","cpp":"void ImGui_PushStyleVar(ImGui_Context* ctx, int var_idx, double val1, double* val2InOptional)"},"title":"ImGui_PushStyleVar","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Temporarily modify a style variable.\nCall PopStyleVar to undo after use (before the end of the frame).\nSee StyleVar_* for possible values of 'var_idx'.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"boolean tab_stop","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_PushTabStop","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"tab_stop","type":"boolean"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_PushTabStop\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"bool","identifier":"tab_stop"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_PushTabStop(ImGui_Context ctx, boolean tab_stop)","eel":"extension_api(\"ImGui_PushTabStop\", ImGui_Context ctx, bool tab_stop)","python":"void ImGui_PushTabStop(ImGui_Context* ctx, bool tab_stop)","cpp":"void ImGui_PushTabStop(ImGui_Context* ctx, bool tab_stop)"},"title":"ImGui_PushTabStop","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Allow focusing using TAB/Shift-TAB, enabled by default but you can disable it\nfor certain widgets","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional number wrap_local_pos_xIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_PushTextWrapPos","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"number","identifier":"wrap_local_pos_xIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_PushTextWrapPos\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"optional","identifier":"wrap_local_pos_xIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_PushTextWrapPos(ImGui_Context ctx, optional number wrap_local_pos_xIn)","eel":"extension_api(\"ImGui_PushTextWrapPos\", ImGui_Context ctx, optional wrap_local_pos_xIn)","python":"void ImGui_PushTextWrapPos(ImGui_Context* ctx, double* wrap_local_pos_xInOptional)","cpp":"void ImGui_PushTextWrapPos(ImGui_Context* ctx, double* wrap_local_pos_xInOptional)"},"title":"ImGui_PushTextWrapPos","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Push word-wrapping position for Text*() commands.\n\n-  &lt; 0.0: no wrapping\n-  = 0.0: wrap to end of window (or column)\n- \\&gt; 0.0: wrap at 'wrap_pos_x' position in window local space.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"boolean active","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_RadioButton","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"active","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_RadioButton\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"bool","identifier":"active"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_RadioButton(ImGui_Context ctx, string label, boolean active)","eel":"bool extension_api(\"ImGui_RadioButton\", ImGui_Context ctx, \"label\", bool active)","python":"bool ImGui_RadioButton(ImGui_Context* ctx, const char* label, bool active)","cpp":"bool ImGui_RadioButton(ImGui_Context* ctx, const char* label, bool active)"},"title":"ImGui_RadioButton","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Use with e.g. if (RadioButton(\"one\", my_value==1)) { my_value = 1; }","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"integer v","description":""},{"identifier":"integer v_button","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_RadioButtonEx","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v","type":"integer"},{"identifier":"v_button","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_RadioButtonEx\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"int","identifier":"&amp;v"},{"type_name":"int","identifier":"v_button"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer v","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer v = reaper.ImGui_RadioButtonEx(ImGui_Context ctx, string label, integer v, integer v_button)","eel":"bool extension_api(\"ImGui_RadioButtonEx\", ImGui_Context ctx, \"label\", int &amp;v, int v_button)","python":"bool ImGui_RadioButtonEx(ImGui_Context* ctx, const char* label, int* vInOut, int v_button)","cpp":"bool ImGui_RadioButtonEx(ImGui_Context* ctx, const char* label, int* vInOut, int v_button)"},"title":"ImGui_RadioButtonEx","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Shortcut to handle RadioButton's example pattern when value is an integer","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional integer buttonIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_ResetMouseDragDelta","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"integer","identifier":"buttonIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_ResetMouseDragDelta\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"buttonIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_ResetMouseDragDelta(ImGui_Context ctx, optional integer buttonIn)","eel":"extension_api(\"ImGui_ResetMouseDragDelta\", ImGui_Context ctx, optional int buttonIn)","python":"void ImGui_ResetMouseDragDelta(ImGui_Context* ctx, int* buttonInOptional)","cpp":"void ImGui_ResetMouseDragDelta(ImGui_Context* ctx, int* buttonInOptional)"},"title":"ImGui_ResetMouseDragDelta","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional number offset_from_start_xIn","description":""},{"identifier":"optional number spacingIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SameLine","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"number","identifier":"offset_from_start_xIn"},{"isOptional":true,"type":"number","identifier":"spacingIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SameLine\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"optional","identifier":"offset_from_start_xIn"},{"type_name":"optional","identifier":"spacingIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SameLine(ImGui_Context ctx, optional number offset_from_start_xIn, optional number spacingIn)","eel":"extension_api(\"ImGui_SameLine\", ImGui_Context ctx, optional offset_from_start_xIn, optional spacingIn)","python":"void ImGui_SameLine(ImGui_Context* ctx, double* offset_from_start_xInOptional, double* spacingInOptional)","cpp":"void ImGui_SameLine(ImGui_Context* ctx, double* offset_from_start_xInOptional, double* spacingInOptional)"},"title":"ImGui_SameLine","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Call between widgets or groups to layout them horizontally.\nX position given in window coordinates.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"boolean p_selected","description":""},{"identifier":"optional integer flagsIn","description":""},{"identifier":"optional number size_wIn","description":""},{"identifier":"optional number size_hIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Selectable","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"p_selected","type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"p_selected","type":"boolean"},{"isOptional":true,"type":"integer","identifier":"flagsIn"},{"isOptional":true,"type":"number","identifier":"size_wIn"},{"isOptional":true,"type":"number","identifier":"size_hIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_Selectable\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"bool","identifier":"&amp;p_selected"},{"identifier":"flagsIn","modifier":"optional","type_name":"int"},{"type_name":"optional","identifier":"size_wIn"},{"type_name":"optional","identifier":"size_hIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"boolean p_selected","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, boolean p_selected = reaper.ImGui_Selectable(ImGui_Context ctx, string label, boolean p_selected, optional integer flagsIn, optional number size_wIn, optional number size_hIn)","eel":"bool extension_api(\"ImGui_Selectable\", ImGui_Context ctx, \"label\", bool &amp;p_selected, optional int flagsIn, optional size_wIn, optional size_hIn)","python":"bool ImGui_Selectable(ImGui_Context* ctx, const char* label, bool* p_selectedInOut, int* flagsInOptional, double* size_wInOptional, double* size_hInOptional)","cpp":"bool ImGui_Selectable(ImGui_Context* ctx, const char* label, bool* p_selectedInOut, int* flagsInOptional, double* size_wInOptional, double* size_hInOptional)"},"title":"ImGui_Selectable","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_SelectableFlags_AllowDoubleClick","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_SelectableFlags_AllowDoubleClick\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_SelectableFlags_AllowDoubleClick()","eel":"int extension_api(\"ImGui_SelectableFlags_AllowDoubleClick\")","python":"int ImGui_SelectableFlags_AllowDoubleClick()","cpp":"int ImGui_SelectableFlags_AllowDoubleClick()"},"title":"ImGui_SelectableFlags_AllowDoubleClick","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Generate press events on double clicks too.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_SelectableFlags_AllowItemOverlap","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_SelectableFlags_AllowItemOverlap\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_SelectableFlags_AllowItemOverlap()","eel":"int extension_api(\"ImGui_SelectableFlags_AllowItemOverlap\")","python":"int ImGui_SelectableFlags_AllowItemOverlap()","cpp":"int ImGui_SelectableFlags_AllowItemOverlap()"},"title":"ImGui_SelectableFlags_AllowItemOverlap","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Hit testing to allow subsequent widgets to overlap this one.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_SelectableFlags_Disabled","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_SelectableFlags_Disabled\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_SelectableFlags_Disabled()","eel":"int extension_api(\"ImGui_SelectableFlags_Disabled\")","python":"int ImGui_SelectableFlags_Disabled()","cpp":"int ImGui_SelectableFlags_Disabled()"},"title":"ImGui_SelectableFlags_Disabled","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Cannot be selected, display grayed out text.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_SelectableFlags_DontClosePopups","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_SelectableFlags_DontClosePopups\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_SelectableFlags_DontClosePopups()","eel":"int extension_api(\"ImGui_SelectableFlags_DontClosePopups\")","python":"int ImGui_SelectableFlags_DontClosePopups()","cpp":"int ImGui_SelectableFlags_DontClosePopups()"},"title":"ImGui_SelectableFlags_DontClosePopups","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Clicking this doesn't close parent popup window.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_SelectableFlags_None","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_SelectableFlags_None\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_SelectableFlags_None()","eel":"int extension_api(\"ImGui_SelectableFlags_None\")","python":"int ImGui_SelectableFlags_None()","cpp":"int ImGui_SelectableFlags_None()"},"title":"ImGui_SelectableFlags_None","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_SelectableFlags_SpanAllColumns","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_SelectableFlags_SpanAllColumns\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_SelectableFlags_SpanAllColumns()","eel":"int extension_api(\"ImGui_SelectableFlags_SpanAllColumns\")","python":"int ImGui_SelectableFlags_SpanAllColumns()","cpp":"int ImGui_SelectableFlags_SpanAllColumns()"},"title":"ImGui_SelectableFlags_SpanAllColumns","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Selectable frame can span all columns (text will still fit in current column).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Separator","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_Separator\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_Separator(ImGui_Context ctx)","eel":"extension_api(\"ImGui_Separator\", ImGui_Context ctx)","python":"void ImGui_Separator(ImGui_Context* ctx)","cpp":"void ImGui_Separator(ImGui_Context* ctx)"},"title":"ImGui_Separator","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Separator, generally horizontal. inside a menu bar or in horizontal layout\nmode, this becomes a vertical separator.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SeparatorText","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SeparatorText\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SeparatorText(ImGui_Context ctx, string label)","eel":"extension_api(\"ImGui_SeparatorText\", ImGui_Context ctx, \"label\")","python":"void ImGui_SeparatorText(ImGui_Context* ctx, const char* label)","cpp":"void ImGui_SeparatorText(ImGui_Context* ctx, const char* label)"},"title":"ImGui_SeparatorText","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Text formatted with an horizontal line","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string text","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetClipboardText","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"text","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetClipboardText\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"text\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetClipboardText(ImGui_Context ctx, string text)","eel":"extension_api(\"ImGui_SetClipboardText\", ImGui_Context ctx, \"text\")","python":"void ImGui_SetClipboardText(ImGui_Context* ctx, const char* text)","cpp":"void ImGui_SetClipboardText(ImGui_Context* ctx, const char* text)"},"title":"ImGui_SetClipboardText","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"See also the LogToClipboard function to capture GUI into clipboard,\nor easily output text data to the clipboard.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer flags","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetColorEditOptions","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"flags","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetColorEditOptions\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"flags"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetColorEditOptions(ImGui_Context ctx, integer flags)","eel":"extension_api(\"ImGui_SetColorEditOptions\", ImGui_Context ctx, int flags)","python":"void ImGui_SetColorEditOptions(ImGui_Context* ctx, int flags)","cpp":"void ImGui_SetColorEditOptions(ImGui_Context* ctx, int flags)"},"title":"ImGui_SetColorEditOptions","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Picker type, etc. User will be able to change many settings, unless you pass\nthe _NoOptions flag to your calls.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer var_idx","description":""},{"identifier":"number value","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetConfigVar","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"var_idx","type":"integer"},{"identifier":"value","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetConfigVar\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"var_idx"},{"identifier":"value"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetConfigVar(ImGui_Context ctx, integer var_idx, number value)","eel":"extension_api(\"ImGui_SetConfigVar\", ImGui_Context ctx, int var_idx, value)","python":"void ImGui_SetConfigVar(ImGui_Context* ctx, int var_idx, double value)","cpp":"void ImGui_SetConfigVar(ImGui_Context* ctx, int var_idx, double value)"},"title":"ImGui_SetConfigVar","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"number local_pos_x","description":""},{"identifier":"number local_pos_y","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetCursorPos","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"local_pos_x","type":"number"},{"identifier":"local_pos_y","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetCursorPos\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"local_pos_x"},{"identifier":"local_pos_y"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetCursorPos(ImGui_Context ctx, number local_pos_x, number local_pos_y)","eel":"extension_api(\"ImGui_SetCursorPos\", ImGui_Context ctx, local_pos_x, local_pos_y)","python":"void ImGui_SetCursorPos(ImGui_Context* ctx, double local_pos_x, double local_pos_y)","cpp":"void ImGui_SetCursorPos(ImGui_Context* ctx, double local_pos_x, double local_pos_y)"},"title":"ImGui_SetCursorPos","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Cursor position in window","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"number local_x","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetCursorPosX","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"local_x","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetCursorPosX\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"local_x"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetCursorPosX(ImGui_Context ctx, number local_x)","eel":"extension_api(\"ImGui_SetCursorPosX\", ImGui_Context ctx, local_x)","python":"void ImGui_SetCursorPosX(ImGui_Context* ctx, double local_x)","cpp":"void ImGui_SetCursorPosX(ImGui_Context* ctx, double local_x)"},"title":"ImGui_SetCursorPosX","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Cursor X position in window","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"number local_y","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetCursorPosY","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"local_y","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetCursorPosY\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"local_y"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetCursorPosY(ImGui_Context ctx, number local_y)","eel":"extension_api(\"ImGui_SetCursorPosY\", ImGui_Context ctx, local_y)","python":"void ImGui_SetCursorPosY(ImGui_Context* ctx, double local_y)","cpp":"void ImGui_SetCursorPosY(ImGui_Context* ctx, double local_y)"},"title":"ImGui_SetCursorPosY","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Cursor Y position in window","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"number pos_x","description":""},{"identifier":"number pos_y","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetCursorScreenPos","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"pos_x","type":"number"},{"identifier":"pos_y","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetCursorScreenPos\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"pos_x"},{"identifier":"pos_y"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetCursorScreenPos(ImGui_Context ctx, number pos_x, number pos_y)","eel":"extension_api(\"ImGui_SetCursorScreenPos\", ImGui_Context ctx, pos_x, pos_y)","python":"void ImGui_SetCursorScreenPos(ImGui_Context* ctx, double pos_x, double pos_y)","cpp":"void ImGui_SetCursorScreenPos(ImGui_Context* ctx, double pos_x, double pos_y)"},"title":"ImGui_SetCursorScreenPos","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Cursor position in absolute screen coordinates.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string type","description":""},{"identifier":"string data","description":""},{"identifier":"optional integer condIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetDragDropPayload","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"type","type":"string"},{"identifier":"data","type":"string"},{"isOptional":true,"type":"integer","identifier":"condIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_SetDragDropPayload\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"type\""},{"identifier":"\"data\""},{"identifier":"condIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_SetDragDropPayload(ImGui_Context ctx, string type, string data, optional integer condIn)","eel":"bool extension_api(\"ImGui_SetDragDropPayload\", ImGui_Context ctx, \"type\", \"data\", optional int condIn)","python":"bool ImGui_SetDragDropPayload(ImGui_Context* ctx, const char* type, const char* data, int* condInOptional)","cpp":"bool ImGui_SetDragDropPayload(ImGui_Context* ctx, const char* type, const char* data, int* condInOptional)"},"title":"ImGui_SetDragDropPayload","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"The type is a user defined string of maximum 32 characters.\nStrings starting with '_' are reserved for dear imgui internal types.\nData is copied and held by imgui.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetItemAllowOverlap","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetItemAllowOverlap\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetItemAllowOverlap(ImGui_Context ctx)","eel":"extension_api(\"ImGui_SetItemAllowOverlap\", ImGui_Context ctx)","python":"void ImGui_SetItemAllowOverlap(ImGui_Context* ctx)","cpp":"void ImGui_SetItemAllowOverlap(ImGui_Context* ctx)"},"title":"ImGui_SetItemAllowOverlap","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Allow last item to be overlapped by a subsequent item. sometimes useful with\ninvisible buttons, selectables, etc. to catch unused area.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetItemDefaultFocus","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetItemDefaultFocus\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetItemDefaultFocus(ImGui_Context ctx)","eel":"extension_api(\"ImGui_SetItemDefaultFocus\", ImGui_Context ctx)","python":"void ImGui_SetItemDefaultFocus(ImGui_Context* ctx)","cpp":"void ImGui_SetItemDefaultFocus(ImGui_Context* ctx)"},"title":"ImGui_SetItemDefaultFocus","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Make last item the default focused item of a window.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional integer offsetIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetKeyboardFocusHere","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"integer","identifier":"offsetIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetKeyboardFocusHere\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"offsetIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetKeyboardFocusHere(ImGui_Context ctx, optional integer offsetIn)","eel":"extension_api(\"ImGui_SetKeyboardFocusHere\", ImGui_Context ctx, optional int offsetIn)","python":"void ImGui_SetKeyboardFocusHere(ImGui_Context* ctx, int* offsetInOptional)","cpp":"void ImGui_SetKeyboardFocusHere(ImGui_Context* ctx, int* offsetInOptional)"},"title":"ImGui_SetKeyboardFocusHere","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Focus keyboard on the next widget. Use positive 'offset' to access sub\ncomponents of a multiple component widget. Use -1 to access previous widget.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer cursor_type","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetMouseCursor","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"cursor_type","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetMouseCursor\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"cursor_type"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetMouseCursor(ImGui_Context ctx, integer cursor_type)","eel":"extension_api(\"ImGui_SetMouseCursor\", ImGui_Context ctx, int cursor_type)","python":"void ImGui_SetMouseCursor(ImGui_Context* ctx, int cursor_type)","cpp":"void ImGui_SetMouseCursor(ImGui_Context* ctx, int cursor_type)"},"title":"ImGui_SetMouseCursor","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set desired mouse cursor shape. See MouseCursor_* for possible values.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"boolean want_capture_keyboard","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetNextFrameWantCaptureKeyboard","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"want_capture_keyboard","type":"boolean"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetNextFrameWantCaptureKeyboard\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"bool","identifier":"want_capture_keyboard"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetNextFrameWantCaptureKeyboard(ImGui_Context ctx, boolean want_capture_keyboard)","eel":"extension_api(\"ImGui_SetNextFrameWantCaptureKeyboard\", ImGui_Context ctx, bool want_capture_keyboard)","python":"void ImGui_SetNextFrameWantCaptureKeyboard(ImGui_Context* ctx, bool want_capture_keyboard)","cpp":"void ImGui_SetNextFrameWantCaptureKeyboard(ImGui_Context* ctx, bool want_capture_keyboard)"},"title":"ImGui_SetNextFrameWantCaptureKeyboard","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Request capture of keyboard shortcuts in REAPER's global scope for the next frame.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"boolean is_open","description":""},{"identifier":"optional integer condIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetNextItemOpen","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"is_open","type":"boolean"},{"isOptional":true,"type":"integer","identifier":"condIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetNextItemOpen\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"bool","identifier":"is_open"},{"identifier":"condIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetNextItemOpen(ImGui_Context ctx, boolean is_open, optional integer condIn)","eel":"extension_api(\"ImGui_SetNextItemOpen\", ImGui_Context ctx, bool is_open, optional int condIn)","python":"void ImGui_SetNextItemOpen(ImGui_Context* ctx, bool is_open, int* condInOptional)","cpp":"void ImGui_SetNextItemOpen(ImGui_Context* ctx, bool is_open, int* condInOptional)"},"title":"ImGui_SetNextItemOpen","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set next TreeNode/CollapsingHeader open state.\nCan also be done with the TreeNodeFlags_DefaultOpen flag.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"number item_width","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetNextItemWidth","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"item_width","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetNextItemWidth\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"item_width"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetNextItemWidth(ImGui_Context ctx, number item_width)","eel":"extension_api(\"ImGui_SetNextItemWidth\", ImGui_Context ctx, item_width)","python":"void ImGui_SetNextItemWidth(ImGui_Context* ctx, double item_width)","cpp":"void ImGui_SetNextItemWidth(ImGui_Context* ctx, double item_width)"},"title":"ImGui_SetNextItemWidth","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set width of the _next_ common large \"item+label\" widget.\n\n- \\&gt;0.0: width in pixels\n- &lt;0.0 align xx pixels to the right of window\n  (so -FLT_MIN always align width to the right side)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"number alpha","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetNextWindowBgAlpha","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"alpha","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetNextWindowBgAlpha\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"alpha"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetNextWindowBgAlpha(ImGui_Context ctx, number alpha)","eel":"extension_api(\"ImGui_SetNextWindowBgAlpha\", ImGui_Context ctx, alpha)","python":"void ImGui_SetNextWindowBgAlpha(ImGui_Context* ctx, double alpha)","cpp":"void ImGui_SetNextWindowBgAlpha(ImGui_Context* ctx, double alpha)"},"title":"ImGui_SetNextWindowBgAlpha","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set next window background color alpha. Helper to easily override the Alpha\ncomponent of Col_WindowBg/Col_ChildBg/Col_PopupBg.\nYou may also use WindowFlags_NoBackground for a fully transparent window.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"boolean collapsed","description":""},{"identifier":"optional integer condIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetNextWindowCollapsed","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"collapsed","type":"boolean"},{"isOptional":true,"type":"integer","identifier":"condIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetNextWindowCollapsed\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"bool","identifier":"collapsed"},{"identifier":"condIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetNextWindowCollapsed(ImGui_Context ctx, boolean collapsed, optional integer condIn)","eel":"extension_api(\"ImGui_SetNextWindowCollapsed\", ImGui_Context ctx, bool collapsed, optional int condIn)","python":"void ImGui_SetNextWindowCollapsed(ImGui_Context* ctx, bool collapsed, int* condInOptional)","cpp":"void ImGui_SetNextWindowCollapsed(ImGui_Context* ctx, bool collapsed, int* condInOptional)"},"title":"ImGui_SetNextWindowCollapsed","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set next window collapsed state.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"number size_w","description":""},{"identifier":"number size_h","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetNextWindowContentSize","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"size_w","type":"number"},{"identifier":"size_h","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetNextWindowContentSize\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"size_w"},{"identifier":"size_h"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetNextWindowContentSize(ImGui_Context ctx, number size_w, number size_h)","eel":"extension_api(\"ImGui_SetNextWindowContentSize\", ImGui_Context ctx, size_w, size_h)","python":"void ImGui_SetNextWindowContentSize(ImGui_Context* ctx, double size_w, double size_h)","cpp":"void ImGui_SetNextWindowContentSize(ImGui_Context* ctx, double size_w, double size_h)"},"title":"ImGui_SetNextWindowContentSize","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set next window content size (~ scrollable client area, which enforce the\nrange of scrollbars). Not including window decorations (title bar, menu bar,\netc.) nor StyleVar_WindowPadding. set an axis to 0.0 to leave it automatic.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer dock_id","description":""},{"identifier":"optional integer condIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetNextWindowDockID","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"dock_id","type":"integer"},{"isOptional":true,"type":"integer","identifier":"condIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetNextWindowDockID\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"dock_id"},{"identifier":"condIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetNextWindowDockID(ImGui_Context ctx, integer dock_id, optional integer condIn)","eel":"extension_api(\"ImGui_SetNextWindowDockID\", ImGui_Context ctx, int dock_id, optional int condIn)","python":"void ImGui_SetNextWindowDockID(ImGui_Context* ctx, int dock_id, int* condInOptional)","cpp":"void ImGui_SetNextWindowDockID(ImGui_Context* ctx, int dock_id, int* condInOptional)"},"title":"ImGui_SetNextWindowDockID","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetNextWindowFocus","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetNextWindowFocus\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetNextWindowFocus(ImGui_Context ctx)","eel":"extension_api(\"ImGui_SetNextWindowFocus\", ImGui_Context ctx)","python":"void ImGui_SetNextWindowFocus(ImGui_Context* ctx)","cpp":"void ImGui_SetNextWindowFocus(ImGui_Context* ctx)"},"title":"ImGui_SetNextWindowFocus","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set next window to be focused / top-most.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"number pos_x","description":""},{"identifier":"number pos_y","description":""},{"identifier":"optional integer condIn","description":""},{"identifier":"optional number pivot_xIn","description":""},{"identifier":"optional number pivot_yIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetNextWindowPos","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"pos_x","type":"number"},{"identifier":"pos_y","type":"number"},{"isOptional":true,"type":"integer","identifier":"condIn"},{"isOptional":true,"type":"number","identifier":"pivot_xIn"},{"isOptional":true,"type":"number","identifier":"pivot_yIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetNextWindowPos\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"pos_x"},{"identifier":"pos_y"},{"identifier":"condIn","modifier":"optional","type_name":"int"},{"type_name":"optional","identifier":"pivot_xIn"},{"type_name":"optional","identifier":"pivot_yIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetNextWindowPos(ImGui_Context ctx, number pos_x, number pos_y, optional integer condIn, optional number pivot_xIn, optional number pivot_yIn)","eel":"extension_api(\"ImGui_SetNextWindowPos\", ImGui_Context ctx, pos_x, pos_y, optional int condIn, optional pivot_xIn, optional pivot_yIn)","python":"void ImGui_SetNextWindowPos(ImGui_Context* ctx, double pos_x, double pos_y, int* condInOptional, double* pivot_xInOptional, double* pivot_yInOptional)","cpp":"void ImGui_SetNextWindowPos(ImGui_Context* ctx, double pos_x, double pos_y, int* condInOptional, double* pivot_xInOptional, double* pivot_yInOptional)"},"title":"ImGui_SetNextWindowPos","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set next window position. Use pivot=(0.5,0.5) to center on given point, etc.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"number scroll_x","description":""},{"identifier":"number scroll_y","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetNextWindowScroll","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"scroll_x","type":"number"},{"identifier":"scroll_y","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetNextWindowScroll\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"scroll_x"},{"identifier":"scroll_y"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetNextWindowScroll(ImGui_Context ctx, number scroll_x, number scroll_y)","eel":"extension_api(\"ImGui_SetNextWindowScroll\", ImGui_Context ctx, scroll_x, scroll_y)","python":"void ImGui_SetNextWindowScroll(ImGui_Context* ctx, double scroll_x, double scroll_y)","cpp":"void ImGui_SetNextWindowScroll(ImGui_Context* ctx, double scroll_x, double scroll_y)"},"title":"ImGui_SetNextWindowScroll","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set next window scrolling value (use &lt; 0.0 to not affect a given axis).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"number size_w","description":""},{"identifier":"number size_h","description":""},{"identifier":"optional integer condIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetNextWindowSize","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"size_w","type":"number"},{"identifier":"size_h","type":"number"},{"isOptional":true,"type":"integer","identifier":"condIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetNextWindowSize\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"size_w"},{"identifier":"size_h"},{"identifier":"condIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetNextWindowSize(ImGui_Context ctx, number size_w, number size_h, optional integer condIn)","eel":"extension_api(\"ImGui_SetNextWindowSize\", ImGui_Context ctx, size_w, size_h, optional int condIn)","python":"void ImGui_SetNextWindowSize(ImGui_Context* ctx, double size_w, double size_h, int* condInOptional)","cpp":"void ImGui_SetNextWindowSize(ImGui_Context* ctx, double size_w, double size_h, int* condInOptional)"},"title":"ImGui_SetNextWindowSize","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set next window size. set axis to 0.0 to force an auto-fit on this axis.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"number size_min_w","description":""},{"identifier":"number size_min_h","description":""},{"identifier":"number size_max_w","description":""},{"identifier":"number size_max_hImGui_Function callbackIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetNextWindowSizeConstraints","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"size_min_w","type":"number"},{"identifier":"size_min_h","type":"number"},{"identifier":"size_max_w","type":"number"},{"isOptional":true,"type":"number","identifier":"callbackIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetNextWindowSizeConstraints\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"size_min_w"},{"identifier":"size_min_h"},{"identifier":"size_max_w"},{"identifier":"size_max_h"},{"type_name":"ImGui_Function","identifier":"callbackIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetNextWindowSizeConstraints(ImGui_Context ctx, number size_min_w, number size_min_h, number size_max_w, number size_max_hImGui_Function callbackIn)","eel":"extension_api(\"ImGui_SetNextWindowSizeConstraints\", ImGui_Context ctx, size_min_w, size_min_h, size_max_w, size_max_h, ImGui_Function callbackIn)","python":"void ImGui_SetNextWindowSizeConstraints(ImGui_Context* ctx, double size_min_w, double size_min_h, double size_max_w, double size_max_h, ImGui_Function* callbackInOptional)","cpp":"void ImGui_SetNextWindowSizeConstraints(ImGui_Context* ctx, double size_min_w, double size_min_h, double size_max_w, double size_max_h, ImGui_Function* callbackInOptional)"},"title":"ImGui_SetNextWindowSizeConstraints","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set next window size limits. Use -1,-1 on either X/Y axis to preserve the\ncurrent size. Use FLT_MAX (second return value of NumericLimits_Float) for no\nmaximum size. Sizes will be rounded down.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"number local_x","description":""},{"identifier":"optional number center_x_ratioIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetScrollFromPosX","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"local_x","type":"number"},{"isOptional":true,"type":"number","identifier":"center_x_ratioIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetScrollFromPosX\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"local_x"},{"type_name":"optional","identifier":"center_x_ratioIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetScrollFromPosX(ImGui_Context ctx, number local_x, optional number center_x_ratioIn)","eel":"extension_api(\"ImGui_SetScrollFromPosX\", ImGui_Context ctx, local_x, optional center_x_ratioIn)","python":"void ImGui_SetScrollFromPosX(ImGui_Context* ctx, double local_x, double* center_x_ratioInOptional)","cpp":"void ImGui_SetScrollFromPosX(ImGui_Context* ctx, double local_x, double* center_x_ratioInOptional)"},"title":"ImGui_SetScrollFromPosX","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Adjust scrolling amount to make given position visible.\nGenerally GetCursorStartPos() + offset to compute a valid position.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"number local_y","description":""},{"identifier":"optional number center_y_ratioIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetScrollFromPosY","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"local_y","type":"number"},{"isOptional":true,"type":"number","identifier":"center_y_ratioIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetScrollFromPosY\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"local_y"},{"type_name":"optional","identifier":"center_y_ratioIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetScrollFromPosY(ImGui_Context ctx, number local_y, optional number center_y_ratioIn)","eel":"extension_api(\"ImGui_SetScrollFromPosY\", ImGui_Context ctx, local_y, optional center_y_ratioIn)","python":"void ImGui_SetScrollFromPosY(ImGui_Context* ctx, double local_y, double* center_y_ratioInOptional)","cpp":"void ImGui_SetScrollFromPosY(ImGui_Context* ctx, double local_y, double* center_y_ratioInOptional)"},"title":"ImGui_SetScrollFromPosY","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Adjust scrolling amount to make given position visible.\nGenerally GetCursorStartPos() + offset to compute a valid position.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional number center_x_ratioIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetScrollHereX","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"number","identifier":"center_x_ratioIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetScrollHereX\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"optional","identifier":"center_x_ratioIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetScrollHereX(ImGui_Context ctx, optional number center_x_ratioIn)","eel":"extension_api(\"ImGui_SetScrollHereX\", ImGui_Context ctx, optional center_x_ratioIn)","python":"void ImGui_SetScrollHereX(ImGui_Context* ctx, double* center_x_ratioInOptional)","cpp":"void ImGui_SetScrollHereX(ImGui_Context* ctx, double* center_x_ratioInOptional)"},"title":"ImGui_SetScrollHereX","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Adjust scrolling amount to make current cursor position visible.\ncenter_x_ratio=0.0: left, 0.5: center, 1.0: right.\nWhen using to make a \"default/current item\" visible,\nconsider using SetItemDefaultFocus instead.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional number center_y_ratioIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetScrollHereY","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"number","identifier":"center_y_ratioIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetScrollHereY\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"optional","identifier":"center_y_ratioIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetScrollHereY(ImGui_Context ctx, optional number center_y_ratioIn)","eel":"extension_api(\"ImGui_SetScrollHereY\", ImGui_Context ctx, optional center_y_ratioIn)","python":"void ImGui_SetScrollHereY(ImGui_Context* ctx, double* center_y_ratioInOptional)","cpp":"void ImGui_SetScrollHereY(ImGui_Context* ctx, double* center_y_ratioInOptional)"},"title":"ImGui_SetScrollHereY","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Adjust scrolling amount to make current cursor position visible.\ncenter_y_ratio=0.0: top, 0.5: center, 1.0: bottom.\nWhen using to make a \"default/current item\" visible,\nconsider using SetItemDefaultFocus instead.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"number scroll_x","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetScrollX","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"scroll_x","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetScrollX\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"scroll_x"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetScrollX(ImGui_Context ctx, number scroll_x)","eel":"extension_api(\"ImGui_SetScrollX\", ImGui_Context ctx, scroll_x)","python":"void ImGui_SetScrollX(ImGui_Context* ctx, double scroll_x)","cpp":"void ImGui_SetScrollX(ImGui_Context* ctx, double scroll_x)"},"title":"ImGui_SetScrollX","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set scrolling amount [0 .. GetScrollMaxX()]","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"number scroll_y","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetScrollY","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"scroll_y","type":"number"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetScrollY\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"scroll_y"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetScrollY(ImGui_Context ctx, number scroll_y)","eel":"extension_api(\"ImGui_SetScrollY\", ImGui_Context ctx, scroll_y)","python":"void ImGui_SetScrollY(ImGui_Context* ctx, double scroll_y)","cpp":"void ImGui_SetScrollY(ImGui_Context* ctx, double scroll_y)"},"title":"ImGui_SetScrollY","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set scrolling amount [0 .. GetScrollMaxY()]","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string tab_or_docked_window_label","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetTabItemClosed","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"tab_or_docked_window_label","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetTabItemClosed\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"tab_or_docked_window_label\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetTabItemClosed(ImGui_Context ctx, string tab_or_docked_window_label)","eel":"extension_api(\"ImGui_SetTabItemClosed\", ImGui_Context ctx, \"tab_or_docked_window_label\")","python":"void ImGui_SetTabItemClosed(ImGui_Context* ctx, const char* tab_or_docked_window_label)","cpp":"void ImGui_SetTabItemClosed(ImGui_Context* ctx, const char* tab_or_docked_window_label)"},"title":"ImGui_SetTabItemClosed","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Notify TabBar or Docking system of a closed tab/window ahead\n(useful to reduce visual flicker on reorderable tab bars).\nFor tab-bar: call after BeginTabBar and before Tab submissions.\nOtherwise call with a window name.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string text","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetTooltip","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"text","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetTooltip\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"text\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetTooltip(ImGui_Context ctx, string text)","eel":"extension_api(\"ImGui_SetTooltip\", ImGui_Context ctx, \"text\")","python":"void ImGui_SetTooltip(ImGui_Context* ctx, const char* text)","cpp":"void ImGui_SetTooltip(ImGui_Context* ctx, const char* text)"},"title":"ImGui_SetTooltip","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set a text-only tooltip, typically use with IsItemHovered. override any\nprevious call to SetTooltip.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"boolean collapsed","description":""},{"identifier":"optional integer condIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetWindowCollapsed","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"collapsed","type":"boolean"},{"isOptional":true,"type":"integer","identifier":"condIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetWindowCollapsed\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"bool","identifier":"collapsed"},{"identifier":"condIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetWindowCollapsed(ImGui_Context ctx, boolean collapsed, optional integer condIn)","eel":"extension_api(\"ImGui_SetWindowCollapsed\", ImGui_Context ctx, bool collapsed, optional int condIn)","python":"void ImGui_SetWindowCollapsed(ImGui_Context* ctx, bool collapsed, int* condInOptional)","cpp":"void ImGui_SetWindowCollapsed(ImGui_Context* ctx, bool collapsed, int* condInOptional)"},"title":"ImGui_SetWindowCollapsed","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"(Not recommended) Set current window collapsed state.\nPrefer using SetNextWindowCollapsed.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string name","description":""},{"identifier":"boolean collapsed","description":""},{"identifier":"optional integer condIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetWindowCollapsedEx","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"name","type":"string"},{"identifier":"collapsed","type":"boolean"},{"isOptional":true,"type":"integer","identifier":"condIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetWindowCollapsedEx\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"name\""},{"type_name":"bool","identifier":"collapsed"},{"identifier":"condIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetWindowCollapsedEx(ImGui_Context ctx, string name, boolean collapsed, optional integer condIn)","eel":"extension_api(\"ImGui_SetWindowCollapsedEx\", ImGui_Context ctx, \"name\", bool collapsed, optional int condIn)","python":"void ImGui_SetWindowCollapsedEx(ImGui_Context* ctx, const char* name, bool collapsed, int* condInOptional)","cpp":"void ImGui_SetWindowCollapsedEx(ImGui_Context* ctx, const char* name, bool collapsed, int* condInOptional)"},"title":"ImGui_SetWindowCollapsedEx","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set named window collapsed state.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetWindowFocus","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetWindowFocus\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetWindowFocus(ImGui_Context ctx)","eel":"extension_api(\"ImGui_SetWindowFocus\", ImGui_Context ctx)","python":"void ImGui_SetWindowFocus(ImGui_Context* ctx)","cpp":"void ImGui_SetWindowFocus(ImGui_Context* ctx)"},"title":"ImGui_SetWindowFocus","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"(Not recommended) Set current window to be focused / top-most.\nPrefer using SetNextWindowFocus.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string name","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetWindowFocusEx","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"name","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetWindowFocusEx\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"name\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetWindowFocusEx(ImGui_Context ctx, string name)","eel":"extension_api(\"ImGui_SetWindowFocusEx\", ImGui_Context ctx, \"name\")","python":"void ImGui_SetWindowFocusEx(ImGui_Context* ctx, const char* name)","cpp":"void ImGui_SetWindowFocusEx(ImGui_Context* ctx, const char* name)"},"title":"ImGui_SetWindowFocusEx","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set named window to be focused / top-most. Use an empty name to remove focus.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"number pos_x","description":""},{"identifier":"number pos_y","description":""},{"identifier":"optional integer condIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetWindowPos","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"pos_x","type":"number"},{"identifier":"pos_y","type":"number"},{"isOptional":true,"type":"integer","identifier":"condIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetWindowPos\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"pos_x"},{"identifier":"pos_y"},{"identifier":"condIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetWindowPos(ImGui_Context ctx, number pos_x, number pos_y, optional integer condIn)","eel":"extension_api(\"ImGui_SetWindowPos\", ImGui_Context ctx, pos_x, pos_y, optional int condIn)","python":"void ImGui_SetWindowPos(ImGui_Context* ctx, double pos_x, double pos_y, int* condInOptional)","cpp":"void ImGui_SetWindowPos(ImGui_Context* ctx, double pos_x, double pos_y, int* condInOptional)"},"title":"ImGui_SetWindowPos","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"(Not recommended) Set current window position - call within Begin/End.\nPrefer using SetNextWindowPos, as this may incur tearing and minor side-effects.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string name","description":""},{"identifier":"number pos_x","description":""},{"identifier":"number pos_y","description":""},{"identifier":"optional integer condIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetWindowPosEx","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"name","type":"string"},{"identifier":"pos_x","type":"number"},{"identifier":"pos_y","type":"number"},{"isOptional":true,"type":"integer","identifier":"condIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetWindowPosEx\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"name\""},{"identifier":"pos_x"},{"identifier":"pos_y"},{"identifier":"condIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetWindowPosEx(ImGui_Context ctx, string name, number pos_x, number pos_y, optional integer condIn)","eel":"extension_api(\"ImGui_SetWindowPosEx\", ImGui_Context ctx, \"name\", pos_x, pos_y, optional int condIn)","python":"void ImGui_SetWindowPosEx(ImGui_Context* ctx, const char* name, double pos_x, double pos_y, int* condInOptional)","cpp":"void ImGui_SetWindowPosEx(ImGui_Context* ctx, const char* name, double pos_x, double pos_y, int* condInOptional)"},"title":"ImGui_SetWindowPosEx","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set named window position.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"number size_w","description":""},{"identifier":"number size_h","description":""},{"identifier":"optional integer condIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetWindowSize","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"size_w","type":"number"},{"identifier":"size_h","type":"number"},{"isOptional":true,"type":"integer","identifier":"condIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetWindowSize\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"size_w"},{"identifier":"size_h"},{"identifier":"condIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetWindowSize(ImGui_Context ctx, number size_w, number size_h, optional integer condIn)","eel":"extension_api(\"ImGui_SetWindowSize\", ImGui_Context ctx, size_w, size_h, optional int condIn)","python":"void ImGui_SetWindowSize(ImGui_Context* ctx, double size_w, double size_h, int* condInOptional)","cpp":"void ImGui_SetWindowSize(ImGui_Context* ctx, double size_w, double size_h, int* condInOptional)"},"title":"ImGui_SetWindowSize","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"(Not recommended) Set current window size - call within Begin/End.\nSet size_w and size_h to 0 to force an auto-fit.\nPrefer using SetNextWindowSize, as this may incur tearing and minor side-effects.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string name","description":""},{"identifier":"number size_w","description":""},{"identifier":"number size_h","description":""},{"identifier":"optional integer condIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SetWindowSizeEx","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"name","type":"string"},{"identifier":"size_w","type":"number"},{"identifier":"size_h","type":"number"},{"isOptional":true,"type":"integer","identifier":"condIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_SetWindowSizeEx\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"name\""},{"identifier":"size_w"},{"identifier":"size_h"},{"identifier":"condIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_SetWindowSizeEx(ImGui_Context ctx, string name, number size_w, number size_h, optional integer condIn)","eel":"extension_api(\"ImGui_SetWindowSizeEx\", ImGui_Context ctx, \"name\", size_w, size_h, optional int condIn)","python":"void ImGui_SetWindowSizeEx(ImGui_Context* ctx, const char* name, double size_w, double size_h, int* condInOptional)","cpp":"void ImGui_SetWindowSizeEx(ImGui_Context* ctx, const char* name, double size_w, double size_h, int* condInOptional)"},"title":"ImGui_SetWindowSizeEx","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set named window size. Set axis to 0.0 to force an auto-fit on this axis.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional boolean p_open","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_ShowAboutWindow","return_values":[{"isOptional":true,"type":"boolean","identifier":"p_open"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"boolean","identifier":"p_open"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_ShowAboutWindow\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"&amp;p_open","modifier":"optional","type_name":"bool"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"optional boolean p_open","description":""}],"prog_lang":"*"},"functioncall":{"lua":"optional boolean p_open = reaper.ImGui_ShowAboutWindow(ImGui_Context ctx, optional boolean p_open)","eel":"extension_api(\"ImGui_ShowAboutWindow\", ImGui_Context ctx, optional bool &amp;p_open)","python":"void ImGui_ShowAboutWindow(ImGui_Context* ctx, bool* p_openInOutOptional)","cpp":"void ImGui_ShowAboutWindow(ImGui_Context* ctx, bool* p_openInOutOptional)"},"title":"ImGui_ShowAboutWindow","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Create About window.\nDisplay ReaImGui version, Dear ImGui version, credits and build/system information.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional boolean p_open","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_ShowDebugLogWindow","return_values":[{"isOptional":true,"type":"boolean","identifier":"p_open"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"boolean","identifier":"p_open"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_ShowDebugLogWindow\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"&amp;p_open","modifier":"optional","type_name":"bool"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"optional boolean p_open","description":""}],"prog_lang":"*"},"functioncall":{"lua":"optional boolean p_open = reaper.ImGui_ShowDebugLogWindow(ImGui_Context ctx, optional boolean p_open)","eel":"extension_api(\"ImGui_ShowDebugLogWindow\", ImGui_Context ctx, optional bool &amp;p_open)","python":"void ImGui_ShowDebugLogWindow(ImGui_Context* ctx, bool* p_openInOutOptional)","cpp":"void ImGui_ShowDebugLogWindow(ImGui_Context* ctx, bool* p_openInOutOptional)"},"title":"ImGui_ShowDebugLogWindow","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Create Debug Log window. display a simplified log of important dear imgui events.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional boolean p_open","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_ShowMetricsWindow","return_values":[{"isOptional":true,"type":"boolean","identifier":"p_open"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"boolean","identifier":"p_open"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_ShowMetricsWindow\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"&amp;p_open","modifier":"optional","type_name":"bool"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"optional boolean p_open","description":""}],"prog_lang":"*"},"functioncall":{"lua":"optional boolean p_open = reaper.ImGui_ShowMetricsWindow(ImGui_Context ctx, optional boolean p_open)","eel":"extension_api(\"ImGui_ShowMetricsWindow\", ImGui_Context ctx, optional bool &amp;p_open)","python":"void ImGui_ShowMetricsWindow(ImGui_Context* ctx, bool* p_openInOutOptional)","cpp":"void ImGui_ShowMetricsWindow(ImGui_Context* ctx, bool* p_openInOutOptional)"},"title":"ImGui_ShowMetricsWindow","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Create Metrics/Debugger window.\nDisplay Dear ImGui internals: windows, draw commands, various internal state, etc.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional boolean p_open","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_ShowStackToolWindow","return_values":[{"isOptional":true,"type":"boolean","identifier":"p_open"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"boolean","identifier":"p_open"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_ShowStackToolWindow\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"&amp;p_open","modifier":"optional","type_name":"bool"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"optional boolean p_open","description":""}],"prog_lang":"*"},"functioncall":{"lua":"optional boolean p_open = reaper.ImGui_ShowStackToolWindow(ImGui_Context ctx, optional boolean p_open)","eel":"extension_api(\"ImGui_ShowStackToolWindow\", ImGui_Context ctx, optional bool &amp;p_open)","python":"void ImGui_ShowStackToolWindow(ImGui_Context* ctx, bool* p_openInOutOptional)","cpp":"void ImGui_ShowStackToolWindow(ImGui_Context* ctx, bool* p_openInOutOptional)"},"title":"ImGui_ShowStackToolWindow","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Create Stack Tool window. Hover items with mouse to query information about\nthe source of their unique ID.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"number v_rad","description":""},{"identifier":"optional number v_degrees_minIn","description":""},{"identifier":"optional number v_degrees_maxIn","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SliderAngle","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v_rad","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v_rad","type":"number"},{"isOptional":true,"type":"number","identifier":"v_degrees_minIn"},{"isOptional":true,"type":"number","identifier":"v_degrees_maxIn"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_SliderAngle\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"identifier":"&amp;v_rad"},{"type_name":"optional","identifier":"v_degrees_minIn"},{"type_name":"optional","identifier":"v_degrees_maxIn"},{"type_name":"optional","identifier":"\"formatIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number v_rad","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number v_rad = reaper.ImGui_SliderAngle(ImGui_Context ctx, string label, number v_rad, optional number v_degrees_minIn, optional number v_degrees_maxIn, optional string formatIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_SliderAngle\", ImGui_Context ctx, \"label\", &amp;v_rad, optional v_degrees_minIn, optional v_degrees_maxIn, optional \"formatIn\", optional int flagsIn)","python":"bool ImGui_SliderAngle(ImGui_Context* ctx, const char* label, double* v_radInOut, double* v_degrees_minInOptional, double* v_degrees_maxInOptional, const char* formatInOptional, int* flagsInOptional)","cpp":"bool ImGui_SliderAngle(ImGui_Context* ctx, const char* label, double* v_radInOut, double* v_degrees_minInOptional, double* v_degrees_maxInOptional, const char* formatInOptional, int* flagsInOptional)"},"title":"ImGui_SliderAngle","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"number v","description":""},{"identifier":"number v_min","description":""},{"identifier":"number v_max","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SliderDouble","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v","type":"number"},{"identifier":"v_min","type":"number"},{"identifier":"v_max","type":"number"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_SliderDouble\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"identifier":"&amp;v"},{"identifier":"v_min"},{"identifier":"v_max"},{"type_name":"optional","identifier":"\"formatIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number v","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number v = reaper.ImGui_SliderDouble(ImGui_Context ctx, string label, number v, number v_min, number v_max, optional string formatIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_SliderDouble\", ImGui_Context ctx, \"label\", &amp;v, v_min, v_max, optional \"formatIn\", optional int flagsIn)","python":"bool ImGui_SliderDouble(ImGui_Context* ctx, const char* label, double* vInOut, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)","cpp":"bool ImGui_SliderDouble(ImGui_Context* ctx, const char* label, double* vInOut, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)"},"title":"ImGui_SliderDouble","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"number v1","description":""},{"identifier":"number v2","description":""},{"identifier":"number v_min","description":""},{"identifier":"number v_max","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SliderDouble2","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v1","type":"number"},{"identifier":"v2","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v1","type":"number"},{"identifier":"v2","type":"number"},{"identifier":"v_min","type":"number"},{"identifier":"v_max","type":"number"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_SliderDouble2\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"identifier":"&amp;v1"},{"identifier":"&amp;v2"},{"identifier":"v_min"},{"identifier":"v_max"},{"type_name":"optional","identifier":"\"formatIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number v1","description":""},{"identifier":"number v2","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number v1, number v2 = reaper.ImGui_SliderDouble2(ImGui_Context ctx, string label, number v1, number v2, number v_min, number v_max, optional string formatIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_SliderDouble2\", ImGui_Context ctx, \"label\", &amp;v1, &amp;v2, v_min, v_max, optional \"formatIn\", optional int flagsIn)","python":"bool ImGui_SliderDouble2(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)","cpp":"bool ImGui_SliderDouble2(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)"},"title":"ImGui_SliderDouble2","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":9,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"number v1","description":""},{"identifier":"number v2","description":""},{"identifier":"number v3","description":""},{"identifier":"number v_min","description":""},{"identifier":"number v_max","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SliderDouble3","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v1","type":"number"},{"identifier":"v2","type":"number"},{"identifier":"v3","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v1","type":"number"},{"identifier":"v2","type":"number"},{"identifier":"v3","type":"number"},{"identifier":"v_min","type":"number"},{"identifier":"v_max","type":"number"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_SliderDouble3\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"identifier":"&amp;v1"},{"identifier":"&amp;v2"},{"identifier":"&amp;v3"},{"identifier":"v_min"},{"identifier":"v_max"},{"type_name":"optional","identifier":"\"formatIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number v1","description":""},{"identifier":"number v2","description":""},{"identifier":"number v3","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number v1, number v2, number v3 = reaper.ImGui_SliderDouble3(ImGui_Context ctx, string label, number v1, number v2, number v3, number v_min, number v_max, optional string formatIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_SliderDouble3\", ImGui_Context ctx, \"label\", &amp;v1, &amp;v2, &amp;v3, v_min, v_max, optional \"formatIn\", optional int flagsIn)","python":"bool ImGui_SliderDouble3(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)","cpp":"bool ImGui_SliderDouble3(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)"},"title":"ImGui_SliderDouble3","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":10,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"number v1","description":""},{"identifier":"number v2","description":""},{"identifier":"number v3","description":""},{"identifier":"number v4","description":""},{"identifier":"number v_min","description":""},{"identifier":"number v_max","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SliderDouble4","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v1","type":"number"},{"identifier":"v2","type":"number"},{"identifier":"v3","type":"number"},{"identifier":"v4","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v1","type":"number"},{"identifier":"v2","type":"number"},{"identifier":"v3","type":"number"},{"identifier":"v4","type":"number"},{"identifier":"v_min","type":"number"},{"identifier":"v_max","type":"number"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_SliderDouble4\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"identifier":"&amp;v1"},{"identifier":"&amp;v2"},{"identifier":"&amp;v3"},{"identifier":"&amp;v4"},{"identifier":"v_min"},{"identifier":"v_max"},{"type_name":"optional","identifier":"\"formatIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number v1","description":""},{"identifier":"number v2","description":""},{"identifier":"number v3","description":""},{"identifier":"number v4","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number v1, number v2, number v3, number v4 = reaper.ImGui_SliderDouble4(ImGui_Context ctx, string label, number v1, number v2, number v3, number v4, number v_min, number v_max, optional string formatIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_SliderDouble4\", ImGui_Context ctx, \"label\", &amp;v1, &amp;v2, &amp;v3, &amp;v4, v_min, v_max, optional \"formatIn\", optional int flagsIn)","python":"bool ImGui_SliderDouble4(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double* v4InOut, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)","cpp":"bool ImGui_SliderDouble4(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double* v4InOut, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)"},"title":"ImGui_SliderDouble4","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string labelreaper_array values","description":""},{"identifier":"number v_min","description":""},{"identifier":"number v_max","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SliderDoubleN","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"string","identifier":"values"},{"identifier":"v_min","type":"number"},{"identifier":"v_max","type":"number"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_SliderDoubleN\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"reaper_array","identifier":"values"},{"identifier":"v_min"},{"identifier":"v_max"},{"type_name":"optional","identifier":"\"formatIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_SliderDoubleN(ImGui_Context ctx, string labelreaper_array values, number v_min, number v_max, optional string formatIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_SliderDoubleN\", ImGui_Context ctx, \"label\", reaper_array values, v_min, v_max, optional \"formatIn\", optional int flagsIn)","python":"bool ImGui_SliderDoubleN(ImGui_Context* ctx, const char* label, reaper_array* values, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)","cpp":"bool ImGui_SliderDoubleN(ImGui_Context* ctx, const char* label, reaper_array* values, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)"},"title":"ImGui_SliderDoubleN","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_SliderFlags_AlwaysClamp","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_SliderFlags_AlwaysClamp\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_SliderFlags_AlwaysClamp()","eel":"int extension_api(\"ImGui_SliderFlags_AlwaysClamp\")","python":"int ImGui_SliderFlags_AlwaysClamp()","cpp":"int ImGui_SliderFlags_AlwaysClamp()"},"title":"ImGui_SliderFlags_AlwaysClamp","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Clamp value to min/max bounds when input manually with CTRL+Click.\n   By default CTRL+Click allows going out of bounds.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_SliderFlags_Logarithmic","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_SliderFlags_Logarithmic\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_SliderFlags_Logarithmic()","eel":"int extension_api(\"ImGui_SliderFlags_Logarithmic\")","python":"int ImGui_SliderFlags_Logarithmic()","cpp":"int ImGui_SliderFlags_Logarithmic()"},"title":"ImGui_SliderFlags_Logarithmic","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Make the widget logarithmic (linear otherwise).\n   Consider using SliderFlags_NoRoundToFormat with this if using a format-string\n   with small amount of digits.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_SliderFlags_NoInput","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_SliderFlags_NoInput\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_SliderFlags_NoInput()","eel":"int extension_api(\"ImGui_SliderFlags_NoInput\")","python":"int ImGui_SliderFlags_NoInput()","cpp":"int ImGui_SliderFlags_NoInput()"},"title":"ImGui_SliderFlags_NoInput","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable CTRL+Click or Enter key allowing to input text directly into the widget.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_SliderFlags_NoRoundToFormat","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_SliderFlags_NoRoundToFormat\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_SliderFlags_NoRoundToFormat()","eel":"int extension_api(\"ImGui_SliderFlags_NoRoundToFormat\")","python":"int ImGui_SliderFlags_NoRoundToFormat()","cpp":"int ImGui_SliderFlags_NoRoundToFormat()"},"title":"ImGui_SliderFlags_NoRoundToFormat","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable rounding underlying value to match precision of the display format\n   string (e.g. %.3f values are rounded to those 3 digits).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_SliderFlags_None","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_SliderFlags_None\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_SliderFlags_None()","eel":"int extension_api(\"ImGui_SliderFlags_None\")","python":"int ImGui_SliderFlags_None()","cpp":"int ImGui_SliderFlags_None()"},"title":"ImGui_SliderFlags_None","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":7,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"integer v","description":""},{"identifier":"integer v_min","description":""},{"identifier":"integer v_max","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SliderInt","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v","type":"integer"},{"identifier":"v_min","type":"integer"},{"identifier":"v_max","type":"integer"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_SliderInt\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"int","identifier":"&amp;v"},{"type_name":"int","identifier":"v_min"},{"type_name":"int","identifier":"v_max"},{"type_name":"optional","identifier":"\"formatIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer v","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer v = reaper.ImGui_SliderInt(ImGui_Context ctx, string label, integer v, integer v_min, integer v_max, optional string formatIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_SliderInt\", ImGui_Context ctx, \"label\", int &amp;v, int v_min, int v_max, optional \"formatIn\", optional int flagsIn)","python":"bool ImGui_SliderInt(ImGui_Context* ctx, const char* label, int* vInOut, int v_min, int v_max, const char* formatInOptional, int* flagsInOptional)","cpp":"bool ImGui_SliderInt(ImGui_Context* ctx, const char* label, int* vInOut, int v_min, int v_max, const char* formatInOptional, int* flagsInOptional)"},"title":"ImGui_SliderInt","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":8,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"integer v1","description":""},{"identifier":"integer v2","description":""},{"identifier":"integer v_min","description":""},{"identifier":"integer v_max","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SliderInt2","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v1","type":"integer"},{"identifier":"v2","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v1","type":"integer"},{"identifier":"v2","type":"integer"},{"identifier":"v_min","type":"integer"},{"identifier":"v_max","type":"integer"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_SliderInt2\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"int","identifier":"&amp;v1"},{"type_name":"int","identifier":"&amp;v2"},{"type_name":"int","identifier":"v_min"},{"type_name":"int","identifier":"v_max"},{"type_name":"optional","identifier":"\"formatIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer v1","description":""},{"identifier":"integer v2","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer v1, integer v2 = reaper.ImGui_SliderInt2(ImGui_Context ctx, string label, integer v1, integer v2, integer v_min, integer v_max, optional string formatIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_SliderInt2\", ImGui_Context ctx, \"label\", int &amp;v1, int &amp;v2, int v_min, int v_max, optional \"formatIn\", optional int flagsIn)","python":"bool ImGui_SliderInt2(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int v_min, int v_max, const char* formatInOptional, int* flagsInOptional)","cpp":"bool ImGui_SliderInt2(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int v_min, int v_max, const char* formatInOptional, int* flagsInOptional)"},"title":"ImGui_SliderInt2","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":9,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"integer v1","description":""},{"identifier":"integer v2","description":""},{"identifier":"integer v3","description":""},{"identifier":"integer v_min","description":""},{"identifier":"integer v_max","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SliderInt3","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v1","type":"integer"},{"identifier":"v2","type":"integer"},{"identifier":"v3","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v1","type":"integer"},{"identifier":"v2","type":"integer"},{"identifier":"v3","type":"integer"},{"identifier":"v_min","type":"integer"},{"identifier":"v_max","type":"integer"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_SliderInt3\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"int","identifier":"&amp;v1"},{"type_name":"int","identifier":"&amp;v2"},{"type_name":"int","identifier":"&amp;v3"},{"type_name":"int","identifier":"v_min"},{"type_name":"int","identifier":"v_max"},{"type_name":"optional","identifier":"\"formatIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer v1","description":""},{"identifier":"integer v2","description":""},{"identifier":"integer v3","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer v1, integer v2, integer v3 = reaper.ImGui_SliderInt3(ImGui_Context ctx, string label, integer v1, integer v2, integer v3, integer v_min, integer v_max, optional string formatIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_SliderInt3\", ImGui_Context ctx, \"label\", int &amp;v1, int &amp;v2, int &amp;v3, int v_min, int v_max, optional \"formatIn\", optional int flagsIn)","python":"bool ImGui_SliderInt3(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int v_min, int v_max, const char* formatInOptional, int* flagsInOptional)","cpp":"bool ImGui_SliderInt3(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int v_min, int v_max, const char* formatInOptional, int* flagsInOptional)"},"title":"ImGui_SliderInt3","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":10,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"integer v1","description":""},{"identifier":"integer v2","description":""},{"identifier":"integer v3","description":""},{"identifier":"integer v4","description":""},{"identifier":"integer v_min","description":""},{"identifier":"integer v_max","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SliderInt4","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v1","type":"integer"},{"identifier":"v2","type":"integer"},{"identifier":"v3","type":"integer"},{"identifier":"v4","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"v1","type":"integer"},{"identifier":"v2","type":"integer"},{"identifier":"v3","type":"integer"},{"identifier":"v4","type":"integer"},{"identifier":"v_min","type":"integer"},{"identifier":"v_max","type":"integer"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_SliderInt4\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"type_name":"int","identifier":"&amp;v1"},{"type_name":"int","identifier":"&amp;v2"},{"type_name":"int","identifier":"&amp;v3"},{"type_name":"int","identifier":"&amp;v4"},{"type_name":"int","identifier":"v_min"},{"type_name":"int","identifier":"v_max"},{"type_name":"optional","identifier":"\"formatIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer v1","description":""},{"identifier":"integer v2","description":""},{"identifier":"integer v3","description":""},{"identifier":"integer v4","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer v1, integer v2, integer v3, integer v4 = reaper.ImGui_SliderInt4(ImGui_Context ctx, string label, integer v1, integer v2, integer v3, integer v4, integer v_min, integer v_max, optional string formatIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_SliderInt4\", ImGui_Context ctx, \"label\", int &amp;v1, int &amp;v2, int &amp;v3, int &amp;v4, int v_min, int v_max, optional \"formatIn\", optional int flagsIn)","python":"bool ImGui_SliderInt4(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int* v4InOut, int v_min, int v_max, const char* formatInOptional, int* flagsInOptional)","cpp":"bool ImGui_SliderInt4(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int* v4InOut, int v_min, int v_max, const char* formatInOptional, int* flagsInOptional)"},"title":"ImGui_SliderInt4","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_SmallButton","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_SmallButton\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_SmallButton(ImGui_Context ctx, string label)","eel":"bool extension_api(\"ImGui_SmallButton\", ImGui_Context ctx, \"label\")","python":"bool ImGui_SmallButton(ImGui_Context* ctx, const char* label)","cpp":"bool ImGui_SmallButton(ImGui_Context* ctx, const char* label)"},"title":"ImGui_SmallButton","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Button with StyleVar_FramePadding=(0,0) to easily embed within text.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_SortDirection_Ascending","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_SortDirection_Ascending\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_SortDirection_Ascending()","eel":"int extension_api(\"ImGui_SortDirection_Ascending\")","python":"int ImGui_SortDirection_Ascending()","cpp":"int ImGui_SortDirection_Ascending()"},"title":"ImGui_SortDirection_Ascending","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Ascending = 0-&gt;9, A-&gt;Z etc.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_SortDirection_Descending","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_SortDirection_Descending\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_SortDirection_Descending()","eel":"int extension_api(\"ImGui_SortDirection_Descending\")","python":"int ImGui_SortDirection_Descending()","cpp":"int ImGui_SortDirection_Descending()"},"title":"ImGui_SortDirection_Descending","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Descending = 9-&gt;0, Z-&gt;A etc.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_SortDirection_None","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_SortDirection_None\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_SortDirection_None()","eel":"int extension_api(\"ImGui_SortDirection_None\")","python":"int ImGui_SortDirection_None()","cpp":"int ImGui_SortDirection_None()"},"title":"ImGui_SortDirection_None","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Spacing","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_Spacing\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_Spacing(ImGui_Context ctx)","eel":"extension_api(\"ImGui_Spacing\", ImGui_Context ctx)","python":"void ImGui_Spacing(ImGui_Context* ctx)","cpp":"void ImGui_Spacing(ImGui_Context* ctx)"},"title":"ImGui_Spacing","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Add vertical spacing.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_Alpha","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_Alpha\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_Alpha()","eel":"int extension_api(\"ImGui_StyleVar_Alpha\")","python":"int ImGui_StyleVar_Alpha()","cpp":"int ImGui_StyleVar_Alpha()"},"title":"ImGui_StyleVar_Alpha","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Global alpha applies to everything in Dear ImGui.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_ButtonTextAlign","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_ButtonTextAlign\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_ButtonTextAlign()","eel":"int extension_api(\"ImGui_StyleVar_ButtonTextAlign\")","python":"int ImGui_StyleVar_ButtonTextAlign()","cpp":"int ImGui_StyleVar_ButtonTextAlign()"},"title":"ImGui_StyleVar_ButtonTextAlign","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Alignment of button text when button is larger than text.\n   Defaults to (0.5, 0.5) (centered).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_CellPadding","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_CellPadding\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_CellPadding()","eel":"int extension_api(\"ImGui_StyleVar_CellPadding\")","python":"int ImGui_StyleVar_CellPadding()","cpp":"int ImGui_StyleVar_CellPadding()"},"title":"ImGui_StyleVar_CellPadding","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Padding within a table cell.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_ChildBorderSize","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_ChildBorderSize\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_ChildBorderSize()","eel":"int extension_api(\"ImGui_StyleVar_ChildBorderSize\")","python":"int ImGui_StyleVar_ChildBorderSize()","cpp":"int ImGui_StyleVar_ChildBorderSize()"},"title":"ImGui_StyleVar_ChildBorderSize","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Thickness of border around child windows. Generally set to 0.0 or 1.0.\n   (Other values are not well tested and more CPU/GPU costly).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_ChildRounding","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_ChildRounding\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_ChildRounding()","eel":"int extension_api(\"ImGui_StyleVar_ChildRounding\")","python":"int ImGui_StyleVar_ChildRounding()","cpp":"int ImGui_StyleVar_ChildRounding()"},"title":"ImGui_StyleVar_ChildRounding","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Radius of child window corners rounding. Set to 0.0 to have rectangular windows.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_DisabledAlpha","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_DisabledAlpha\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_DisabledAlpha()","eel":"int extension_api(\"ImGui_StyleVar_DisabledAlpha\")","python":"int ImGui_StyleVar_DisabledAlpha()","cpp":"int ImGui_StyleVar_DisabledAlpha()"},"title":"ImGui_StyleVar_DisabledAlpha","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Additional alpha multiplier applied by BeginDisabled.\n  Multiply over current value of Alpha.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_FrameBorderSize","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_FrameBorderSize\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_FrameBorderSize()","eel":"int extension_api(\"ImGui_StyleVar_FrameBorderSize\")","python":"int ImGui_StyleVar_FrameBorderSize()","cpp":"int ImGui_StyleVar_FrameBorderSize()"},"title":"ImGui_StyleVar_FrameBorderSize","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Thickness of border around frames. Generally set to 0.0 or 1.0.\n   (Other values are not well tested and more CPU/GPU costly).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_FramePadding","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_FramePadding\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_FramePadding()","eel":"int extension_api(\"ImGui_StyleVar_FramePadding\")","python":"int ImGui_StyleVar_FramePadding()","cpp":"int ImGui_StyleVar_FramePadding()"},"title":"ImGui_StyleVar_FramePadding","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Padding within a framed rectangle (used by most widgets).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_FrameRounding","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_FrameRounding\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_FrameRounding()","eel":"int extension_api(\"ImGui_StyleVar_FrameRounding\")","python":"int ImGui_StyleVar_FrameRounding()","cpp":"int ImGui_StyleVar_FrameRounding()"},"title":"ImGui_StyleVar_FrameRounding","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Radius of frame corners rounding.\n   Set to 0.0 to have rectangular frame (used by most widgets).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_GrabMinSize","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_GrabMinSize\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_GrabMinSize()","eel":"int extension_api(\"ImGui_StyleVar_GrabMinSize\")","python":"int ImGui_StyleVar_GrabMinSize()","cpp":"int ImGui_StyleVar_GrabMinSize()"},"title":"ImGui_StyleVar_GrabMinSize","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Minimum width/height of a grab box for slider/scrollbar.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_GrabRounding","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_GrabRounding\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_GrabRounding()","eel":"int extension_api(\"ImGui_StyleVar_GrabRounding\")","python":"int ImGui_StyleVar_GrabRounding()","cpp":"int ImGui_StyleVar_GrabRounding()"},"title":"ImGui_StyleVar_GrabRounding","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Radius of grabs corners rounding. Set to 0.0 to have rectangular slider grabs.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_IndentSpacing","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_IndentSpacing\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_IndentSpacing()","eel":"int extension_api(\"ImGui_StyleVar_IndentSpacing\")","python":"int ImGui_StyleVar_IndentSpacing()","cpp":"int ImGui_StyleVar_IndentSpacing()"},"title":"ImGui_StyleVar_IndentSpacing","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Horizontal indentation when e.g. entering a tree node.\n   Generally == (GetFontSize + StyleVar_FramePadding.x*2).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_ItemInnerSpacing","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_ItemInnerSpacing\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_ItemInnerSpacing()","eel":"int extension_api(\"ImGui_StyleVar_ItemInnerSpacing\")","python":"int ImGui_StyleVar_ItemInnerSpacing()","cpp":"int ImGui_StyleVar_ItemInnerSpacing()"},"title":"ImGui_StyleVar_ItemInnerSpacing","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Horizontal and vertical spacing between within elements of a composed widget\n   (e.g. a slider and its label).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_ItemSpacing","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_ItemSpacing\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_ItemSpacing()","eel":"int extension_api(\"ImGui_StyleVar_ItemSpacing\")","python":"int ImGui_StyleVar_ItemSpacing()","cpp":"int ImGui_StyleVar_ItemSpacing()"},"title":"ImGui_StyleVar_ItemSpacing","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Horizontal and vertical spacing between widgets/lines.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_PopupBorderSize","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_PopupBorderSize\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_PopupBorderSize()","eel":"int extension_api(\"ImGui_StyleVar_PopupBorderSize\")","python":"int ImGui_StyleVar_PopupBorderSize()","cpp":"int ImGui_StyleVar_PopupBorderSize()"},"title":"ImGui_StyleVar_PopupBorderSize","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Thickness of border around popup/tooltip windows. Generally set to 0.0 or 1.0.\n   (Other values are not well tested and more CPU/GPU costly).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_PopupRounding","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_PopupRounding\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_PopupRounding()","eel":"int extension_api(\"ImGui_StyleVar_PopupRounding\")","python":"int ImGui_StyleVar_PopupRounding()","cpp":"int ImGui_StyleVar_PopupRounding()"},"title":"ImGui_StyleVar_PopupRounding","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Radius of popup window corners rounding.\n   (Note that tooltip windows use StyleVar_WindowRounding.)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_ScrollbarRounding","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_ScrollbarRounding\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_ScrollbarRounding()","eel":"int extension_api(\"ImGui_StyleVar_ScrollbarRounding\")","python":"int ImGui_StyleVar_ScrollbarRounding()","cpp":"int ImGui_StyleVar_ScrollbarRounding()"},"title":"ImGui_StyleVar_ScrollbarRounding","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Radius of grab corners for scrollbar.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_ScrollbarSize","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_ScrollbarSize\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_ScrollbarSize()","eel":"int extension_api(\"ImGui_StyleVar_ScrollbarSize\")","python":"int ImGui_StyleVar_ScrollbarSize()","cpp":"int ImGui_StyleVar_ScrollbarSize()"},"title":"ImGui_StyleVar_ScrollbarSize","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Width of the vertical scrollbar, Height of the horizontal scrollbar.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_SelectableTextAlign","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_SelectableTextAlign\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_SelectableTextAlign()","eel":"int extension_api(\"ImGui_StyleVar_SelectableTextAlign\")","python":"int ImGui_StyleVar_SelectableTextAlign()","cpp":"int ImGui_StyleVar_SelectableTextAlign()"},"title":"ImGui_StyleVar_SelectableTextAlign","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Alignment of selectable text. Defaults to (0.0, 0.0) (top-left aligned).\n   It's generally important to keep this left-aligned if you want to lay\n   multiple items on a same line.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_SeparatorTextAlign","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_SeparatorTextAlign\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_SeparatorTextAlign()","eel":"int extension_api(\"ImGui_StyleVar_SeparatorTextAlign\")","python":"int ImGui_StyleVar_SeparatorTextAlign()","cpp":"int ImGui_StyleVar_SeparatorTextAlign()"},"title":"ImGui_StyleVar_SeparatorTextAlign","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Alignment of text within the separator.\nDefaults to (0.0, 0.5) (left aligned, center).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_SeparatorTextBorderSize","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_SeparatorTextBorderSize\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_SeparatorTextBorderSize()","eel":"int extension_api(\"ImGui_StyleVar_SeparatorTextBorderSize\")","python":"int ImGui_StyleVar_SeparatorTextBorderSize()","cpp":"int ImGui_StyleVar_SeparatorTextBorderSize()"},"title":"ImGui_StyleVar_SeparatorTextBorderSize","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Thickness of border in SeparatorText()","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_SeparatorTextPadding","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_SeparatorTextPadding\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_SeparatorTextPadding()","eel":"int extension_api(\"ImGui_StyleVar_SeparatorTextPadding\")","python":"int ImGui_StyleVar_SeparatorTextPadding()","cpp":"int ImGui_StyleVar_SeparatorTextPadding()"},"title":"ImGui_StyleVar_SeparatorTextPadding","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Horizontal offset of text from each edge of the separator + spacing on other\naxis. Generally small values. .y is recommended to be == StyleVar_FramePadding.y.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_TabRounding","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_TabRounding\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_TabRounding()","eel":"int extension_api(\"ImGui_StyleVar_TabRounding\")","python":"int ImGui_StyleVar_TabRounding()","cpp":"int ImGui_StyleVar_TabRounding()"},"title":"ImGui_StyleVar_TabRounding","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Radius of upper corners of a tab. Set to 0.0 to have rectangular tabs.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_WindowBorderSize","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_WindowBorderSize\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_WindowBorderSize()","eel":"int extension_api(\"ImGui_StyleVar_WindowBorderSize\")","python":"int ImGui_StyleVar_WindowBorderSize()","cpp":"int ImGui_StyleVar_WindowBorderSize()"},"title":"ImGui_StyleVar_WindowBorderSize","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Thickness of border around windows. Generally set to 0.0 or 1.0.\n  (Other values are not well tested and more CPU/GPU costly).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_WindowMinSize","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_WindowMinSize\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_WindowMinSize()","eel":"int extension_api(\"ImGui_StyleVar_WindowMinSize\")","python":"int ImGui_StyleVar_WindowMinSize()","cpp":"int ImGui_StyleVar_WindowMinSize()"},"title":"ImGui_StyleVar_WindowMinSize","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Minimum window size. This is a global setting.\n  If you want to constrain individual windows, use SetNextWindowSizeConstraints.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_WindowPadding","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_WindowPadding\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_WindowPadding()","eel":"int extension_api(\"ImGui_StyleVar_WindowPadding\")","python":"int ImGui_StyleVar_WindowPadding()","cpp":"int ImGui_StyleVar_WindowPadding()"},"title":"ImGui_StyleVar_WindowPadding","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Padding within a window.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_WindowRounding","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_WindowRounding\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_WindowRounding()","eel":"int extension_api(\"ImGui_StyleVar_WindowRounding\")","python":"int ImGui_StyleVar_WindowRounding()","cpp":"int ImGui_StyleVar_WindowRounding()"},"title":"ImGui_StyleVar_WindowRounding","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Radius of window corners rounding. Set to 0.0 to have rectangular windows.\n  Large values tend to lead to variety of artifacts and are not recommended.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_StyleVar_WindowTitleAlign","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_StyleVar_WindowTitleAlign\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_StyleVar_WindowTitleAlign()","eel":"int extension_api(\"ImGui_StyleVar_WindowTitleAlign\")","python":"int ImGui_StyleVar_WindowTitleAlign()","cpp":"int ImGui_StyleVar_WindowTitleAlign()"},"title":"ImGui_StyleVar_WindowTitleAlign","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Alignment for title bar text.\n   Defaults to (0.0,0.5) for left-aligned,vertically centered.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TabBarFlags_AutoSelectNewTabs","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TabBarFlags_AutoSelectNewTabs\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TabBarFlags_AutoSelectNewTabs()","eel":"int extension_api(\"ImGui_TabBarFlags_AutoSelectNewTabs\")","python":"int ImGui_TabBarFlags_AutoSelectNewTabs()","cpp":"int ImGui_TabBarFlags_AutoSelectNewTabs()"},"title":"ImGui_TabBarFlags_AutoSelectNewTabs","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Automatically select new tabs when they appear.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TabBarFlags_FittingPolicyResizeDown","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TabBarFlags_FittingPolicyResizeDown\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TabBarFlags_FittingPolicyResizeDown()","eel":"int extension_api(\"ImGui_TabBarFlags_FittingPolicyResizeDown\")","python":"int ImGui_TabBarFlags_FittingPolicyResizeDown()","cpp":"int ImGui_TabBarFlags_FittingPolicyResizeDown()"},"title":"ImGui_TabBarFlags_FittingPolicyResizeDown","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Resize tabs when they don't fit.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TabBarFlags_FittingPolicyScroll","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TabBarFlags_FittingPolicyScroll\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TabBarFlags_FittingPolicyScroll()","eel":"int extension_api(\"ImGui_TabBarFlags_FittingPolicyScroll\")","python":"int ImGui_TabBarFlags_FittingPolicyScroll()","cpp":"int ImGui_TabBarFlags_FittingPolicyScroll()"},"title":"ImGui_TabBarFlags_FittingPolicyScroll","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Add scroll buttons when tabs don't fit.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TabBarFlags_NoCloseWithMiddleMouseButton","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TabBarFlags_NoCloseWithMiddleMouseButton\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TabBarFlags_NoCloseWithMiddleMouseButton()","eel":"int extension_api(\"ImGui_TabBarFlags_NoCloseWithMiddleMouseButton\")","python":"int ImGui_TabBarFlags_NoCloseWithMiddleMouseButton()","cpp":"int ImGui_TabBarFlags_NoCloseWithMiddleMouseButton()"},"title":"ImGui_TabBarFlags_NoCloseWithMiddleMouseButton","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable behavior of closing tabs (that are submitted with p_open != nil)\n   with middle mouse button. You can still repro this behavior on user's side\n   with if(IsItemHovered() &amp;&amp; IsMouseClicked(2)) p_open = false.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TabBarFlags_NoTabListScrollingButtons","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TabBarFlags_NoTabListScrollingButtons\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TabBarFlags_NoTabListScrollingButtons()","eel":"int extension_api(\"ImGui_TabBarFlags_NoTabListScrollingButtons\")","python":"int ImGui_TabBarFlags_NoTabListScrollingButtons()","cpp":"int ImGui_TabBarFlags_NoTabListScrollingButtons()"},"title":"ImGui_TabBarFlags_NoTabListScrollingButtons","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable scrolling buttons (apply when fitting policy is\n   TabBarFlags_FittingPolicyScroll).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TabBarFlags_NoTooltip","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TabBarFlags_NoTooltip\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TabBarFlags_NoTooltip()","eel":"int extension_api(\"ImGui_TabBarFlags_NoTooltip\")","python":"int ImGui_TabBarFlags_NoTooltip()","cpp":"int ImGui_TabBarFlags_NoTooltip()"},"title":"ImGui_TabBarFlags_NoTooltip","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable tooltips when hovering a tab.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TabBarFlags_None","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TabBarFlags_None\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TabBarFlags_None()","eel":"int extension_api(\"ImGui_TabBarFlags_None\")","python":"int ImGui_TabBarFlags_None()","cpp":"int ImGui_TabBarFlags_None()"},"title":"ImGui_TabBarFlags_None","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TabBarFlags_Reorderable","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TabBarFlags_Reorderable\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TabBarFlags_Reorderable()","eel":"int extension_api(\"ImGui_TabBarFlags_Reorderable\")","python":"int ImGui_TabBarFlags_Reorderable()","cpp":"int ImGui_TabBarFlags_Reorderable()"},"title":"ImGui_TabBarFlags_Reorderable","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Allow manually dragging tabs to re-order them + New tabs are appended at\n   the end of list.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TabBarFlags_TabListPopupButton","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TabBarFlags_TabListPopupButton\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TabBarFlags_TabListPopupButton()","eel":"int extension_api(\"ImGui_TabBarFlags_TabListPopupButton\")","python":"int ImGui_TabBarFlags_TabListPopupButton()","cpp":"int ImGui_TabBarFlags_TabListPopupButton()"},"title":"ImGui_TabBarFlags_TabListPopupButton","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable buttons to open the tab list popup.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TabItemButton","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_TabItemButton\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_TabItemButton(ImGui_Context ctx, string label, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_TabItemButton\", ImGui_Context ctx, \"label\", optional int flagsIn)","python":"bool ImGui_TabItemButton(ImGui_Context* ctx, const char* label, int* flagsInOptional)","cpp":"bool ImGui_TabItemButton(ImGui_Context* ctx, const char* label, int* flagsInOptional)"},"title":"ImGui_TabItemButton","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Create a Tab behaving like a button. Return true when clicked.\nCannot be selected in the tab bar.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TabItemFlags_Leading","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TabItemFlags_Leading\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TabItemFlags_Leading()","eel":"int extension_api(\"ImGui_TabItemFlags_Leading\")","python":"int ImGui_TabItemFlags_Leading()","cpp":"int ImGui_TabItemFlags_Leading()"},"title":"ImGui_TabItemFlags_Leading","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Enforce the tab position to the left of the tab bar (after the tab list popup button).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TabItemFlags_NoCloseWithMiddleMouseButton","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TabItemFlags_NoCloseWithMiddleMouseButton\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TabItemFlags_NoCloseWithMiddleMouseButton()","eel":"int extension_api(\"ImGui_TabItemFlags_NoCloseWithMiddleMouseButton\")","python":"int ImGui_TabItemFlags_NoCloseWithMiddleMouseButton()","cpp":"int ImGui_TabItemFlags_NoCloseWithMiddleMouseButton()"},"title":"ImGui_TabItemFlags_NoCloseWithMiddleMouseButton","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable behavior of closing tabs (that are submitted with p_open != nil) with\n   middle mouse button. You can still repro this behavior on user's side with\n   if(IsItemHovered() &amp;&amp; IsMouseClicked(2)) p_open = false.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TabItemFlags_NoPushId","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TabItemFlags_NoPushId\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TabItemFlags_NoPushId()","eel":"int extension_api(\"ImGui_TabItemFlags_NoPushId\")","python":"int ImGui_TabItemFlags_NoPushId()","cpp":"int ImGui_TabItemFlags_NoPushId()"},"title":"ImGui_TabItemFlags_NoPushId","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Don't call PushID(tab-&gt;ID)/PopID() on BeginTabItem/EndTabItem.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TabItemFlags_NoReorder","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TabItemFlags_NoReorder\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TabItemFlags_NoReorder()","eel":"int extension_api(\"ImGui_TabItemFlags_NoReorder\")","python":"int ImGui_TabItemFlags_NoReorder()","cpp":"int ImGui_TabItemFlags_NoReorder()"},"title":"ImGui_TabItemFlags_NoReorder","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable reordering this tab or having another tab cross over this tab.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TabItemFlags_NoTooltip","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TabItemFlags_NoTooltip\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TabItemFlags_NoTooltip()","eel":"int extension_api(\"ImGui_TabItemFlags_NoTooltip\")","python":"int ImGui_TabItemFlags_NoTooltip()","cpp":"int ImGui_TabItemFlags_NoTooltip()"},"title":"ImGui_TabItemFlags_NoTooltip","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable tooltip for the given tab.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TabItemFlags_None","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TabItemFlags_None\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TabItemFlags_None()","eel":"int extension_api(\"ImGui_TabItemFlags_None\")","python":"int ImGui_TabItemFlags_None()","cpp":"int ImGui_TabItemFlags_None()"},"title":"ImGui_TabItemFlags_None","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TabItemFlags_SetSelected","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TabItemFlags_SetSelected\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TabItemFlags_SetSelected()","eel":"int extension_api(\"ImGui_TabItemFlags_SetSelected\")","python":"int ImGui_TabItemFlags_SetSelected()","cpp":"int ImGui_TabItemFlags_SetSelected()"},"title":"ImGui_TabItemFlags_SetSelected","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Trigger flag to programmatically make the tab selected when calling BeginTabItem.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TabItemFlags_Trailing","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TabItemFlags_Trailing\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TabItemFlags_Trailing()","eel":"int extension_api(\"ImGui_TabItemFlags_Trailing\")","python":"int ImGui_TabItemFlags_Trailing()","cpp":"int ImGui_TabItemFlags_Trailing()"},"title":"ImGui_TabItemFlags_Trailing","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Enforce the tab position to the right of the tab bar (before the scrolling buttons).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TabItemFlags_UnsavedDocument","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TabItemFlags_UnsavedDocument\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TabItemFlags_UnsavedDocument()","eel":"int extension_api(\"ImGui_TabItemFlags_UnsavedDocument\")","python":"int ImGui_TabItemFlags_UnsavedDocument()","cpp":"int ImGui_TabItemFlags_UnsavedDocument()"},"title":"ImGui_TabItemFlags_UnsavedDocument","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Append '*' to title without affecting the ID, as a convenience to avoid using\n   the ### operator. Also: tab is selected on closure and closure is deferred by\n   one frame to allow code to undo it without flicker.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableBgTarget_CellBg","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableBgTarget_CellBg\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableBgTarget_CellBg()","eel":"int extension_api(\"ImGui_TableBgTarget_CellBg\")","python":"int ImGui_TableBgTarget_CellBg()","cpp":"int ImGui_TableBgTarget_CellBg()"},"title":"ImGui_TableBgTarget_CellBg","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set cell background color (top-most color).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableBgTarget_None","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableBgTarget_None\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableBgTarget_None()","eel":"int extension_api(\"ImGui_TableBgTarget_None\")","python":"int ImGui_TableBgTarget_None()","cpp":"int ImGui_TableBgTarget_None()"},"title":"ImGui_TableBgTarget_None","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableBgTarget_RowBg0","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableBgTarget_RowBg0\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableBgTarget_RowBg0()","eel":"int extension_api(\"ImGui_TableBgTarget_RowBg0\")","python":"int ImGui_TableBgTarget_RowBg0()","cpp":"int ImGui_TableBgTarget_RowBg0()"},"title":"ImGui_TableBgTarget_RowBg0","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set row background color 0 (generally used for background,\n   automatically set when TableFlags_RowBg is used).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableBgTarget_RowBg1","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableBgTarget_RowBg1\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableBgTarget_RowBg1()","eel":"int extension_api(\"ImGui_TableBgTarget_RowBg1\")","python":"int ImGui_TableBgTarget_RowBg1()","cpp":"int ImGui_TableBgTarget_RowBg1()"},"title":"ImGui_TableBgTarget_RowBg1","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set row background color 1 (generally used for selection marking).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableColumnFlags_DefaultHide","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableColumnFlags_DefaultHide\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableColumnFlags_DefaultHide()","eel":"int extension_api(\"ImGui_TableColumnFlags_DefaultHide\")","python":"int ImGui_TableColumnFlags_DefaultHide()","cpp":"int ImGui_TableColumnFlags_DefaultHide()"},"title":"ImGui_TableColumnFlags_DefaultHide","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Default as a hidden/disabled column.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableColumnFlags_DefaultSort","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableColumnFlags_DefaultSort\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableColumnFlags_DefaultSort()","eel":"int extension_api(\"ImGui_TableColumnFlags_DefaultSort\")","python":"int ImGui_TableColumnFlags_DefaultSort()","cpp":"int ImGui_TableColumnFlags_DefaultSort()"},"title":"ImGui_TableColumnFlags_DefaultSort","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Default as a sorting column.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableColumnFlags_Disabled","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableColumnFlags_Disabled\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableColumnFlags_Disabled()","eel":"int extension_api(\"ImGui_TableColumnFlags_Disabled\")","python":"int ImGui_TableColumnFlags_Disabled()","cpp":"int ImGui_TableColumnFlags_Disabled()"},"title":"ImGui_TableColumnFlags_Disabled","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Overriding/master disable flag: hide column, won't show in context menu\n   (unlike calling TableSetColumnEnabled which manipulates the user accessible state).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableColumnFlags_IndentDisable","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableColumnFlags_IndentDisable\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableColumnFlags_IndentDisable()","eel":"int extension_api(\"ImGui_TableColumnFlags_IndentDisable\")","python":"int ImGui_TableColumnFlags_IndentDisable()","cpp":"int ImGui_TableColumnFlags_IndentDisable()"},"title":"ImGui_TableColumnFlags_IndentDisable","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Ignore current Indent value when entering cell (default for columns &gt; 0).\n   Indentation changes _within_ the cell will still be honored.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableColumnFlags_IndentEnable","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableColumnFlags_IndentEnable\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableColumnFlags_IndentEnable()","eel":"int extension_api(\"ImGui_TableColumnFlags_IndentEnable\")","python":"int ImGui_TableColumnFlags_IndentEnable()","cpp":"int ImGui_TableColumnFlags_IndentEnable()"},"title":"ImGui_TableColumnFlags_IndentEnable","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Use current Indent value when entering cell (default for column 0).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableColumnFlags_IsEnabled","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableColumnFlags_IsEnabled\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableColumnFlags_IsEnabled()","eel":"int extension_api(\"ImGui_TableColumnFlags_IsEnabled\")","python":"int ImGui_TableColumnFlags_IsEnabled()","cpp":"int ImGui_TableColumnFlags_IsEnabled()"},"title":"ImGui_TableColumnFlags_IsEnabled","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Status: is enabled == not hidden by user/api (referred to as \"Hide\" in\n   _DefaultHide and _NoHide) flags.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableColumnFlags_IsHovered","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableColumnFlags_IsHovered\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableColumnFlags_IsHovered()","eel":"int extension_api(\"ImGui_TableColumnFlags_IsHovered\")","python":"int ImGui_TableColumnFlags_IsHovered()","cpp":"int ImGui_TableColumnFlags_IsHovered()"},"title":"ImGui_TableColumnFlags_IsHovered","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Status: is hovered by mouse.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableColumnFlags_IsSorted","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableColumnFlags_IsSorted\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableColumnFlags_IsSorted()","eel":"int extension_api(\"ImGui_TableColumnFlags_IsSorted\")","python":"int ImGui_TableColumnFlags_IsSorted()","cpp":"int ImGui_TableColumnFlags_IsSorted()"},"title":"ImGui_TableColumnFlags_IsSorted","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Status: is currently part of the sort specs.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableColumnFlags_IsVisible","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableColumnFlags_IsVisible\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableColumnFlags_IsVisible()","eel":"int extension_api(\"ImGui_TableColumnFlags_IsVisible\")","python":"int ImGui_TableColumnFlags_IsVisible()","cpp":"int ImGui_TableColumnFlags_IsVisible()"},"title":"ImGui_TableColumnFlags_IsVisible","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Status: is visible == is enabled AND not clipped by scrolling.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableColumnFlags_NoClip","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableColumnFlags_NoClip\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableColumnFlags_NoClip()","eel":"int extension_api(\"ImGui_TableColumnFlags_NoClip\")","python":"int ImGui_TableColumnFlags_NoClip()","cpp":"int ImGui_TableColumnFlags_NoClip()"},"title":"ImGui_TableColumnFlags_NoClip","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable clipping for this column\n   (all NoClip columns will render in a same draw command).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableColumnFlags_NoHeaderLabel","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableColumnFlags_NoHeaderLabel\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableColumnFlags_NoHeaderLabel()","eel":"int extension_api(\"ImGui_TableColumnFlags_NoHeaderLabel\")","python":"int ImGui_TableColumnFlags_NoHeaderLabel()","cpp":"int ImGui_TableColumnFlags_NoHeaderLabel()"},"title":"ImGui_TableColumnFlags_NoHeaderLabel","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"TableHeadersRow will not submit label for this column.\n   Convenient for some small columns. Name will still appear in context menu.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableColumnFlags_NoHeaderWidth","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableColumnFlags_NoHeaderWidth\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableColumnFlags_NoHeaderWidth()","eel":"int extension_api(\"ImGui_TableColumnFlags_NoHeaderWidth\")","python":"int ImGui_TableColumnFlags_NoHeaderWidth()","cpp":"int ImGui_TableColumnFlags_NoHeaderWidth()"},"title":"ImGui_TableColumnFlags_NoHeaderWidth","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable header text width contribution to automatic column width.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableColumnFlags_NoHide","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableColumnFlags_NoHide\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableColumnFlags_NoHide()","eel":"int extension_api(\"ImGui_TableColumnFlags_NoHide\")","python":"int ImGui_TableColumnFlags_NoHide()","cpp":"int ImGui_TableColumnFlags_NoHide()"},"title":"ImGui_TableColumnFlags_NoHide","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable ability to hide/disable this column.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableColumnFlags_NoReorder","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableColumnFlags_NoReorder\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableColumnFlags_NoReorder()","eel":"int extension_api(\"ImGui_TableColumnFlags_NoReorder\")","python":"int ImGui_TableColumnFlags_NoReorder()","cpp":"int ImGui_TableColumnFlags_NoReorder()"},"title":"ImGui_TableColumnFlags_NoReorder","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable manual reordering this column, this will also prevent other columns\n   from crossing over this column.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableColumnFlags_NoResize","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableColumnFlags_NoResize\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableColumnFlags_NoResize()","eel":"int extension_api(\"ImGui_TableColumnFlags_NoResize\")","python":"int ImGui_TableColumnFlags_NoResize()","cpp":"int ImGui_TableColumnFlags_NoResize()"},"title":"ImGui_TableColumnFlags_NoResize","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable manual resizing.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableColumnFlags_NoSort","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableColumnFlags_NoSort\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableColumnFlags_NoSort()","eel":"int extension_api(\"ImGui_TableColumnFlags_NoSort\")","python":"int ImGui_TableColumnFlags_NoSort()","cpp":"int ImGui_TableColumnFlags_NoSort()"},"title":"ImGui_TableColumnFlags_NoSort","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable ability to sort on this field\n   (even if TableFlags_Sortable is set on the table).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableColumnFlags_NoSortAscending","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableColumnFlags_NoSortAscending\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableColumnFlags_NoSortAscending()","eel":"int extension_api(\"ImGui_TableColumnFlags_NoSortAscending\")","python":"int ImGui_TableColumnFlags_NoSortAscending()","cpp":"int ImGui_TableColumnFlags_NoSortAscending()"},"title":"ImGui_TableColumnFlags_NoSortAscending","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable ability to sort in the ascending direction.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableColumnFlags_NoSortDescending","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableColumnFlags_NoSortDescending\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableColumnFlags_NoSortDescending()","eel":"int extension_api(\"ImGui_TableColumnFlags_NoSortDescending\")","python":"int ImGui_TableColumnFlags_NoSortDescending()","cpp":"int ImGui_TableColumnFlags_NoSortDescending()"},"title":"ImGui_TableColumnFlags_NoSortDescending","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable ability to sort in the descending direction.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableColumnFlags_None","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableColumnFlags_None\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableColumnFlags_None()","eel":"int extension_api(\"ImGui_TableColumnFlags_None\")","python":"int ImGui_TableColumnFlags_None()","cpp":"int ImGui_TableColumnFlags_None()"},"title":"ImGui_TableColumnFlags_None","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableColumnFlags_PreferSortAscending","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableColumnFlags_PreferSortAscending\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableColumnFlags_PreferSortAscending()","eel":"int extension_api(\"ImGui_TableColumnFlags_PreferSortAscending\")","python":"int ImGui_TableColumnFlags_PreferSortAscending()","cpp":"int ImGui_TableColumnFlags_PreferSortAscending()"},"title":"ImGui_TableColumnFlags_PreferSortAscending","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Make the initial sort direction Ascending when first sorting on this column (default).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableColumnFlags_PreferSortDescending","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableColumnFlags_PreferSortDescending\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableColumnFlags_PreferSortDescending()","eel":"int extension_api(\"ImGui_TableColumnFlags_PreferSortDescending\")","python":"int ImGui_TableColumnFlags_PreferSortDescending()","cpp":"int ImGui_TableColumnFlags_PreferSortDescending()"},"title":"ImGui_TableColumnFlags_PreferSortDescending","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Make the initial sort direction Descending when first sorting on this column.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableColumnFlags_WidthFixed","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableColumnFlags_WidthFixed\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableColumnFlags_WidthFixed()","eel":"int extension_api(\"ImGui_TableColumnFlags_WidthFixed\")","python":"int ImGui_TableColumnFlags_WidthFixed()","cpp":"int ImGui_TableColumnFlags_WidthFixed()"},"title":"ImGui_TableColumnFlags_WidthFixed","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Column will not stretch. Preferable with horizontal scrolling enabled\n   (default if table sizing policy is _SizingFixedFit and table is resizable).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableColumnFlags_WidthStretch","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableColumnFlags_WidthStretch\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableColumnFlags_WidthStretch()","eel":"int extension_api(\"ImGui_TableColumnFlags_WidthStretch\")","python":"int ImGui_TableColumnFlags_WidthStretch()","cpp":"int ImGui_TableColumnFlags_WidthStretch()"},"title":"ImGui_TableColumnFlags_WidthStretch","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Column will stretch. Preferable with horizontal scrolling disabled\n   (default if table sizing policy is _SizingStretchSame or _SizingStretchProp).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_Borders","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_Borders\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_Borders()","eel":"int extension_api(\"ImGui_TableFlags_Borders\")","python":"int ImGui_TableFlags_Borders()","cpp":"int ImGui_TableFlags_Borders()"},"title":"ImGui_TableFlags_Borders","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draw all borders.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_BordersH","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_BordersH\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_BordersH()","eel":"int extension_api(\"ImGui_TableFlags_BordersH\")","python":"int ImGui_TableFlags_BordersH()","cpp":"int ImGui_TableFlags_BordersH()"},"title":"ImGui_TableFlags_BordersH","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draw horizontal borders.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_BordersInner","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_BordersInner\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_BordersInner()","eel":"int extension_api(\"ImGui_TableFlags_BordersInner\")","python":"int ImGui_TableFlags_BordersInner()","cpp":"int ImGui_TableFlags_BordersInner()"},"title":"ImGui_TableFlags_BordersInner","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draw inner borders.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_BordersInnerH","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_BordersInnerH\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_BordersInnerH()","eel":"int extension_api(\"ImGui_TableFlags_BordersInnerH\")","python":"int ImGui_TableFlags_BordersInnerH()","cpp":"int ImGui_TableFlags_BordersInnerH()"},"title":"ImGui_TableFlags_BordersInnerH","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draw horizontal borders between rows.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_BordersInnerV","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_BordersInnerV\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_BordersInnerV()","eel":"int extension_api(\"ImGui_TableFlags_BordersInnerV\")","python":"int ImGui_TableFlags_BordersInnerV()","cpp":"int ImGui_TableFlags_BordersInnerV()"},"title":"ImGui_TableFlags_BordersInnerV","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draw vertical borders between columns.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_BordersOuter","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_BordersOuter\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_BordersOuter()","eel":"int extension_api(\"ImGui_TableFlags_BordersOuter\")","python":"int ImGui_TableFlags_BordersOuter()","cpp":"int ImGui_TableFlags_BordersOuter()"},"title":"ImGui_TableFlags_BordersOuter","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draw outer borders.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_BordersOuterH","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_BordersOuterH\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_BordersOuterH()","eel":"int extension_api(\"ImGui_TableFlags_BordersOuterH\")","python":"int ImGui_TableFlags_BordersOuterH()","cpp":"int ImGui_TableFlags_BordersOuterH()"},"title":"ImGui_TableFlags_BordersOuterH","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draw horizontal borders at the top and bottom.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_BordersOuterV","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_BordersOuterV\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_BordersOuterV()","eel":"int extension_api(\"ImGui_TableFlags_BordersOuterV\")","python":"int ImGui_TableFlags_BordersOuterV()","cpp":"int ImGui_TableFlags_BordersOuterV()"},"title":"ImGui_TableFlags_BordersOuterV","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draw vertical borders on the left and right sides.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_BordersV","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_BordersV\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_BordersV()","eel":"int extension_api(\"ImGui_TableFlags_BordersV\")","python":"int ImGui_TableFlags_BordersV()","cpp":"int ImGui_TableFlags_BordersV()"},"title":"ImGui_TableFlags_BordersV","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draw vertical borders.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_ContextMenuInBody","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_ContextMenuInBody\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_ContextMenuInBody()","eel":"int extension_api(\"ImGui_TableFlags_ContextMenuInBody\")","python":"int ImGui_TableFlags_ContextMenuInBody()","cpp":"int ImGui_TableFlags_ContextMenuInBody()"},"title":"ImGui_TableFlags_ContextMenuInBody","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Right-click on columns body/contents will display table context menu.\n   By default it is available in TableHeadersRow.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_Hideable","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_Hideable\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_Hideable()","eel":"int extension_api(\"ImGui_TableFlags_Hideable\")","python":"int ImGui_TableFlags_Hideable()","cpp":"int ImGui_TableFlags_Hideable()"},"title":"ImGui_TableFlags_Hideable","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Enable hiding/disabling columns in context menu.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_NoClip","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_NoClip\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_NoClip()","eel":"int extension_api(\"ImGui_TableFlags_NoClip\")","python":"int ImGui_TableFlags_NoClip()","cpp":"int ImGui_TableFlags_NoClip()"},"title":"ImGui_TableFlags_NoClip","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable clipping rectangle for every individual columns\n   (reduce draw command count, items will be able to overflow into other columns).\n   Generally incompatible with TableSetupScrollFreeze.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_NoHostExtendX","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_NoHostExtendX\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_NoHostExtendX()","eel":"int extension_api(\"ImGui_TableFlags_NoHostExtendX\")","python":"int ImGui_TableFlags_NoHostExtendX()","cpp":"int ImGui_TableFlags_NoHostExtendX()"},"title":"ImGui_TableFlags_NoHostExtendX","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Make outer width auto-fit to columns, overriding outer_size.x value. Only\n   available when ScrollX/ScrollY are disabled and Stretch columns are not used.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_NoHostExtendY","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_NoHostExtendY\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_NoHostExtendY()","eel":"int extension_api(\"ImGui_TableFlags_NoHostExtendY\")","python":"int ImGui_TableFlags_NoHostExtendY()","cpp":"int ImGui_TableFlags_NoHostExtendY()"},"title":"ImGui_TableFlags_NoHostExtendY","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Make outer height stop exactly at outer_size.y (prevent auto-extending table\n   past the limit). Only available when ScrollX/ScrollY are disabled.\n   Data below the limit will be clipped and not visible.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_NoKeepColumnsVisible","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_NoKeepColumnsVisible\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_NoKeepColumnsVisible()","eel":"int extension_api(\"ImGui_TableFlags_NoKeepColumnsVisible\")","python":"int ImGui_TableFlags_NoKeepColumnsVisible()","cpp":"int ImGui_TableFlags_NoKeepColumnsVisible()"},"title":"ImGui_TableFlags_NoKeepColumnsVisible","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable keeping column always minimally visible when ScrollX is off and table\n   gets too small. Not recommended if columns are resizable.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_NoPadInnerX","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_NoPadInnerX\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_NoPadInnerX()","eel":"int extension_api(\"ImGui_TableFlags_NoPadInnerX\")","python":"int ImGui_TableFlags_NoPadInnerX()","cpp":"int ImGui_TableFlags_NoPadInnerX()"},"title":"ImGui_TableFlags_NoPadInnerX","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable inner padding between columns (double inner padding if\n   TableFlags_BordersOuterV is on, single inner padding if BordersOuterV is off).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_NoPadOuterX","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_NoPadOuterX\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_NoPadOuterX()","eel":"int extension_api(\"ImGui_TableFlags_NoPadOuterX\")","python":"int ImGui_TableFlags_NoPadOuterX()","cpp":"int ImGui_TableFlags_NoPadOuterX()"},"title":"ImGui_TableFlags_NoPadOuterX","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Default if TableFlags_BordersOuterV is off. Disable outermost padding.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_NoSavedSettings","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_NoSavedSettings\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_NoSavedSettings()","eel":"int extension_api(\"ImGui_TableFlags_NoSavedSettings\")","python":"int ImGui_TableFlags_NoSavedSettings()","cpp":"int ImGui_TableFlags_NoSavedSettings()"},"title":"ImGui_TableFlags_NoSavedSettings","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable persisting columns order, width and sort settings in the .ini file.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_None","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_None\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_None()","eel":"int extension_api(\"ImGui_TableFlags_None\")","python":"int ImGui_TableFlags_None()","cpp":"int ImGui_TableFlags_None()"},"title":"ImGui_TableFlags_None","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_PadOuterX","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_PadOuterX\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_PadOuterX()","eel":"int extension_api(\"ImGui_TableFlags_PadOuterX\")","python":"int ImGui_TableFlags_PadOuterX()","cpp":"int ImGui_TableFlags_PadOuterX()"},"title":"ImGui_TableFlags_PadOuterX","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Default if TableFlags_BordersOuterV is on. Enable outermost padding.\n   Generally desirable if you have headers.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_PreciseWidths","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_PreciseWidths\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_PreciseWidths()","eel":"int extension_api(\"ImGui_TableFlags_PreciseWidths\")","python":"int ImGui_TableFlags_PreciseWidths()","cpp":"int ImGui_TableFlags_PreciseWidths()"},"title":"ImGui_TableFlags_PreciseWidths","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable distributing remainder width to stretched columns (width allocation\n   on a 100-wide table with 3 columns: Without this flag: 33,33,34. With this\n   flag: 33,33,33).\n   With larger number of columns, resizing will appear to be less smooth.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_Reorderable","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_Reorderable\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_Reorderable()","eel":"int extension_api(\"ImGui_TableFlags_Reorderable\")","python":"int ImGui_TableFlags_Reorderable()","cpp":"int ImGui_TableFlags_Reorderable()"},"title":"ImGui_TableFlags_Reorderable","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Enable reordering columns in header row\n   (need calling TableSetupColumn + TableHeadersRow to display headers).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_Resizable","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_Resizable\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_Resizable()","eel":"int extension_api(\"ImGui_TableFlags_Resizable\")","python":"int ImGui_TableFlags_Resizable()","cpp":"int ImGui_TableFlags_Resizable()"},"title":"ImGui_TableFlags_Resizable","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Enable resizing columns.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_RowBg","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_RowBg\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_RowBg()","eel":"int extension_api(\"ImGui_TableFlags_RowBg\")","python":"int ImGui_TableFlags_RowBg()","cpp":"int ImGui_TableFlags_RowBg()"},"title":"ImGui_TableFlags_RowBg","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set each RowBg color with Col_TableRowBg or Col_TableRowBgAlt (equivalent of\n   calling TableSetBgColor with TableBgTarget_RowBg0 on each row manually).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_ScrollX","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_ScrollX\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_ScrollX()","eel":"int extension_api(\"ImGui_TableFlags_ScrollX\")","python":"int ImGui_TableFlags_ScrollX()","cpp":"int ImGui_TableFlags_ScrollX()"},"title":"ImGui_TableFlags_ScrollX","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Enable horizontal scrolling. Require 'outer_size' parameter of BeginTable to\n   specify the container size. Changes default sizing policy.\n   Because this creates a child window, ScrollY is currently generally\n   recommended when using ScrollX.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_ScrollY","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_ScrollY\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_ScrollY()","eel":"int extension_api(\"ImGui_TableFlags_ScrollY\")","python":"int ImGui_TableFlags_ScrollY()","cpp":"int ImGui_TableFlags_ScrollY()"},"title":"ImGui_TableFlags_ScrollY","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Enable vertical scrolling.\n   Require 'outer_size' parameter of BeginTable to specify the container size.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_SizingFixedFit","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_SizingFixedFit\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_SizingFixedFit()","eel":"int extension_api(\"ImGui_TableFlags_SizingFixedFit\")","python":"int ImGui_TableFlags_SizingFixedFit()","cpp":"int ImGui_TableFlags_SizingFixedFit()"},"title":"ImGui_TableFlags_SizingFixedFit","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable),\n   matching contents width.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_SizingFixedSame","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_SizingFixedSame\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_SizingFixedSame()","eel":"int extension_api(\"ImGui_TableFlags_SizingFixedSame\")","python":"int ImGui_TableFlags_SizingFixedSame()","cpp":"int ImGui_TableFlags_SizingFixedSame()"},"title":"ImGui_TableFlags_SizingFixedSame","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable),\n   matching the maximum contents width of all columns.\n   Implicitly enable TableFlags_NoKeepColumnsVisible.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_SizingStretchProp","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_SizingStretchProp\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_SizingStretchProp()","eel":"int extension_api(\"ImGui_TableFlags_SizingStretchProp\")","python":"int ImGui_TableFlags_SizingStretchProp()","cpp":"int ImGui_TableFlags_SizingStretchProp()"},"title":"ImGui_TableFlags_SizingStretchProp","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Columns default to _WidthStretch with default weights proportional to each\n   columns contents widths.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_SizingStretchSame","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_SizingStretchSame\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_SizingStretchSame()","eel":"int extension_api(\"ImGui_TableFlags_SizingStretchSame\")","python":"int ImGui_TableFlags_SizingStretchSame()","cpp":"int ImGui_TableFlags_SizingStretchSame()"},"title":"ImGui_TableFlags_SizingStretchSame","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Columns default to _WidthStretch with default weights all equal,\n   unless overriden by TableSetupColumn.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_SortMulti","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_SortMulti\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_SortMulti()","eel":"int extension_api(\"ImGui_TableFlags_SortMulti\")","python":"int ImGui_TableFlags_SortMulti()","cpp":"int ImGui_TableFlags_SortMulti()"},"title":"ImGui_TableFlags_SortMulti","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Hold shift when clicking headers to sort on multiple column.\n   TableGetGetSortSpecs may return specs where (SpecsCount &gt; 1).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_SortTristate","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_SortTristate\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_SortTristate()","eel":"int extension_api(\"ImGui_TableFlags_SortTristate\")","python":"int ImGui_TableFlags_SortTristate()","cpp":"int ImGui_TableFlags_SortTristate()"},"title":"ImGui_TableFlags_SortTristate","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Allow no sorting, disable default sorting.\n   TableGetColumnSortSpecs may return specs where (SpecsCount == 0).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableFlags_Sortable","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableFlags_Sortable\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableFlags_Sortable()","eel":"int extension_api(\"ImGui_TableFlags_Sortable\")","python":"int ImGui_TableFlags_Sortable()","cpp":"int ImGui_TableFlags_Sortable()"},"title":"ImGui_TableFlags_Sortable","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Enable sorting. Call TableNeedSort/TableGetColumnSortSpecs to obtain sort specs.\n   Also see TableFlags_SortMulti and TableFlags_SortTristate.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TableGetColumnCount","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableGetColumnCount\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableGetColumnCount(ImGui_Context ctx)","eel":"int extension_api(\"ImGui_TableGetColumnCount\", ImGui_Context ctx)","python":"int ImGui_TableGetColumnCount(ImGui_Context* ctx)","cpp":"int ImGui_TableGetColumnCount(ImGui_Context* ctx)"},"title":"ImGui_TableGetColumnCount","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Return number of columns (value passed to BeginTable).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional integer column_nIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TableGetColumnFlags","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"integer","identifier":"column_nIn"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableGetColumnFlags\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"column_nIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableGetColumnFlags(ImGui_Context ctx, optional integer column_nIn)","eel":"int extension_api(\"ImGui_TableGetColumnFlags\", ImGui_Context ctx, optional int column_nIn)","python":"int ImGui_TableGetColumnFlags(ImGui_Context* ctx, int* column_nInOptional)","cpp":"int ImGui_TableGetColumnFlags(ImGui_Context* ctx, int* column_nInOptional)"},"title":"ImGui_TableGetColumnFlags","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Return column flags so you can query their Enabled/Visible/Sorted/Hovered\nstatus flags. Pass -1 to use current column.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TableGetColumnIndex","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableGetColumnIndex\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableGetColumnIndex(ImGui_Context ctx)","eel":"int extension_api(\"ImGui_TableGetColumnIndex\", ImGui_Context ctx)","python":"int ImGui_TableGetColumnIndex(ImGui_Context* ctx)","cpp":"int ImGui_TableGetColumnIndex(ImGui_Context* ctx)"},"title":"ImGui_TableGetColumnIndex","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Return current column index.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional integer column_nIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TableGetColumnName","return_values":[{"identifier":"retval","type":"string"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"integer","identifier":"column_nIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_TableGetColumnName\""},{"identifier":"#retval"},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"column_nIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string retval = reaper.ImGui_TableGetColumnName(ImGui_Context ctx, optional integer column_nIn)","eel":"bool extension_api(\"ImGui_TableGetColumnName\", #retval, ImGui_Context ctx, optional int column_nIn)","python":"const char* ImGui_TableGetColumnName(ImGui_Context* ctx, int* column_nInOptional)","cpp":"const char* ImGui_TableGetColumnName(ImGui_Context* ctx, int* column_nInOptional)"},"title":"ImGui_TableGetColumnName","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Return \"\" if column didn't have a name declared by TableSetupColumn.\nPass -1 to use current column.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer id","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TableGetColumnSortSpecs","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"column_user_id","type":"integer"},{"identifier":"column_index","type":"integer"},{"identifier":"sort_order","type":"integer"},{"identifier":"sort_direction","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"id","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_TableGetColumnSortSpecs\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"id"},{"type_name":"int","identifier":"&amp;column_user_id"},{"type_name":"int","identifier":"&amp;column_index"},{"type_name":"int","identifier":"&amp;sort_order"},{"type_name":"int","identifier":"&amp;sort_direction"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer column_user_id","description":""},{"identifier":"integer column_index","description":""},{"identifier":"integer sort_order","description":""},{"identifier":"integer sort_direction","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer column_user_id, integer column_index, integer sort_order, integer sort_direction = reaper.ImGui_TableGetColumnSortSpecs(ImGui_Context ctx, integer id)","eel":"bool extension_api(\"ImGui_TableGetColumnSortSpecs\", ImGui_Context ctx, int id, int &amp;column_user_id, int &amp;column_index, int &amp;sort_order, int &amp;sort_direction)","python":"bool ImGui_TableGetColumnSortSpecs(ImGui_Context* ctx, int id, int* column_user_idOut, int* column_indexOut, int* sort_orderOut, int* sort_directionOut)","cpp":"bool ImGui_TableGetColumnSortSpecs(ImGui_Context* ctx, int id, int* column_user_idOut, int* column_indexOut, int* sort_orderOut, int* sort_directionOut)"},"title":"ImGui_TableGetColumnSortSpecs","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sorting specification for one column of a table.\nCall while incrementing 'id' from 0 until false is returned.\n\n- ColumnUserID:  User id of the column (if specified by a TableSetupColumn call)\n- ColumnIndex:   Index of the column\n- SortOrder:     Index within parent SortSpecs (always stored in order starting\n  from 0, tables sorted on a single criteria will always have a 0 here)\n- SortDirection: SortDirection_Ascending or SortDirection_Descending\n  (you can use this or SortSign, whichever is more convenient for your sort\n  function)\n\nSee TableNeedSort.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TableGetRowIndex","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableGetRowIndex\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableGetRowIndex(ImGui_Context ctx)","eel":"int extension_api(\"ImGui_TableGetRowIndex\", ImGui_Context ctx)","python":"int ImGui_TableGetRowIndex(ImGui_Context* ctx)","cpp":"int ImGui_TableGetRowIndex(ImGui_Context* ctx)"},"title":"ImGui_TableGetRowIndex","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Return current row index.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TableHeader","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_TableHeader\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_TableHeader(ImGui_Context ctx, string label)","eel":"extension_api(\"ImGui_TableHeader\", ImGui_Context ctx, \"label\")","python":"void ImGui_TableHeader(ImGui_Context* ctx, const char* label)","cpp":"void ImGui_TableHeader(ImGui_Context* ctx, const char* label)"},"title":"ImGui_TableHeader","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Submit one header cell manually (rarely used). See TableSetupColumn.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TableHeadersRow","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_TableHeadersRow\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_TableHeadersRow(ImGui_Context ctx)","eel":"extension_api(\"ImGui_TableHeadersRow\", ImGui_Context ctx)","python":"void ImGui_TableHeadersRow(ImGui_Context* ctx)","cpp":"void ImGui_TableHeadersRow(ImGui_Context* ctx)"},"title":"ImGui_TableHeadersRow","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Submit all headers cells based on data provided to TableSetupColumn +\nsubmit context menu.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TableNeedSort","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"has_specs","type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_TableNeedSort\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"bool","identifier":"&amp;has_specs"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"boolean has_specs","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, boolean has_specs = reaper.ImGui_TableNeedSort(ImGui_Context ctx)","eel":"bool extension_api(\"ImGui_TableNeedSort\", ImGui_Context ctx, bool &amp;has_specs)","python":"bool ImGui_TableNeedSort(ImGui_Context* ctx, bool* has_specsOut)","cpp":"bool ImGui_TableNeedSort(ImGui_Context* ctx, bool* has_specsOut)"},"title":"ImGui_TableNeedSort","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Return true once when sorting specs have changed since last call,\nor the first time. 'has_specs' is false when not sorting.\n\nSee TableGetColumnSortSpecs.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TableNextColumn","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_TableNextColumn\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_TableNextColumn(ImGui_Context ctx)","eel":"bool extension_api(\"ImGui_TableNextColumn\", ImGui_Context ctx)","python":"bool ImGui_TableNextColumn(ImGui_Context* ctx)","cpp":"bool ImGui_TableNextColumn(ImGui_Context* ctx)"},"title":"ImGui_TableNextColumn","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Append into the next column (or first column of next row if currently in\nlast column). Return true when column is visible.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional integer row_flagsIn","description":""},{"identifier":"optional number min_row_heightIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TableNextRow","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"integer","identifier":"row_flagsIn"},{"isOptional":true,"type":"number","identifier":"min_row_heightIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_TableNextRow\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"row_flagsIn","modifier":"optional","type_name":"int"},{"type_name":"optional","identifier":"min_row_heightIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_TableNextRow(ImGui_Context ctx, optional integer row_flagsIn, optional number min_row_heightIn)","eel":"extension_api(\"ImGui_TableNextRow\", ImGui_Context ctx, optional int row_flagsIn, optional min_row_heightIn)","python":"void ImGui_TableNextRow(ImGui_Context* ctx, int* row_flagsInOptional, double* min_row_heightInOptional)","cpp":"void ImGui_TableNextRow(ImGui_Context* ctx, int* row_flagsInOptional, double* min_row_heightInOptional)"},"title":"ImGui_TableNextRow","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Append into the first cell of a new row.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableRowFlags_Headers","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableRowFlags_Headers\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableRowFlags_Headers()","eel":"int extension_api(\"ImGui_TableRowFlags_Headers\")","python":"int ImGui_TableRowFlags_Headers()","cpp":"int ImGui_TableRowFlags_Headers()"},"title":"ImGui_TableRowFlags_Headers","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Identify header row (set default background color + width of its contents\n   accounted different for auto column width).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TableRowFlags_None","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TableRowFlags_None\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TableRowFlags_None()","eel":"int extension_api(\"ImGui_TableRowFlags_None\")","python":"int ImGui_TableRowFlags_None()","cpp":"int ImGui_TableRowFlags_None()"},"title":"ImGui_TableRowFlags_None","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"For TableNextRow.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer target","description":""},{"identifier":"integer color_rgba","description":""},{"identifier":"optional integer column_nIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TableSetBgColor","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"target","type":"integer"},{"identifier":"color_rgba","type":"integer"},{"isOptional":true,"type":"integer","identifier":"column_nIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_TableSetBgColor\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"target"},{"type_name":"int","identifier":"color_rgba"},{"identifier":"column_nIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_TableSetBgColor(ImGui_Context ctx, integer target, integer color_rgba, optional integer column_nIn)","eel":"extension_api(\"ImGui_TableSetBgColor\", ImGui_Context ctx, int target, int color_rgba, optional int column_nIn)","python":"void ImGui_TableSetBgColor(ImGui_Context* ctx, int target, int color_rgba, int* column_nInOptional)","cpp":"void ImGui_TableSetBgColor(ImGui_Context* ctx, int target, int color_rgba, int* column_nInOptional)"},"title":"ImGui_TableSetBgColor","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Change the color of a cell, row, or column.\nSee TableBgTarget_* flags for details.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer column_n","description":""},{"identifier":"boolean v","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TableSetColumnEnabled","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"column_n","type":"integer"},{"identifier":"v","type":"boolean"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_TableSetColumnEnabled\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"column_n"},{"type_name":"bool","identifier":"v"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_TableSetColumnEnabled(ImGui_Context ctx, integer column_n, boolean v)","eel":"extension_api(\"ImGui_TableSetColumnEnabled\", ImGui_Context ctx, int column_n, bool v)","python":"void ImGui_TableSetColumnEnabled(ImGui_Context* ctx, int column_n, bool v)","cpp":"void ImGui_TableSetColumnEnabled(ImGui_Context* ctx, int column_n, bool v)"},"title":"ImGui_TableSetColumnEnabled","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Change user-accessible enabled/disabled state of a column, set to false to\nhide the column. Note that end-user can use the context menu to change this\nthemselves (right-click in headers, or right-click in columns body with\nTableFlags_ContextMenuInBody).\n\n- Require table to have the TableFlags_Hideable flag because we are manipulating\n  user accessible state.\n- Request will be applied during next layout, which happens on the first call to\n  TableNextRow after Begin_Table.\n- For the getter you can test\n  (TableGetColumnFlags() &amp; TableColumnFlags_IsEnabled) != 0.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer column_n","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TableSetColumnIndex","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"column_n","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_TableSetColumnIndex\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"column_n"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_TableSetColumnIndex(ImGui_Context ctx, integer column_n)","eel":"bool extension_api(\"ImGui_TableSetColumnIndex\", ImGui_Context ctx, int column_n)","python":"bool ImGui_TableSetColumnIndex(ImGui_Context* ctx, int column_n)","cpp":"bool ImGui_TableSetColumnIndex(ImGui_Context* ctx, int column_n)"},"title":"ImGui_TableSetColumnIndex","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Append into the specified column. Return true when column is visible.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"optional integer flagsIn","description":""},{"identifier":"optional number init_width_or_weightIn","description":""},{"identifier":"optional integer user_idIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TableSetupColumn","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"isOptional":true,"type":"integer","identifier":"flagsIn"},{"isOptional":true,"type":"number","identifier":"init_width_or_weightIn"},{"isOptional":true,"type":"integer","identifier":"user_idIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_TableSetupColumn\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"},{"type_name":"optional","identifier":"init_width_or_weightIn"},{"identifier":"user_idIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_TableSetupColumn(ImGui_Context ctx, string label, optional integer flagsIn, optional number init_width_or_weightIn, optional integer user_idIn)","eel":"extension_api(\"ImGui_TableSetupColumn\", ImGui_Context ctx, \"label\", optional int flagsIn, optional init_width_or_weightIn, optional int user_idIn)","python":"void ImGui_TableSetupColumn(ImGui_Context* ctx, const char* label, int* flagsInOptional, double* init_width_or_weightInOptional, int* user_idInOptional)","cpp":"void ImGui_TableSetupColumn(ImGui_Context* ctx, const char* label, int* flagsInOptional, double* init_width_or_weightInOptional, int* user_idInOptional)"},"title":"ImGui_TableSetupColumn","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Use to specify label, resizing policy, default width/weight, id,\nvarious other flags etc.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer cols","description":""},{"identifier":"integer rows","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TableSetupScrollFreeze","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"cols","type":"integer"},{"identifier":"rows","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_TableSetupScrollFreeze\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"cols"},{"type_name":"int","identifier":"rows"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_TableSetupScrollFreeze(ImGui_Context ctx, integer cols, integer rows)","eel":"extension_api(\"ImGui_TableSetupScrollFreeze\", ImGui_Context ctx, int cols, int rows)","python":"void ImGui_TableSetupScrollFreeze(ImGui_Context* ctx, int cols, int rows)","cpp":"void ImGui_TableSetupScrollFreeze(ImGui_Context* ctx, int cols, int rows)"},"title":"ImGui_TableSetupScrollFreeze","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Lock columns/rows so they stay visible when scrolled.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string text","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Text","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"text","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_Text\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"text\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_Text(ImGui_Context ctx, string text)","eel":"extension_api(\"ImGui_Text\", ImGui_Context ctx, \"text\")","python":"void ImGui_Text(ImGui_Context* ctx, const char* text)","cpp":"void ImGui_Text(ImGui_Context* ctx, const char* text)"},"title":"ImGui_Text","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"integer col_rgba","description":""},{"identifier":"string text","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TextColored","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"col_rgba","type":"integer"},{"identifier":"text","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_TextColored\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"int","identifier":"col_rgba"},{"identifier":"\"text\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_TextColored(ImGui_Context ctx, integer col_rgba, string text)","eel":"extension_api(\"ImGui_TextColored\", ImGui_Context ctx, int col_rgba, \"text\")","python":"void ImGui_TextColored(ImGui_Context* ctx, int col_rgba, const char* text)","cpp":"void ImGui_TextColored(ImGui_Context* ctx, int col_rgba, const char* text)"},"title":"ImGui_TextColored","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Shortcut for PushStyleColor(Col_Text, color); Text(text); PopStyleColor();","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string text","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TextDisabled","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"text","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_TextDisabled\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"text\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_TextDisabled(ImGui_Context ctx, string text)","eel":"extension_api(\"ImGui_TextDisabled\", ImGui_Context ctx, \"text\")","python":"void ImGui_TextDisabled(ImGui_Context* ctx, const char* text)","cpp":"void ImGui_TextDisabled(ImGui_Context* ctx, const char* text)"},"title":"ImGui_TextDisabled","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_TextFilter filter","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TextFilter_Clear","return_values":[],"parameters":[{"identifier":"filter","type":"ImGui_TextFilter"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_TextFilter_Clear\""},{"type_name":"ImGui_TextFilter","identifier":"filter"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_TextFilter_Clear(ImGui_TextFilter filter)","eel":"extension_api(\"ImGui_TextFilter_Clear\", ImGui_TextFilter filter)","python":"void ImGui_TextFilter_Clear(ImGui_TextFilter* filter)","cpp":"void ImGui_TextFilter_Clear(ImGui_TextFilter* filter)"},"title":"ImGui_TextFilter_Clear","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_TextFilter filterImGui_Context ctx","description":""},{"identifier":"optional string labelIn","description":""},{"identifier":"optional number widthIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TextFilter_Draw","return_values":[{"type":"boolean"}],"parameters":[{"isOptional":true,"type":"ImGui_TextFilter","identifier":"ctx"},{"isOptional":true,"type":"string","identifier":"labelIn"},{"isOptional":true,"type":"number","identifier":"widthIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_TextFilter_Draw\""},{"type_name":"ImGui_TextFilter","identifier":"filter"},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"optional","identifier":"\"labelIn\""},{"type_name":"optional","identifier":"widthIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_TextFilter_Draw(ImGui_TextFilter filterImGui_Context ctx, optional string labelIn, optional number widthIn)","eel":"bool extension_api(\"ImGui_TextFilter_Draw\", ImGui_TextFilter filter, ImGui_Context ctx, optional \"labelIn\", optional widthIn)","python":"bool ImGui_TextFilter_Draw(ImGui_TextFilter* filter, ImGui_Context* ctx, const char* labelInOptional, double* widthInOptional)","cpp":"bool ImGui_TextFilter_Draw(ImGui_TextFilter* filter, ImGui_Context* ctx, const char* labelInOptional, double* widthInOptional)"},"title":"ImGui_TextFilter_Draw","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Helper calling InputText+TextFilter_Set","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_TextFilter filter","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TextFilter_Get","return_values":[{"identifier":"retval","type":"string"}],"parameters":[{"identifier":"filter","type":"ImGui_TextFilter"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_TextFilter_Get\""},{"identifier":"#retval"},{"type_name":"ImGui_TextFilter","identifier":"filter"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"string retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"string retval = reaper.ImGui_TextFilter_Get(ImGui_TextFilter filter)","eel":"bool extension_api(\"ImGui_TextFilter_Get\", #retval, ImGui_TextFilter filter)","python":"const char* ImGui_TextFilter_Get(ImGui_TextFilter* filter)","cpp":"const char* ImGui_TextFilter_Get(ImGui_TextFilter* filter)"},"title":"ImGui_TextFilter_Get","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_TextFilter filter","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TextFilter_IsActive","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"filter","type":"ImGui_TextFilter"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_TextFilter_IsActive\""},{"type_name":"ImGui_TextFilter","identifier":"filter"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_TextFilter_IsActive(ImGui_TextFilter filter)","eel":"bool extension_api(\"ImGui_TextFilter_IsActive\", ImGui_TextFilter filter)","python":"bool ImGui_TextFilter_IsActive(ImGui_TextFilter* filter)","cpp":"bool ImGui_TextFilter_IsActive(ImGui_TextFilter* filter)"},"title":"ImGui_TextFilter_IsActive","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_TextFilter filter","description":""},{"identifier":"string text","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TextFilter_PassFilter","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"filter","type":"ImGui_TextFilter"},{"identifier":"text","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_TextFilter_PassFilter\""},{"type_name":"ImGui_TextFilter","identifier":"filter"},{"identifier":"\"text\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_TextFilter_PassFilter(ImGui_TextFilter filter, string text)","eel":"bool extension_api(\"ImGui_TextFilter_PassFilter\", ImGui_TextFilter filter, \"text\")","python":"bool ImGui_TextFilter_PassFilter(ImGui_TextFilter* filter, const char* text)","cpp":"bool ImGui_TextFilter_PassFilter(ImGui_TextFilter* filter, const char* text)"},"title":"ImGui_TextFilter_PassFilter","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_TextFilter filter","description":""},{"identifier":"string filter_text","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TextFilter_Set","return_values":[],"parameters":[{"identifier":"filter","type":"ImGui_TextFilter"},{"identifier":"filter_text","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_TextFilter_Set\""},{"type_name":"ImGui_TextFilter","identifier":"filter"},{"identifier":"\"filter_text\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_TextFilter_Set(ImGui_TextFilter filter, string filter_text)","eel":"extension_api(\"ImGui_TextFilter_Set\", ImGui_TextFilter filter, \"filter_text\")","python":"void ImGui_TextFilter_Set(ImGui_TextFilter* filter, const char* filter_text)","cpp":"void ImGui_TextFilter_Set(ImGui_TextFilter* filter, const char* filter_text)"},"title":"ImGui_TextFilter_Set","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string text","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TextWrapped","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"text","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_TextWrapped\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"text\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_TextWrapped(ImGui_Context ctx, string text)","eel":"extension_api(\"ImGui_TextWrapped\", ImGui_Context ctx, \"text\")","python":"void ImGui_TextWrapped(ImGui_Context* ctx, const char* text)","cpp":"void ImGui_TextWrapped(ImGui_Context* ctx, const char* text)"},"title":"ImGui_TextWrapped","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Shortcut for PushTextWrapPos(0.0); Text(text); PopTextWrapPos();.\nNote that this won't work on an auto-resizing window if there's no other\nwidgets to extend the window width, yoy may need to set a size using\nSetNextWindowSize.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TreeNode","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_TreeNode\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_TreeNode(ImGui_Context ctx, string label, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_TreeNode\", ImGui_Context ctx, \"label\", optional int flagsIn)","python":"bool ImGui_TreeNode(ImGui_Context* ctx, const char* label, int* flagsInOptional)","cpp":"bool ImGui_TreeNode(ImGui_Context* ctx, const char* label, int* flagsInOptional)"},"title":"ImGui_TreeNode","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"TreeNode functions return true when the node is open, in which case you need\nto also call TreePop when you are finished displaying the tree node contents.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string str_id","description":""},{"identifier":"string label","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TreeNodeEx","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"str_id","type":"string"},{"identifier":"label","type":"string"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_TreeNodeEx\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"str_id\""},{"identifier":"\"label\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_TreeNodeEx(ImGui_Context ctx, string str_id, string label, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_TreeNodeEx\", ImGui_Context ctx, \"str_id\", \"label\", optional int flagsIn)","python":"bool ImGui_TreeNodeEx(ImGui_Context* ctx, const char* str_id, const char* label, int* flagsInOptional)","cpp":"bool ImGui_TreeNodeEx(ImGui_Context* ctx, const char* str_id, const char* label, int* flagsInOptional)"},"title":"ImGui_TreeNodeEx","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Helper variation to easily decorelate the id from the displayed string.\nRead the [FAQ](https://dearimgui.org/faq) about why and how to use ID.\nTo align arbitrary text at the same level as a TreeNode you can use Bullet.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TreeNodeFlags_AllowItemOverlap","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TreeNodeFlags_AllowItemOverlap\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TreeNodeFlags_AllowItemOverlap()","eel":"int extension_api(\"ImGui_TreeNodeFlags_AllowItemOverlap\")","python":"int ImGui_TreeNodeFlags_AllowItemOverlap()","cpp":"int ImGui_TreeNodeFlags_AllowItemOverlap()"},"title":"ImGui_TreeNodeFlags_AllowItemOverlap","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Hit testing to allow subsequent widgets to overlap this one.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TreeNodeFlags_Bullet","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TreeNodeFlags_Bullet\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TreeNodeFlags_Bullet()","eel":"int extension_api(\"ImGui_TreeNodeFlags_Bullet\")","python":"int ImGui_TreeNodeFlags_Bullet()","cpp":"int ImGui_TreeNodeFlags_Bullet()"},"title":"ImGui_TreeNodeFlags_Bullet","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Display a bullet instead of arrow.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TreeNodeFlags_CollapsingHeader","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TreeNodeFlags_CollapsingHeader\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TreeNodeFlags_CollapsingHeader()","eel":"int extension_api(\"ImGui_TreeNodeFlags_CollapsingHeader\")","python":"int ImGui_TreeNodeFlags_CollapsingHeader()","cpp":"int ImGui_TreeNodeFlags_CollapsingHeader()"},"title":"ImGui_TreeNodeFlags_CollapsingHeader","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"TreeNodeFlags_Framed | TreeNodeFlags_NoTreePushOnOpen | TreeNodeFlags_NoAutoOpenOnLog","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TreeNodeFlags_DefaultOpen","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TreeNodeFlags_DefaultOpen\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TreeNodeFlags_DefaultOpen()","eel":"int extension_api(\"ImGui_TreeNodeFlags_DefaultOpen\")","python":"int ImGui_TreeNodeFlags_DefaultOpen()","cpp":"int ImGui_TreeNodeFlags_DefaultOpen()"},"title":"ImGui_TreeNodeFlags_DefaultOpen","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Default node to be open.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TreeNodeFlags_FramePadding","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TreeNodeFlags_FramePadding\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TreeNodeFlags_FramePadding()","eel":"int extension_api(\"ImGui_TreeNodeFlags_FramePadding\")","python":"int ImGui_TreeNodeFlags_FramePadding()","cpp":"int ImGui_TreeNodeFlags_FramePadding()"},"title":"ImGui_TreeNodeFlags_FramePadding","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Use FramePadding (even for an unframed text node) to vertically align text\n   baseline to regular widget height.\n   Equivalent to calling AlignTextToFramePadding.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TreeNodeFlags_Framed","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TreeNodeFlags_Framed\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TreeNodeFlags_Framed()","eel":"int extension_api(\"ImGui_TreeNodeFlags_Framed\")","python":"int ImGui_TreeNodeFlags_Framed()","cpp":"int ImGui_TreeNodeFlags_Framed()"},"title":"ImGui_TreeNodeFlags_Framed","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draw frame with background (e.g. for CollapsingHeader).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TreeNodeFlags_Leaf","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TreeNodeFlags_Leaf\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TreeNodeFlags_Leaf()","eel":"int extension_api(\"ImGui_TreeNodeFlags_Leaf\")","python":"int ImGui_TreeNodeFlags_Leaf()","cpp":"int ImGui_TreeNodeFlags_Leaf()"},"title":"ImGui_TreeNodeFlags_Leaf","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"No collapsing, no arrow (use as a convenience for leaf nodes).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TreeNodeFlags_NoAutoOpenOnLog","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TreeNodeFlags_NoAutoOpenOnLog\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TreeNodeFlags_NoAutoOpenOnLog()","eel":"int extension_api(\"ImGui_TreeNodeFlags_NoAutoOpenOnLog\")","python":"int ImGui_TreeNodeFlags_NoAutoOpenOnLog()","cpp":"int ImGui_TreeNodeFlags_NoAutoOpenOnLog()"},"title":"ImGui_TreeNodeFlags_NoAutoOpenOnLog","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Don't automatically and temporarily open node when Logging is active\n   (by default logging will automatically open tree nodes).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TreeNodeFlags_NoTreePushOnOpen","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TreeNodeFlags_NoTreePushOnOpen\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TreeNodeFlags_NoTreePushOnOpen()","eel":"int extension_api(\"ImGui_TreeNodeFlags_NoTreePushOnOpen\")","python":"int ImGui_TreeNodeFlags_NoTreePushOnOpen()","cpp":"int ImGui_TreeNodeFlags_NoTreePushOnOpen()"},"title":"ImGui_TreeNodeFlags_NoTreePushOnOpen","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Don't do a TreePush when open (e.g. for CollapsingHeader)\n   = no extra indent nor pushing on ID stack.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TreeNodeFlags_None","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TreeNodeFlags_None\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TreeNodeFlags_None()","eel":"int extension_api(\"ImGui_TreeNodeFlags_None\")","python":"int ImGui_TreeNodeFlags_None()","cpp":"int ImGui_TreeNodeFlags_None()"},"title":"ImGui_TreeNodeFlags_None","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TreeNodeFlags_OpenOnArrow","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TreeNodeFlags_OpenOnArrow\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TreeNodeFlags_OpenOnArrow()","eel":"int extension_api(\"ImGui_TreeNodeFlags_OpenOnArrow\")","python":"int ImGui_TreeNodeFlags_OpenOnArrow()","cpp":"int ImGui_TreeNodeFlags_OpenOnArrow()"},"title":"ImGui_TreeNodeFlags_OpenOnArrow","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Only open when clicking on the arrow part.\n   If TreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or\n   double-click all box to open.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TreeNodeFlags_OpenOnDoubleClick","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TreeNodeFlags_OpenOnDoubleClick\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TreeNodeFlags_OpenOnDoubleClick()","eel":"int extension_api(\"ImGui_TreeNodeFlags_OpenOnDoubleClick\")","python":"int ImGui_TreeNodeFlags_OpenOnDoubleClick()","cpp":"int ImGui_TreeNodeFlags_OpenOnDoubleClick()"},"title":"ImGui_TreeNodeFlags_OpenOnDoubleClick","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Need double-click to open node.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TreeNodeFlags_Selected","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TreeNodeFlags_Selected\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TreeNodeFlags_Selected()","eel":"int extension_api(\"ImGui_TreeNodeFlags_Selected\")","python":"int ImGui_TreeNodeFlags_Selected()","cpp":"int ImGui_TreeNodeFlags_Selected()"},"title":"ImGui_TreeNodeFlags_Selected","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Draw as selected.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TreeNodeFlags_SpanAvailWidth","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TreeNodeFlags_SpanAvailWidth\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TreeNodeFlags_SpanAvailWidth()","eel":"int extension_api(\"ImGui_TreeNodeFlags_SpanAvailWidth\")","python":"int ImGui_TreeNodeFlags_SpanAvailWidth()","cpp":"int ImGui_TreeNodeFlags_SpanAvailWidth()"},"title":"ImGui_TreeNodeFlags_SpanAvailWidth","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Extend hit box to the right-most edge, even if not framed.\n   This is not the default in order to allow adding other items on the same line.\n   In the future we may refactor the hit system to be front-to-back,\n   allowing natural overlaps and then this can become the default.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_TreeNodeFlags_SpanFullWidth","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_TreeNodeFlags_SpanFullWidth\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_TreeNodeFlags_SpanFullWidth()","eel":"int extension_api(\"ImGui_TreeNodeFlags_SpanFullWidth\")","python":"int ImGui_TreeNodeFlags_SpanFullWidth()","cpp":"int ImGui_TreeNodeFlags_SpanFullWidth()"},"title":"ImGui_TreeNodeFlags_SpanFullWidth","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Extend hit box to the left-most and right-most edges (bypass the indented area).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Context ctx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TreePop","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_TreePop\""},{"type_name":"ImGui_Context","identifier":"ctx"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_TreePop(ImGui_Context ctx)","eel":"extension_api(\"ImGui_TreePop\", ImGui_Context ctx)","python":"void ImGui_TreePop(ImGui_Context* ctx)","cpp":"void ImGui_TreePop(ImGui_Context* ctx)"},"title":"ImGui_TreePop","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Unindent()+PopID()","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string str_id","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_TreePush","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"str_id","type":"string"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_TreePush\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"str_id\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_TreePush(ImGui_Context ctx, string str_id)","eel":"extension_api(\"ImGui_TreePush\", ImGui_Context ctx, \"str_id\")","python":"void ImGui_TreePush(ImGui_Context* ctx, const char* str_id)","cpp":"void ImGui_TreePush(ImGui_Context* ctx, const char* str_id)"},"title":"ImGui_TreePush","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Indent()+PushID(). Already called by TreeNode when returning true,\nbut you can call TreePush/TreePop yourself if desired.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"optional number indent_wIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Unindent","return_values":[],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"isOptional":true,"type":"number","identifier":"indent_wIn"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_Unindent\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"type_name":"optional","identifier":"indent_wIn"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.ImGui_Unindent(ImGui_Context ctx, optional number indent_wIn)","eel":"extension_api(\"ImGui_Unindent\", ImGui_Context ctx, optional indent_wIn)","python":"void ImGui_Unindent(ImGui_Context* ctx, double* indent_wInOptional)","cpp":"void ImGui_Unindent(ImGui_Context* ctx, double* indent_wInOptional)"},"title":"ImGui_Unindent","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Move content position back to the left, by 'indent_w', or\nStyleVar_IndentSpacing if 'indent_w' &lt;= 0","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":9,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"number size_w","description":""},{"identifier":"number size_h","description":""},{"identifier":"number v","description":""},{"identifier":"number v_min","description":""},{"identifier":"number v_max","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_VSliderDouble","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v","type":"number"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"size_w","type":"number"},{"identifier":"size_h","type":"number"},{"identifier":"v","type":"number"},{"identifier":"v_min","type":"number"},{"identifier":"v_max","type":"number"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_VSliderDouble\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"identifier":"size_w"},{"identifier":"size_h"},{"identifier":"&amp;v"},{"identifier":"v_min"},{"identifier":"v_max"},{"type_name":"optional","identifier":"\"formatIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"number v","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, number v = reaper.ImGui_VSliderDouble(ImGui_Context ctx, string label, number size_w, number size_h, number v, number v_min, number v_max, optional string formatIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_VSliderDouble\", ImGui_Context ctx, \"label\", size_w, size_h, &amp;v, v_min, v_max, optional \"formatIn\", optional int flagsIn)","python":"bool ImGui_VSliderDouble(ImGui_Context* ctx, const char* label, double size_w, double size_h, double* vInOut, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)","cpp":"bool ImGui_VSliderDouble(ImGui_Context* ctx, const char* label, double size_w, double size_h, double* vInOut, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)"},"title":"ImGui_VSliderDouble","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":9,"entries":[{"identifier":"ImGui_Context ctx","description":""},{"identifier":"string label","description":""},{"identifier":"number size_w","description":""},{"identifier":"number size_h","description":""},{"identifier":"integer v","description":""},{"identifier":"integer v_min","description":""},{"identifier":"integer v_max","description":""},{"identifier":"optional string formatIn","description":""},{"identifier":"optional integer flagsIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_VSliderInt","return_values":[{"identifier":"retval","type":"boolean"},{"identifier":"v","type":"integer"}],"parameters":[{"identifier":"ctx","type":"ImGui_Context"},{"identifier":"label","type":"string"},{"identifier":"size_w","type":"number"},{"identifier":"size_h","type":"number"},{"identifier":"v","type":"integer"},{"identifier":"v_min","type":"integer"},{"identifier":"v_max","type":"integer"},{"isOptional":true,"type":"string","identifier":"formatIn"},{"isOptional":true,"type":"integer","identifier":"flagsIn"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_VSliderInt\""},{"type_name":"ImGui_Context","identifier":"ctx"},{"identifier":"\"label\""},{"identifier":"size_w"},{"identifier":"size_h"},{"type_name":"int","identifier":"&amp;v"},{"type_name":"int","identifier":"v_min"},{"type_name":"int","identifier":"v_max"},{"type_name":"optional","identifier":"\"formatIn\""},{"identifier":"flagsIn","modifier":"optional","type_name":"int"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"boolean retval","description":""},{"identifier":"integer v","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean retval, integer v = reaper.ImGui_VSliderInt(ImGui_Context ctx, string label, number size_w, number size_h, integer v, integer v_min, integer v_max, optional string formatIn, optional integer flagsIn)","eel":"bool extension_api(\"ImGui_VSliderInt\", ImGui_Context ctx, \"label\", size_w, size_h, int &amp;v, int v_min, int v_max, optional \"formatIn\", optional int flagsIn)","python":"bool ImGui_VSliderInt(ImGui_Context* ctx, const char* label, double size_w, double size_h, int* vInOut, int v_min, int v_max, const char* formatInOptional, int* flagsInOptional)","cpp":"bool ImGui_VSliderInt(ImGui_Context* ctx, const char* label, double size_w, double size_h, int* vInOut, int v_min, int v_max, const char* formatInOptional, int* flagsInOptional)"},"title":"ImGui_VSliderInt","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"identifier pointer","description":""},{"identifier":"string type","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_ValidatePtr","return_values":[{"type":"boolean"}],"parameters":[{"identifier":"pointer","type":"identifier"},{"identifier":"type","type":"string"}]},"eel":{"method_name":"extension_api","return_values":["bool"],"parameters":[{"identifier":"\"ImGui_ValidatePtr\""},{"type_name":"void*","identifier":"pointer"},{"identifier":"\"type\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"boolean","description":""}],"prog_lang":"*"},"functioncall":{"lua":"boolean reaper.ImGui_ValidatePtr(identifier pointer, string type)","eel":"bool extension_api(\"ImGui_ValidatePtr\", void* pointer, \"type\")","python":"bool ImGui_ValidatePtr(void* pointer, const char* type)","cpp":"bool ImGui_ValidatePtr(void* pointer, const char* type)"},"title":"ImGui_ValidatePtr","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Return whether the pointer of the specified type is valid.\n\nSupported types are:\n\n- ImGui_Context*\n- ImGui_DrawList*\n- ImGui_DrawListSplitter*\n- ImGui_Font*\n- ImGui_Function*\n- ImGui_Image*\n- ImGui_ImageSet*\n- ImGui_ListClipper*\n- ImGui_TextFilter*\n- ImGui_Viewport*","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Viewport viewport","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Viewport_GetCenter","return_values":[{"identifier":"x","type":"number"},{"identifier":"y","type":"number"}],"parameters":[{"identifier":"viewport","type":"ImGui_Viewport"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_Viewport_GetCenter\""},{"type_name":"ImGui_Viewport","identifier":"viewport"},{"identifier":"&amp;x"},{"identifier":"&amp;y"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number x","description":""},{"identifier":"number y","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number x, number y = reaper.ImGui_Viewport_GetCenter(ImGui_Viewport viewport)","eel":"extension_api(\"ImGui_Viewport_GetCenter\", ImGui_Viewport viewport, &amp;x, &amp;y)","python":"void ImGui_Viewport_GetCenter(ImGui_Viewport* viewport, double* xOut, double* yOut)","cpp":"void ImGui_Viewport_GetCenter(ImGui_Viewport* viewport, double* xOut, double* yOut)"},"title":"ImGui_Viewport_GetCenter","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Center of the viewport.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Viewport viewport","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Viewport_GetPos","return_values":[{"identifier":"x","type":"number"},{"identifier":"y","type":"number"}],"parameters":[{"identifier":"viewport","type":"ImGui_Viewport"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_Viewport_GetPos\""},{"type_name":"ImGui_Viewport","identifier":"viewport"},{"identifier":"&amp;x"},{"identifier":"&amp;y"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number x","description":""},{"identifier":"number y","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number x, number y = reaper.ImGui_Viewport_GetPos(ImGui_Viewport viewport)","eel":"extension_api(\"ImGui_Viewport_GetPos\", ImGui_Viewport viewport, &amp;x, &amp;y)","python":"void ImGui_Viewport_GetPos(ImGui_Viewport* viewport, double* xOut, double* yOut)","cpp":"void ImGui_Viewport_GetPos(ImGui_Viewport* viewport, double* xOut, double* yOut)"},"title":"ImGui_Viewport_GetPos","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Main Area: Position of the viewport","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Viewport viewport","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Viewport_GetSize","return_values":[{"identifier":"w","type":"number"},{"identifier":"h","type":"number"}],"parameters":[{"identifier":"viewport","type":"ImGui_Viewport"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_Viewport_GetSize\""},{"type_name":"ImGui_Viewport","identifier":"viewport"},{"identifier":"&amp;w"},{"identifier":"&amp;h"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number w","description":""},{"identifier":"number h","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number w, number h = reaper.ImGui_Viewport_GetSize(ImGui_Viewport viewport)","eel":"extension_api(\"ImGui_Viewport_GetSize\", ImGui_Viewport viewport, &amp;w, &amp;h)","python":"void ImGui_Viewport_GetSize(ImGui_Viewport* viewport, double* wOut, double* hOut)","cpp":"void ImGui_Viewport_GetSize(ImGui_Viewport* viewport, double* wOut, double* hOut)"},"title":"ImGui_Viewport_GetSize","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Main Area: Size of the viewport.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Viewport viewport","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Viewport_GetWorkCenter","return_values":[{"identifier":"x","type":"number"},{"identifier":"y","type":"number"}],"parameters":[{"identifier":"viewport","type":"ImGui_Viewport"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_Viewport_GetWorkCenter\""},{"type_name":"ImGui_Viewport","identifier":"viewport"},{"identifier":"&amp;x"},{"identifier":"&amp;y"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number x","description":""},{"identifier":"number y","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number x, number y = reaper.ImGui_Viewport_GetWorkCenter(ImGui_Viewport viewport)","eel":"extension_api(\"ImGui_Viewport_GetWorkCenter\", ImGui_Viewport viewport, &amp;x, &amp;y)","python":"void ImGui_Viewport_GetWorkCenter(ImGui_Viewport* viewport, double* xOut, double* yOut)","cpp":"void ImGui_Viewport_GetWorkCenter(ImGui_Viewport* viewport, double* xOut, double* yOut)"},"title":"ImGui_Viewport_GetWorkCenter","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Center of the viewport's work area.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Viewport viewport","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Viewport_GetWorkPos","return_values":[{"identifier":"x","type":"number"},{"identifier":"y","type":"number"}],"parameters":[{"identifier":"viewport","type":"ImGui_Viewport"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_Viewport_GetWorkPos\""},{"type_name":"ImGui_Viewport","identifier":"viewport"},{"identifier":"&amp;x"},{"identifier":"&amp;y"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number x","description":""},{"identifier":"number y","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number x, number y = reaper.ImGui_Viewport_GetWorkPos(ImGui_Viewport viewport)","eel":"extension_api(\"ImGui_Viewport_GetWorkPos\", ImGui_Viewport viewport, &amp;x, &amp;y)","python":"void ImGui_Viewport_GetWorkPos(ImGui_Viewport* viewport, double* xOut, double* yOut)","cpp":"void ImGui_Viewport_GetWorkPos(ImGui_Viewport* viewport, double* xOut, double* yOut)"},"title":"ImGui_Viewport_GetWorkPos","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"&gt;= Viewport_GetPos","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"ImGui_Viewport viewport","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.ImGui_Viewport_GetWorkSize","return_values":[{"identifier":"w","type":"number"},{"identifier":"h","type":"number"}],"parameters":[{"identifier":"viewport","type":"ImGui_Viewport"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"ImGui_Viewport_GetWorkSize\""},{"type_name":"ImGui_Viewport","identifier":"viewport"},{"identifier":"&amp;w"},{"identifier":"&amp;h"}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"number w","description":""},{"identifier":"number h","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number w, number h = reaper.ImGui_Viewport_GetWorkSize(ImGui_Viewport viewport)","eel":"extension_api(\"ImGui_Viewport_GetWorkSize\", ImGui_Viewport viewport, &amp;w, &amp;h)","python":"void ImGui_Viewport_GetWorkSize(ImGui_Viewport* viewport, double* wOut, double* hOut)","cpp":"void ImGui_Viewport_GetWorkSize(ImGui_Viewport* viewport, double* wOut, double* hOut)"},"title":"ImGui_Viewport_GetWorkSize","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"&lt;= Viewport_GetSize","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_WindowFlags_AlwaysAutoResize","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_WindowFlags_AlwaysAutoResize\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_WindowFlags_AlwaysAutoResize()","eel":"int extension_api(\"ImGui_WindowFlags_AlwaysAutoResize\")","python":"int ImGui_WindowFlags_AlwaysAutoResize()","cpp":"int ImGui_WindowFlags_AlwaysAutoResize()"},"title":"ImGui_WindowFlags_AlwaysAutoResize","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Resize every window to its content every frame.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_WindowFlags_AlwaysHorizontalScrollbar","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_WindowFlags_AlwaysHorizontalScrollbar\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_WindowFlags_AlwaysHorizontalScrollbar()","eel":"int extension_api(\"ImGui_WindowFlags_AlwaysHorizontalScrollbar\")","python":"int ImGui_WindowFlags_AlwaysHorizontalScrollbar()","cpp":"int ImGui_WindowFlags_AlwaysHorizontalScrollbar()"},"title":"ImGui_WindowFlags_AlwaysHorizontalScrollbar","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Always show horizontal scrollbar (even if ContentSize.x &lt; Size.x).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_WindowFlags_AlwaysUseWindowPadding","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_WindowFlags_AlwaysUseWindowPadding\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_WindowFlags_AlwaysUseWindowPadding()","eel":"int extension_api(\"ImGui_WindowFlags_AlwaysUseWindowPadding\")","python":"int ImGui_WindowFlags_AlwaysUseWindowPadding()","cpp":"int ImGui_WindowFlags_AlwaysUseWindowPadding()"},"title":"ImGui_WindowFlags_AlwaysUseWindowPadding","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Ensure child windows without border uses StyleVar_WindowPadding\n   (ignored by default for non-bordered child windows, because more convenient).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_WindowFlags_AlwaysVerticalScrollbar","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_WindowFlags_AlwaysVerticalScrollbar\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_WindowFlags_AlwaysVerticalScrollbar()","eel":"int extension_api(\"ImGui_WindowFlags_AlwaysVerticalScrollbar\")","python":"int ImGui_WindowFlags_AlwaysVerticalScrollbar()","cpp":"int ImGui_WindowFlags_AlwaysVerticalScrollbar()"},"title":"ImGui_WindowFlags_AlwaysVerticalScrollbar","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Always show vertical scrollbar (even if ContentSize.y &lt; Size.y).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_WindowFlags_HorizontalScrollbar","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_WindowFlags_HorizontalScrollbar\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_WindowFlags_HorizontalScrollbar()","eel":"int extension_api(\"ImGui_WindowFlags_HorizontalScrollbar\")","python":"int ImGui_WindowFlags_HorizontalScrollbar()","cpp":"int ImGui_WindowFlags_HorizontalScrollbar()"},"title":"ImGui_WindowFlags_HorizontalScrollbar","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Allow horizontal scrollbar to appear (off by default).\n   You may use SetNextWindowContentSize(width, 0.0) prior to calling Begin() to\n   specify width. Read code in the demo's \"Horizontal Scrolling\" section.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_WindowFlags_MenuBar","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_WindowFlags_MenuBar\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_WindowFlags_MenuBar()","eel":"int extension_api(\"ImGui_WindowFlags_MenuBar\")","python":"int ImGui_WindowFlags_MenuBar()","cpp":"int ImGui_WindowFlags_MenuBar()"},"title":"ImGui_WindowFlags_MenuBar","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Has a menu-bar.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_WindowFlags_NoBackground","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_WindowFlags_NoBackground\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_WindowFlags_NoBackground()","eel":"int extension_api(\"ImGui_WindowFlags_NoBackground\")","python":"int ImGui_WindowFlags_NoBackground()","cpp":"int ImGui_WindowFlags_NoBackground()"},"title":"ImGui_WindowFlags_NoBackground","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable drawing background color (WindowBg, etc.) and outside border.\n   Similar as using SetNextWindowBgAlpha(0.0).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_WindowFlags_NoCollapse","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_WindowFlags_NoCollapse\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_WindowFlags_NoCollapse()","eel":"int extension_api(\"ImGui_WindowFlags_NoCollapse\")","python":"int ImGui_WindowFlags_NoCollapse()","cpp":"int ImGui_WindowFlags_NoCollapse()"},"title":"ImGui_WindowFlags_NoCollapse","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable user collapsing window by double-clicking on it.\n   Also referred to as Window Menu Button (e.g. within a docking node).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_WindowFlags_NoDecoration","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_WindowFlags_NoDecoration\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_WindowFlags_NoDecoration()","eel":"int extension_api(\"ImGui_WindowFlags_NoDecoration\")","python":"int ImGui_WindowFlags_NoDecoration()","cpp":"int ImGui_WindowFlags_NoDecoration()"},"title":"ImGui_WindowFlags_NoDecoration","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"WindowFlags_NoTitleBar | WindowFlags_NoResize | WindowFlags_NoScrollbar |\n   WindowFlags_NoCollapse","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_WindowFlags_NoDocking","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_WindowFlags_NoDocking\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_WindowFlags_NoDocking()","eel":"int extension_api(\"ImGui_WindowFlags_NoDocking\")","python":"int ImGui_WindowFlags_NoDocking()","cpp":"int ImGui_WindowFlags_NoDocking()"},"title":"ImGui_WindowFlags_NoDocking","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable docking of this window.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_WindowFlags_NoFocusOnAppearing","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_WindowFlags_NoFocusOnAppearing\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_WindowFlags_NoFocusOnAppearing()","eel":"int extension_api(\"ImGui_WindowFlags_NoFocusOnAppearing\")","python":"int ImGui_WindowFlags_NoFocusOnAppearing()","cpp":"int ImGui_WindowFlags_NoFocusOnAppearing()"},"title":"ImGui_WindowFlags_NoFocusOnAppearing","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable taking focus when transitioning from hidden to visible state.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_WindowFlags_NoInputs","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_WindowFlags_NoInputs\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_WindowFlags_NoInputs()","eel":"int extension_api(\"ImGui_WindowFlags_NoInputs\")","python":"int ImGui_WindowFlags_NoInputs()","cpp":"int ImGui_WindowFlags_NoInputs()"},"title":"ImGui_WindowFlags_NoInputs","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"WindowFlags_NoMouseInputs | WindowFlags_NoNavInputs | WindowFlags_NoNavFocus","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_WindowFlags_NoMouseInputs","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_WindowFlags_NoMouseInputs\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_WindowFlags_NoMouseInputs()","eel":"int extension_api(\"ImGui_WindowFlags_NoMouseInputs\")","python":"int ImGui_WindowFlags_NoMouseInputs()","cpp":"int ImGui_WindowFlags_NoMouseInputs()"},"title":"ImGui_WindowFlags_NoMouseInputs","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable catching mouse, hovering test with pass through.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_WindowFlags_NoMove","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_WindowFlags_NoMove\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_WindowFlags_NoMove()","eel":"int extension_api(\"ImGui_WindowFlags_NoMove\")","python":"int ImGui_WindowFlags_NoMove()","cpp":"int ImGui_WindowFlags_NoMove()"},"title":"ImGui_WindowFlags_NoMove","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable user moving the window.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_WindowFlags_NoNav","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_WindowFlags_NoNav\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_WindowFlags_NoNav()","eel":"int extension_api(\"ImGui_WindowFlags_NoNav\")","python":"int ImGui_WindowFlags_NoNav()","cpp":"int ImGui_WindowFlags_NoNav()"},"title":"ImGui_WindowFlags_NoNav","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"WindowFlags_NoNavInputs | WindowFlags_NoNavFocus","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_WindowFlags_NoNavFocus","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_WindowFlags_NoNavFocus\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_WindowFlags_NoNavFocus()","eel":"int extension_api(\"ImGui_WindowFlags_NoNavFocus\")","python":"int ImGui_WindowFlags_NoNavFocus()","cpp":"int ImGui_WindowFlags_NoNavFocus()"},"title":"ImGui_WindowFlags_NoNavFocus","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"No focusing toward this window with gamepad/keyboard navigation\n   (e.g. skipped by CTRL+TAB).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_WindowFlags_NoNavInputs","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_WindowFlags_NoNavInputs\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_WindowFlags_NoNavInputs()","eel":"int extension_api(\"ImGui_WindowFlags_NoNavInputs\")","python":"int ImGui_WindowFlags_NoNavInputs()","cpp":"int ImGui_WindowFlags_NoNavInputs()"},"title":"ImGui_WindowFlags_NoNavInputs","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"No gamepad/keyboard navigation within the window.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_WindowFlags_NoResize","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_WindowFlags_NoResize\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_WindowFlags_NoResize()","eel":"int extension_api(\"ImGui_WindowFlags_NoResize\")","python":"int ImGui_WindowFlags_NoResize()","cpp":"int ImGui_WindowFlags_NoResize()"},"title":"ImGui_WindowFlags_NoResize","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable user resizing with the lower-right grip.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_WindowFlags_NoSavedSettings","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_WindowFlags_NoSavedSettings\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_WindowFlags_NoSavedSettings()","eel":"int extension_api(\"ImGui_WindowFlags_NoSavedSettings\")","python":"int ImGui_WindowFlags_NoSavedSettings()","cpp":"int ImGui_WindowFlags_NoSavedSettings()"},"title":"ImGui_WindowFlags_NoSavedSettings","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Never load/save settings in .ini file.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_WindowFlags_NoScrollWithMouse","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_WindowFlags_NoScrollWithMouse\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_WindowFlags_NoScrollWithMouse()","eel":"int extension_api(\"ImGui_WindowFlags_NoScrollWithMouse\")","python":"int ImGui_WindowFlags_NoScrollWithMouse()","cpp":"int ImGui_WindowFlags_NoScrollWithMouse()"},"title":"ImGui_WindowFlags_NoScrollWithMouse","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable user vertically scrolling with mouse wheel.\n   On child window, mouse wheel will be forwarded to the parent unless\n   NoScrollbar is also set.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_WindowFlags_NoScrollbar","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_WindowFlags_NoScrollbar\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_WindowFlags_NoScrollbar()","eel":"int extension_api(\"ImGui_WindowFlags_NoScrollbar\")","python":"int ImGui_WindowFlags_NoScrollbar()","cpp":"int ImGui_WindowFlags_NoScrollbar()"},"title":"ImGui_WindowFlags_NoScrollbar","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable scrollbars (window can still scroll with mouse or programmatically).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_WindowFlags_NoTitleBar","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_WindowFlags_NoTitleBar\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_WindowFlags_NoTitleBar()","eel":"int extension_api(\"ImGui_WindowFlags_NoTitleBar\")","python":"int ImGui_WindowFlags_NoTitleBar()","cpp":"int ImGui_WindowFlags_NoTitleBar()"},"title":"ImGui_WindowFlags_NoTitleBar","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Disable title-bar.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_WindowFlags_None","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_WindowFlags_None\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_WindowFlags_None()","eel":"int extension_api(\"ImGui_WindowFlags_None\")","python":"int ImGui_WindowFlags_None()","cpp":"int ImGui_WindowFlags_None()"},"title":"ImGui_WindowFlags_None","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Default flag.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_WindowFlags_TopMost","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_WindowFlags_TopMost\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_WindowFlags_TopMost()","eel":"int extension_api(\"ImGui_WindowFlags_TopMost\")","python":"int ImGui_WindowFlags_TopMost()","cpp":"int ImGui_WindowFlags_TopMost()"},"title":"ImGui_WindowFlags_TopMost","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Show the window above all non-topmost windows.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reaimgui","gui","user interface"],"params":{"param_count":0,"entries":[]},"signatures":{"lua":{"method_name":"reaper.ImGui_WindowFlags_UnsavedDocument","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"ImGui_WindowFlags_UnsavedDocument\""}]}},"requires":{"Reaper":"6.44","ReaImGui":"0.8.5"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval =  reaper.ImGui_WindowFlags_UnsavedDocument()","eel":"int extension_api(\"ImGui_WindowFlags_UnsavedDocument\")","python":"int ImGui_WindowFlags_UnsavedDocument()","cpp":"int ImGui_WindowFlags_UnsavedDocument()"},"title":"ImGui_WindowFlags_UnsavedDocument","chapters":["ReaImGui"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Display a dot next to the title. When used in a tab/docking context,\n   tab is selected when clicking the X + closure is not assumed\n   (will wait for user to stop submitting the tab).\n   Otherwise closure is assumed when pressing the X,\n   so if you keep submitting the tab may reappear at end of tab bar.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reamculive"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer device","description":""},{"identifier":"integer button","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MCULive_GetButtonValue","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"device","type":"integer"},{"identifier":"button","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"MCULive_GetButtonValue\""},{"type_name":"int","identifier":"device"},{"type_name":"int","identifier":"button"}]}},"requires":{"ReaMCULive":"0.1.5","Reaper":"6.44"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.MCULive_GetButtonValue(integer device, integer button)","eel":"int extension_api(\"MCULive_GetButtonValue\", int device, int button)","python":"int MCULive_GetButtonValue(int device, int button)","cpp":"int MCULive_GetButtonValue(int device, int button)"},"title":"MCULive_GetButtonValue","chapters":["ReaMCULive"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get current button state.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reamculive"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer device","description":""},{"identifier":"integer type","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MCULive_GetDevice","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"device","type":"integer"},{"identifier":"type","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"MCULive_GetDevice\""},{"type_name":"int","identifier":"device"},{"type_name":"int","identifier":"type"}]}},"requires":{"ReaMCULive":"0.1.5","Reaper":"6.44"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.MCULive_GetDevice(integer device, integer type)","eel":"int extension_api(\"MCULive_GetDevice\", int device, int type)","python":"int MCULive_GetDevice(int device, int type)","cpp":"int MCULive_GetDevice(int device, int type)"},"title":"MCULive_GetDevice","chapters":["ReaMCULive"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Get MIDI input or output dev ID. type 0 is input dev, type 1 is output dev. device &lt; 0 returns number of MCULive devices.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reamculive"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer device","description":""},{"identifier":"integer encIdx","description":""},{"identifier":"integer param","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MCULive_GetEncoderValue","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"device","type":"integer"},{"identifier":"encIdx","type":"integer"},{"identifier":"param","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"MCULive_GetEncoderValue\""},{"type_name":"int","identifier":"device"},{"type_name":"int","identifier":"encIdx"},{"type_name":"int","identifier":"param"}]}},"requires":{"ReaMCULive":"0.1.5","Reaper":"6.44"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.MCULive_GetEncoderValue(integer device, integer encIdx, integer param)","eel":"double extension_api(\"MCULive_GetEncoderValue\", int device, int encIdx, int param)","python":"double MCULive_GetEncoderValue(int device, int encIdx, int param)","cpp":"double MCULive_GetEncoderValue(int device, int encIdx, int param)"},"title":"MCULive_GetEncoderValue","chapters":["ReaMCULive"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns zero-indexed encoder parameter value. 0 = lastpos, 1 = lasttouch","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reamculive"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer device","description":""},{"identifier":"integer faderIdx","description":""},{"identifier":"integer param","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MCULive_GetFaderValue","return_values":[{"identifier":"retval","type":"number"}],"parameters":[{"identifier":"device","type":"integer"},{"identifier":"faderIdx","type":"integer"},{"identifier":"param","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["double"],"parameters":[{"identifier":"\"MCULive_GetFaderValue\""},{"type_name":"int","identifier":"device"},{"type_name":"int","identifier":"faderIdx"},{"type_name":"int","identifier":"param"}]}},"requires":{"ReaMCULive":"0.1.5","Reaper":"6.44"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"number retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"number retval = reaper.MCULive_GetFaderValue(integer device, integer faderIdx, integer param)","eel":"double extension_api(\"MCULive_GetFaderValue\", int device, int faderIdx, int param)","python":"double MCULive_GetFaderValue(int device, int faderIdx, int param)","cpp":"double MCULive_GetFaderValue(int device, int faderIdx, int param)"},"title":"MCULive_GetFaderValue","chapters":["ReaMCULive"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Returns zero-indexed fader parameter value. 0 = lastpos, 1 = lasttouch, 2 = lastmove (any fader)","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reamculive"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer device","description":""},{"identifier":"integer msgIdx","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MCULive_GetMIDIMessage","return_values":[{"identifier":"retval","type":"integer"},{"identifier":"status","type":"integer"},{"identifier":"data1","type":"integer"},{"identifier":"data2","type":"integer"},{"identifier":"frame_offset","type":"integer"},{"isOptional":true,"type":"string","identifier":"msg"}],"parameters":[{"identifier":"device","type":"integer"},{"identifier":"msgIdx","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"MCULive_GetMIDIMessage\""},{"type_name":"int","identifier":"device"},{"type_name":"int","identifier":"msgIdx"},{"type_name":"int","identifier":"&amp;status"},{"type_name":"int","identifier":"&amp;data1"},{"type_name":"int","identifier":"&amp;data2"},{"type_name":"int","identifier":"&amp;frame_offset"},{"type_name":"optional","identifier":"#msg"}]}},"requires":{"ReaMCULive":"0.1.5","Reaper":"6.44"},"return_values":{"markup_type":"plaintext","param_count":6,"entries":[{"identifier":"integer retval","description":""},{"identifier":"integer status","description":""},{"identifier":"integer data1","description":""},{"identifier":"integer data2","description":""},{"identifier":"integer frame_offset","description":""},{"identifier":"optional string msg","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval, integer status, integer data1, integer data2, integer frame_offset, optional string msg = reaper.MCULive_GetMIDIMessage(integer device, integer msgIdx)","eel":"int extension_api(\"MCULive_GetMIDIMessage\", int device, int msgIdx, int &amp;status, int &amp;data1, int &amp;data2, int &amp;frame_offset, optional #msg)","python":"int MCULive_GetMIDIMessage(int device, int msgIdx, int* statusOut, int* data1Out, int* data2Out, int* frame_offsetOut, char* msgOutOptional, int msgOutOptional_sz)","cpp":"int MCULive_GetMIDIMessage(int device, int msgIdx, int* statusOut, int* data1Out, int* data2Out, int* frame_offsetOut, char* msgOutOptional, int msgOutOptional_sz)"},"title":"MCULive_GetMIDIMessage","chapters":["ReaMCULive"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Gets MIDI message from input buffer/queue. Gets (pops/pulls) indexed message (status, data1, data2 and frame_offset) from queue and retval is total size/length left in queue. E.g. continuously read all indiviual messages with deferred script. Frame offset resolution is 1/1024000 seconds, not audio samples. Long messages are returned as optional strings of byte characters. msgIdx -1 returns size (length) of buffer. Read also non-MCU devices by creating MCULive device with their input. ","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reamculive"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer device","description":""},{"identifier":"integer button","description":""},{"identifier":"integer command_id<b>unsupported</b> bool","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MCULive_Map","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"device","type":"integer"},{"identifier":"button","type":"integer"},{"isOptional":true,"type":"integer","identifier":"bool"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"MCULive_Map\""},{"type_name":"int","identifier":"device"},{"type_name":"int","identifier":"button"},{"type_name":"int","identifier":"command_id"},{"type_name":"<b>unsupported</b>","identifier":"bool"}]}},"requires":{"ReaMCULive":"0.1.5","Reaper":"6.44"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.MCULive_Map(integer device, integer button, integer command_id<b>unsupported</b> bool)","eel":"int extension_api(\"MCULive_Map\", int device, int button, int command_id, <b>unsupported</b> bool)","python":"int MCULive_Map(int device, int button, int command_id, isRemap bool)","cpp":"int MCULive_Map(int device, int button, int command_id, isRemap bool)"},"title":"MCULive_Map","chapters":["ReaMCULive"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Maps MCU Live device# button# to REAPER command ID. E.g. reaper.MCULive_Map(0,0x5b, 40340) maps MCU Rewind to \"Track: Unsolo all tracks\". Or remap button to another button if your MCU button layout doesnt play nicely with default MCULive mappings. By default range 0x00 .. 0x2d is in use. Button numbers are second column (prefixed with 0x) e.g. '90 5e' 0x5e for 'transport : play', roughly. \n\nmcu documentation: \nmcu=&gt;pc: \n  the mcu seems to send, when it boots (or is reset) f0 00 00 66 14 01 58 59 5a 57 18 61 05 57 18 61 05 f7 \n  ex vv vv    :   volume fader move, x=0..7, 8=master, vv vv is int14 \n  b0 1x vv    :   pan fader move, x=0..7, vv has 40 set if negative, low bits 0-31 are move amount \n  b0 3c vv    :   jog wheel move, 01 or 41 \n  to the extent the buttons below have leds, you can set them by sending these messages, with 7f for on, 1 for blink, 0 for off. \n  90 0x vv    :   rec arm push x=0..7 (vv:..) \n  90 0x vv    :   solo push x=8..f (vv:..) \n  90 1x vv    :   mute push x=0..7 (vv:..) \n  90 1x vv    :   selected push x=8..f (vv:..) \n  90 2x vv    :   pan knob push, x=0..7 (vv:..) \n  90 28 vv    :   assignment track \n  90 29 vv    :   assignment send \n  90 2a vv    :   assignment pan/surround \n  90 2b vv    :   assignment plug-in \n  90 2c vv    :   assignment eq \n  90 2d vv    :   assignment instrument \n  90 2e vv    :   bank down button (vv: 00=release, 7f=push) \n  90 2f vv    :   channel down button (vv: ..) \n  90 30 vv    :   bank up button (vv:..) \n  90 31 vv    :   channel up button (vv:..) \n  90 32 vv    :   flip button \n  90 33 vv    :   global view button \n  90 34 vv    :   name/value display button \n  90 35 vv    :   smpte/beats mode switch (vv:..) \n  90 36 vv    :   f1 \n  90 37 vv    :   f2 \n  90 38 vv    :   f3 \n  90 39 vv    :   f4 \n  90 3a vv    :   f5 \n  90 3b vv    :   f6 \n  90 3c vv    :   f7 \n  90 3d vv    :   f8 \n  90 3e vv    :   global view : midi tracks \n  90 3f vv    :   global view : inputs \n  90 40 vv    :   global view : audio tracks \n  90 41 vv    :   global view : audio instrument \n  90 42 vv    :   global view : aux \n  90 43 vv    :   global view : busses \n  90 44 vv    :   global view : outputs \n  90 45 vv    :   global view : user \n  90 46 vv    :   shift modifier (vv:..) \n  90 47 vv    :   option modifier \n  90 48 vv    :   control modifier \n  90 49 vv    :   alt modifier \n  90 4a vv    :   automation read/off \n  90 4b vv    :   automation write \n  90 4c vv    :   automation trim \n  90 4d vv    :   automation touch \n  90 4e vv    :   automation latch \n  90 4f vv    :   automation group \n  90 50 vv    :   utilities save \n  90 51 vv    :   utilities undo \n  90 52 vv    :   utilities cancel \n  90 53 vv    :   utilities enter \n  90 54 vv    :   marker \n  90 55 vv    :   nudge \n  90 56 vv    :   cycle \n  90 57 vv    :   drop \n  90 58 vv    :   replace \n  90 59 vv    :   click \n  90 5a vv    :   solo \n  90 5b vv    :   transport rewind (vv:..) \n  90 5c vv    :   transport ffwd (vv:..) \n  90 5d vv    :   transport pause (vv:..) \n  90 5e vv    :   transport play (vv:..) \n  90 5f vv    :   transport record (vv:..) \n  90 60 vv    :   up arrow button  (vv:..) \n  90 61 vv    :   down arrow button 1 (vv:..) \n  90 62 vv    :   left arrow button 1 (vv:..) \n  90 63 vv    :   right arrow button 1 (vv:..) \n  90 64 vv    :   zoom button (vv:..) \n  90 65 vv    :   scrub button (vv:..) \n  90 6x vv    :   fader touch x=8..f \n  90 70 vv    :   master fader touch \npc=&gt;mcu: \n  f0 00 00 66 14 12 xx &lt;data&gt; f7   : update lcd. xx=offset (0-112), string. display is 55 chars wide, second line begins at 56, though. \n  f0 00 00 66 14 08 00 f7          : reset mcu \n  f0 00 00 66 14 20 0x 03 f7       : put track in vu meter mode, x=track   \n  90 73 vv : rude solo light (vv: 7f=on, 00=off, 01=blink) \n  b0 3x vv : pan display, x=0..7, vv=1..17 (hex) or so \n  b0 4x vv : right to left of leds. if 0x40 set in vv, dot below char is set (x=0..11) \n  d0 yx    : update vu meter, y=track, x=0..d=volume, e=clip on, f=clip off \n  ex vv vv : set volume fader, x=track index, 8=master \n","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reamculive"],"params":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer device","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MCULive_Reset","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"device","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"MCULive_Reset\""},{"type_name":"int","identifier":"device"}]}},"requires":{"ReaMCULive":"0.1.5","Reaper":"6.44"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.MCULive_Reset(integer device)","eel":"int extension_api(\"MCULive_Reset\", int device)","python":"int MCULive_Reset(int device)","cpp":"int MCULive_Reset(int device)"},"title":"MCULive_Reset","chapters":["ReaMCULive"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Reset device. device &lt; 0 resets all and returns number of devices.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reamculive"],"params":{"markup_type":"plaintext","param_count":5,"entries":[{"identifier":"integer device","description":""},{"identifier":"integer status","description":""},{"identifier":"integer data1","description":""},{"identifier":"integer data2","description":""},{"identifier":"optional string msgIn<b>unsupported</b> msgIn","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MCULive_SendMIDIMessage","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"device","type":"integer"},{"identifier":"status","type":"integer"},{"identifier":"data1","type":"integer"},{"identifier":"data2","type":"integer"},{"isOptional":true,"type":"string","identifier":"msgIn"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"MCULive_SendMIDIMessage\""},{"type_name":"int","identifier":"device"},{"type_name":"int","identifier":"status"},{"type_name":"int","identifier":"data1"},{"type_name":"int","identifier":"data2"},{"type_name":"optional","identifier":"\"msgIn\""},{"type_name":"<b>unsupported</b>","identifier":"msgIn"}]}},"requires":{"ReaMCULive":"0.1.5","Reaper":"6.44"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.MCULive_SendMIDIMessage(integer device, integer status, integer data1, integer data2, optional string msgIn<b>unsupported</b> msgIn)","eel":"int extension_api(\"MCULive_SendMIDIMessage\", int device, int status, int data1, int data2, optional \"msgIn\", <b>unsupported</b> msgIn)","python":"int MCULive_SendMIDIMessage(int device, int status, int data1, int data2, const char* msgInOptional, int* msgInOptional_sz msgInOptional_sz)","cpp":"int MCULive_SendMIDIMessage(int device, int status, int data1, int data2, const char* msgInOptional, int* msgInOptional_sz msgInOptional_sz)"},"title":"MCULive_SendMIDIMessage","chapters":["ReaMCULive"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Sends MIDI message to device. If string is provided, individual bytes are not sent. Returns number of sent bytes.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reamculive"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer device","description":""},{"identifier":"integer button","description":""},{"identifier":"boolean isSet","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MCULive_SetButtonPassthrough","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"device","type":"integer"},{"identifier":"button","type":"integer"},{"identifier":"isSet","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"MCULive_SetButtonPassthrough\""},{"type_name":"int","identifier":"device"},{"type_name":"int","identifier":"button"},{"type_name":"bool","identifier":"isSet"}]}},"requires":{"ReaMCULive":"0.1.5","Reaper":"6.44"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.MCULive_SetButtonPassthrough(integer device, integer button, boolean isSet)","eel":"int extension_api(\"MCULive_SetButtonPassthrough\", int device, int button, bool isSet)","python":"int MCULive_SetButtonPassthrough(int device, int button, bool isSet)","cpp":"int MCULive_SetButtonPassthrough(int device, int button, bool isSet)"},"title":"MCULive_SetButtonPassthrough","chapters":["ReaMCULive"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set button as MIDI passthrough.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reamculive"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer device","description":""},{"identifier":"integer button","description":""},{"identifier":"boolean isSet","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MCULive_SetButtonPressOnly","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"device","type":"integer"},{"identifier":"button","type":"integer"},{"identifier":"isSet","type":"boolean"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"MCULive_SetButtonPressOnly\""},{"type_name":"int","identifier":"device"},{"type_name":"int","identifier":"button"},{"type_name":"bool","identifier":"isSet"}]}},"requires":{"ReaMCULive":"0.1.5","Reaper":"6.44"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.MCULive_SetButtonPressOnly(integer device, integer button, boolean isSet)","eel":"int extension_api(\"MCULive_SetButtonPressOnly\", int device, int button, bool isSet)","python":"int MCULive_SetButtonPressOnly(int device, int button, bool isSet)","cpp":"int MCULive_SetButtonPressOnly(int device, int button, bool isSet)"},"title":"MCULive_SetButtonPressOnly","chapters":["ReaMCULive"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Buttons function as press only by default. Set false for press and release function.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reamculive"],"params":{"markup_type":"plaintext","param_count":3,"entries":[{"identifier":"integer device","description":""},{"identifier":"integer button","description":""},{"identifier":"integer value","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MCULive_SetButtonValue","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"device","type":"integer"},{"identifier":"button","type":"integer"},{"identifier":"value","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"MCULive_SetButtonValue\""},{"type_name":"int","identifier":"device"},{"type_name":"int","identifier":"button"},{"type_name":"int","identifier":"value"}]}},"requires":{"ReaMCULive":"0.1.5","Reaper":"6.44"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.MCULive_SetButtonValue(integer device, integer button, integer value)","eel":"int extension_api(\"MCULive_SetButtonValue\", int device, int button, int value)","python":"int MCULive_SetButtonValue(int device, int button, int value)","cpp":"int MCULive_SetButtonValue(int device, int button, int value)"},"title":"MCULive_SetButtonValue","chapters":["ReaMCULive"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set button led/mode/state. Value 0 = off,1 = blink, 0x7f = on, usually.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reamculive"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer device","description":""},{"identifier":"boolean isSet","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MCULive_SetDefault","return_values":[],"parameters":[{"identifier":"device","type":"integer"},{"identifier":"isSet","type":"boolean"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"MCULive_SetDefault\""},{"type_name":"int","identifier":"device"},{"type_name":"bool","identifier":"isSet"}]}},"requires":{"ReaMCULive":"0.1.5","Reaper":"6.44"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.MCULive_SetDefault(integer device, boolean isSet)","eel":"extension_api(\"MCULive_SetDefault\", int device, bool isSet)","python":"void MCULive_SetDefault(int device, bool isSet)","cpp":"void MCULive_SetDefault(int device, bool isSet)"},"title":"MCULive_SetDefault","chapters":["ReaMCULive"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Enables/disables default out-of-the-box operation.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reamculive"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"integer device","description":""},{"identifier":"integer pos","description":""},{"identifier":"string message","description":""},{"identifier":"integer pad","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MCULive_SetDisplay","return_values":[],"parameters":[{"identifier":"device","type":"integer"},{"identifier":"pos","type":"integer"},{"identifier":"message","type":"string"},{"identifier":"pad","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"MCULive_SetDisplay\""},{"type_name":"int","identifier":"device"},{"type_name":"int","identifier":"pos"},{"identifier":"\"message\""},{"type_name":"int","identifier":"pad"}]}},"requires":{"ReaMCULive":"0.1.5","Reaper":"6.44"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.MCULive_SetDisplay(integer device, integer pos, string message, integer pad)","eel":"extension_api(\"MCULive_SetDisplay\", int device, int pos, \"message\", int pad)","python":"void MCULive_SetDisplay(int device, int pos, const char* message, int pad)","cpp":"void MCULive_SetDisplay(int device, int pos, const char* message, int pad)"},"title":"MCULive_SetDisplay","chapters":["ReaMCULive"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Write to display. 112 characters, 56 per row.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reamculive"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"integer device","description":""},{"identifier":"integer encIdx","description":""},{"identifier":"number val","description":""},{"identifier":"integer type","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MCULive_SetEncoderValue","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"device","type":"integer"},{"identifier":"encIdx","type":"integer"},{"identifier":"val","type":"number"},{"identifier":"type","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"MCULive_SetEncoderValue\""},{"type_name":"int","identifier":"device"},{"type_name":"int","identifier":"encIdx"},{"identifier":"val"},{"type_name":"int","identifier":"type"}]}},"requires":{"ReaMCULive":"0.1.5","Reaper":"6.44"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.MCULive_SetEncoderValue(integer device, integer encIdx, number val, integer type)","eel":"int extension_api(\"MCULive_SetEncoderValue\", int device, int encIdx, val, int type)","python":"int MCULive_SetEncoderValue(int device, int encIdx, double val, int type)","cpp":"int MCULive_SetEncoderValue(int device, int encIdx, double val, int type)"},"title":"MCULive_SetEncoderValue","chapters":["ReaMCULive"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set encoder to value 0 ... 1.0. Type 0 = linear, 1 = track volume, 2 = pan. Returns scaled value.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reamculive"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"integer device","description":""},{"identifier":"integer faderIdx","description":""},{"identifier":"number val","description":""},{"identifier":"integer type","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MCULive_SetFaderValue","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"device","type":"integer"},{"identifier":"faderIdx","type":"integer"},{"identifier":"val","type":"number"},{"identifier":"type","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"MCULive_SetFaderValue\""},{"type_name":"int","identifier":"device"},{"type_name":"int","identifier":"faderIdx"},{"identifier":"val"},{"type_name":"int","identifier":"type"}]}},"requires":{"ReaMCULive":"0.1.5","Reaper":"6.44"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.MCULive_SetFaderValue(integer device, integer faderIdx, number val, integer type)","eel":"int extension_api(\"MCULive_SetFaderValue\", int device, int faderIdx, val, int type)","python":"int MCULive_SetFaderValue(int device, int faderIdx, double val, int type)","cpp":"int MCULive_SetFaderValue(int device, int faderIdx, double val, int type)"},"title":"MCULive_SetFaderValue","chapters":["ReaMCULive"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set fader to value 0 ... 1.0. Type 0 = linear, 1 = track volume, 2 = pan. Returns scaled value.","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reamculive"],"params":{"markup_type":"plaintext","param_count":4,"entries":[{"identifier":"integer device","description":""},{"identifier":"integer meterIdx","description":""},{"identifier":"number val","description":""},{"identifier":"integer type","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MCULive_SetMeterValue","return_values":[{"identifier":"retval","type":"integer"}],"parameters":[{"identifier":"device","type":"integer"},{"identifier":"meterIdx","type":"integer"},{"identifier":"val","type":"number"},{"identifier":"type","type":"integer"}]},"eel":{"method_name":"extension_api","return_values":["int"],"parameters":[{"identifier":"\"MCULive_SetMeterValue\""},{"type_name":"int","identifier":"device"},{"type_name":"int","identifier":"meterIdx"},{"identifier":"val"},{"type_name":"int","identifier":"type"}]}},"requires":{"ReaMCULive":"0.1.5","Reaper":"6.44"},"return_values":{"markup_type":"plaintext","param_count":1,"entries":[{"identifier":"integer retval","description":""}],"prog_lang":"*"},"functioncall":{"lua":"integer retval = reaper.MCULive_SetMeterValue(integer device, integer meterIdx, number val, integer type)","eel":"int extension_api(\"MCULive_SetMeterValue\", int device, int meterIdx, val, int type)","python":"int MCULive_SetMeterValue(int device, int meterIdx, double val, int type)","cpp":"int MCULive_SetMeterValue(int device, int meterIdx, double val, int type)"},"title":"MCULive_SetMeterValue","chapters":["ReaMCULive"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"Set meter value 0 ... 1.0. Type 0 = linear, 1 = track volume (with decay).","language":""},"target_document":"Reaper_Api_Documentation"},{"tags":["reamculive"],"params":{"markup_type":"plaintext","param_count":2,"entries":[{"identifier":"integer option","description":""},{"identifier":"integer value","description":""}],"prog_lang":"*"},"signatures":{"lua":{"method_name":"reaper.MCULive_SetOption","return_values":[],"parameters":[{"identifier":"option","type":"integer"},{"identifier":"value","type":"integer"}]},"eel":{"return_values":["extension_api"],"parameters":[{"identifier":"\"MCULive_SetOption\""},{"type_name":"int","identifier":"option"},{"type_name":"int","identifier":"value"}]}},"requires":{"ReaMCULive":"0.1.5","Reaper":"6.44"},"return_values":{"param_count":0,"entries":[]},"functioncall":{"lua":"reaper.MCULive_SetOption(integer option, integer value)","eel":"extension_api(\"MCULive_SetOption\", int option, int value)","python":"void MCULive_SetOption(int option, int value)","cpp":"void MCULive_SetOption(int option, int value)"},"title":"MCULive_SetOption","chapters":["ReaMCULive"],"source_document":"reaper-apidocs.USDocML","description":{"prog_lang":"","markup_type":"plaintext","description":"1 : surface split point device index \n2 : 'mode-is-global' bitmask/flags, first 6 bits","language":""},"target_document":"Reaper_Api_Documentation"}]