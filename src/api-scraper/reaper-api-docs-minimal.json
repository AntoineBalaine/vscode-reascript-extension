[
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "AddMediaItemToTrack",
    "title": "AddMediaItemToTrack",
    "functioncall": [
      {
        "#text": "MediaItem* item AddMediaItemToTrack(MediaTrack* tr)",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "MediaItem item AddMediaItemToTrack(MediaTrack tr)",
        "@_prog_lang": "eel"
      },
      {
        "#text": "MediaItem item = reaper.AddMediaItemToTrack(MediaTrack tr)",
        "@_prog_lang": "lua"
      },
      {
        "#text": "MediaItem item RPR_AddMediaItemToTrack(MediaTrack tr)",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.62\n            Lua=5.3",
    "description": {
      "#text": "\n            Creates a new media item. It will be empty and therefore not be shown in the arrange-view, until you associate a mediafile(audio, picture, video, etc) or a length and position to it using [SetMediaItemInfo\\_Value](#SetMediaItemInfo_Value)\n        ",
      "@_prog_lang": "*",
      "@_markup_type": "markdown",
      "@_markup_version": "1.0.1"
    },
    "retvals": {
      "#text": "MediaItem item - the newly created MediaItem-object",
      "@_markup_type": "markdown",
      "@_markup_version": "1.0.1"
    },
    "parameters": "MediaTrack tr - tracknumber(zero based), with 0 for track 1, 1 for track 2, etc.",
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "Mediaitem Management",
    "tags": "mediaitemmanagement, mediaitem, item, track, empty",
    "requiresParsed": {
      "reaper": "5.62",
      "lua": "5.3"
    },
    "parametersParsed": [
      {
        "paramName": "tr",
        "type": "MediaTrack",
        "description": "tracknumber(zero based), with 0 for track 1, 1 for track 2, etc."
      }
    ],
    "tagsParsed": [
      "mediaitemmanagement",
      "mediaitem",
      "item",
      "track",
      "empty"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.AddMediaItemToTrack",
        "parameters": [
          {
            "type": "MediaTrack",
            "identifier": "tr"
          }
        ],
        "returnValues": [
          {
            "type": "MediaItem item"
          }
        ]
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "AddProjectMarker",
    "title": "AddProjectMarker",
    "functioncall": [
      {
        "#text": "int AddProjectMarker(ReaProject* proj, bool isrgn, double pos, double rgnend, const char* name, int wantidx)",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "int AddProjectMarker(ReaProject proj, bool isrgn, pos, rgnend, \"name\", int wantidx)",
        "@_prog_lang": "eel"
      },
      {
        "#text": "integer = reaper.AddProjectMarker(ReaProject proj, boolean isrgn, number pos, number rgnend, string name, integer wantidx)",
        "@_prog_lang": "lua"
      },
      {
        "#text": "Int RPR_AddProjectMarker(ReaProject proj, Boolean isrgn, Float pos, Float rgnend, String name, Int wantidx)",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.62\n            Lua=5.3",
    "description": {
      "#text": "\n            Creates a new Projectmarker/Region.\n            Returns the index of the created marker/region, or -1 on failure. Supply wantidx&amp;gt;=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use.\n        ",
      "@_prog_lang": "*",
      "@_markup_type": "markdown",
      "@_markup_version": "1.0.1"
    },
    "retvals": "integer - the shown-number of the newly created marker/region",
    "parameters": "ReaProject proj - the project, in which to add the new marker; use 0 for the current project; can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)\n            boolean isrgn - true, if it shall be a region; false, if a normal marker\n            number pos - the position of the newly created marker/region in seconds\n            number rgnend - if the marker is a region, this is the end of the region in seconds\n            string name - the shown name of the marker\n            integer wantidx - the shown number of the marker/region. Markers can have the same shown marker multiple times. Regions will get another number, if wantidx is already given.",
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "Marker Management",
    "tags": "markermanagement, region, marker, name, shownnumber, pos, project, add",
    "requiresParsed": {
      "reaper": "5.62",
      "lua": "5.3"
    },
    "parametersParsed": [
      {
        "paramName": "proj",
        "type": "ReaProject",
        "description": "the project, in which to add the new marker; use 0 for the current project; can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
      },
      {
        "paramName": "isrgn",
        "type": "boolean",
        "description": "true, if it shall be a region; false, if a normal marker"
      },
      {
        "paramName": "pos",
        "type": "number",
        "description": "the position of the newly created marker/region in seconds"
      },
      {
        "paramName": "rgnend",
        "type": "number",
        "description": "if the marker is a region, this is the end of the region in seconds"
      },
      {
        "paramName": "name",
        "type": "string",
        "description": "the shown name of the marker"
      },
      {
        "paramName": "wantidx",
        "type": "integer",
        "description": "the shown number of the marker/region. Markers can have the same shown marker multiple times. Regions will get another number, if wantidx is already given."
      }
    ],
    "tagsParsed": [
      "markermanagement",
      "region",
      "marker",
      "name",
      "shownnumber",
      "pos",
      "project",
      "add"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.AddProjectMarker",
        "parameters": [
          {
            "type": "ReaProject",
            "identifier": "proj"
          },
          {
            "type": "boolean",
            "identifier": "isrgn"
          },
          {
            "type": "number",
            "identifier": "pos"
          },
          {
            "type": "number",
            "identifier": "rgnend"
          },
          {
            "type": "string",
            "identifier": "name"
          },
          {
            "type": "integer",
            "identifier": "wantidx"
          }
        ],
        "returnValues": [
          {
            "type": "integer"
          }
        ]
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "AddProjectMarker2",
    "title": "AddProjectMarker2",
    "functioncall": [
      {
        "#text": "int AddProjectMarker2(ReaProject* proj, bool isrgn, double pos, double rgnend, const char* name, int wantidx, int color)",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "int AddProjectMarker2(ReaProject proj, bool isrgn, pos, rgnend, \"name\", int wantidx, int color)",
        "@_prog_lang": "eel"
      },
      {
        "#text": "integer = reaper.AddProjectMarker2(ReaProject proj, boolean isrgn, number pos, number rgnend, string name, integer wantidx, integer color)",
        "@_prog_lang": "lua"
      },
      {
        "#text": "Int RPR_AddProjectMarker2(ReaProject proj, Boolean isrgn, Float pos, Float rgnend, String name, Int wantidx, Int color)",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.62\n            Lua=5.3",
    "description": {
      "#text": "\n            Returns the index of the created marker/region, or -1 on failure. Supply wantidx&amp;gt;=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use. color should be 0 (default color), or [ColorToNative(r,g,b)|0x1000000](#ColorToNative)\n        ",
      "@_prog_lang": "*",
      "@_markup_type": "markdown",
      "@_markup_version": "1.0.1"
    },
    "retvals": "integer - the shown-number of the newly created marker/region",
    "parameters": {
      "#text": "ReaProject proj - the project, in which to add the new marker; use 0 for the current project; can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)\n            boolean isrgn - true, if it shall be a region; false, if a normal marker\n            number pos - the position of the newly created marker/region in seconds\n            number rgnend - if the marker is a region, this is the end of the region in seconds\n            string name - the shown name of the marker\n            integer wantidx - the shown number of the marker/region. Markers can have the same shown marker multiple times. Regions will get another number, if wantidx is already given.\n            integer color - the color as returned by the function [ColorToNative(r,g,b)|0x1000000](#ColorToNative)",
      "@_markup_type": "markdown",
      "@_markup_version": "1.0.1"
    },
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "Marker Management",
    "tags": "markermanagement, region, marker, name, shownnumber, pos, project, add",
    "requiresParsed": {
      "reaper": "5.62",
      "lua": "5.3"
    },
    "parametersParsed": [
      {
        "paramName": "proj",
        "type": "ReaProject",
        "description": "the project, in which to add the new marker; use 0 for the current project; can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
      },
      {
        "paramName": "isrgn",
        "type": "boolean",
        "description": "true, if it shall be a region; false, if a normal marker"
      },
      {
        "paramName": "pos",
        "type": "number",
        "description": "the position of the newly created marker/region in seconds"
      },
      {
        "paramName": "rgnend",
        "type": "number",
        "description": "if the marker is a region, this is the end of the region in seconds"
      },
      {
        "paramName": "name",
        "type": "string",
        "description": "the shown name of the marker"
      },
      {
        "paramName": "wantidx",
        "type": "integer",
        "description": "the shown number of the marker/region. Markers can have the same shown marker multiple times. Regions will get another number, if wantidx is already given."
      },
      {
        "paramName": "color",
        "type": "integer",
        "description": "the color as returned by the function [ColorToNative(r,g,b)|0x1000000](#ColorToNative)"
      }
    ],
    "tagsParsed": [
      "markermanagement",
      "region",
      "marker",
      "name",
      "shownnumber",
      "pos",
      "project",
      "add"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.AddProjectMarker2",
        "parameters": [
          {
            "type": "ReaProject",
            "identifier": "proj"
          },
          {
            "type": "boolean",
            "identifier": "isrgn"
          },
          {
            "type": "number",
            "identifier": "pos"
          },
          {
            "type": "number",
            "identifier": "rgnend"
          },
          {
            "type": "string",
            "identifier": "name"
          },
          {
            "type": "integer",
            "identifier": "wantidx"
          },
          {
            "type": "integer",
            "identifier": "color"
          }
        ],
        "returnValues": [
          {
            "type": "integer"
          }
        ]
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "AddRemoveReaScript",
    "title": "AddRemoveReaScript",
    "functioncall": [
      {
        "#text": "int AddRemoveReaScript(bool add, int sectionID, const char* scriptfn, bool commit)",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "int AddRemoveReaScript(bool add, int sectionID, \"scriptfn\", bool commit)",
        "@_prog_lang": "eel"
      },
      {
        "#text": "integer = reaper.AddRemoveReaScript(boolean add, integer sectionID, string scriptfn, boolean commit)",
        "@_prog_lang": "lua"
      },
      {
        "#text": "Int RPR_AddRemoveReaScript(Boolean add, Int sectionID, String scriptfn, Boolean commit)",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.62\n            Lua=5.3",
    "description": {
      "#text": "\n            Adds a ReaScript (returns the new command ID, or 0 if failed) or removes a ReaScript\n            Returns &amp;gt;0 on success. \n            Use commit==true when adding/removing a single script. \n            When bulk adding/removing multiple scripts, you can optimize the n-1 first calls with commit==false and commit==true for the last call.            \n            The commandID returned, might change, when addng this script into an other Reaper-installation. \n            To be sure to use the right command-id, use [ReverseNamedCommandLookup()](#ReverseNamedCommandLookup) to get the ActionCommandID, which will never change, until you remove the script.\n            \n            If you want to add a script to several sections, you need to add them individually, by calling the function again with the changed section-number.\n        ",
      "@_prog_lang": "*",
      "@_markup_type": "markdown",
      "@_markup_version": "1.0.1"
    },
    "retvals": "integer - the command ID for this script.",
    "parameters": "boolean add - true, if it shall be added, false if it shall be removed\n            integer sectionID - the section, in which this script shall appear(e.g. in the Show Actions-Dialog)\n            -   0, Main\n            -   100, Main (alt recording) Note: If you already added to main(section 0), this function automatically adds the script to Main(alt) as well.\n            -   32060, MIDI Editor\n            -   32061, MIDI Event List Editor\n            -   32062, MIDI Inline Editor\n            -   32063, Media Explorer\n            string scriptfn - the filename of the Reascript to be added\n            boolean commit - true, if it shall be committed, false, if you want to add new scripts first. \n                - Committing means, that Reaper stores the Reascript-information into the reaper-kb.ini for permanent use. \n                - It will be committed at Reaper's exit as well, but if Reaper crashes before exiting properly, your added\n                - script might get lost. When adding many Reascripts to Reaper, setting commit to false might help prevail \n                - ressources, as you don't rewrite the reaper-kb.ini file over and over again. However, if you only add a \n                - few scripts, this might not be of importance to you.",
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "Api-Helper-Functions",
    "tags": "helperfunctions, reascript, lua, python, eel, add, remove, commandid",
    "requiresParsed": {
      "reaper": "5.62",
      "lua": "5.3"
    },
    "parametersParsed": [
      {
        "paramName": "add",
        "type": "boolean",
        "description": "true, if it shall be added, false if it shall be removed"
      },
      {
        "paramName": "sectionID",
        "type": "integer",
        "description": "the section, in which this script shall appear(e.g. in the Show Actions-Dialog)\n\t-   0, Main\n\t-   100, Main (alt recording) Note: If you already added to main(section 0), this function automatically adds the script to Main(alt) as well.\n\t-   32060, MIDI Editor\n\t-   32061, MIDI Event List Editor\n\t-   32062, MIDI Inline Editor\n\t-   32063, Media Explorer"
      },
      {
        "paramName": "scriptfn",
        "type": "string",
        "description": "the filename of the Reascript to be added"
      },
      {
        "paramName": "commit",
        "type": "boolean",
        "description": "true, if it shall be committed, false, if you want to add new scripts first.\n\t- Committing means, that Reaper stores the Reascript-information into the reaper-kb.ini for permanent use.\n\t- It will be committed at Reaper's exit as well, but if Reaper crashes before exiting properly, your added\n\t- script might get lost. When adding many Reascripts to Reaper, setting commit to false might help prevail\n\t- ressources, as you don't rewrite the reaper-kb.ini file over and over again. However, if you only add a\n\t- few scripts, this might not be of importance to you."
      }
    ],
    "tagsParsed": [
      "helperfunctions",
      "reascript",
      "lua",
      "python",
      "eel",
      "add",
      "remove",
      "commandid"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.AddRemoveReaScript",
        "parameters": [
          {
            "type": "boolean",
            "identifier": "add"
          },
          {
            "type": "integer",
            "identifier": "sectionID"
          },
          {
            "type": "string",
            "identifier": "scriptfn"
          },
          {
            "type": "boolean",
            "identifier": "commit"
          }
        ],
        "returnValues": [
          {
            "type": "integer"
          }
        ]
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "AddTakeToMediaItem",
    "title": "AddTakeToMediaItem",
    "functioncall": [
      {
        "#text": "MediaItem_Take* AddTakeToMediaItem(MediaItem* item)",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "MediaItem_Take AddTakeToMediaItem(MediaItem item)",
        "@_prog_lang": "eel"
      },
      {
        "#text": "MediaItem_Take = reaper.AddTakeToMediaItem(MediaItem item)",
        "@_prog_lang": "lua"
      },
      {
        "#text": "MediaItem_Take RPR_AddTakeToMediaItem(MediaItem item)",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.62\n            Lua=5.3",
    "description": {
      "#text": "\n            creates a new take in an item\n        ",
      "@_prog_lang": "*"
    },
    "retvals": "MediaItem_Take - the newly created MediaItem_Take-object",
    "parameters": "MediaItem item - a MediaItem-object, in which you want to add the new take",
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "Mediaitem Management",
    "tags": "mediaitemmanagement, mediaitem, item, track, empty, take",
    "requiresParsed": {
      "reaper": "5.62",
      "lua": "5.3"
    },
    "parametersParsed": [
      {
        "paramName": "item",
        "type": "MediaItem",
        "description": "a MediaItem-object, in which you want to add the new take"
      }
    ],
    "tagsParsed": [
      "mediaitemmanagement",
      "mediaitem",
      "item",
      "track",
      "empty",
      "take"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.AddTakeToMediaItem",
        "parameters": [
          {
            "type": "MediaItem",
            "identifier": "item"
          }
        ],
        "returnValues": [
          {
            "type": "MediaItem_Take"
          }
        ]
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "AddTempoTimeSigMarker",
    "title": "AddTempoTimeSigMarker",
    "functioncall": [
      {
        "#text": "bool AddTempoTimeSigMarker(ReaProject* proj, double timepos, double bpm, int timesig_num, int timesig_denom, bool lineartempochange)",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "bool AddTempoTimeSigMarker(ReaProject proj, timepos, bpm, int timesig_num, int timesig_denom, bool lineartempochange)",
        "@_prog_lang": "eel"
      },
      {
        "#text": "boolean = reaper.AddTempoTimeSigMarker(ReaProject proj, number timepos, number bpm, integer timesig_num, integer timesig_denom, boolean lineartempochange)",
        "@_prog_lang": "lua"
      },
      {
        "#text": "Boolean RPR_AddTempoTimeSigMarker(ReaProject proj, Float timepos, Float bpm, Int timesig_num, Int timesig_denom, Boolean lineartempochange)",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.62\n            Lua=5.3",
    "description": {
      "#text": "\n            Deprecated. Use [SetTempoTimeSigMarker](#SetTempoTimeSigMarker) with ptidx=-1.\n        ",
      "@_prog_lang": "*",
      "@_markup_type": "markdown",
      "@_markup_version": "1.0.1"
    },
    "retvals": "boolean - true, if adding was successful; false, if not",
    "parameters": {
      "#text": "ReaProject proj - the project in which to add the TempoTimesigMarker, 0 for the current project; can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)\n            number timepos - the position in seconds\n            number bpm - the speed in bpm\n            integer timesig_num - timesignature number : timesig\\_num/timesig\\_denom, e.g. 3/4\n            integer timesig_denom - timesignature denominator : timesig\\_num/timesig\\_denom, e.g. 3/4\n            boolean lineartempochange - true, linear tempo change, false not",
      "@_markup_type": "markdown",
      "@_markup_version": "1.0.1"
    },
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "Marker Management",
    "tags": "markermanagement, timesignature, tempo, marker, add",
    "requiresParsed": {
      "reaper": "5.62",
      "lua": "5.3"
    },
    "parametersParsed": [
      {
        "paramName": "proj",
        "type": "ReaProject",
        "description": "the project in which to add the TempoTimesigMarker, 0 for the current project; can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
      },
      {
        "paramName": "timepos",
        "type": "number",
        "description": "the position in seconds"
      },
      {
        "paramName": "bpm",
        "type": "number",
        "description": "the speed in bpm"
      },
      {
        "paramName": "timesig_num",
        "type": "integer",
        "description": "timesignature number : timesig\\_num/timesig\\_denom, e.g. 3/4"
      },
      {
        "paramName": "timesig_denom",
        "type": "integer",
        "description": "timesignature denominator : timesig\\_num/timesig\\_denom, e.g. 3/4"
      },
      {
        "paramName": "lineartempochange",
        "type": "boolean",
        "description": "true, linear tempo change, false not"
      }
    ],
    "tagsParsed": [
      "markermanagement",
      "timesignature",
      "tempo",
      "marker",
      "add"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.AddTempoTimeSigMarker",
        "parameters": [
          {
            "type": "ReaProject",
            "identifier": "proj"
          },
          {
            "type": "number",
            "identifier": "timepos"
          },
          {
            "type": "number",
            "identifier": "bpm"
          },
          {
            "type": "integer",
            "identifier": "timesig_num"
          },
          {
            "type": "integer",
            "identifier": "timesig_denom"
          },
          {
            "type": "boolean",
            "identifier": "lineartempochange"
          }
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "adjustZoom",
    "title": "adjustZoom",
    "functioncall": [
      {
        "#text": "void adjustZoom(double amt, int forceset, bool doupd, int centermode)",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "adjustZoom(amt, int forceset, bool doupd, int centermode)",
        "@_prog_lang": "eel"
      },
      {
        "#text": "reaper.adjustZoom(number amt, integer forceset, boolean doupd, integer centermode)",
        "@_prog_lang": "lua"
      },
      {
        "#text": "RPR_adjustZoom(Float amt, Int forceset, Boolean doupd, Int centermode)",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.62\n            Lua=5.3",
    "description": {
      "#text": "\n            Sets horizontal zoom in track view.\n        ",
      "@_prog_lang": "*"
    },
    "parameters": "number amt - the zoom factor, positive values=zoom in, negative values=zoom out, 0=no zoom\n        integer forceset - forces one amt-zoomfactor(non zero) or allows repeatable zoom-in/zoomout(0)\n        boolean doupd - true, updates the track-view instantly; false, or only when mouse hovers over trackview\n        integer centermode - decides, what shall be in the center of the view. The following are available:\n            -  -1, default selection, as set in the reaper-prefs, \n            -   0, edit-cursor or playcursor(if it's in the current zoomfactor of the view during playback/recording) in center,\n            -   1, keeps edit-cursor in center of zoom\n            -   2, keeps center of view in the center during zoom\n            -   3, keeps in center of zoom, what is beneath the mousecursor",
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "Arrangeview Management",
    "tags": "arrangeviewmanagement, view, zoom, center",
    "requiresParsed": {
      "reaper": "5.62",
      "lua": "5.3"
    },
    "parametersParsed": [
      {
        "paramName": "amt",
        "type": "number",
        "description": "the zoom factor, positive values=zoom in, negative values=zoom out, 0=no zoom"
      },
      {
        "paramName": "forceset",
        "type": "integer",
        "description": "forces one amt-zoomfactor(non zero) or allows repeatable zoom-in/zoomout(0)"
      },
      {
        "paramName": "doupd",
        "type": "boolean",
        "description": "true, updates the track-view instantly; false, or only when mouse hovers over trackview"
      },
      {
        "paramName": "centermode",
        "type": "integer",
        "description": "decides, what shall be in the center of the view. The following are available:\n\t-  -1, default selection, as set in the reaper-prefs,\n\t-   0, edit-cursor or playcursor(if it's in the current zoomfactor of the view during playback/recording) in center,\n\t-   1, keeps edit-cursor in center of zoom\n\t-   2, keeps center of view in the center during zoom\n\t-   3, keeps in center of zoom, what is beneath the mousecursor"
      }
    ],
    "tagsParsed": [
      "arrangeviewmanagement",
      "view",
      "zoom",
      "center"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.adjustZoom",
        "parameters": [
          {
            "type": "number",
            "identifier": "amt"
          },
          {
            "type": "integer",
            "identifier": "forceset"
          },
          {
            "type": "boolean",
            "identifier": "doupd"
          },
          {
            "type": "integer",
            "identifier": "centermode"
          }
        ],
        "returnValues": []
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "AnyTrackSolo",
    "title": "AnyTrackSolo",
    "functioncall": [
      {
        "#text": "bool AnyTrackSolo(ReaProject* proj)",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "bool AnyTrackSolo(ReaProject proj)",
        "@_prog_lang": "eel"
      },
      {
        "#text": "boolean = reaper.AnyTrackSolo(ReaProject proj)",
        "@_prog_lang": "lua"
      },
      {
        "#text": "Boolean RPR_AnyTrackSolo(ReaProject proj)",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.62\n            Lua=5.3",
    "description": {
      "#text": "\n            returns, whether any of the tracks is solo in Project proj\n        ",
      "@_prog_lang": "*"
    },
    "retvals": "boolean - true if any track is solo; false if not. Covers all solo-states(solo in place, ignore routing, exclusive solo, solo defeat).",
    "parameters": {
      "#text": "ReaProject proj - the project to be checked for. 0 for current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)",
      "@_markup_type": "markdown",
      "@_markup_version": "1.0.1"
    },
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "Track Management",
    "tags": "trackmanagement, states, solo",
    "requiresParsed": {
      "reaper": "5.62",
      "lua": "5.3"
    },
    "parametersParsed": [
      {
        "paramName": "proj",
        "type": "ReaProject",
        "description": "the project to be checked for. 0 for current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
      }
    ],
    "tagsParsed": [
      "trackmanagement",
      "states",
      "solo"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.AnyTrackSolo",
        "parameters": [
          {
            "type": "ReaProject",
            "identifier": "proj"
          }
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "APIExists",
    "title": "APIExists",
    "functioncall": [
      {
        "#text": "bool APIExists(const char* function_name)",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "bool APIExists(function_name\")",
        "@_prog_lang": "eel"
      },
      {
        "#text": "boolean = reaper.APIExists(string function_name)",
        "@_prog_lang": "lua"
      },
      {
        "#text": "Boolean RPR_APIExists(String function_name)",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.62\n            Lua=5.3",
    "description": {
      "#text": "\n            Returns true if function_name exists in the REAPER API\n        ",
      "@_prog_lang": "*"
    },
    "retvals": "boolean - true, if function_name exists, false if not",
    "parameters": "string function_name - the name of the function you want to check the existence for",
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "Api-Helper-Functions",
    "tags": "api, exists, check, helper",
    "requiresParsed": {
      "reaper": "5.62",
      "lua": "5.3"
    },
    "parametersParsed": [
      {
        "paramName": "function_name",
        "type": "string",
        "description": "the name of the function you want to check the existence for"
      }
    ],
    "tagsParsed": [
      "api",
      "exists",
      "check",
      "helper"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.APIExists",
        "parameters": [
          {
            "type": "string",
            "identifier": "function_name"
          }
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "APITest",
    "title": "APITest",
    "functioncall": [
      {
        "#text": "void APITest()",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "APITest()",
        "@_prog_lang": "eel"
      },
      {
        "#text": "reaper.APITest()",
        "@_prog_lang": "lua"
      },
      {
        "#text": "RPR_APITest()",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.62\n            Lua=5.3",
    "description": {
      "#text": "\n            Displays a message window with \"Hello World\", if the API was successfully called.\n        ",
      "@_prog_lang": "*"
    },
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "Api-Helper-Functions",
    "tags": "api, test, check, hello world",
    "requiresParsed": {
      "reaper": "5.62",
      "lua": "5.3"
    },
    "parametersParsed": [],
    "tagsParsed": [
      "api",
      "test",
      "check",
      "hello world"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.APITest",
        "parameters": [],
        "returnValues": []
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "ApplyNudge",
    "title": "ApplyNudge",
    "functioncall": [
      {
        "#text": "bool ApplyNudge(ReaProject* project, int nudgeflag, int nudgewhat, int nudgeunits, double value, bool reverse, int copies)",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "bool ApplyNudge(ReaProject project, int nudgeflag, int nudgewhat, int nudgeunits, value, bool reverse, int copies)",
        "@_prog_lang": "eel"
      },
      {
        "#text": "boolean = reaper.ApplyNudge(ReaProject project, integer nudgeflag, integer nudgewhat, integer nudgeunits, number value, boolean reverse, integer copies)",
        "@_prog_lang": "lua"
      },
      {
        "#text": "Boolean RPR_ApplyNudge(ReaProject project, Int nudgeflag, Int nudgewhat, Int nudgeunits, Float value, Boolean reverse, Int copies)",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.62\n            Lua=5.3",
    "description": {
      "#text": "\n            Nudges elements like items, cursor, contents, etc to or by a value you want. Nudges only selected mediaitems.\n        ",
      "@_prog_lang": "*"
    },
    "retvals": "boolean - true, if it worked; false, if it didn't",
    "parameters": "ReaProject project - the project, in which to nudge; 0 for the current project\n            integer nudgeflag - the way to nudge\n                - &amp;1, set to value(otherwise nudge by values)\n                - &amp;2, snap\n            integer nudgewhat - what to nudge\n                - 0, position\n                - 1, left trim\n                - 2, left edge\n                - 3, right edge\n                - 4, contents\n                - 5, duplicate\n                - 6, editcursor\n            integer nudgeunits - the unit, in which to nudge\n                - 0, ms\n                - 1, seconds\n                - 2, grid\n                - 3, 256th notes\n                - ...\n                - 15, whole notes\n                - 16, measures.beats (1.15 = 1 measure + 1.5 beats)\n                - 17, samples\n                - 18, frames\n                - 19, pixels \n                - 20, item lengths\n                - 21, item selections\n            number value - amount to nudge by, or value to set to(depending on the settings in nudgeflag and the unit in nudgeunits)\n            boolean reverse - in nudge mode: true nudges left; right doesn't nudge to left\n            integer copies - in nudge duplicate mode, number of copies (otherwise ignored)",
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "Mediaitem Management",
    "tags": "arrangeviewmanagement, nudge, snap, value, units, trim, position, content, duplicate, editcursor, ms, grid, pixels, frames, samples, measures, beats, length, selection",
    "requiresParsed": {
      "reaper": "5.62",
      "lua": "5.3"
    },
    "parametersParsed": [
      {
        "paramName": "project",
        "type": "ReaProject",
        "description": "the project, in which to nudge; 0 for the current project"
      },
      {
        "paramName": "nudgeflag",
        "type": "integer",
        "description": "the way to nudge\n\t- &amp;1, set to value(otherwise nudge by values)\n\t- &amp;2, snap"
      },
      {
        "paramName": "nudgewhat",
        "type": "integer",
        "description": "what to nudge\n\t- 0, position\n\t- 1, left trim\n\t- 2, left edge\n\t- 3, right edge\n\t- 4, contents\n\t- 5, duplicate\n\t- 6, editcursor"
      },
      {
        "paramName": "nudgeunits",
        "type": "integer",
        "description": "the unit, in which to nudge\n\t- 0, ms\n\t- 1, seconds\n\t- 2, grid\n\t- 3, 256th notes\n\t- ...\n\t- 15, whole notes\n\t- 16, measures.beats (1.15 = 1 measure + 1.5 beats)\n\t- 17, samples\n\t- 18, frames\n\t- 19, pixels\n\t- 20, item lengths\n\t- 21, item selections"
      },
      {
        "paramName": "value",
        "type": "number",
        "description": "amount to nudge by, or value to set to(depending on the settings in nudgeflag and the unit in nudgeunits)"
      },
      {
        "paramName": "reverse",
        "type": "boolean",
        "description": "in nudge mode: true nudges left; right doesn't nudge to left"
      },
      {
        "paramName": "copies",
        "type": "integer",
        "description": "in nudge duplicate mode, number of copies (otherwise ignored)"
      }
    ],
    "tagsParsed": [
      "arrangeviewmanagement",
      "nudge",
      "snap",
      "value",
      "units",
      "trim",
      "position",
      "content",
      "duplicate",
      "editcursor",
      "ms",
      "grid",
      "pixels",
      "frames",
      "samples",
      "measures",
      "beats",
      "length",
      "selection"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.ApplyNudge",
        "parameters": [
          {
            "type": "ReaProject",
            "identifier": "project"
          },
          {
            "type": "integer",
            "identifier": "nudgeflag"
          },
          {
            "type": "integer",
            "identifier": "nudgewhat"
          },
          {
            "type": "integer",
            "identifier": "nudgeunits"
          },
          {
            "type": "number",
            "identifier": "value"
          },
          {
            "type": "boolean",
            "identifier": "reverse"
          },
          {
            "type": "integer",
            "identifier": "copies"
          }
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "Audio_Init",
    "title": "Audio_Init",
    "functioncall": [
      {
        "#text": "void Audio_Init()",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "Audio_Init()",
        "@_prog_lang": "eel"
      },
      {
        "#text": "reaper.Audio_Init()",
        "@_prog_lang": "lua"
      },
      {
        "#text": "RPR_Audio_Init()",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.62\n            Lua=5.3",
    "description": {
      "#text": "\n            open all audio and MIDI devices, if not open\n        ",
      "@_prog_lang": "*"
    },
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "AudioMidi Devicemanagement",
    "tags": "audio, midi, audiomanagement, open, devices",
    "requiresParsed": {
      "reaper": "5.62",
      "lua": "5.3"
    },
    "parametersParsed": [],
    "tagsParsed": [
      "audio",
      "midi",
      "audiomanagement",
      "open",
      "devices"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.Audio_Init",
        "parameters": [],
        "returnValues": []
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "Audio_IsPreBuffer",
    "title": "Audio_IsPreBuffer",
    "functioncall": [
      {
        "#text": "int Audio_IsPreBuffer()",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "int Audio_IsPreBuffer()",
        "@_prog_lang": "eel"
      },
      {
        "#text": "integer = reaper.Audio_IsPreBuffer()",
        "@_prog_lang": "lua"
      },
      {
        "#text": "Int RPR_Audio_IsPreBuffer()",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.62\n            Lua=5.3",
    "description": {
      "#text": "\n            is in pre-buffer? threadsafe\n        ",
      "@_prog_lang": "*"
    },
    "retvals": "integer -",
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "AudioMidi Devicemanagement",
    "tags": "",
    "requiresParsed": {
      "reaper": "5.62",
      "lua": "5.3"
    },
    "parametersParsed": [],
    "tagsParsed": [
      ""
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.Audio_IsPreBuffer",
        "parameters": [],
        "returnValues": [
          {
            "type": "integer"
          }
        ]
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "Audio_IsRunning",
    "title": "Audio_IsRunning",
    "functioncall": [
      {
        "#text": "int Audio_IsRunning()",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "int Audio_IsRunning()",
        "@_prog_lang": "eel"
      },
      {
        "#text": "integer = reaper.Audio_IsRunning()",
        "@_prog_lang": "lua"
      },
      {
        "#text": "Int RPR_Audio_IsRunning()",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.62\n            Lua=5.3",
    "description": {
      "#text": "\n            is audio running at all? threadsafe\n        ",
      "@_prog_lang": "*"
    },
    "retvals": "integer - 0, audio is not running; 1, audio is running",
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "AudioMidi Devicemanagement",
    "tags": "audio, midi, audiomanagement, running, devices",
    "requiresParsed": {
      "reaper": "5.62",
      "lua": "5.3"
    },
    "parametersParsed": [],
    "tagsParsed": [
      "audio",
      "midi",
      "audiomanagement",
      "running",
      "devices"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.Audio_IsRunning",
        "parameters": [],
        "returnValues": [
          {
            "type": "integer"
          }
        ]
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "Audio_Quit",
    "title": "Audio_Quit",
    "functioncall": [
      {
        "#text": "void Audio_Quit()",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "Audio_Quit()",
        "@_prog_lang": "eel"
      },
      {
        "#text": "reaper.Audio_Quit()",
        "@_prog_lang": "lua"
      },
      {
        "#text": "RPR_Audio_Quit()",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.62\n            Lua=5.3",
    "description": {
      "#text": "\n            close all audio and MIDI devices, if open\n        ",
      "@_prog_lang": "*"
    },
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "AudioMidi Devicemanagement",
    "tags": "audio, midi, audiomanagement, quit, devices",
    "requiresParsed": {
      "reaper": "5.62",
      "lua": "5.3"
    },
    "parametersParsed": [],
    "tagsParsed": [
      "audio",
      "midi",
      "audiomanagement",
      "quit",
      "devices"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.Audio_Quit",
        "parameters": [],
        "returnValues": []
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "AudioAccessorStateChanged",
    "title": "AudioAccessorStateChanged",
    "functioncall": [
      {
        "#text": "bool AudioAccessorStateChanged(AudioAccessor* accessor)",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "bool AudioAccessorStateChanged(AudioAccessor accessor)",
        "@_prog_lang": "eel"
      },
      {
        "#text": "boolean reaper.AudioAccessorStateChanged(AudioAccessor accessor)",
        "@_prog_lang": "lua"
      },
      {
        "#text": "Boolean RPR_AudioAccessorStateChanged(AudioAccessor accessor)",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.97\n            Lua=5.3",
    "description": {
      "#text": "\n            Returns true if the underlying samples (track or media item take) have changed, but does not update the audio accessor, so the user can selectively call [AudioAccessorValidateState](#AudioAccessorValidateState) only when needed. \n            \n            See [CreateTakeAudioAccessor](#CreateTakeAudioAccessor), [CreateTrackAudioAccessor](#CreateTrackAudioAccessor), [DestroyAudioAccessor](#DestroyAudioAccessor), [GetAudioAccessorEndTime](#GetAudioAccessorEndTime), [GetAudioAccessorSamples](#GetAudioAccessorSamples).\n        ",
      "@_markup_type": "markdown",
      "@_markup_version": "1.0.1"
    },
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "AudioMidi Devicemanagement",
    "tags": "audio, accessor, get, statechange",
    "requiresParsed": {
      "reaper": "5.97",
      "lua": "5.3"
    },
    "parametersParsed": [],
    "tagsParsed": [
      "audio",
      "accessor",
      "get",
      "statechange"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.AudioAccessorStateChanged",
        "parameters": [
          {
            "type": "boolean",
            "identifier": "reaper"
          },
          {
            "type": "AudioAccessor",
            "identifier": "accessor"
          }
        ],
        "returnValues": []
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "AudioAccessorUpdate",
    "title": "AudioAccessorUpdate",
    "functioncall": [
      {
        "#text": "void AudioAccessorUpdate(AudioAccessor* accessor)",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "AudioAccessorUpdate(AudioAccessor accessor)",
        "@_prog_lang": "eel"
      },
      {
        "#text": "reaper.AudioAccessorUpdate(AudioAccessor accessor)",
        "@_prog_lang": "lua"
      },
      {
        "#text": "RPR_AudioAccessorUpdate(AudioAccessor accessor)",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.97\n            Lua=5.3",
    "description": {
      "#text": "\n            Force the accessor to reload its state from the underlying track or media item take. \n            \n            See [CreateTakeAudioAccessor](#CreateTakeAudioAccessor), [CreateTrackAudioAccessor](#CreateTrackAudioAccessor), [DestroyAudioAccessor](#DestroyAudioAccessor), [AudioAccessorStateChanged](#AudioAccessorStateChanged), [GetAudioAccessorStartTime](#GetAudioAccessorStartTime), [GetAudioAccessorEndTime](#GetAudioAccessorEndTime), [GetAudioAccessorSamples](#GetAudioAccessorSamples).\n        ",
      "@_markup_type": "markdown",
      "@_markup_version": "1.0.1"
    },
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "AudioMidi Devicemanagement",
    "tags": "audio, accessor, update, mediatrack, mediaitemtake",
    "requiresParsed": {
      "reaper": "5.97",
      "lua": "5.3"
    },
    "parametersParsed": [],
    "tagsParsed": [
      "audio",
      "accessor",
      "update",
      "mediatrack",
      "mediaitemtake"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.AudioAccessorUpdate",
        "parameters": [
          {
            "type": "AudioAccessor",
            "identifier": "accessor"
          }
        ],
        "returnValues": []
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "AudioAccessorValidateState",
    "title": "AudioAccessorValidateState",
    "functioncall": [
      {
        "#text": "bool AudioAccessorValidateState(AudioAccessor* accessor)",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "bool AudioAccessorValidateState(AudioAccessor accessor)",
        "@_prog_lang": "eel"
      },
      {
        "#text": "boolean = reaper.AudioAccessorValidateState(AudioAccessor accessor)",
        "@_prog_lang": "lua"
      },
      {
        "#text": "Boolean RPR_AudioAccessorValidateState(AudioAccessor accessor)",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.62\n            Lua=5.3",
    "description": {
      "#text": "\n            Validates the current state of the audio accessor -- must ONLY call this from the main thread. Returns true if the state changed.\n        ",
      "@_prog_lang": "*"
    },
    "retvals": "boolean - true, if state has changed; false, if state hasn't changed",
    "parameters": "AudioAccessor accessor - the AudioAccessor for a MediaTrack or a MediaItem_take",
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "Audio Management",
    "tags": "audiomanagement, validate, audio, accessor, item, take",
    "requiresParsed": {
      "reaper": "5.62",
      "lua": "5.3"
    },
    "parametersParsed": [
      {
        "paramName": "accessor",
        "type": "AudioAccessor",
        "description": "the AudioAccessor for a MediaTrack or a MediaItem_take"
      }
    ],
    "tagsParsed": [
      "audiomanagement",
      "validate",
      "audio",
      "accessor",
      "item",
      "take"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.AudioAccessorValidateState",
        "parameters": [
          {
            "type": "AudioAccessor",
            "identifier": "accessor"
          }
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "BypassFxAllTracks",
    "title": "BypassFxAllTracks",
    "functioncall": [
      {
        "#text": "void BypassFxAllTracks(int bypass)",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "BypassFxAllTracks(int bypass)",
        "@_prog_lang": "eel"
      },
      {
        "#text": "reaper.BypassFxAllTracks(integer bypass)",
        "@_prog_lang": "lua"
      },
      {
        "#text": "RPR_BypassFxAllTracks(Int bypass)",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.62\n            Lua=5.3",
    "description": {
      "#text": "\n            Does bypassing of the fx of all tracks.\n        ",
      "@_prog_lang": "*"
    },
    "parameters": "integer bypass - -1, bypass all if not all bypassed,otherwise unbypass all",
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "Track Management",
    "tags": "trackmanagement, track, bypass, fx",
    "requiresParsed": {
      "reaper": "5.62",
      "lua": "5.3"
    },
    "parametersParsed": [
      {
        "paramName": "bypass",
        "type": "integer",
        "description": "-1, bypass all if not all bypassed,otherwise unbypass all"
      }
    ],
    "tagsParsed": [
      "trackmanagement",
      "track",
      "bypass",
      "fx"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.BypassFxAllTracks",
        "parameters": [
          {
            "type": "integer",
            "identifier": "bypass"
          }
        ],
        "returnValues": []
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "ClearAllRecArmed",
    "title": "ClearAllRecArmed",
    "functioncall": [
      {
        "#text": "void ClearAllRecArmed()",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "ClearAllRecArmed()",
        "@_prog_lang": "eel"
      },
      {
        "#text": "reaper.ClearAllRecArmed()",
        "@_prog_lang": "lua"
      },
      {
        "#text": "RPR_ClearAllRecArmed()",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.62\n            Lua=5.3",
    "description": {
      "#text": "\n            Clears all armed states of all tracks.\n        ",
      "@_prog_lang": "*"
    },
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "Track Management",
    "tags": "trackmanagement, rec, arm, state, clear, off",
    "requiresParsed": {
      "reaper": "5.62",
      "lua": "5.3"
    },
    "parametersParsed": [],
    "tagsParsed": [
      "trackmanagement",
      "rec",
      "arm",
      "state",
      "clear",
      "off"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.ClearAllRecArmed",
        "parameters": [],
        "returnValues": []
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "ClearConsole",
    "title": "ClearConsole",
    "functioncall": [
      {
        "#text": "void ClearConsole()",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "ClearConsole()",
        "@_prog_lang": "eel"
      },
      {
        "#text": "reaper.ClearConsole()",
        "@_prog_lang": "lua"
      },
      {
        "#text": "RPR_ClearConsole()",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.62\n            Lua=5.3",
    "description": {
      "#text": "\n            Clear the ReaScript console. See [ShowConsoleMsg](#ShowConsoleMsg)\n        ",
      "@_prog_lang": "*",
      "@_markup_type": "markdown",
      "@_markup_version": "1.0.1"
    },
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "Api-Helper-Functions",
    "tags": "helperfunctions, console, clear, reaconsole",
    "requiresParsed": {
      "reaper": "5.62",
      "lua": "5.3"
    },
    "parametersParsed": [],
    "tagsParsed": [
      "helperfunctions",
      "console",
      "clear",
      "reaconsole"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.ClearConsole",
        "parameters": [],
        "returnValues": []
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "ClearPeakCache",
    "title": "ClearPeakCache",
    "functioncall": [
      {
        "#text": "void ClearPeakCache()",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "ClearPeakCache()",
        "@_prog_lang": "eel"
      },
      {
        "#text": "reaper.ClearPeakCache()",
        "@_prog_lang": "lua"
      },
      {
        "#text": "RPR_ClearPeakCache()",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.62\n            Lua=5.3",
    "description": {
      "#text": "\n            resets the global peak caches\n        ",
      "@_prog_lang": "*"
    },
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "Api-Helper-Functions",
    "tags": "helperfunctions, peak, cache, clear",
    "requiresParsed": {
      "reaper": "5.62",
      "lua": "5.3"
    },
    "parametersParsed": [],
    "tagsParsed": [
      "helperfunctions",
      "peak",
      "cache",
      "clear"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.ClearPeakCache",
        "parameters": [],
        "returnValues": []
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "ColorFromNative",
    "title": "ColorFromNative",
    "functioncall": [
      {
        "#text": "void ColorFromNative(int col, int* rOut, int* gOut, int* bOut)",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "ColorFromNative(int col, int &amp;amp;r, int &amp;amp;g, int &amp;amp;b)",
        "@_prog_lang": "eel"
      },
      {
        "#text": "integer r, integer g, integer b = reaper.ColorFromNative(integer col)",
        "@_prog_lang": "lua"
      },
      {
        "#text": "(Int col, Int rOut, Int gOut, Int bOut) = RPR_ColorFromNative(col, rOut, gOut, bOut)",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.62\n            Lua=5.3",
    "description": {
      "#text": "\n            Extract RGB values from an OS dependent color. See [ColorToNative](#ColorToNative).\n            \n            As Reaper treats colors differently on Mac and Windows, you should always use [ColorFromNative](#ColorFromNative) and [ColorToNative](#ColorToNative).\n        ",
      "@_prog_lang": "*",
      "@_markup_type": "markdown",
      "@_markup_version": "1.0.1"
    },
    "retvals": "integer r - the value for red, from 0 to 255\n            integer g - the value for green, from 0 to 255\n            integer b - the value for blue, from 0 to 255",
    "parameters": "integer col - the colorvalue to convert from",
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "Api-Helper-Functions",
    "tags": "colormanagement, native, from, conversion",
    "requiresParsed": {
      "reaper": "5.62",
      "lua": "5.3"
    },
    "parametersParsed": [
      {
        "paramName": "col",
        "type": "integer",
        "description": "the colorvalue to convert from"
      }
    ],
    "tagsParsed": [
      "colormanagement",
      "native",
      "from",
      "conversion"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.ColorFromNative",
        "parameters": [
          {
            "type": "integer",
            "identifier": "col"
          }
        ],
        "returnValues": [
          {
            "type": "integer",
            "identifier": "r"
          },
          {
            "type": "integer",
            "identifier": "g"
          },
          {
            "type": "integer",
            "identifier": "b"
          }
        ]
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "ColorToNative",
    "title": "ColorToNative",
    "functioncall": [
      {
        "#text": "int ColorToNative(int r, int g, int b)",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "int ColorToNative(int r, int g, int b)",
        "@_prog_lang": "eel"
      },
      {
        "#text": "integer = reaper.ColorToNative(integer r, integer g, integer b)",
        "@_prog_lang": "lua"
      },
      {
        "#text": "Int RPR_ColorToNative(Int r, Int g, Int b)",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.62\n            Lua=5.3",
    "description": {
      "#text": "\n            Make an OS dependent color from RGB values (e.g. RGB() macro on Windows). r,g and b are in [0..255]. See [ColorFromNative](#ColorFromNative)\n            As Reaper treats colors differently on Mac and Windows, you should always use [ColorFromNative](#ColorFromNative) and [ColorToNative](ColorToNative).\n            \n            When using the returned colorvalue, you need to add |0x1000000 at the end of it, like ColorToNative(20,30,40)|0x1000000.\n        ",
      "@_prog_lang": "*",
      "@_markup_type": "markdown",
      "@_markup_version": "1.0.1"
    },
    "retvals": "integer col - the correct colorvalue, fitting to your system.",
    "parameters": "integer r - the value for red, from 0 to 255\n            integer g - the value for green, from 0 to 255\n            integer b - the value for blue, from 0 to 255",
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "Api-Helper-Functions",
    "tags": "colormanagement, native, from, conversion",
    "requiresParsed": {
      "reaper": "5.62",
      "lua": "5.3"
    },
    "parametersParsed": [
      {
        "paramName": "r",
        "type": "integer",
        "description": "the value for red, from 0 to 255"
      },
      {
        "paramName": "g",
        "type": "integer",
        "description": "the value for green, from 0 to 255"
      },
      {
        "paramName": "b",
        "type": "integer",
        "description": "the value for blue, from 0 to 255"
      }
    ],
    "tagsParsed": [
      "colormanagement",
      "native",
      "from",
      "conversion"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.ColorToNative",
        "parameters": [
          {
            "type": "integer",
            "identifier": "r"
          },
          {
            "type": "integer",
            "identifier": "g"
          },
          {
            "type": "integer",
            "identifier": "b"
          }
        ],
        "returnValues": [
          {
            "type": "integer"
          }
        ]
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "CountAutomationItems",
    "title": "CountAutomationItems",
    "functioncall": [
      {
        "#text": "int CountAutomationItems(TrackEnvelope* env)",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "int CountAutomationItems(TrackEnvelope env)",
        "@_prog_lang": "eel"
      },
      {
        "#text": "integer = reaper.CountAutomationItems(TrackEnvelope env)",
        "@_prog_lang": "lua"
      },
      {
        "#text": "Int RPR_CountAutomationItems(TrackEnvelope env)",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.62\n            Lua=5.3",
    "description": {
      "#text": "\n            Returns the number of automation items on this envelope. See [GetSetAutomationItemInfo](#GetSetAutomationItemInfo).\n        ",
      "@_prog_lang": "*",
      "@_markup_type": "markdown",
      "@_markup_version": "1.0.1"
    },
    "retvals": "integer - number of automation items",
    "parameters": "TrackEnvelope env - the envelope-object for the envelope-lane",
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "Automation Management",
    "tags": "envelopemanagement, automation items, count, envelopes",
    "requiresParsed": {
      "reaper": "5.62",
      "lua": "5.3"
    },
    "parametersParsed": [
      {
        "paramName": "env",
        "type": "TrackEnvelope",
        "description": "the envelope-object for the envelope-lane"
      }
    ],
    "tagsParsed": [
      "envelopemanagement",
      "automation items",
      "count",
      "envelopes"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.CountAutomationItems",
        "parameters": [
          {
            "type": "TrackEnvelope",
            "identifier": "env"
          }
        ],
        "returnValues": [
          {
            "type": "integer"
          }
        ]
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "CountEnvelopePoints",
    "title": "CountEnvelopePoints",
    "functioncall": [
      {
        "#text": "int CountEnvelopePoints(TrackEnvelope* envelope)",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "int CountEnvelopePoints(TrackEnvelope envelope)",
        "@_prog_lang": "eel"
      },
      {
        "#text": "integer = reaper.CountEnvelopePoints(TrackEnvelope envelope)",
        "@_prog_lang": "lua"
      },
      {
        "#text": "Int RPR_CountEnvelopePoints(TrackEnvelope envelope)",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.979\n            Lua=5.3",
    "description": {
      "#text": "\n            Returns the number of points in the envelope. See [#CountEnvelopePointsEx](#CountEnvelopePointsEx)\n        ",
      "@_markup_type": "markdown",
      "@_markup_version": "1.0.1"
    },
    "retvals": "integer - the number of envelope-points in the envelopeobject envelope",
    "parameters": "TrackEnvelope envelope - the TrackEnvelope-object, in which to count for the envelope-points",
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "Envelope Management",
    "tags": "envelopemanagement, envelopes, count, points",
    "requiresParsed": {
      "reaper": "5.979",
      "lua": "5.3"
    },
    "parametersParsed": [
      {
        "paramName": "envelope",
        "type": "TrackEnvelope",
        "description": "the TrackEnvelope-object, in which to count for the envelope-points"
      }
    ],
    "tagsParsed": [
      "envelopemanagement",
      "envelopes",
      "count",
      "points"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.CountEnvelopePoints",
        "parameters": [
          {
            "type": "TrackEnvelope",
            "identifier": "envelope"
          }
        ],
        "returnValues": [
          {
            "type": "integer"
          }
        ]
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "CountEnvelopePointsEx",
    "title": "CountEnvelopePointsEx",
    "functioncall": [
      {
        "#text": "int CountEnvelopePointsEx(TrackEnvelope* envelope, int autoitem_idx)",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "int CountEnvelopePointsEx(TrackEnvelope envelope, int autoitem_idx)",
        "@_prog_lang": "eel"
      },
      {
        "#text": "integer = reaper.CountEnvelopePointsEx(TrackEnvelope envelope, integer autoitem_idx)",
        "@_prog_lang": "lua"
      },
      {
        "#text": "Int RPR_CountEnvelopePointsEx(TrackEnvelope envelope, Int autoitem_idx)",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.979\n            Lua=5.3",
    "description": {
      "#text": "\n            Returns the number of points in the envelope.\n            autoitem\\_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\n            For automation items, pass autoitem\\_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\n            even if the automation item is trimmed so that not all points are visible.\n            Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\n            \n            See [GetEnvelopePointEx](#GetEnvelopePointEx), [SetEnvelopePointEx](#SetEnvelopePointEx), [InsertEnvelopePointEx](#InsertEnvelopePointEx), [DeleteEnvelopePointEx](#DeleteEnvelopePointEx).\n        ",
      "@_markup_type": "markdown",
      "@_markup_version": "1.0.1"
    },
    "retvals": "integer - the number of envelope-points in the envelopeobject envelope",
    "parameters": "TrackEnvelope envelope - the TrackEnvelope-object, in which to count for the envelope-points\n            integer autoitem_idx - -1, for the underlying envelope, 0, for the first automation item on the envelope, etc.",
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "Envelope Management",
    "tags": "envelopemanagement, envelopes, count, points, automation items",
    "requiresParsed": {
      "reaper": "5.979",
      "lua": "5.3"
    },
    "parametersParsed": [
      {
        "paramName": "envelope",
        "type": "TrackEnvelope",
        "description": "the TrackEnvelope-object, in which to count for the envelope-points"
      },
      {
        "paramName": "autoitem_idx",
        "type": "integer",
        "description": "-1, for the underlying envelope, 0, for the first automation item on the envelope, etc."
      }
    ],
    "tagsParsed": [
      "envelopemanagement",
      "envelopes",
      "count",
      "points",
      "automation items"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.CountEnvelopePointsEx",
        "parameters": [
          {
            "type": "TrackEnvelope",
            "identifier": "envelope"
          },
          {
            "type": "integer",
            "identifier": "autoitem_idx"
          }
        ],
        "returnValues": [
          {
            "type": "integer"
          }
        ]
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "CountMediaItems",
    "title": "CountMediaItems",
    "functioncall": [
      {
        "#text": "int CountMediaItems(ReaProject* proj)",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "int CountMediaItems(ReaProject proj)",
        "@_prog_lang": "eel"
      },
      {
        "#text": "integer = reaper.CountMediaItems(ReaProject proj)",
        "@_prog_lang": "lua"
      },
      {
        "#text": "Int RPR_CountMediaItems(ReaProject proj)",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.62\n            Lua=5.3",
    "description": {
      "#text": "\n            count the number of items in the project (proj=0 for active project)\n        ",
      "@_prog_lang": "*"
    },
    "retvals": "integer - the number of MediaItems in a project",
    "parameters": {
      "#text": "ReaProject proj - the project, in which to count for the number of items; 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)",
      "@_markup_type": "markdown",
      "@_markup_version": "1.0.1"
    },
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "Mediaitem Management",
    "tags": "mediaitemmanagement, count, mediaitems",
    "requiresParsed": {
      "reaper": "5.62",
      "lua": "5.3"
    },
    "parametersParsed": [
      {
        "paramName": "proj",
        "type": "ReaProject",
        "description": "the project, in which to count for the number of items; 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
      }
    ],
    "tagsParsed": [
      "mediaitemmanagement",
      "count",
      "mediaitems"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.CountMediaItems",
        "parameters": [
          {
            "type": "ReaProject",
            "identifier": "proj"
          }
        ],
        "returnValues": [
          {
            "type": "integer"
          }
        ]
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "CountProjectMarkers",
    "title": "CountProjectMarkers",
    "functioncall": [
      {
        "#text": "int CountProjectMarkers(ReaProject* proj, int* num_markersOut, int* num_regionsOut)",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "int CountProjectMarkers(ReaProject proj, int &amp;amp;num_markers, int &amp;amp;num_regions)",
        "@_prog_lang": "eel"
      },
      {
        "#text": "integer retval, number num_markers, number num_regions = reaper.CountProjectMarkers(ReaProject proj)",
        "@_prog_lang": "lua"
      },
      {
        "#text": "(Int retval, ReaProject proj, Int num_markersOut, Int num_regionsOut) = RPR_CountProjectMarkers(proj, num_markersOut, num_regionsOut)",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.62\n            Lua=5.3",
    "description": {
      "#text": "\n            returns the number of all markers and regions, as well as all markers and all regions in a project.\n            num_markersOut and num_regionsOut may be NULL.\n        ",
      "@_prog_lang": "*"
    },
    "retvals": "integer retval - all markers and regions in the project\n            integer num_markers - the number of markers in the project\n            integer num_regions - the number of regions in the project",
    "parameters": {
      "#text": "ReaProject proj - the project, in which to count the markers; 0 for current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)",
      "@_markup_type": "markdown",
      "@_markup_version": "1.0.1"
    },
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "Marker Management",
    "tags": "markermanagement, count, all, markers, regions",
    "requiresParsed": {
      "reaper": "5.62",
      "lua": "5.3"
    },
    "parametersParsed": [
      {
        "paramName": "proj",
        "type": "ReaProject",
        "description": "the project, in which to count the markers; 0 for current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
      }
    ],
    "tagsParsed": [
      "markermanagement",
      "count",
      "all",
      "markers",
      "regions"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.CountProjectMarkers",
        "parameters": [
          {
            "type": "ReaProject",
            "identifier": "proj"
          }
        ],
        "returnValues": [
          {
            "type": "integer",
            "identifier": "retval"
          },
          {
            "type": "number",
            "identifier": "num_markers"
          },
          {
            "type": "number",
            "identifier": "num_regions"
          }
        ]
      }
    }
  },
  {
    "@_version": "1.0",
    "@_spok_lang": "en",
    "@_prog_lang": "*",
    "slug": "CountSelectedMediaItems",
    "title": "CountSelectedMediaItems",
    "functioncall": [
      {
        "#text": "int CountSelectedMediaItems(ReaProject* proj)",
        "@_prog_lang": "cpp"
      },
      {
        "#text": "int CountSelectedMediaItems(ReaProject proj)",
        "@_prog_lang": "eel"
      },
      {
        "#text": "integer = reaper.CountSelectedMediaItems(ReaProject proj)",
        "@_prog_lang": "lua"
      },
      {
        "#text": "Int RPR_CountSelectedMediaItems(ReaProject proj)",
        "@_prog_lang": "python"
      }
    ],
    "requires": "Reaper=5.62\n            Lua=5.3",
    "description": {
      "#text": "\n            count the number of selected items in the project (proj=0 for active project)\n        ",
      "@_prog_lang": "*"
    },
    "retvals": "integer - the number of selected items in the project",
    "parameters": {
      "#text": "ReaProject proj - the project, in which to count for the selected mediaitems; 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)",
      "@_markup_type": "markdown",
      "@_markup_version": "1.0.1"
    },
    "target_document": "Reaper_Api_Documentation",
    "source_document": "reaper-apidocs.USDocML",
    "chapter_context": "Mediaitem Management",
    "tags": "mediaitemmanagement, count, selected, mediaitem",
    "requiresParsed": {
      "reaper": "5.62",
      "lua": "5.3"
    },
    "parametersParsed": [
      {
        "paramName": "proj",
        "type": "ReaProject",
        "description": "the project, in which to count for the selected mediaitems; 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
      }
    ],
    "tagsParsed": [
      "mediaitemmanagement",
      "count",
      "selected",
      "mediaitem"
    ],
    "functioncallParsed": {
      "lua": {
        "methodName": "reaper.CountSelectedMediaItems",
        "parameters": [
          {
            "type": "ReaProject",
            "identifier": "proj"
          }
        ],
        "returnValues": [
          {
            "type": "integer"
          }
        ]
      }
    }
  }
]